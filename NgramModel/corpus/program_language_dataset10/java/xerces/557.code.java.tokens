package org . apache . xerces . parsers ; import java . io . CharConversionException ; import java . io . IOException ; import org . apache . xerces . dom . DOMMessageFormatter ; import org . apache . xerces . impl . Constants ; import org . apache . xerces . util . EntityResolver2Wrapper ; import org . apache . xerces . util . EntityResolverWrapper ; import org . apache . xerces . util . ErrorHandlerWrapper ; import org . apache . xerces . util . SAXMessageFormatter ; import org . apache . xerces . util . SymbolTable ; import org . apache . xerces . xni . XNIException ; import org . apache . xerces . xni . grammars . XMLGrammarPool ; import org . apache . xerces . xni . parser . XMLConfigurationException ; import org . apache . xerces . xni . parser . XMLEntityResolver ; import org . apache . xerces . xni . parser . XMLErrorHandler ; import org . apache . xerces . xni . parser . XMLInputSource ; import org . apache . xerces . xni . parser . XMLParseException ; import org . apache . xerces . xni . parser . XMLParserConfiguration ; import org . w3c . dom . Node ; import org . xml . sax . EntityResolver ; import org . xml . sax . ErrorHandler ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import org . xml . sax . SAXNotRecognizedException ; import org . xml . sax . SAXNotSupportedException ; import org . xml . sax . SAXParseException ; import org . xml . sax . ext . EntityResolver2 ; import org . xml . sax . helpers . LocatorImpl ; public class DOMParser extends AbstractDOMParser { protected static final String USE_ENTITY_RESOLVER2 = Constants . SAX_FEATURE_PREFIX + Constants . USE_ENTITY_RESOLVER2_FEATURE ; protected static final String SYMBOL_TABLE = Constants . XERCES_PROPERTY_PREFIX + Constants . SYMBOL_TABLE_PROPERTY ; protected static final String XMLGRAMMAR_POOL = Constants . XERCES_PROPERTY_PREFIX + Constants . XMLGRAMMAR_POOL_PROPERTY ; private static final String [ ] RECOGNIZED_PROPERTIES = { SYMBOL_TABLE , XMLGRAMMAR_POOL , } ; protected boolean fUseEntityResolver2 = true ; public DOMParser ( XMLParserConfiguration config ) { super ( config ) ; } public DOMParser ( ) { this ( null , null ) ; } public DOMParser ( SymbolTable symbolTable ) { this ( symbolTable , null ) ; } public DOMParser ( SymbolTable symbolTable , XMLGrammarPool grammarPool ) { super ( ( XMLParserConfiguration ) ObjectFactory . createObject ( "org.apache.xerces.xni.parser.XMLParserConfiguration" , "org.apache.xerces.parsers.XIncludeAwareParserConfiguration" ) ) ; fConfiguration . addRecognizedProperties ( RECOGNIZED_PROPERTIES ) ; if ( symbolTable != null ) { fConfiguration . setProperty ( SYMBOL_TABLE , symbolTable ) ; } if ( grammarPool != null ) { fConfiguration . setProperty ( XMLGRAMMAR_POOL , grammarPool ) ; } } public void parse ( String systemId ) throws SAXException , IOException { XMLInputSource source = new XMLInputSource ( null , systemId , null ) ; try { parse ( source ) ; } catch ( XMLParseException e ) { Exception ex = e . getException ( ) ; if ( ex == null || ex instanceof CharConversionException ) { LocatorImpl locatorImpl = new LocatorImpl ( ) ; locatorImpl . setPublicId ( e . getPublicId ( ) ) ; locatorImpl . setSystemId ( e . getExpandedSystemId ( ) ) ; locatorImpl . setLineNumber ( e . getLineNumber ( ) ) ; locatorImpl . setColumnNumber ( e . getColumnNumber ( ) ) ; throw ( ex == null ) ? new SAXParseException ( e . getMessage ( ) , locatorImpl ) : new SAXParseException ( e . getMessage ( ) , locatorImpl , ex ) ; } if ( ex instanceof SAXException ) { throw ( SAXException ) ex ; } if ( ex instanceof IOException ) { throw ( IOException ) ex ; } throw new SAXException ( ex ) ; } catch ( XNIException e ) { e . printStackTrace ( ) ; Exception ex = e . getException ( ) ; if ( ex == null ) { throw new SAXException ( e . getMessage ( ) ) ; } if ( ex instanceof SAXException ) { throw ( SAXException ) ex ; } if ( ex instanceof IOException ) { throw ( IOException ) ex ; } throw new SAXException ( ex ) ; } } public void parse ( InputSource inputSource ) throws SAXException , IOException { try { XMLInputSource xmlInputSource = new XMLInputSource ( inputSource . getPublicId ( ) , inputSource . getSystemId ( ) , null ) ; xmlInputSource . setByteStream ( inputSource . getByteStream ( ) ) ; xmlInputSource . setCharacterStream ( inputSource . getCharacterStream ( ) ) ; xmlInputSource . setEncoding ( inputSource . getEncoding ( ) ) ; parse ( xmlInputSource ) ; } catch ( XMLParseException e ) { Exception ex = e . getException ( ) ; if ( ex == null || ex instanceof CharConversionException ) { LocatorImpl locatorImpl = new LocatorImpl ( ) ; locatorImpl . setPublicId ( e . getPublicId ( ) ) ; locatorImpl . setSystemId ( e . getExpandedSystemId ( ) ) ; locatorImpl . setLineNumber ( e . getLineNumber ( ) ) ; locatorImpl . setColumnNumber ( e . getColumnNumber ( ) ) ; throw ( ex == null ) ? new SAXParseException ( e . getMessage ( ) , locatorImpl ) : new SAXParseException ( e . getMessage ( ) , locatorImpl , ex ) ; } if ( ex instanceof SAXException ) { throw ( SAXException ) ex ; } if ( ex instanceof IOException ) { throw ( IOException ) ex ; } throw new SAXException ( ex ) ; } catch ( XNIException e ) { Exception ex = e . getException ( ) ; if ( ex == null ) { throw new SAXException ( e . getMessage ( ) ) ; } if ( ex instanceof SAXException ) { throw ( SAXException ) ex ; } if ( ex instanceof IOException ) { throw ( IOException ) ex ; } throw new SAXException ( ex ) ; } } public void setEntityResolver ( EntityResolver resolver ) { try { XMLEntityResolver xer = ( XMLEntityResolver ) fConfiguration . getProperty ( ENTITY_RESOLVER ) ; if ( fUseEntityResolver2 && resolver instanceof EntityResolver2 ) { if ( xer instanceof EntityResolver2Wrapper ) { EntityResolver2Wrapper er2w = ( EntityResolver2Wrapper ) xer ; er2w . setEntityResolver ( ( EntityResolver2 ) resolver ) ; } else { fConfiguration . setProperty ( ENTITY_RESOLVER , new EntityResolver2Wrapper ( ( EntityResolver2 ) resolver ) ) ; } } else { if ( xer instanceof EntityResolverWrapper ) { EntityResolverWrapper erw = ( EntityResolverWrapper ) xer ; erw . setEntityResolver ( resolver ) ; } else { fConfiguration . setProperty ( ENTITY_RESOLVER , new EntityResolverWrapper ( resolver ) ) ; } } } catch ( XMLConfigurationException e ) { } } public EntityResolver getEntityResolver ( ) { EntityResolver entityResolver = null ; try { XMLEntityResolver xmlEntityResolver = ( XMLEntityResolver ) fConfiguration . getProperty ( ENTITY_RESOLVER ) ; if ( xmlEntityResolver != null ) { if ( xmlEntityResolver instanceof EntityResolverWrapper ) { entityResolver = ( ( EntityResolverWrapper ) xmlEntityResolver ) . getEntityResolver ( ) ; } else if ( xmlEntityResolver instanceof EntityResolver2Wrapper ) { entityResolver = ( ( EntityResolver2Wrapper ) xmlEntityResolver ) . getEntityResolver ( ) ; } } } catch ( XMLConfigurationException e ) { } return entityResolver ; } public void setErrorHandler ( ErrorHandler errorHandler ) { try { XMLErrorHandler xeh = ( XMLErrorHandler ) fConfiguration . getProperty ( ERROR_HANDLER ) ; if ( xeh instanceof ErrorHandlerWrapper ) { ErrorHandlerWrapper ehw = ( ErrorHandlerWrapper ) xeh ; ehw . setErrorHandler ( errorHandler ) ; } else { fConfiguration . setProperty ( ERROR_HANDLER , new ErrorHandlerWrapper ( errorHandler ) ) ; } } catch ( XMLConfigurationException e ) { } } public ErrorHandler getErrorHandler ( ) { ErrorHandler errorHandler = null ; try { XMLErrorHandler xmlErrorHandler = ( XMLErrorHandler ) fConfiguration . getProperty ( ERROR_HANDLER ) ; if ( xmlErrorHandler != null && xmlErrorHandler instanceof ErrorHandlerWrapper ) { errorHandler = ( ( ErrorHandlerWrapper ) xmlErrorHandler ) . getErrorHandler ( ) ; } } catch ( XMLConfigurationException e ) { } return errorHandler ; } public void setFeature ( String featureId , boolean state ) throws SAXNotRecognizedException , SAXNotSupportedException { try { if ( featureId . equals ( USE_ENTITY_RESOLVER2 ) ) { if ( state != fUseEntityResolver2 ) { fUseEntityResolver2 = state ; setEntityResolver ( getEntityResolver ( ) ) ; } return ; } fConfiguration . setFeature ( featureId , state ) ; } catch ( XMLConfigurationException e ) { String identifier = e . getIdentifier ( ) ; if ( e . getType ( ) == XMLConfigurationException . NOT_RECOGNIZED ) { throw new SAXNotRecognizedException ( SAXMessageFormatter . formatMessage ( fConfiguration . getLocale ( ) , "feature-not-recognized" , new Object [ ] { identifier } ) ) ; } else { throw new SAXNotSupportedException ( SAXMessageFormatter . formatMessage ( fConfiguration . getLocale ( ) , "feature-not-supported" , new Object [ ] { identifier } ) ) ; } } } public boolean getFeature ( String featureId ) throws SAXNotRecognizedException , SAXNotSupportedException { try { if ( featureId . equals ( USE_ENTITY_RESOLVER2 ) ) { return fUseEntityResolver2 ; } return fConfiguration . getFeature ( featureId ) ; } catch ( XMLConfigurationException e ) { String identifier = e . getIdentifier ( ) ; if ( e . getType ( ) == XMLConfigurationException . NOT_RECOGNIZED ) { throw new SAXNotRecognizedException ( SAXMessageFormatter . formatMessage ( fConfiguration . getLocale ( ) , "feature-not-recognized" , new Object [ ] { identifier } ) ) ; } else { throw new SAXNotSupportedException ( SAXMessageFormatter . formatMessage ( fConfiguration . getLocale ( ) , "feature-not-supported" , new Object [ ] { identifier } ) ) ; } } } public void setProperty ( String propertyId , Object value ) throws SAXNotRecognizedException , SAXNotSupportedException { try { fConfiguration . setProperty ( propertyId , value ) ; } catch ( XMLConfigurationException e ) { String identifier = e . getIdentifier ( ) ; if ( e . getType ( ) == XMLConfigurationException . NOT_RECOGNIZED ) { throw new SAXNotRecognizedException ( SAXMessageFormatter . formatMessage ( fConfiguration . getLocale ( ) , "property-not-recognized" , new Object [ ] { identifier } ) ) ; } else { throw new SAXNotSupportedException ( SAXMessageFormatter . formatMessage ( fConfiguration . getLocale ( ) , "property-not-supported" , new Object [ ] { identifier } ) ) ; } } } public Object getProperty ( String propertyId ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( propertyId . equals ( CURRENT_ELEMENT_NODE ) ) { boolean deferred = false ; try { deferred = getFeature ( DEFER_NODE_EXPANSION ) ; } catch ( XMLConfigurationException e ) { } if ( deferred ) { throw new SAXNotSupportedException ( DOMMessageFormatter . formatMessage ( DOMMessageFormatter . DOM_DOMAIN , "CannotQueryDeferredNode" , null ) ) ; } return ( fCurrentNode != null && fCurrentNode . getNodeType ( ) == Node . ELEMENT_NODE ) ? fCurrentNode : null ; } try { return fConfiguration . getProperty ( propertyId ) ; } catch ( XMLConfigurationException e ) { String identifier = e . getIdentifier ( ) ; if ( e . getType ( ) == XMLConfigurationException . NOT_RECOGNIZED ) { throw new SAXNotRecognizedException ( SAXMessageFormatter . formatMessage ( fConfiguration . getLocale ( ) , "property-not-recognized" , new Object [ ] { identifier } ) ) ; } else { throw new SAXNotSupportedException ( SAXMessageFormatter . formatMessage ( fConfiguration . getLocale ( ) , "property-not-supported" , new Object [ ] { identifier } ) ) ; } } } public XMLParserConfiguration getXMLParserConfiguration ( ) { return fConfiguration ; } }
