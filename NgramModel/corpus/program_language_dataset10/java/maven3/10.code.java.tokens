package org . apache . maven . repository . internal ; import org . sonatype . aether . collection . DependencyGraphTransformer ; import org . sonatype . aether . collection . DependencyManager ; import org . sonatype . aether . collection . DependencySelector ; import org . sonatype . aether . collection . DependencyTraverser ; import org . sonatype . aether . util . DefaultRepositorySystemSession ; import org . sonatype . aether . util . artifact . DefaultArtifactType ; import org . sonatype . aether . util . artifact . DefaultArtifactTypeRegistry ; import org . sonatype . aether . util . graph . manager . ClassicDependencyManager ; import org . sonatype . aether . util . graph . selector . AndDependencySelector ; import org . sonatype . aether . util . graph . selector . ExclusionDependencySelector ; import org . sonatype . aether . util . graph . selector . OptionalDependencySelector ; import org . sonatype . aether . util . graph . selector . ScopeDependencySelector ; import org . sonatype . aether . util . graph . transformer . ChainedDependencyGraphTransformer ; import org . sonatype . aether . util . graph . transformer . ConflictMarker ; import org . sonatype . aether . util . graph . transformer . JavaDependencyContextRefiner ; import org . sonatype . aether . util . graph . transformer . JavaEffectiveScopeCalculator ; import org . sonatype . aether . util . graph . transformer . NearestVersionConflictResolver ; import org . sonatype . aether . util . graph . traverser . FatArtifactTraverser ; import org . sonatype . aether . util . repository . DefaultAuthenticationSelector ; import org . sonatype . aether . util . repository . DefaultMirrorSelector ; import org . sonatype . aether . util . repository . DefaultProxySelector ; public class MavenRepositorySystemSession extends DefaultRepositorySystemSession { public MavenRepositorySystemSession ( ) { setMirrorSelector ( new DefaultMirrorSelector ( ) ) ; setAuthenticationSelector ( new DefaultAuthenticationSelector ( ) ) ; setProxySelector ( new DefaultProxySelector ( ) ) ; DependencyTraverser depTraverser = new FatArtifactTraverser ( ) ; setDependencyTraverser ( depTraverser ) ; DependencyManager depManager = new ClassicDependencyManager ( ) ; setDependencyManager ( depManager ) ; DependencySelector depFilter = new AndDependencySelector ( new ScopeDependencySelector ( "test" , "provided" ) , new OptionalDependencySelector ( ) , new ExclusionDependencySelector ( ) ) ; setDependencySelector ( depFilter ) ; DependencyGraphTransformer transformer = new ChainedDependencyGraphTransformer ( new ConflictMarker ( ) , new JavaEffectiveScopeCalculator ( ) , new NearestVersionConflictResolver ( ) , new JavaDependencyContextRefiner ( ) ) ; setDependencyGraphTransformer ( transformer ) ; DefaultArtifactTypeRegistry stereotypes = new DefaultArtifactTypeRegistry ( ) ; stereotypes . add ( new DefaultArtifactType ( "pom" ) ) ; stereotypes . add ( new DefaultArtifactType ( "maven-plugin" , "jar" , "" , "java" ) ) ; stereotypes . add ( new DefaultArtifactType ( "jar" , "jar" , "" , "java" ) ) ; stereotypes . add ( new DefaultArtifactType ( "ejb" , "jar" , "" , "java" ) ) ; stereotypes . add ( new DefaultArtifactType ( "ejb-client" , "jar" , "client" , "java" ) ) ; stereotypes . add ( new DefaultArtifactType ( "test-jar" , "jar" , "tests" , "java" ) ) ; stereotypes . add ( new DefaultArtifactType ( "javadoc" , "jar" , "javadoc" , "java" ) ) ; stereotypes . add ( new DefaultArtifactType ( "java-source" , "jar" , "sources" , "java" , false , false ) ) ; stereotypes . add ( new DefaultArtifactType ( "war" , "war" , "" , "java" , false , true ) ) ; stereotypes . add ( new DefaultArtifactType ( "ear" , "ear" , "" , "java" , false , true ) ) ; stereotypes . add ( new DefaultArtifactType ( "rar" , "rar" , "" , "java" , false , true ) ) ; stereotypes . add ( new DefaultArtifactType ( "par" , "par" , "" , "java" , false , true ) ) ; setArtifactTypeRegistry ( stereotypes ) ; setIgnoreInvalidArtifactDescriptor ( true ) ; setIgnoreMissingArtifactDescriptor ( true ) ; setSystemProps ( System . getProperties ( ) ) ; setConfigProps ( System . getProperties ( ) ) ; } }
