package org . apache . batik . bridge ; import java . awt . geom . Rectangle2D ; import java . util . Map ; import java . util . StringTokenizer ; import org . apache . batik . ext . awt . image . PadMode ; import org . apache . batik . ext . awt . image . renderable . Filter ; import org . apache . batik . ext . awt . image . renderable . GaussianBlurRable8Bit ; import org . apache . batik . ext . awt . image . renderable . PadRable ; import org . apache . batik . ext . awt . image . renderable . PadRable8Bit ; import org . apache . batik . gvt . GraphicsNode ; import org . w3c . dom . Element ; public class SVGFeGaussianBlurElementBridge extends AbstractSVGFilterPrimitiveElementBridge { public SVGFeGaussianBlurElementBridge ( ) { } public String getLocalName ( ) { return SVG_FE_GAUSSIAN_BLUR_TAG ; } public Filter createFilter ( BridgeContext ctx , Element filterElement , Element filteredElement , GraphicsNode filteredNode , Filter inputFilter , Rectangle2D filterRegion , Map filterMap ) { float [ ] stdDeviationXY = convertStdDeviation ( filterElement , ctx ) ; if ( stdDeviationXY [ 0 ] < 0 || stdDeviationXY [ 1 ] < 0 ) { throw new BridgeException ( ctx , filterElement , ERR_ATTRIBUTE_VALUE_MALFORMED , new Object [ ] { SVG_STD_DEVIATION_ATTRIBUTE , String . valueOf ( stdDeviationXY [ 0 ] ) + stdDeviationXY [ 1 ] } ) ; } Filter in = getIn ( filterElement , filteredElement , filteredNode , inputFilter , filterMap , ctx ) ; if ( in == null ) { return null ; } Rectangle2D defaultRegion = in . getBounds2D ( ) ; Rectangle2D primitiveRegion = SVGUtilities . convertFilterPrimitiveRegion ( filterElement , filteredElement , filteredNode , defaultRegion , filterRegion , ctx ) ; PadRable pad = new PadRable8Bit ( in , primitiveRegion , PadMode . ZERO_PAD ) ; Filter blur = new GaussianBlurRable8Bit ( pad , stdDeviationXY [ 0 ] , stdDeviationXY [ 1 ] ) ; handleColorInterpolationFilters ( blur , filterElement ) ; PadRable filter = new PadRable8Bit ( blur , primitiveRegion , PadMode . ZERO_PAD ) ; updateFilterMap ( filterElement , filter , filterMap ) ; return filter ; } protected static float [ ] convertStdDeviation ( Element filterElement , BridgeContext ctx ) { String s = filterElement . getAttributeNS ( null , SVG_STD_DEVIATION_ATTRIBUTE ) ; if ( s . length ( ) == 0 ) { return new float [ ] { 0 , 0 } ; } float [ ] stdDevs = new float [ 2 ] ; StringTokenizer tokens = new StringTokenizer ( s , " ," ) ; try { stdDevs [ 0 ] = SVGUtilities . convertSVGNumber ( tokens . nextToken ( ) ) ; if ( tokens . hasMoreTokens ( ) ) { stdDevs [ 1 ] = SVGUtilities . convertSVGNumber ( tokens . nextToken ( ) ) ; } else { stdDevs [ 1 ] = stdDevs [ 0 ] ; } } catch ( NumberFormatException nfEx ) { throw new BridgeException ( ctx , filterElement , nfEx , ERR_ATTRIBUTE_VALUE_MALFORMED , new Object [ ] { SVG_STD_DEVIATION_ATTRIBUTE , s , nfEx } ) ; } if ( tokens . hasMoreTokens ( ) ) { throw new BridgeException ( ctx , filterElement , ERR_ATTRIBUTE_VALUE_MALFORMED , new Object [ ] { SVG_STD_DEVIATION_ATTRIBUTE , s } ) ; } return stdDevs ; } }
