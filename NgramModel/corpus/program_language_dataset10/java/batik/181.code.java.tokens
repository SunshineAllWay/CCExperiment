package org . apache . batik . bridge ; import java . awt . geom . Ellipse2D ; import java . awt . geom . Rectangle2D ; import org . apache . batik . dom . svg . AbstractSVGAnimatedLength ; import org . apache . batik . dom . svg . AnimatedLiveAttributeValue ; import org . apache . batik . dom . svg . LiveAttributeException ; import org . apache . batik . dom . svg . SVGOMEllipseElement ; import org . apache . batik . gvt . ShapeNode ; import org . apache . batik . gvt . ShapePainter ; import org . w3c . dom . Element ; public class SVGEllipseElementBridge extends SVGShapeElementBridge { public SVGEllipseElementBridge ( ) { } public String getLocalName ( ) { return SVG_ELLIPSE_TAG ; } public Bridge getInstance ( ) { return new SVGEllipseElementBridge ( ) ; } protected void buildShape ( BridgeContext ctx , Element e , ShapeNode shapeNode ) { try { SVGOMEllipseElement ee = ( SVGOMEllipseElement ) e ; AbstractSVGAnimatedLength _cx = ( AbstractSVGAnimatedLength ) ee . getCx ( ) ; float cx = _cx . getCheckedValue ( ) ; AbstractSVGAnimatedLength _cy = ( AbstractSVGAnimatedLength ) ee . getCy ( ) ; float cy = _cy . getCheckedValue ( ) ; AbstractSVGAnimatedLength _rx = ( AbstractSVGAnimatedLength ) ee . getRx ( ) ; float rx = _rx . getCheckedValue ( ) ; AbstractSVGAnimatedLength _ry = ( AbstractSVGAnimatedLength ) ee . getRy ( ) ; float ry = _ry . getCheckedValue ( ) ; shapeNode . setShape ( new Ellipse2D . Float ( cx - rx , cy - ry , rx * 2 , ry * 2 ) ) ; } catch ( LiveAttributeException ex ) { throw new BridgeException ( ctx , ex ) ; } } public void handleAnimatedAttributeChanged ( AnimatedLiveAttributeValue alav ) { if ( alav . getNamespaceURI ( ) == null ) { String ln = alav . getLocalName ( ) ; if ( ln . equals ( SVG_CX_ATTRIBUTE ) || ln . equals ( SVG_CY_ATTRIBUTE ) || ln . equals ( SVG_RX_ATTRIBUTE ) || ln . equals ( SVG_RY_ATTRIBUTE ) ) { buildShape ( ctx , e , ( ShapeNode ) node ) ; handleGeometryChanged ( ) ; return ; } } super . handleAnimatedAttributeChanged ( alav ) ; } protected ShapePainter createShapePainter ( BridgeContext ctx , Element e , ShapeNode shapeNode ) { Rectangle2D r2d = shapeNode . getShape ( ) . getBounds2D ( ) ; if ( ( r2d . getWidth ( ) == 0 ) || ( r2d . getHeight ( ) == 0 ) ) return null ; return super . createShapePainter ( ctx , e , shapeNode ) ; } }
