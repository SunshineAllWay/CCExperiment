package org . apache . batik . dom . svg ; import org . apache . batik . dom . AbstractDocument ; import org . apache . batik . dom . util . XLinkSupport ; import org . apache . batik . dom . util . XMLSupport ; import org . apache . batik . util . DoublyIndexedTable ; import org . apache . batik . util . SVGTypes ; import org . w3c . dom . Node ; import org . w3c . dom . svg . SVGAnimatedLength ; import org . w3c . dom . svg . SVGElementInstance ; import org . w3c . dom . svg . SVGUseElement ; public class SVGOMUseElement extends SVGURIReferenceGraphicsElement implements SVGUseElement { protected static DoublyIndexedTable xmlTraitInformation ; static { DoublyIndexedTable t = new DoublyIndexedTable ( SVGURIReferenceGraphicsElement . xmlTraitInformation ) ; t . put ( null , SVG_X_ATTRIBUTE , new TraitInformation ( true , SVGTypes . TYPE_LENGTH , PERCENTAGE_VIEWPORT_WIDTH ) ) ; t . put ( null , SVG_Y_ATTRIBUTE , new TraitInformation ( true , SVGTypes . TYPE_LENGTH , PERCENTAGE_VIEWPORT_HEIGHT ) ) ; t . put ( null , SVG_WIDTH_ATTRIBUTE , new TraitInformation ( true , SVGTypes . TYPE_LENGTH , PERCENTAGE_VIEWPORT_WIDTH ) ) ; t . put ( null , SVG_HEIGHT_ATTRIBUTE , new TraitInformation ( true , SVGTypes . TYPE_LENGTH , PERCENTAGE_VIEWPORT_HEIGHT ) ) ; xmlTraitInformation = t ; } protected static final AttributeInitializer attributeInitializer ; static { attributeInitializer = new AttributeInitializer ( 4 ) ; attributeInitializer . addAttribute ( XMLSupport . XMLNS_NAMESPACE_URI , null , "xmlns:xlink" , XLinkSupport . XLINK_NAMESPACE_URI ) ; attributeInitializer . addAttribute ( XLinkSupport . XLINK_NAMESPACE_URI , "xlink" , "type" , "simple" ) ; attributeInitializer . addAttribute ( XLinkSupport . XLINK_NAMESPACE_URI , "xlink" , "show" , "embed" ) ; attributeInitializer . addAttribute ( XLinkSupport . XLINK_NAMESPACE_URI , "xlink" , "actuate" , "onLoad" ) ; } protected SVGOMAnimatedLength x ; protected SVGOMAnimatedLength y ; protected SVGOMAnimatedLength width ; protected SVGOMAnimatedLength height ; protected SVGOMUseShadowRoot shadowTree ; protected SVGOMUseElement ( ) { } public SVGOMUseElement ( String prefix , AbstractDocument owner ) { super ( prefix , owner ) ; initializeLiveAttributes ( ) ; } protected void initializeAllLiveAttributes ( ) { super . initializeAllLiveAttributes ( ) ; initializeLiveAttributes ( ) ; } private void initializeLiveAttributes ( ) { x = createLiveAnimatedLength ( null , SVG_X_ATTRIBUTE , SVG_USE_X_DEFAULT_VALUE , SVGOMAnimatedLength . HORIZONTAL_LENGTH , false ) ; y = createLiveAnimatedLength ( null , SVG_Y_ATTRIBUTE , SVG_USE_Y_DEFAULT_VALUE , SVGOMAnimatedLength . VERTICAL_LENGTH , false ) ; width = createLiveAnimatedLength ( null , SVG_WIDTH_ATTRIBUTE , null , SVGOMAnimatedLength . HORIZONTAL_LENGTH , true ) ; height = createLiveAnimatedLength ( null , SVG_HEIGHT_ATTRIBUTE , null , SVGOMAnimatedLength . VERTICAL_LENGTH , true ) ; } public String getLocalName ( ) { return SVG_USE_TAG ; } public SVGAnimatedLength getX ( ) { return x ; } public SVGAnimatedLength getY ( ) { return y ; } public SVGAnimatedLength getWidth ( ) { return width ; } public SVGAnimatedLength getHeight ( ) { return height ; } public SVGElementInstance getInstanceRoot ( ) { throw new UnsupportedOperationException ( "SVGUseElement.getInstanceRoot is not implemented" ) ; } public SVGElementInstance getAnimatedInstanceRoot ( ) { throw new UnsupportedOperationException ( "SVGUseElement.getAnimatedInstanceRoot is not implemented" ) ; } public Node getCSSFirstChild ( ) { if ( shadowTree != null ) { return shadowTree . getFirstChild ( ) ; } return null ; } public Node getCSSLastChild ( ) { return getCSSFirstChild ( ) ; } public boolean isHiddenFromSelectors ( ) { return true ; } public void setUseShadowTree ( SVGOMUseShadowRoot r ) { shadowTree = r ; } protected AttributeInitializer getAttributeInitializer ( ) { return attributeInitializer ; } protected Node newNode ( ) { return new SVGOMUseElement ( ) ; } protected DoublyIndexedTable getTraitInformationTable ( ) { return xmlTraitInformation ; } }
