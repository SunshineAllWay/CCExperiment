package org . apache . batik . css . engine . value ; import org . apache . batik . css . engine . CSSEngine ; import org . w3c . css . sac . LexicalUnit ; import org . w3c . dom . DOMException ; import org . w3c . dom . css . CSSPrimitiveValue ; public abstract class IdentifierManager extends AbstractValueManager { public Value createValue ( LexicalUnit lu , CSSEngine engine ) throws DOMException { switch ( lu . getLexicalUnitType ( ) ) { case LexicalUnit . SAC_INHERIT : return ValueConstants . INHERIT_VALUE ; case LexicalUnit . SAC_IDENT : String s = lu . getStringValue ( ) . toLowerCase ( ) . intern ( ) ; Object v = getIdentifiers ( ) . get ( s ) ; if ( v == null ) { throw createInvalidIdentifierDOMException ( lu . getStringValue ( ) ) ; } return ( Value ) v ; default : throw createInvalidLexicalUnitDOMException ( lu . getLexicalUnitType ( ) ) ; } } public Value createStringValue ( short type , String value , CSSEngine engine ) throws DOMException { if ( type != CSSPrimitiveValue . CSS_IDENT ) { throw createInvalidStringTypeDOMException ( type ) ; } Object v = getIdentifiers ( ) . get ( value . toLowerCase ( ) . intern ( ) ) ; if ( v == null ) { throw createInvalidIdentifierDOMException ( value ) ; } return ( Value ) v ; } public abstract StringMap getIdentifiers ( ) ; }
