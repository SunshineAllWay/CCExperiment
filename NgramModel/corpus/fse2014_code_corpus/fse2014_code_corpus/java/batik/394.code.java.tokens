package org . apache . batik . css . engine . value . svg ; import org . apache . batik . css . engine . CSSEngine ; import org . apache . batik . css . engine . CSSStylableElement ; import org . apache . batik . css . engine . StyleMap ; import org . apache . batik . css . engine . value . ListValue ; import org . apache . batik . css . engine . value . URIValue ; import org . apache . batik . css . engine . value . Value ; import org . apache . batik . css . engine . value . ValueManager ; import org . apache . batik . util . CSSConstants ; import org . apache . batik . util . SVGTypes ; import org . w3c . css . sac . LexicalUnit ; import org . w3c . dom . css . CSSPrimitiveValue ; import org . w3c . dom . css . CSSValue ; import org . w3c . dom . DOMException ; public class SVGPaintManager extends SVGColorManager { public SVGPaintManager ( String prop ) { super ( prop ) ; } public SVGPaintManager ( String prop , Value v ) { super ( prop , v ) ; } public boolean isInheritedProperty ( ) { return true ; } public boolean isAnimatableProperty ( ) { return true ; } public boolean isAdditiveProperty ( ) { return true ; } public int getPropertyType ( ) { return SVGTypes . TYPE_PAINT ; } public Value createValue ( LexicalUnit lu , CSSEngine engine ) throws DOMException { switch ( lu . getLexicalUnitType ( ) ) { case LexicalUnit . SAC_IDENT : if ( lu . getStringValue ( ) . equalsIgnoreCase ( CSSConstants . CSS_NONE_VALUE ) ) { return SVGValueConstants . NONE_VALUE ; } default : return super . createValue ( lu , engine ) ; case LexicalUnit . SAC_URI : } String value = lu . getStringValue ( ) ; String uri = resolveURI ( engine . getCSSBaseURI ( ) , value ) ; lu = lu . getNextLexicalUnit ( ) ; if ( lu == null ) { return new URIValue ( value , uri ) ; } ListValue result = new ListValue ( ' ' ) ; result . append ( new URIValue ( value , uri ) ) ; if ( lu . getLexicalUnitType ( ) == LexicalUnit . SAC_IDENT ) { if ( lu . getStringValue ( ) . equalsIgnoreCase ( CSSConstants . CSS_NONE_VALUE ) ) { result . append ( SVGValueConstants . NONE_VALUE ) ; return result ; } } Value v = super . createValue ( lu , engine ) ; if ( v . getCssValueType ( ) == CSSValue . CSS_CUSTOM ) { ListValue lv = ( ListValue ) v ; for ( int i = 0 ; i < lv . getLength ( ) ; i ++ ) { result . append ( lv . item ( i ) ) ; } } else { result . append ( v ) ; } return result ; } public Value computeValue ( CSSStylableElement elt , String pseudo , CSSEngine engine , int idx , StyleMap sm , Value value ) { if ( value == SVGValueConstants . NONE_VALUE ) { return value ; } if ( value . getCssValueType ( ) == CSSValue . CSS_VALUE_LIST ) { ListValue lv = ( ListValue ) value ; Value v = lv . item ( 0 ) ; if ( v . getPrimitiveType ( ) == CSSPrimitiveValue . CSS_URI ) { v = lv . item ( 1 ) ; if ( v == SVGValueConstants . NONE_VALUE ) { return value ; } Value t = super . computeValue ( elt , pseudo , engine , idx , sm , v ) ; if ( t != v ) { ListValue result = new ListValue ( ' ' ) ; result . append ( lv . item ( 0 ) ) ; result . append ( t ) ; if ( lv . getLength ( ) == 3 ) { result . append ( lv . item ( 1 ) ) ; } return result ; } return value ; } } return super . computeValue ( elt , pseudo , engine , idx , sm , value ) ; } }
