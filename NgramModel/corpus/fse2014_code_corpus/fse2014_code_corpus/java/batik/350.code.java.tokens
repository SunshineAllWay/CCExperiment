package org . apache . batik . css . engine . value . css2 ; import org . apache . batik . css . engine . CSSEngine ; import org . apache . batik . css . engine . value . AbstractValueManager ; import org . apache . batik . css . engine . value . FloatValue ; import org . apache . batik . css . engine . value . Value ; import org . apache . batik . css . engine . value . ValueConstants ; import org . apache . batik . css . engine . value . ValueManager ; import org . apache . batik . util . CSSConstants ; import org . apache . batik . util . SVGTypes ; import org . w3c . css . sac . LexicalUnit ; import org . w3c . dom . DOMException ; import org . w3c . dom . css . CSSPrimitiveValue ; public class FontSizeAdjustManager extends AbstractValueManager { public boolean isInheritedProperty ( ) { return true ; } public boolean isAnimatableProperty ( ) { return true ; } public boolean isAdditiveProperty ( ) { return false ; } public int getPropertyType ( ) { return SVGTypes . TYPE_FONT_SIZE_ADJUST_VALUE ; } public String getPropertyName ( ) { return CSSConstants . CSS_FONT_SIZE_ADJUST_PROPERTY ; } public Value getDefaultValue ( ) { return ValueConstants . NONE_VALUE ; } public Value createValue ( LexicalUnit lu , CSSEngine engine ) throws DOMException { switch ( lu . getLexicalUnitType ( ) ) { case LexicalUnit . SAC_INHERIT : return ValueConstants . INHERIT_VALUE ; case LexicalUnit . SAC_INTEGER : return new FloatValue ( CSSPrimitiveValue . CSS_NUMBER , lu . getIntegerValue ( ) ) ; case LexicalUnit . SAC_REAL : return new FloatValue ( CSSPrimitiveValue . CSS_NUMBER , lu . getFloatValue ( ) ) ; case LexicalUnit . SAC_IDENT : if ( lu . getStringValue ( ) . equalsIgnoreCase ( CSSConstants . CSS_NONE_VALUE ) ) { return ValueConstants . NONE_VALUE ; } throw createInvalidIdentifierDOMException ( lu . getStringValue ( ) ) ; } throw createInvalidLexicalUnitDOMException ( lu . getLexicalUnitType ( ) ) ; } public Value createStringValue ( short type , String value , CSSEngine engine ) throws DOMException { if ( type != CSSPrimitiveValue . CSS_IDENT ) { throw createInvalidStringTypeDOMException ( type ) ; } if ( value . equalsIgnoreCase ( CSSConstants . CSS_NONE_VALUE ) ) { return ValueConstants . NONE_VALUE ; } throw createInvalidIdentifierDOMException ( value ) ; } public Value createFloatValue ( short type , float floatValue ) throws DOMException { if ( type == CSSPrimitiveValue . CSS_NUMBER ) { return new FloatValue ( type , floatValue ) ; } throw createInvalidFloatTypeDOMException ( type ) ; } }
