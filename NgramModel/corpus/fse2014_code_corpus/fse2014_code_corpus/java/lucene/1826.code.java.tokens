package org . apache . lucene ; import java . io . IOException ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . analysis . standard . StandardAnalyzer ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . index . IndexWriter ; import org . apache . lucene . index . IndexWriterConfig ; import org . apache . lucene . queryParser . ParseException ; import org . apache . lucene . queryParser . QueryParser ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . ScoreDoc ; import org . apache . lucene . store . Directory ; import org . apache . lucene . store . RAMDirectory ; import org . apache . lucene . util . LuceneTestCase ; public class TestDemo extends LuceneTestCase { public void testDemo ( ) throws IOException , ParseException { Analyzer analyzer = new StandardAnalyzer ( TEST_VERSION_CURRENT ) ; Directory directory = new RAMDirectory ( ) ; IndexWriter iwriter = new IndexWriter ( directory , new IndexWriterConfig ( TEST_VERSION_CURRENT , analyzer ) . setMaxFieldLength ( 25000 ) ) ; Document doc = new Document ( ) ; String text = "This is the text to be indexed." ; doc . add ( new Field ( "fieldname" , text , Field . Store . YES , Field . Index . ANALYZED ) ) ; iwriter . addDocument ( doc ) ; iwriter . close ( ) ; IndexSearcher isearcher = new IndexSearcher ( directory , true ) ; QueryParser parser = new QueryParser ( TEST_VERSION_CURRENT , "fieldname" , analyzer ) ; Query query = parser . parse ( "text" ) ; ScoreDoc [ ] hits = isearcher . search ( query , null , 1000 ) . scoreDocs ; assertEquals ( 1 , hits . length ) ; for ( int i = 0 ; i < hits . length ; i ++ ) { Document hitDoc = isearcher . doc ( hits [ i ] . doc ) ; assertEquals ( "This is the text to be indexed." , hitDoc . get ( "fieldname" ) ) ; } isearcher . close ( ) ; directory . close ( ) ; } }
