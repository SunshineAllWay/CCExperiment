package org . apache . lucene . util ; import java . util . ArrayList ; import java . util . List ; import org . apache . lucene . index . IndexReader ; public class ReaderUtil { public static void gatherSubReaders ( List < IndexReader > allSubReaders , IndexReader reader ) { IndexReader [ ] subReaders = reader . getSequentialSubReaders ( ) ; if ( subReaders == null ) { allSubReaders . add ( reader ) ; } else { for ( int i = 0 ; i < subReaders . length ; i ++ ) { gatherSubReaders ( allSubReaders , subReaders [ i ] ) ; } } } public static IndexReader subReader ( int doc , IndexReader reader ) { List < IndexReader > subReadersList = new ArrayList < IndexReader > ( ) ; ReaderUtil . gatherSubReaders ( subReadersList , reader ) ; IndexReader [ ] subReaders = subReadersList . toArray ( new IndexReader [ subReadersList . size ( ) ] ) ; int [ ] docStarts = new int [ subReaders . length ] ; int maxDoc = 0 ; for ( int i = 0 ; i < subReaders . length ; i ++ ) { docStarts [ i ] = maxDoc ; maxDoc += subReaders [ i ] . maxDoc ( ) ; } return subReaders [ ReaderUtil . subIndex ( doc , docStarts ) ] ; } public static IndexReader subReader ( IndexReader reader , int subIndex ) { List < IndexReader > subReadersList = new ArrayList < IndexReader > ( ) ; ReaderUtil . gatherSubReaders ( subReadersList , reader ) ; IndexReader [ ] subReaders = subReadersList . toArray ( new IndexReader [ subReadersList . size ( ) ] ) ; return subReaders [ subIndex ] ; } public static int subIndex ( int n , int [ ] docStarts ) { int size = docStarts . length ; int lo = 0 ; int hi = size - 1 ; while ( hi >= lo ) { int mid = ( lo + hi ) > > > 1 ; int midValue = docStarts [ mid ] ; if ( n < midValue ) hi = mid - 1 ; else if ( n > midValue ) lo = mid + 1 ; else { while ( mid + 1 < size && docStarts [ mid + 1 ] == midValue ) { mid ++ ; } return mid ; } } return hi ; } }
