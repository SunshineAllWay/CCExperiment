from cms . apphook_pool import apphook_pool from cms . appresolver import get_app_urls from cms . utils import get_template_from_request , get_language_from_request from cms . utils . i18n import get_fallback_languages from cms . utils . page_resolver import get_page_from_request from django . conf import settings from django . conf . urls . defaults import patterns from django . core . urlresolvers import resolve , Resolver404 from django . http import Http404 , HttpResponseRedirect from django . shortcuts import render_to_response from django . template . context import RequestContext from django . utils . http import urlquote def _handle_no_page ( request , slug ) : if not slug and settings . DEBUG : return render_to_response ( "cms/new.html" , RequestContext ( request ) ) raise Http404 ( 'CMS: Page not found for "%s"' % slug ) def details ( request , slug ) : context = RequestContext ( request ) page = get_page_from_request ( request , use_path = slug ) if not page : return _handle_no_page ( request , slug ) current_language = get_language_from_request ( request ) available_languages = page . get_languages ( ) if ( current_language not in available_languages ) : if settings . CMS_LANGUAGE_FALLBACK : for alt_lang in get_fallback_languages ( current_language ) : if alt_lang in available_languages : alt_url = page . get_absolute_url ( language = alt_lang , fallback = True ) path = '/%s%s' % ( alt_lang , alt_url ) return HttpResponseRedirect ( path ) _handle_no_page ( request , slug ) if apphook_pool . get_apphooks ( ) : app_urls = page . get_application_urls ( current_language , False ) if app_urls : app = apphook_pool . get_apphook ( app_urls ) pattern_list = [ ] for urlpatterns in get_app_urls ( app . urls ) : pattern_list += urlpatterns urlpatterns = patterns ( '' , * pattern_list ) try : view , args , kwargs = resolve ( '/' , tuple ( urlpatterns ) ) return view ( request , * args , ** kwargs ) except Resolver404 : pass redirect_url = page . get_redirect ( language = current_language ) if redirect_url : if ( settings . i18n_installed and redirect_url [ 0 ] == "/" and not redirect_url . startswith ( '/%s/' % current_language ) ) : redirect_url = "/%s/%s" % ( current_language , redirect_url . lstrip ( "/" ) ) own_urls = [ % ( 's' if request . is_secure ( ) else '' , request . get_host ( ) , request . path ) , % ( current_language , request . path ) , request . path , ] if redirect_url not in own_urls : return HttpResponseRedirect ( redirect_url ) if page . login_required and not request . user . is_authenticated ( ) : if settings . i18n_installed : path = urlquote ( "/%s%s" % ( request . LANGUAGE_CODE , request . get_full_path ( ) ) ) else : path = urlquote ( request . get_full_path ( ) ) tup = settings . LOGIN_URL , "next" , path return HttpResponseRedirect ( '%s?%s=%s' % tup ) template_name = get_template_from_request ( request , page , no_current_page = True ) context [ 'lang' ] = current_language context [ 'current_page' ] = page context [ 'has_change_permissions' ] = page . has_change_permission ( request ) context [ 'has_view_permissions' ] = page . has_view_permission ( request ) if not context [ 'has_view_permissions' ] : return _handle_no_page ( request , slug ) return render_to_response ( template_name , context )
