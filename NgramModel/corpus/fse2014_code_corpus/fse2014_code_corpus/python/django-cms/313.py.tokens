import datetime from django . utils . translation import ugettext as _ from django . conf import settings from cms . models import Page , PageModeratorState , PageModerator , CMSPlugin , Title I_APPROVE = 100 I_APPROVE_DELETE = 200 def page_changed ( page , old_page = None , force_moderation_action = None ) : from cms . utils . permissions import get_current_user user = get_current_user ( ) force_moderation_action = force_moderation_action or getattr ( page , 'force_moderation_action' , None ) if force_moderation_action : PageModeratorState ( user = user , page = page , action = force_moderation_action ) . save ( ) return if not old_page : PageModeratorState ( user = user , page = page , action = PageModeratorState . ACTION_ADD ) . save ( ) if ( old_page is None and page . published ) or ( old_page and not old_page . published == page . published ) : action = page . published and PageModeratorState . ACTION_PUBLISH or PageModeratorState . ACTION_UNPUBLISH PageModeratorState ( user = user , page = page , action = action ) . save ( ) if ( ( old_page and not old_page . moderator_state == page . moderator_state ) or not old_page ) and page . requires_approvement ( ) : mail_approvement_request ( page , user ) def update_moderation_message ( page , message ) : UPDATE_TOLERANCE = 30 from cms . utils . permissions import get_current_user user = get_current_user ( ) created = datetime . datetime . now ( ) - datetime . timedelta ( seconds = UPDATE_TOLERANCE ) try : state = page . pagemoderatorstate_set . filter ( user = user , created__gt = created ) . order_by ( '-created' ) [ 0 ] assert not state . message except ( IndexError , AssertionError ) : state = PageModeratorState ( user = user , page = page , action = PageModeratorState . ACTION_CHANGED ) state . message = message state . save ( ) def page_moderator_state ( request , page ) : state , label = page . moderator_state , "" under_moderation = page . get_moderator_queryset ( ) if settings . CMS_MODERATOR : if state == Page . MODERATOR_APPROVED_WAITING_FOR_PARENTS : label = _ ( 'parent first' ) elif page . requires_approvement ( ) and page . has_moderate_permission ( request ) and under_moderation . filter ( user = request . user ) . count ( ) and not page . pagemoderatorstate_set . filter ( user = request . user , action = PageModeratorState . ACTION_APPROVE ) . count ( ) : is_delete = state == Page . MODERATOR_NEED_DELETE_APPROVEMENT state = is_delete and I_APPROVE_DELETE or I_APPROVE label = is_delete and _ ( 'delete' ) or _ ( 'approve' ) elif not page . is_approved ( ) : state = Page . MODERATOR_NEED_APPROVEMENT if not page . is_approved ( ) and not label : if under_moderation . count ( ) : label = dict ( page . moderator_state_choices ) [ state ] return dict ( state = state , label = label ) def moderator_should_approve ( request , page ) : return page_moderator_state ( request , page ) [ 'state' ] >= I_APPROVE def requires_moderation ( page ) : return bool ( page . get_moderator_queryset ( ) . count ( ) ) def will_require_moderation ( target_id , position ) : if not settings . CMS_MODERATOR : return False target = Page . objects . get ( pk = target_id ) if position == 'first-child' : return requires_moderation ( target ) elif position in ( 'left' , 'right' ) : if target . parent : return requires_moderation ( target . parent ) return False def get_test_moderation_level ( page , user = None , include_user = True ) : qs = page . get_moderator_queryset ( ) if not settings . CMS_MODERATOR or ( user and user . is_superuser ) : if include_user and qs . filter ( user__id = user . id , moderate_page = True ) . count ( ) : return 0 , True return 0 , False if qs . filter ( user__is_superuser = True ) . count ( ) : return 0 , True if user : if qs . filter ( user__id = user . id , user__globalpagepermission__gt = 0 ) . count ( ) : return 0 , False try : moderator = qs . filter ( user__id = user . id ) . select_related ( ) [ 0 ] return moderator . page . level , False except IndexError : pass else : if qs . filter ( user__globalpagepermission__gt = 0 ) . count ( ) : return 0 , True try : moderator = qs . select_related ( ) [ 0 ] except IndexError : return PageModerator . MAX_MODERATION_LEVEL , False return moderator . page . level , True def approve_page ( request , page ) : moderation_level , moderation_required = get_test_moderation_level ( page , request . user , False ) if not moderator_should_approve ( request , page ) : if not page . publisher_public or page . get_absolute_url ( ) != page . publisher_public . get_absolute_url ( ) : page . publish ( ) else : return if not moderation_required : if page . pagemoderatorstate_set . get_delete_actions ( ) . count ( ) : page . delete_with_public ( ) else : page . publish ( ) else : PageModeratorState ( user = request . user , page = page , action = PageModeratorState . ACTION_APPROVE ) . save ( ) page . save ( change_state = False ) def get_model_queryset ( model , request = None ) : if not settings . CMS_MODERATOR : return model . objects . drafts ( ) if request : preview_draft = ( 'preview' in request . GET and 'draft' in request . GET ) edit_mode = ( 'edit' in request . GET or request . session . get ( 'cms_edit' , False ) ) if preview_draft or edit_mode : return model . objects . drafts ( ) return model . objects . public ( ) get_page_queryset = lambda request = None : get_model_queryset ( Page , request ) get_title_queryset = lambda request = None : Title . objects . all ( ) get_cmsplugin_queryset = lambda request = None : CMSPlugin . objects . all ( ) def mail_approvement_request ( page , user = None ) : if not settings . CMS_MODERATOR or not page . requires_approvement ( ) : return recipient_list = [ ] for moderator in page . get_moderator_queryset ( ) : email = moderator . user . email if email and not email in recipient_list : recipient_list . append ( email ) if user and user . email in recipient_list : recipient_list . remove ( user . email ) if not recipient_list : return from django . contrib import admin from django . contrib . sites . models import Site from cms . utils . urlutils import urljoin from cms . utils . mail import send_mail site = Site . objects . get_current ( ) subject = _ ( 'CMS - Page %s requires approvement.' ) % unicode ( page ) context = { : page , : "http://%s" % urljoin ( site . domain , admin . site . root_path , 'cms/page' , page . id ) , } send_mail ( subject , 'admin/cms/mail/approvement_required.txt' , recipient_list , context , 'admin/cms/mail/approvement_required.html' )
