from cms . cache . permissions import get_permission_cache , set_permission_cache from cms . exceptions import NoPermissionsException from cms . models . query import PageQuerySet from cms . publisher import PublisherManager from cms . utils . i18n import get_fallback_languages from django . conf import settings from django . contrib . sites . models import Site from django . db import models from django . db . models import Q class PageManager ( PublisherManager ) : def get_query_set ( self ) : return PageQuerySet ( self . model ) def drafts ( self ) : return super ( PageManager , self ) . drafts ( ) . exclude ( publisher_state = self . model . PUBLISHER_STATE_DELETE ) def public ( self ) : return super ( PageManager , self ) . public ( ) . exclude ( publisher_state = self . model . PUBLISHER_STATE_DELETE ) def on_site ( self , site = None ) : return self . get_query_set ( ) . on_site ( site ) def root ( self ) : return self . get_query_set ( ) . root ( ) def all_root ( self ) : return self . get_query_set ( ) . all_root ( ) def valid_targets ( self , page_id , request , perms , page = None ) : return self . get_query_set ( ) . valid_targets ( page_id , request , perms , page ) def published ( self , site = None ) : return self . get_query_set ( ) . published ( site ) def expired ( self ) : return self . drafts ( ) . expired ( ) def get_all_pages_with_application ( self ) : return self . get_query_set ( ) . filter ( title_set__application_urls__gt = '' ) . distinct ( ) def get_home ( self , site = None ) : return self . get_query_set ( ) . get_home ( site ) def search ( self , q , language = None , current_site_only = True ) : from cms . plugin_pool import plugin_pool qs = self . get_query_set ( ) if settings . CMS_MODERATOR : qs = qs . public ( ) if current_site_only : site = Site . objects . get_current ( ) qs = qs . filter ( site = site ) qt = Q ( title_set__title__icontains = q ) qp = Q ( ) plugins = plugin_pool . get_all_plugins ( ) for plugin in plugins : c = plugin . model if hasattr ( c , 'search_fields' ) : for field in c . search_fields : qp |= Q ( ** { 'placeholders__cmsplugin__%s__%s__icontains' % ( c . __name__ . lower ( ) , field ) : q } ) if language : qt &= Q ( title_set__language = language ) qp &= Q ( cmsplugin__language = language ) qs = qs . filter ( qt | qp ) return qs . distinct ( ) class TitleManager ( PublisherManager ) : def get_title ( self , page , language , language_fallback = False ) : try : title = self . get ( language = language , page = page ) return title except self . model . DoesNotExist : if language_fallback : try : titles = self . filter ( page = page ) fallbacks = get_fallback_languages ( language ) for l in fallbacks : for title in titles : if l == title . language : return title return None except self . model . DoesNotExist : pass else : raise return None def get_page_slug ( self , slug , site = None ) : if not site : site = Site . objects . get_current ( ) try : titles = self . filter ( slug = slug , page__site = site , ) . select_related ( ) except self . model . DoesNotExist : return None else : return titles def public ( self ) : return self . get_query_set ( ) . filter ( page__publisher_is_draft = False , page__published = True ) def drafts ( self ) : return self . get_query_set ( ) . filter ( page__publisher_is_draft = True ) def set_or_create ( self , request , page , form , language ) : base_fields = [ , , , , , ] advanced_fields = [ , , ] cleaned_data = form . cleaned_data try : obj = self . get ( page = page , language = language ) except self . model . DoesNotExist : data = { } for name in base_fields : if name in cleaned_data : data [ name ] = cleaned_data [ name ] data [ 'page' ] = page data [ 'language' ] = language if page . has_advanced_settings_permission ( request ) : overwrite_url = cleaned_data . get ( 'overwrite_url' , None ) if overwrite_url : data [ 'has_url_overwrite' ] = True data [ 'path' ] = overwrite_url for field in advanced_fields : value = cleaned_data . get ( field , None ) if value : data [ field ] = value return self . create ( ** data ) for name in base_fields : value = cleaned_data . get ( name , None ) setattr ( obj , name , value ) if page . has_advanced_settings_permission ( request ) : overwrite_url = cleaned_data . get ( 'overwrite_url' , None ) obj . has_url_overwrite = bool ( overwrite_url ) obj . path = overwrite_url for field in advanced_fields : setattr ( obj , field , cleaned_data . get ( field , None ) ) obj . save ( ) return obj class BasicPagePermissionManager ( models . Manager ) : def with_user ( self , user ) : return self . filter ( Q ( user = user ) | Q ( group__user = user ) ) def with_can_change_permissions ( self , user ) : return self . with_user ( user ) . filter ( can_change_permissions = True ) class PagePermissionManager ( BasicPagePermissionManager ) : def subordinate_to_user ( self , user ) : from cms . models import GlobalPagePermission , Page if user . is_superuser or GlobalPagePermission . objects . with_can_change_permissions ( user ) : return self . all ( ) from cms . utils . permissions import get_user_permission_level try : user_level = get_user_permission_level ( user ) except NoPermissionsException : return self . none ( ) site = Site . objects . get_current ( ) page_id_allow_list = Page . permissions . get_change_permissions_id_list ( user , site ) qs = self . filter ( page__id__in = page_id_allow_list , page__level__gte = user_level , ) qs = qs . exclude ( user = user ) . exclude ( group__user = user ) return qs def for_page ( self , page ) : from cms . models import ACCESS_DESCENDANTS , ACCESS_CHILDREN , ACCESS_PAGE_AND_CHILDREN , ACCESS_PAGE_AND_DESCENDANTS q_tree = Q ( page__tree_id = page . tree_id ) q_page = Q ( page = page ) left_right = { % page . _meta . left_attr : getattr ( page , page . _meta . left_attr ) or 0 , % page . _meta . right_attr : getattr ( page , page . _meta . right_attr ) or 0 , } q_parents = Q ( ** left_right ) q_desc = ( Q ( page__level__lt = page . level ) & ( Q ( grant_on = ACCESS_DESCENDANTS ) | Q ( grant_on = ACCESS_PAGE_AND_DESCENDANTS ) ) ) q_kids = ( Q ( page__level = page . level - 1 ) & ( Q ( grant_on = ACCESS_CHILDREN ) | Q ( grant_on = ACCESS_PAGE_AND_CHILDREN ) ) ) q = q_tree & q_parents & ( q_page | q_desc | q_kids ) return self . filter ( q ) . order_by ( 'page__level' ) class PagePermissionsPermissionManager ( models . Manager ) : GRANT_ALL = 'All' def get_publish_id_list ( self , user , site ) : return self . __get_id_list ( user , site , "can_publish" ) def get_change_id_list ( self , user , site ) : return self . __get_id_list ( user , site , "can_change" ) def get_add_id_list ( self , user , site ) : return self . __get_id_list ( user , site , "can_add" ) def get_delete_id_list ( self , user , site ) : return self . __get_id_list ( user , site , "can_delete" ) def get_advanced_settings_id_list ( self , user , site ) : return self . __get_id_list ( user , site , "can_change_advanced_settings" ) def get_change_permissions_id_list ( self , user , site ) : return self . __get_id_list ( user , site , "can_change_permissions" ) def get_move_page_id_list ( self , user , site ) : return self . __get_id_list ( user , site , "can_move_page" ) def get_moderate_id_list ( self , user , site ) : if not settings . CMS_MODERATOR : return [ ] return self . __get_id_list ( user , site , "can_moderate" ) def get_view_id_list ( self , user , site ) : return self . __get_id_list ( user , site , "can_view" ) def __get_id_list ( self , user , site , attr ) : from cms . models import ( GlobalPagePermission , PagePermission , MASK_PAGE , MASK_CHILDREN , MASK_DESCENDANTS ) if attr != "can_view" : if not user . is_authenticated ( ) or not user . is_staff : return [ ] if user . is_superuser or not settings . CMS_PERMISSION : return PagePermissionsPermissionManager . GRANT_ALL cached = get_permission_cache ( user , attr ) if cached is not None : return cached global_permissions = GlobalPagePermission . objects . with_user ( user ) if global_permissions . filter ( ** { attr : True , 'sites__in' : [ site ] } ) . exists ( ) : return PagePermissionsPermissionManager . GRANT_ALL qs = PagePermission . objects . with_user ( user ) qs . order_by ( 'page__tree_id' , 'page__level' , 'page__lft' ) page_id_allow_list = [ ] for permission in qs : if getattr ( permission , attr ) : if permission . grant_on & MASK_PAGE or attr is "can_add" : page_id_allow_list . append ( permission . page . id ) if permission . grant_on & MASK_CHILDREN and not attr is "can_add" : page_id_allow_list . extend ( permission . page . get_children ( ) . values_list ( 'id' , flat = True ) ) elif permission . grant_on & MASK_DESCENDANTS : page_id_allow_list . extend ( permission . page . get_descendants ( ) . values_list ( 'id' , flat = True ) ) set_permission_cache ( user , attr , page_id_allow_list ) return page_id_allow_list class PageModeratorStateManager ( models . Manager ) : def get_delete_actions ( self ) : from cms . models import PageModeratorState return self . filter ( action = PageModeratorState . ACTION_DELETE )
