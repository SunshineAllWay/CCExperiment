from cms . exceptions import SubClassNeededError , Deprecated from cms . models import CMSPlugin from django import forms from django . conf import settings from django . contrib import admin from django . core . exceptions import ImproperlyConfigured from django . db . models . options import get_verbose_name from django . forms . models import ModelForm from django . utils . encoding import smart_str from django . utils . translation import ugettext_lazy as _ class CMSPluginBaseMetaclass ( forms . MediaDefiningClass ) : def __new__ ( cls , name , bases , attrs ) : super_new = super ( CMSPluginBaseMetaclass , cls ) . __new__ parents = [ base for base in bases if isinstance ( base , CMSPluginBaseMetaclass ) ] if not parents : return super_new ( cls , name , bases , attrs ) new_plugin = super_new ( cls , name , bases , attrs ) if not issubclass ( new_plugin . model , CMSPlugin ) : raise SubClassNeededError ( % ( new_plugin . model , new_plugin ) ) if not hasattr ( new_plugin , 'render_template' ) : raise ImproperlyConfigured ( ) if not new_plugin . form : form_meta_attrs = { : new_plugin . model , : ( 'position' , 'placeholder' , 'language' , 'plugin_type' ) } form_attrs = { : type ( 'Meta' , ( object , ) , form_meta_attrs ) } new_plugin . form = type ( '%sForm' % name , ( ModelForm , ) , form_attrs ) if not new_plugin . fieldsets : basic_fields = [ ] advanced_fields = [ ] for f in new_plugin . model . _meta . fields : if not f . auto_created and f . editable : if hasattr ( f , 'advanced' ) : advanced_fields . append ( f . name ) else : basic_fields . append ( f . name ) if advanced_fields : new_plugin . fieldsets = [ ( None , { : basic_fields } ) , ( _ ( 'Advanced options' ) , { : advanced_fields , : ( 'collapse' , ) } ) ] if not new_plugin . name : new_plugin . name = get_verbose_name ( new_plugin . __name__ ) return new_plugin class CMSPluginBase ( admin . ModelAdmin ) : __metaclass__ = CMSPluginBaseMetaclass name = "" form = None change_form_template = "admin/cms/page/plugin_change_form.html" admin_preview = True render_template = None render_plugin = True model = CMSPlugin text_enabled = False page_only = False opts = { } module = None def __init__ ( self , model = None , admin_site = None ) : if admin_site : super ( CMSPluginBase , self ) . __init__ ( self . model , admin_site ) self . object_successfully_changed = False self . cms_plugin_instance = None self . placeholder = None self . page = None def render ( self , context , instance , placeholder ) : raise NotImplementedError ( "render needs to be implemented" ) @ property def parent ( self ) : return self . cms_plugin_instance . parent def render_change_form ( self , request , context , add = False , change = False , form_url = '' , obj = None ) : context . update ( { : not "no_preview" in request . GET , : True , : self . cms_plugin_instance , : settings . CMS_MEDIA_URL , } ) return super ( CMSPluginBase , self ) . render_change_form ( request , context , add , change , form_url , obj ) def has_add_permission ( self , request , * args , ** kwargs ) : return self . cms_plugin_instance . has_change_permission ( request ) has_delete_permission = has_change_permission = has_add_permission def save_model ( self , request , obj , form , change ) : if getattr ( self , "cms_plugin_instance" ) : fields = self . cms_plugin_instance . _meta . fields for field in fields : value = getattr ( self . cms_plugin_instance , field . name ) setattr ( obj , field . name , value ) self . saved_object = obj return super ( CMSPluginBase , self ) . save_model ( request , obj , form , change ) def response_change ( self , request , obj ) : self . object_successfully_changed = True return super ( CMSPluginBase , self ) . response_change ( request , obj ) def response_add ( self , request , obj ) : self . object_successfully_changed = True return super ( CMSPluginBase , self ) . response_add ( request , obj ) def log_addition ( self , request , object ) : pass def log_change ( self , request , object , message ) : pass def log_deletion ( self , request , object , object_repr ) : pass def icon_src ( self , instance ) : return "" def icon_alt ( self , instance ) : return "%s - %s" % ( unicode ( self . name ) , unicode ( instance ) ) def __repr__ ( self ) : return smart_str ( self . name ) def __unicode__ ( self ) : return self . name @ property def pluginmedia ( self ) : raise Deprecated ( ) def get_plugin_media ( self , request , context , plugin ) : raise Deprecated (
