import sys from django . db import models from django . contrib . auth . models import User from django . utils . translation import ugettext_lazy as _ from cms . models . managers import PageModeratorStateManager from cms . models . pagemodel import Page ACCESS_PAGE = 1 ACCESS_CHILDREN = 2 ACCESS_PAGE_AND_CHILDREN = 3 ACCESS_DESCENDANTS = 4 ACCESS_PAGE_AND_DESCENDANTS = 5 MASK_PAGE = 1 MASK_CHILDREN = 2 MASK_DESCENDANTS = 4 ACCESS_CHOICES = ( ( ACCESS_PAGE , _ ( 'Current page' ) ) , ( ACCESS_CHILDREN , _ ( 'Page children (immediate)' ) ) , ( ACCESS_PAGE_AND_CHILDREN , _ ( 'Page and children (immediate)' ) ) , ( ACCESS_DESCENDANTS , _ ( 'Page descendants' ) ) , ( ACCESS_PAGE_AND_DESCENDANTS , _ ( 'Page and descendants' ) ) , ) class PageModerator ( models . Model ) : MAX_MODERATION_LEVEL = sys . maxint page = models . ForeignKey ( Page , verbose_name = _ ( 'Page' ) ) user = models . ForeignKey ( User , verbose_name = _ ( 'User' ) ) moderate_page = models . BooleanField ( _ ( 'Moderate page' ) , blank = True ) moderate_children = models . BooleanField ( _ ( 'Moderate children' ) , blank = True ) moderate_descendants = models . BooleanField ( _ ( 'Moderate descendants' ) , blank = True ) class Meta : verbose_name = _ ( 'PageModerator' ) verbose_name_plural = _ ( 'PageModerator' ) app_label = 'cms' def set_decimal ( self , state ) : self . moderate_page = bool ( state & MASK_PAGE ) moderate_children = bool ( state & MASK_CHILDREN ) moderate_descendants = bool ( state & MASK_DESCENDANTS ) if moderate_descendants : moderate_children = True self . moderate_children = moderate_children self . moderate_descendants = moderate_descendants def get_decimal ( self ) : return self . moderate_page * MASK_PAGE + self . moderate_children * MASK_CHILDREN + self . moderate_descendants * MASK_DESCENDANTS def __unicode__ ( self ) : return u"%s on %s mod: %d" % ( self . user , self . page , self . get_decimal ( ) ) class PageModeratorState ( models . Model ) : ACTION_ADD = "ADD" ACTION_CHANGED = "CHA" ACTION_PUBLISH = "PUB" ACTION_UNPUBLISH = "UNP" ACTION_MOVE = "MOV" ACTION_DELETE = "DEL" ACTION_APPROVE = "APP" _action_choices = ( ( ACTION_ADD , _ ( 'created' ) ) , ( ACTION_CHANGED , _ ( 'changed' ) ) , ( ACTION_DELETE , _ ( 'delete req.' ) ) , ( ACTION_MOVE , _ ( 'move req.' ) ) , ( ACTION_PUBLISH , _ ( 'publish req.' ) ) , ( ACTION_UNPUBLISH , _ ( 'unpublish req.' ) ) , ( ACTION_APPROVE , _ ( 'approved' ) ) , ) page = models . ForeignKey ( Page ) user = models . ForeignKey ( User , null = True ) created = models . DateTimeField ( auto_now_add = True ) action = models . CharField ( max_length = 3 , choices = _action_choices , null = True , blank = True ) message = models . TextField ( max_length = 1000 , blank = True , default = "" ) objects = PageModeratorStateManager ( ) class Meta : verbose_name = _ ( 'Page moderator state' ) verbose_name_plural = _ ( 'Page moderator states' ) ordering = ( 'page' , 'action' , '-created' ) app_label = 'cms' css_class = lambda self : self . action . lower ( ) def __unicode__ ( self ) : return u"%s: %s" % ( self . page , self . get_action_display ( ) )
