from cms . utils . django_load import load from django . conf import settings from django . contrib . sites . models import Site from django . core . cache import cache from django . utils . translation import get_language from menus . exceptions import NamespaceAllreadyRegistered from menus . models import CacheKey import copy def _build_nodes_inner_for_one_menu ( nodes , menu_class_name ) : done_nodes = { } final_nodes = [ ] list_total_length = len ( nodes ) while nodes : should_add_to_final_list = True node = nodes . pop ( 0 ) node . _counter = getattr ( node , '_counter' , 0 ) + 1 if not node . namespace : node . namespace = menu_class_name if node . namespace not in done_nodes : done_nodes [ node . namespace ] = { } if node . parent_id in done_nodes [ node . namespace ] : if not node . parent_namespace : node . parent_namespace = menu_class_name parent = done_nodes [ node . namespace ] [ node . parent_id ] parent . children . append ( node ) node . parent = parent elif node . parent_id : if node . _counter < list_total_length : nodes . append ( node ) should_add_to_final_list = False if should_add_to_final_list : final_nodes . append ( node ) done_nodes [ node . namespace ] [ node . id ] = node return final_nodes class MenuPool ( object ) : def __init__ ( self ) : self . menus = { } self . modifiers = [ ] self . discovered = False def discover_menus ( self ) : if self . discovered : return load ( 'menu' ) from menus . modifiers import register register ( ) self . discovered = True def clear ( self , site_id = None , language = None , all = False ) : if all : cache_keys = CacheKey . objects . get_keys ( ) else : cache_keys = CacheKey . objects . get_keys ( site_id , language ) to_be_deleted = cache_keys . distinct ( ) . values_list ( 'key' , flat = True ) cache . delete_many ( to_be_deleted ) cache_keys . delete ( ) def register_menu ( self , menu ) : from menus . base import Menu assert issubclass ( menu , Menu ) if menu . __name__ in self . menus . keys ( ) : raise NamespaceAllreadyRegistered ( % menu . __name__ ) self . menus [ menu . __name__ ] = menu ( ) def register_modifier ( self , modifier_class ) : from menus . base import Modifier assert issubclass ( modifier_class , Modifier ) if not modifier_class in self . modifiers : self . modifiers . append ( modifier_class ) def _build_nodes ( self , request , site_id ) : lang = get_language ( ) prefix = getattr ( settings , "CMS_CACHE_PREFIX" , "menu_cache_" ) key = "%smenu_nodes_%s_%s" % ( prefix , lang , site_id ) if request . user . is_authenticated ( ) : key += "_%s_user" % request . user . pk cached_nodes = cache . get ( key , None ) if cached_nodes : return cached_nodes final_nodes = [ ] for menu_class_name in self . menus : nodes = self . menus [ menu_class_name ] . get_nodes ( request ) final_nodes += _build_nodes_inner_for_one_menu ( nodes , menu_class_name ) cache . set ( key , final_nodes , settings . CMS_CACHE_DURATIONS [ 'menus' ] ) CacheKey . objects . get_or_create ( key = key , language = lang , site = site_id ) return final_nodes def apply_modifiers ( self , nodes , request , namespace = None , root_id = None , post_cut = False , breadcrumb = False ) : if not post_cut : nodes = self . _mark_selected ( request , nodes ) for cls in self . modifiers : inst = cls ( ) nodes = inst . modify ( request , nodes , namespace , root_id , post_cut , breadcrumb ) return nodes def get_nodes ( self , request , namespace = None , root_id = None , site_id = None , breadcrumb = False ) : self . discover_menus ( ) if not site_id : site_id = Site . objects . get_current ( ) . pk nodes = self . _build_nodes ( request , site_id ) nodes = copy . deepcopy ( nodes ) nodes = self . apply_modifiers ( nodes , request , namespace , root_id , post_cut = False , breadcrumb = breadcrumb ) return nodes def _mark_selected ( self , request , nodes ) : sel = None for node in nodes : node . sibling = False node . ancestor = False node . descendant = False node . selected = False if node . get_absolute_url ( ) == request . path [ : len ( node . get_absolute_url ( ) ) ] : if sel : if len ( node . get_absolute_url ( ) ) > len ( sel . get_absolute_url ( ) ) : sel = node else : sel = node else : node . selected = False if sel : sel . selected = True return nodes def get_menus_by_attribute ( self , name , value ) : self . discover_menus ( ) found = [ ] for menu in self . menus . items ( ) : if hasattr ( menu [ 1 ] , name ) and getattr ( menu [ 1 ] , name , None ) == value : found . append ( ( menu [ 0 ] , menu [ 1 ] . name ) ) return found def get_nodes_by_attribute ( self , nodes , name , value ) : found = [ ] for node in nodes : if node . attr . get ( name , None ) == value : found . append ( node ) return found menu_pool = MenuPool ( )
