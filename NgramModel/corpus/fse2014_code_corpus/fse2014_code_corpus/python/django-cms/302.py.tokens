from cms . exceptions import NoHomeFound from cms . models . pagemodel import Page from django . conf import settings from django . contrib . sites . models import Site from django . core . urlresolvers import reverse from django . db . models . query_utils import Q import urllib import re ADMIN_PAGE_RE_PATTERN = ur'cms/page/(\d+)' ADMIN_PAGE_RE = re . compile ( ADMIN_PAGE_RE_PATTERN ) def get_page_from_path ( path , preview = False ) : if 'django.contrib.admin' in settings . INSTALLED_APPS : admin_base = reverse ( 'admin:index' ) . lstrip ( '/' ) else : admin_base = None site = Site . objects . get_current ( ) if admin_base and path . startswith ( admin_base ) : match = ADMIN_PAGE_RE . search ( path ) if not match : page = None else : try : page = Page . objects . get ( pk = match . group ( 1 ) ) except Page . DoesNotExist : page = None return page if not settings . CMS_MODERATOR or preview : pages = Page . objects . drafts ( ) else : pages = Page . objects . public ( ) if not preview : pages = pages . published ( ) pages = pages . filter ( site = site ) if not pages . all_root ( ) : return None try : home = pages . get_home ( ) except NoHomeFound : home = None if not path and home : page = home return page if settings . CMS_FLAT_URLS : q = Q ( title_set__slug = path ) else : q = Q ( title_set__path = path ) try : page = pages . filter ( q ) . distinct ( ) . get ( ) except Page . DoesNotExist : return None return page def get_page_from_request ( request , use_path = None ) : pages_root = urllib . unquote ( reverse ( "pages-root" ) ) if hasattr ( request , '_current_page_cache' ) : return request . _current_page_cache preview = 'preview' in request . GET and request . user . is_staff if use_path : path = use_path else : path = request . path [ len ( pages_root ) : ] if path . endswith ( "/" ) : path = path [ : - 1 ] page = get_page_from_path ( path , preview ) request . _current_page_cache = page return page
