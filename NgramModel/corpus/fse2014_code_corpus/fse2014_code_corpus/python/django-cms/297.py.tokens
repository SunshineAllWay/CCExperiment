from django . conf import settings from django . core . exceptions import ImproperlyConfigured from django . utils . translation import ugettext_lazy as _ from sekizai . helpers import validate_template from warnings import warn def pre_patch ( ) : append_properties = { : 'cms.middleware.multilingual.MultilingualURLMiddleware' in settings . MIDDLEWARE_CLASSES } for attr , value in append_properties . items ( ) : if not hasattr ( settings , attr ) : setattr ( settings . _wrapped , attr , value ) def post_patch ( ) : if settings . CMS_TEMPLATE_INHERITANCE : settings . CMS_TEMPLATES = tuple ( settings . CMS_TEMPLATES ) + ( ( settings . CMS_TEMPLATE_INHERITANCE_MAGIC , _ ( 'Inherit the template of the nearest ancestor' ) ) , ) def post_patch_check ( ) : cms_templates_length = len ( settings . CMS_TEMPLATES ) if ( cms_templates_length < 1 or ( cms_templates_length == 1 and settings . CMS_TEMPLATES [ 0 ] [ 0 ] == settings . CMS_TEMPLATE_INHERITANCE_MAGIC ) ) : raise ImproperlyConfigured ( 'Please make sure you specified a CMS_TEMPLATES setting.' ) if settings . CMS_PERMISSION and not 'cms.middleware.user.CurrentUserMiddleware' in settings . MIDDLEWARE_CLASSES : raise ImproperlyConfigured ( 'CMS Permission system requires cms.middleware.user.CurrentUserMiddleware.\n' ) try : from django . template . loaders . app_directories import Loader except ImportError : return for template in settings . CMS_TEMPLATES : if template [ 0 ] == settings . CMS_TEMPLATE_INHERITANCE_MAGIC : continue if not validate_template ( template [ 0 ] , [ 'js' , 'css' ] ) : raise ImproperlyConfigured ( % template [ 0 ] )
