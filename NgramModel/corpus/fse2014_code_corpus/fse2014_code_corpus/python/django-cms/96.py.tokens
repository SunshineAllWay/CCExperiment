from __future__ import with_statement from cms . api import create_page from cms . menu import CMSMenu , get_visible_pages from cms . models import Page from cms . models . permissionmodels import GlobalPagePermission , PagePermission from cms . test_utils . fixtures . menus import ( MenusFixture , SubMenusFixture , SoftrootFixture ) from cms . test_utils . testcases import SettingsOverrideTestCase from cms . test_utils . util . context_managers import ( SettingsOverride , LanguageOverride ) from cms . test_utils . util . mock import AttributeObject from django . conf import settings from django . contrib . auth . models import AnonymousUser , User , Permission , Group from django . contrib . sites . models import Site from django . template import Template , TemplateSyntaxError from menus . base import NavigationNode from menus . menu_pool import menu_pool , _build_nodes_inner_for_one_menu from menus . models import CacheKey from menus . utils import mark_descendants , find_selected , cut_levels class BaseMenuTest ( SettingsOverrideTestCase ) : settings_overrides = { : False , } def _get_nodes ( self , path = '/' ) : node1 = NavigationNode ( '1' , '/1/' , 1 ) node2 = NavigationNode ( '2' , '/2/' , 2 , 1 ) node3 = NavigationNode ( '3' , '/3/' , 3 , 2 ) node4 = NavigationNode ( '4' , '/4/' , 4 , 2 ) node5 = NavigationNode ( '5' , '/5/' , 5 ) nodes = [ node1 , node2 , node3 , node4 , node5 ] tree = _build_nodes_inner_for_one_menu ( [ n for n in nodes ] , "test" ) request = self . get_request ( path ) menu_pool . apply_modifiers ( tree , request ) return tree , nodes def setUp ( self ) : super ( BaseMenuTest , self ) . setUp ( ) if not menu_pool . discovered : menu_pool . discover_menus ( ) self . old_menu = menu_pool . menus menu_pool . menus = { 'CMSMenu' : self . old_menu [ 'CMSMenu' ] } menu_pool . clear ( settings . SITE_ID ) def tearDown ( self ) : menu_pool . menus = self . old_menu super ( BaseMenuTest , self ) . tearDown ( ) class FixturesMenuTests ( MenusFixture , BaseMenuTest ) : def get_page ( self , num ) : return Page . objects . get ( title_set__title = 'P%s' % num ) def get_level ( self , num ) : return Page . objects . filter ( level = num ) def get_all_pages ( self ) : return Page . objects . all ( ) def test_menu_failfast_on_invalid_usage ( self ) : context = self . get_context ( ) context [ 'child' ] = self . get_page ( 1 ) with SettingsOverride ( DEBUG = True , TEMPLATE_DEBUG = True ) : tpl = Template ( "{% load menu_tags %}{% show_menu 0 0 0 0 'menu/menu.html' child %}" ) self . assertRaises ( TemplateSyntaxError , tpl . render , context ) def test_basic_cms_menu ( self ) : self . assertEqual ( len ( menu_pool . menus ) , 1 ) response = self . client . get ( self . get_pages_root ( ) ) self . assertEquals ( response . status_code , 200 ) request = self . get_request ( ) menu = CMSMenu ( ) nodes = menu . get_nodes ( request ) self . assertEqual ( len ( nodes ) , len ( self . get_all_pages ( ) ) ) def test_show_menu ( self ) : context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 2 ) self . assertEqual ( nodes [ 0 ] . selected , True ) self . assertEqual ( nodes [ 0 ] . sibling , False ) self . assertEqual ( nodes [ 0 ] . descendant , False ) self . assertEqual ( nodes [ 0 ] . children [ 0 ] . descendant , True ) self . assertEqual ( nodes [ 0 ] . children [ 0 ] . children [ 0 ] . descendant , True ) self . assertEqual ( nodes [ 0 ] . get_absolute_url ( ) , self . get_pages_root ( ) ) self . assertEqual ( nodes [ 1 ] . get_absolute_url ( ) , self . get_page ( 4 ) . get_absolute_url ( ) ) self . assertEqual ( nodes [ 1 ] . sibling , True ) self . assertEqual ( nodes [ 1 ] . selected , False ) def test_show_menu_num_queries ( self ) : context = self . get_context ( ) with self . assertNumQueries ( 5 ) : tpl = Template ( "{% load menu_tags %}{% show_menu %}" ) tpl . render ( context ) def test_show_menu_cache_key_leak ( self ) : context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu %}" ) self . assertEqual ( CacheKey . objects . count ( ) , 0 ) tpl . render ( context ) self . assertEqual ( CacheKey . objects . count ( ) , 1 ) tpl . render ( context ) self . assertEqual ( CacheKey . objects . count ( ) , 1 ) def test_only_active_tree ( self ) : context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 0 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes [ 1 ] . children ) , 0 ) self . assertEqual ( len ( nodes [ 0 ] . children ) , 1 ) self . assertEqual ( len ( nodes [ 0 ] . children [ 0 ] . children ) , 1 ) context = self . get_context ( path = self . get_page ( 4 ) . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 0 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes [ 1 ] . children ) , 1 ) self . assertEqual ( len ( nodes [ 0 ] . children ) , 0 ) def test_only_one_active_level ( self ) : context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 0 1 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes [ 1 ] . children ) , 0 ) self . assertEqual ( len ( nodes [ 0 ] . children ) , 1 ) self . assertEqual ( len ( nodes [ 0 ] . children [ 0 ] . children ) , 0 ) def test_only_level_zero ( self ) : context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 0 0 0 %}" ) tpl . render ( context ) nodes = context [ 'children' ] for node in nodes : self . assertEqual ( len ( node . children ) , 0 ) def test_only_level_one ( self ) : context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu 1 1 100 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , len ( self . get_level ( 1 ) ) ) for node in nodes : self . assertEqual ( len ( node . children ) , 0 ) def test_only_level_one_active ( self ) : context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu 1 1 0 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 1 ) self . assertEqual ( nodes [ 0 ] . descendant , True ) self . assertEqual ( len ( nodes [ 0 ] . children ) , 0 ) def test_level_zero_and_one ( self ) : context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 1 100 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 2 ) for node in nodes : self . assertEqual ( len ( node . children ) , 1 ) def test_show_submenu ( self ) : context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_sub_menu %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( nodes [ 0 ] . descendant , True ) self . assertEqual ( len ( nodes ) , 1 ) self . assertEqual ( len ( nodes [ 0 ] . children ) , 1 ) tpl = Template ( "{% load menu_tags %}{% show_sub_menu 1 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 1 ) self . assertEqual ( len ( nodes [ 0 ] . children ) , 0 ) def test_show_breadcrumb ( self ) : context = self . get_context ( path = self . get_page ( 3 ) . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_breadcrumb %}" ) tpl . render ( context ) nodes = context [ 'ancestors' ] self . assertEqual ( len ( nodes ) , 3 ) tpl = Template ( "{% load menu_tags %}{% show_breadcrumb 1 %}" ) tpl . render ( context ) nodes = context [ 'ancestors' ] self . assertEqual ( len ( nodes ) , 2 ) context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_breadcrumb %}" ) tpl . render ( context ) nodes = context [ 'ancestors' ] self . assertEqual ( len ( nodes ) , 1 ) tpl = Template ( "{% load menu_tags %}{% show_breadcrumb 1 %}" ) tpl . render ( context ) nodes = context [ 'ancestors' ] self . assertEqual ( len ( nodes ) , 0 ) page1 = Page . objects . get ( pk = self . get_page ( 1 ) . pk ) page1 . in_navigation = False page1 . save ( ) page2 = self . get_page ( 2 ) context = self . get_context ( path = page2 . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_breadcrumb %}" ) tpl . render ( context ) nodes = context [ 'ancestors' ] self . assertEqual ( len ( nodes ) , 2 ) self . assertEqual ( nodes [ 0 ] . get_absolute_url ( ) , self . get_pages_root ( ) ) self . assertEqual ( isinstance ( nodes [ 0 ] , NavigationNode ) , True ) self . assertEqual ( nodes [ 1 ] . get_absolute_url ( ) , page2 . get_absolute_url ( ) ) def test_language_chooser ( self ) : context = self . get_context ( path = self . get_page ( 3 ) . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% language_chooser %}" ) tpl . render ( context ) self . assertEqual ( len ( context [ 'languages' ] ) , len ( settings . CMS_SITE_LANGUAGES [ settings . SITE_ID ] ) ) tpl = Template ( "{% load menu_tags %}{% language_chooser 'menu/test_language_chooser.html' %}" ) tpl . render ( context ) self . assertEqual ( context [ 'template' ] , 'menu/test_language_chooser.html' ) tpl = Template ( "{% load menu_tags %}{% language_chooser 'short' 'menu/test_language_chooser.html' %}" ) tpl . render ( context ) self . assertEqual ( context [ 'template' ] , 'menu/test_language_chooser.html' ) for lang in context [ 'languages' ] : self . assertEqual ( * lang ) def test_page_language_url ( self ) : path = self . get_page ( 3 ) . get_absolute_url ( ) context = self . get_context ( path = path ) tpl = Template ( "{%% load menu_tags %%}{%% page_language_url '%s' %%}" % settings . LANGUAGES [ 0 ] [ 0 ] ) url = tpl . render ( context ) self . assertEqual ( url , "/%s%s" % ( settings . LANGUAGES [ 0 ] [ 0 ] , path ) ) def test_show_menu_below_id ( self ) : page2 = Page . objects . get ( pk = self . get_page ( 2 ) . pk ) page2 . reverse_id = "hello" page2 . save ( ) page2 = self . reload ( page2 ) self . assertEqual ( page2 . reverse_id , "hello" ) page5 = self . get_page ( 5 ) context = self . get_context ( path = page5 . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu_below_id 'hello' %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 1 ) page3_url = self . get_page ( 3 ) . get_absolute_url ( ) self . assertEqual ( nodes [ 0 ] . get_absolute_url ( ) , page3_url ) page2 . in_navigation = False page2 . save ( ) context = self . get_context ( path = page5 . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu_below_id 'hello' %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 1 ) self . assertEqual ( nodes [ 0 ] . get_absolute_url ( ) , page3_url ) def test_unpublished ( self ) : page2 = Page . objects . get ( pk = self . get_page ( 2 ) . pk ) page2 . published = False page2 . save ( ) context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 2 ) self . assertEqual ( len ( nodes [ 0 ] . children ) , 0 ) def test_home_not_in_menu ( self ) : page1 = Page . objects . get ( pk = self . get_page ( 1 ) . pk ) page1 . in_navigation = False page1 . save ( ) page4 = Page . objects . get ( pk = self . get_page ( 4 ) . pk ) page4 . in_navigation = False page4 . save ( ) context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 100 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 1 ) self . assertEqual ( nodes [ 0 ] . get_absolute_url ( ) , self . get_page ( 2 ) . get_absolute_url ( ) ) self . assertEqual ( nodes [ 0 ] . children [ 0 ] . get_absolute_url ( ) , self . get_page ( 3 ) . get_absolute_url ( ) ) page4 = Page . objects . get ( pk = self . get_page ( 4 ) . pk ) page4 . in_navigation = True page4 . save ( ) menu_pool . clear ( settings . SITE_ID ) context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 100 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 2 ) def test_show_submenu_from_non_menu_page ( self ) : page6 = Page . objects . get ( pk = self . get_page ( 6 ) . pk ) context = self . get_context ( page6 . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu 1 100 0 1 %}" ) tpl . render ( context ) nodes = context [ 'children' ] number_of_p6_children = len ( page6 . children . filter ( in_navigation = True ) ) self . assertEqual ( len ( nodes ) , number_of_p6_children ) page7 = Page . objects . get ( pk = self . get_page ( 7 ) . pk ) context = self . get_context ( page7 . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu 1 100 0 1 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , number_of_p6_children ) tpl = Template ( "{% load menu_tags %}{% show_menu 2 100 0 1 %}" ) tpl . render ( context ) nodes = context [ 'children' ] number_of_p7_children = len ( page7 . children . filter ( in_navigation = True ) ) self . assertEqual ( len ( nodes ) , number_of_p7_children ) def test_show_breadcrumb_invisible ( self ) : invisible_page = create_page ( "invisible" , "nav_playground.html" , "en" , parent = self . get_page ( 3 ) , published = True , in_navigation = False ) context = self . get_context ( path = invisible_page . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_breadcrumb %}" ) tpl . render ( context ) nodes = context [ 'ancestors' ] self . assertEqual ( len ( nodes ) , 3 ) tpl = Template ( "{% load menu_tags %}{% show_breadcrumb 'menu/breadcrumb.html' 1 %}" ) tpl . render ( context ) nodes = context [ 'ancestors' ] self . assertEqual ( len ( nodes ) , 3 ) tpl = Template ( "{% load menu_tags %}{% show_breadcrumb 'menu/breadcrumb.html' 0 %}" ) tpl . render ( context ) nodes = context [ 'ancestors' ] self . assertEqual ( len ( nodes ) , 4 ) class MenuTests ( BaseMenuTest ) : def test_build_nodes_inner_for_worst_case_menu ( self ) : node1 = NavigationNode ( 'Test1' , '/test1/' , 1 , 2 ) node2 = NavigationNode ( 'Test2' , '/test2/' , 2 , 3 ) node3 = NavigationNode ( 'Test3' , '/test3/' , 3 , 4 ) node4 = NavigationNode ( 'Test4' , '/test4/' , 4 , 5 ) node5 = NavigationNode ( 'Test5' , '/test5/' , 5 , None ) menu_class_name = 'Test' nodes = [ node1 , node2 , node3 , node4 , node5 , ] len_nodes = len ( nodes ) final_list = _build_nodes_inner_for_one_menu ( nodes , menu_class_name ) self . assertEqual ( len ( final_list ) , len_nodes ) self . assertEqual ( node1 . parent , node2 ) self . assertEqual ( node2 . parent , node3 ) self . assertEqual ( node3 . parent , node4 ) self . assertEqual ( node4 . parent , node5 ) self . assertEqual ( node5 . parent , None ) self . assertEqual ( node1 . children , [ ] ) self . assertEqual ( node2 . children , [ node1 ] ) self . assertEqual ( node3 . children , [ node2 ] ) self . assertEqual ( node4 . children , [ node3 ] ) self . assertEqual ( node5 . children , [ node4 ] ) def test_build_nodes_inner_for_circular_menu ( self ) : pass def test_build_nodes_inner_for_broken_menu ( self ) : node1 = NavigationNode ( 'Test1' , '/test1/' , 1 , 2 ) node2 = NavigationNode ( 'Test2' , '/test2/' , 2 , 12 ) node3 = NavigationNode ( 'Test3' , '/test3/' , 3 , 4 ) node4 = NavigationNode ( 'Test4' , '/test4/' , 4 , 5 ) node5 = NavigationNode ( 'Test5' , '/test5/' , 5 , None ) menu_class_name = 'Test' nodes = [ node1 , node2 , node3 , node4 , node5 , ] final_list = _build_nodes_inner_for_one_menu ( nodes , menu_class_name ) self . assertEqual ( len ( final_list ) , 3 ) self . assertFalse ( node1 in final_list ) self . assertFalse ( node2 in final_list ) self . assertEqual ( node1 . parent , None ) self . assertEqual ( node2 . parent , None ) self . assertEqual ( node3 . parent , node4 ) self . assertEqual ( node4 . parent , node5 ) self . assertEqual ( node5 . parent , None ) self . assertEqual ( node1 . children , [ ] ) self . assertEqual ( node2 . children , [ ] ) self . assertEqual ( node3 . children , [ ] ) self . assertEqual ( node4 . children , [ node3 ] ) self . assertEqual ( node5 . children , [ node4 ] ) def test_utils_mark_descendants ( self ) : tree_nodes , flat_nodes = self . _get_nodes ( ) mark_descendants ( tree_nodes ) for node in flat_nodes : self . assertTrue ( node . descendant , node ) def test_utils_find_selected ( self ) : tree_nodes , flat_nodes = self . _get_nodes ( ) node = flat_nodes [ 0 ] selected = find_selected ( tree_nodes ) self . assertEqual ( selected , node ) selected = find_selected ( [ ] ) self . assertEqual ( selected , None ) def test_utils_cut_levels ( self ) : tree_nodes , flat_nodes = self . _get_nodes ( ) self . assertEqual ( cut_levels ( tree_nodes , 1 ) , [ flat_nodes [ 1 ] ] ) def test_empty_menu ( self ) : context = self . get_context ( ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 100 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 0 ) class AdvancedSoftrootTests ( SoftrootFixture , SettingsOverrideTestCase ) : settings_overrides = { : False , : False } def tearDown ( self ) : Page . objects . all ( ) . delete ( ) def get_page ( self , name ) : return Page . objects . get ( title_set__slug = name ) def assertTreeQuality ( self , a , b , * attrs ) : msg = '%r != %r with %r, %r' % ( len ( a ) , len ( b ) , a , b ) self . assertEqual ( len ( a ) , len ( b ) , msg ) for n1 , n2 in zip ( a , b ) : for attr in attrs : a1 = getattr ( n1 , attr ) a2 = getattr ( n2 , attr ) msg = '%r != %r with %r, %r (%s)' % ( a1 , a2 , n1 , n2 , attr ) self . assertEqual ( a1 , a2 , msg ) self . assertTreeQuality ( n1 . children , n2 . children ) def test_top_not_in_nav ( self ) : top = self . get_page ( 'top' ) top . in_navigation = False top . save ( ) aaa = self . get_page ( 'aaa' ) context = self . get_context ( aaa . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 0 100 %}" ) tpl . render ( context ) hard_root = context [ 'children' ] root = self . get_page ( 'root' ) root . soft_root = True root . save ( ) aaa = self . get_page ( 'aaa' ) context = self . get_context ( aaa . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 0 100 %}" ) tpl . render ( context ) soft_root = context [ 'children' ] self . assertTreeQuality ( hard_root , soft_root , 'level' , 'title' ) def test_top_in_nav ( self ) : aaa = self . get_page ( 'aaa' ) context = self . get_context ( aaa . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 0 100 %}" ) tpl . render ( context ) hard_root = context [ 'children' ] mock_tree = [ AttributeObject ( title = 'top' , level = 0 , children = [ AttributeObject ( title = 'root' , level = 1 , children = [ AttributeObject ( title = 'aaa' , level = 2 , children = [ AttributeObject ( title = '111' , level = 3 , children = [ AttributeObject ( title = 'ccc' , level = 4 , children = [ AttributeObject ( title = 'ddd' , level = 5 , children = [ ] ) ] ) ] ) , AttributeObject ( title = '222' , level = 3 , children = [ ] ) ] ) , AttributeObject ( title = 'bbb' , level = 2 , children = [ ] ) ] ) ] ) ] self . assertTreeQuality ( hard_root , mock_tree ) root = self . get_page ( 'root' ) root . soft_root = True root . save ( ) aaa = self . get_page ( 'aaa' ) context = self . get_context ( aaa . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 0 100 %}" ) tpl . render ( context ) soft_root = context [ 'children' ] mock_tree = [ AttributeObject ( title = 'root' , level = 0 , children = [ AttributeObject ( title = 'aaa' , level = 1 , children = [ AttributeObject ( title = '111' , level = 2 , children = [ AttributeObject ( title = 'ccc' , level = 3 , children = [ AttributeObject ( title = 'ddd' , level = 4 , children = [ ] ) ] ) ] ) , AttributeObject ( title = '222' , level = 2 , children = [ ] ) ] ) , AttributeObject ( title = 'bbb' , level = 1 , children = [ ] ) ] ) ] self . assertTreeQuality ( soft_root , mock_tree , 'title' , 'level' ) class ShowSubMenuCheck ( SubMenusFixture , BaseMenuTest ) : def test_show_submenu ( self ) : page = Page . objects . get ( title_set__title = 'P6' ) context = self . get_context ( page . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_sub_menu %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 1 ) self . assertEqual ( nodes [ 0 ] . id , 8 ) def test_show_submenu_num_queries ( self ) : page = Page . objects . get ( title_set__title = 'P6' ) context = self . get_context ( page . get_absolute_url ( ) ) with self . assertNumQueries ( 5 ) : tpl = Template ( "{% load menu_tags %}{% show_sub_menu %}" ) tpl . render ( context ) class ShowMenuBelowIdTests ( BaseMenuTest ) : def test_not_in_navigation ( self ) : a = create_page ( 'A' , 'nav_playground.html' , 'en' , published = True , in_navigation = True , reverse_id = 'a' ) b = create_page ( 'B' , 'nav_playground.html' , 'en' , parent = a , published = True , in_navigation = True ) c = create_page ( 'C' , 'nav_playground.html' , 'en' , parent = b , published = True , in_navigation = True ) create_page ( 'D' , 'nav_playground.html' , 'en' , parent = self . reload ( b ) , published = True , in_navigation = False ) context = self . get_context ( a . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu_below_id 'a' 0 100 100 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 1 , nodes ) node = nodes [ 0 ] self . assertEqual ( node . id , b . id ) children = node . children self . assertEqual ( len ( children ) , 1 , repr ( children ) ) child = children [ 0 ] self . assertEqual ( child . id , c . id ) def test_not_in_navigation_num_queries ( self ) : a = create_page ( 'A' , 'nav_playground.html' , 'en' , published = True , in_navigation = True , reverse_id = 'a' ) b = create_page ( 'B' , 'nav_playground.html' , 'en' , parent = a , published = True , in_navigation = True ) create_page ( 'C' , 'nav_playground.html' , 'en' , parent = b , published = True , in_navigation = True ) create_page ( 'D' , 'nav_playground.html' , 'en' , parent = self . reload ( b ) , published = True , in_navigation = False ) with LanguageOverride ( 'en' ) : context = self . get_context ( a . get_absolute_url ( ) ) with self . assertNumQueries ( 5 ) : tpl = Template ( "{% load menu_tags %}{% show_menu_below_id 'a' 0 100 100 100 %}" ) tpl . render ( context ) class ViewPermissionMenuTests ( SettingsOverrideTestCase ) : settings_overrides = { : False , : True , : 'all' , } def get_request ( self , user = None ) : attrs = { : user or AnonymousUser ( ) , : { } , : { } , } return type ( 'Request' , ( object , ) , attrs ) def test_public_for_all_staff ( self ) : request = self . get_request ( ) request . user . is_staff = True page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] result = get_visible_pages ( request , pages ) self . assertEqual ( result , [ 1 ] ) def test_public_for_all_staff_assert_num_queries ( self ) : request = self . get_request ( ) request . user . is_staff = True page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] with self . assertNumQueries ( 1 ) : get_visible_pages ( request , pages ) def test_public_for_all ( self ) : user = User . objects . create_user ( 'user' , 'user@domain.com' , 'user' ) request = self . get_request ( user ) page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] result = get_visible_pages ( request , pages ) self . assertEqual ( result , [ 1 ] ) def test_public_for_all_num_queries ( self ) : user = User . objects . create_user ( 'user' , 'user@domain.com' , 'user' ) request = self . get_request ( user ) site = Site ( ) site . pk = 1 page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] with self . assertNumQueries ( 2 ) : get_visible_pages ( request , pages , site ) def test_unauthed ( self ) : request = self . get_request ( ) page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] result = get_visible_pages ( request , pages ) self . assertEqual ( result , [ 1 ] ) def test_unauthed_num_queries ( self ) : request = self . get_request ( ) site = Site ( ) site . pk = 1 page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] with self . assertNumQueries ( 1 ) : get_visible_pages ( request , pages , site ) def test_authed_basic_perm ( self ) : with SettingsOverride ( CMS_PUBLIC_FOR = 'staff' ) : user = User ( ) user . username = "test" user . is_staff = True user . save ( ) user . user_permissions . add ( Permission . objects . get ( codename = 'view_page' ) ) request = self . get_request ( user ) page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] result = get_visible_pages ( request , pages ) self . assertEqual ( result , [ 1 ] ) def test_authed_basic_perm_num_queries ( self ) : site = Site ( ) site . pk = 1 with SettingsOverride ( CMS_PUBLIC_FOR = 'staff' ) : user = User ( ) user . username = "test" user . is_staff = True user . save ( ) user . user_permissions . add ( Permission . objects . get ( codename = 'view_page' ) ) request = self . get_request ( user ) page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] with self . assertNumQueries ( 2 ) : get_visible_pages ( request , pages , site ) def test_authed_no_access ( self ) : with SettingsOverride ( CMS_PUBLIC_FOR = 'staff' ) : user = User . objects . create_user ( 'user' , 'user@domain.com' , 'user' ) request = self . get_request ( user ) page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] result = get_visible_pages ( request , pages ) self . assertEqual ( result , [ ] ) def test_authed_no_access_num_queries ( self ) : site = Site ( ) site . pk = 1 with SettingsOverride ( CMS_PUBLIC_FOR = 'staff' ) : user = User . objects . create_user ( 'user' , 'user@domain.com' , 'user' ) request = self . get_request ( user ) page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] with self . assertNumQueries ( 2 ) : get_visible_pages ( request , pages , site ) def test_unauthed_no_access ( self ) : with SettingsOverride ( CMS_PUBLIC_FOR = 'staff' ) : request = self . get_request ( ) page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] result = get_visible_pages ( request , pages ) self . assertEqual ( result , [ ] ) def test_unauthed_no_access_num_queries ( self ) : site = Site ( ) site . pk = 1 request = self . get_request ( ) page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] with self . assertNumQueries ( 1 ) : get_visible_pages ( request , pages , site ) def test_page_permissions ( self ) : with SettingsOverride ( CMS_PUBLIC_FOR = 'staff' ) : user = User . objects . create_user ( 'user' , 'user@domain.com' , 'user' ) request = self . get_request ( user ) page = create_page ( 'A' , 'nav_playground.html' , 'en' ) PagePermission . objects . create ( can_view = True , user = user , page = page ) pages = [ page ] result = get_visible_pages ( request , pages ) self . assertEqual ( result , [ 1 ] ) def test_page_permissions_num_queries ( self ) : with SettingsOverride ( CMS_PUBLIC_FOR = 'staff' ) : user = User . objects . create_user ( 'user' , 'user@domain.com' , 'user' ) request = self . get_request ( user ) page = create_page ( 'A' , 'nav_playground.html' , 'en' ) PagePermission . objects . create ( can_view = True , user = user , page = page ) pages = [ page ] with self . assertNumQueries ( 2 ) : get_visible_pages ( request , pages ) def test_page_permissions_view_groups ( self ) : with SettingsOverride ( CMS_PUBLIC_FOR = 'staff' ) : user = User . objects . create_user ( 'user' , 'user@domain.com' , 'user' ) group = Group . objects . create ( name = 'testgroup' ) group . user_set . add ( user ) request = self . get_request ( user ) page = create_page ( 'A' , 'nav_playground.html' , 'en' ) PagePermission . objects . create ( can_view = True , group = group , page = page ) pages = [ page ] result = get_visible_pages ( request , pages ) self . assertEqual ( result , [ 1 ] ) def test_page_permissions_view_groups_num_queries ( self ) : with SettingsOverride ( CMS_PUBLIC_FOR = 'staff' ) : user = User . objects . create_user ( 'user' , 'user@domain.com' , 'user' ) group = Group . objects . create ( name = 'testgroup' ) group . user_set . add ( user ) request = self . get_request ( user ) page = create_page ( 'A' , 'nav_playground.html' , 'en' ) PagePermission . objects . create ( can_view = True , group = group , page = page ) pages = [ page ] with self . assertNumQueries ( 3 ) : get_visible_pages ( request , pages ) def test_global_permission ( self ) : with SettingsOverride ( CMS_PUBLIC_FOR = 'staff' ) : user = User . objects . create_user ( 'user' , 'user@domain.com' , 'user' ) GlobalPagePermission . objects . create ( can_view = True , user = user ) request = self . get_request ( user ) page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] result = get_visible_pages ( request , pages ) self . assertEqual ( result , [ 1 ] ) def test_global_permission_num_queries ( self ) : site = Site ( ) site . pk = 1 user = User . objects . create_user ( 'user' , 'user@domain.com' , 'user' ) GlobalPagePermission . objects . create ( can_view = True , user = user ) request = self . get_request ( user ) site = Site ( ) site . pk = 1 page = Page ( ) page . pk = 1 page . level = 0 page . tree_id = 1 pages = [ page ] with self . assertNumQueries ( 2 ) : get_visible_pages ( request , pages , site ) class SoftrootTests ( SettingsOverrideTestCase ) : settings_overrides = { : False , : True , : False } def test_basic_home ( self ) : stdkwargs = { : 'nav_playground.html' , : 'en' , : True , : True , } home = create_page ( "Home" , ** stdkwargs ) projects = create_page ( "Projects" , parent = Page . objects . get ( pk = home . pk ) , soft_root = True , ** stdkwargs ) djangocms = create_page ( "django CMS" , parent = Page . objects . get ( pk = projects . pk ) , ** stdkwargs ) djangoshop = create_page ( "django Shop" , parent = Page . objects . get ( pk = projects . pk ) , ** stdkwargs ) people = create_page ( "People" , parent = Page . objects . get ( pk = home . pk ) , ** stdkwargs ) context = self . get_context ( home . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 100 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 1 ) homenode = nodes [ 0 ] self . assertEqual ( homenode . id , home . pk ) self . assertEqual ( len ( homenode . children ) , 2 ) projectsnode , peoplenode = homenode . children self . assertEqual ( projectsnode . id , projects . pk ) self . assertEqual ( peoplenode . id , people . pk ) self . assertEqual ( len ( projectsnode . children ) , 2 ) cmsnode , shopnode = projectsnode . children self . assertEqual ( cmsnode . id , djangocms . pk ) self . assertEqual ( shopnode . id , djangoshop . pk ) self . assertEqual ( len ( cmsnode . children ) , 0 ) self . assertEqual ( len ( shopnode . children ) , 0 ) self . assertEqual ( len ( peoplenode . children ) , 0 ) def test_basic_projects ( self ) : stdkwargs = { : 'nav_playground.html' , : 'en' , : True , : True , } home = create_page ( "Home" , ** stdkwargs ) projects = create_page ( "Projects" , parent = Page . objects . get ( pk = home . pk ) , soft_root = True , ** stdkwargs ) djangocms = create_page ( "django CMS" , parent = Page . objects . get ( pk = projects . pk ) , ** stdkwargs ) djangoshop = create_page ( "django Shop" , parent = Page . objects . get ( pk = projects . pk ) , ** stdkwargs ) people = create_page ( "People" , parent = Page . objects . get ( pk = home . pk ) , ** stdkwargs ) context = self . get_context ( projects . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 100 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 1 ) projectsnode = nodes [ 0 ] self . assertEqual ( projectsnode . id , projects . pk ) self . assertEqual ( len ( projectsnode . children ) , 2 ) cmsnode , shopnode = projectsnode . children self . assertEqual ( cmsnode . id , djangocms . pk ) self . assertEqual ( shopnode . id , djangoshop . pk ) self . assertEqual ( len ( cmsnode . children ) , 0 ) self . assertEqual ( len ( shopnode . children ) , 0 ) def test_basic_djangocms ( self ) : stdkwargs = { : 'nav_playground.html' , : 'en' , : True , : True , } home = create_page ( "Home" , ** stdkwargs ) projects = create_page ( "Projects" , parent = Page . objects . get ( pk = home . pk ) , soft_root = True , ** stdkwargs ) djangocms = create_page ( "django CMS" , parent = Page . objects . get ( pk = projects . pk ) , ** stdkwargs ) djangoshop = create_page ( "django Shop" , parent = Page . objects . get ( pk = projects . pk ) , ** stdkwargs ) people = create_page ( "People" , parent = Page . objects . get ( pk = home . pk ) , ** stdkwargs ) context = self . get_context ( djangocms . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 100 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 1 ) projectsnode = nodes [ 0 ] self . assertEqual ( projectsnode . id , projects . pk ) self . assertEqual ( len ( projectsnode . children ) , 2 ) cmsnode , shopnode = projectsnode . children self . assertEqual ( cmsnode . id , djangocms . pk ) self . assertEqual ( shopnode . id , djangoshop . pk ) self . assertEqual ( len ( cmsnode . children ) , 0 ) self . assertEqual ( len ( shopnode . children ) , 0 ) def test_basic_people ( self ) : stdkwargs = { : 'nav_playground.html' , : 'en' , : True , : True , } home = create_page ( "Home" , ** stdkwargs ) projects = create_page ( "Projects" , parent = Page . objects . get ( pk = home . pk ) , soft_root = True , ** stdkwargs ) djangocms = create_page ( "django CMS" , parent = Page . objects . get ( pk = projects . pk ) , ** stdkwargs ) djangoshop = create_page ( "django Shop" , parent = Page . objects . get ( pk = projects . pk ) , ** stdkwargs ) people = create_page ( "People" , parent = Page . objects . get ( pk = home . pk ) , ** stdkwargs ) context = self . get_context ( home . get_absolute_url ( ) ) tpl = Template ( "{% load menu_tags %}{% show_menu 0 100 100 100 %}" ) tpl . render ( context ) nodes = context [ 'children' ] self . assertEqual ( len ( nodes ) , 1 ) homenode = nodes [ 0 ] self . assertEqual ( homenode . id , home . pk ) self . assertEqual ( len ( homenode . children ) , 2 ) projectsnode , peoplenode = homenode . children self . assertEqual ( projectsnode . id , projects . pk ) self . assertEqual ( peoplenode . id , people . pk ) self . assertEqual ( len ( projectsnode . children ) , 2 ) cmsnode , shopnode = projectsnode . children self . assertEqual ( cmsnode . id , djangocms . pk ) self . assertEqual ( shopnode . id , djangoshop . pk ) self . assertEqual ( len ( cmsnode . children ) , 0 ) self . assertEqual ( len ( shopnode . children ) , 0 ) self . assertEqual ( len ( peoplenode . children ) , 0 )
