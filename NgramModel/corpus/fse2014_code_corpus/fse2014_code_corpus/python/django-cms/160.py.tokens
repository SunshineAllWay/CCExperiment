from cms . plugin_base import CMSPluginBase from cms . utils . moderator import get_cmsplugin_queryset from cms . utils import get_language_from_request from cms . plugin_pool import plugin_pool from django . utils . translation import ugettext_lazy as _ from models import InheritPagePlaceholder from django . conf import settings from cms . plugins . inherit . forms import InheritForm import copy class InheritPagePlaceholderPlugin ( CMSPluginBase ) : model = InheritPagePlaceholder name = _ ( "Inherit Plugins from Page" ) render_template = "cms/plugins/inherit_plugins.html" form = InheritForm admin_preview = False page_only = True def render ( self , context , instance , placeholder ) : template_vars = { : placeholder , } template_vars [ 'object' ] = instance lang = instance . from_language request = context . get ( 'request' , None ) if not lang : if context . has_key ( 'request' ) : lang = get_language_from_request ( request ) else : lang = settings . LANGUAGE_CODE if instance . from_page : page = instance . from_page else : page = instance . page if not instance . page . publisher_is_draft and page . publisher_is_draft : page = page . publisher_public plugins = get_cmsplugin_queryset ( request ) . filter ( placeholder__page = page , language = lang , placeholder__slot__iexact = placeholder , parent__isnull = True ) . order_by ( 'position' ) . select_related ( ) plugin_output = [ ] template_vars [ 'parent_plugins' ] = plugins for plg in plugins : tmpctx = copy . copy ( context ) tmpctx . update ( template_vars ) inst , name = plg . get_plugin_instance ( ) outstr = inst . render_plugin ( tmpctx , placeholder ) plugin_output . append ( outstr ) template_vars [ 'parent_output' ] = plugin_output context . update ( template_vars ) return context def get_form ( self , request , obj = None , ** kwargs ) : Form = super ( InheritPagePlaceholderPlugin , self ) . get_form ( request , obj , ** kwargs ) class FakeForm ( object ) : def __init__ ( self , Form , site ) : self . Form = Form self . site = site self . base_fields = Form . base_fields def __call__ ( self , * args , ** kwargs ) : form = self . Form ( * args , ** kwargs ) form . for_site ( self . site ) return form return FakeForm ( Form , self . cms_plugin_instance . page . site or self . page . site )
