class PublisherOptions ( object ) : exclude_fields = [ ] def __init__ ( self , name , bases , publisher_meta = None ) : if publisher_meta and getattr ( publisher_meta , 'exclude_fields' , None ) : self . exclude_fields = getattr ( publisher_meta , 'exclude_fields' , [ ] ) return exclude_fields = set ( ) all_bases = [ ] for direct_base in bases : all_bases . append ( direct_base ) for base in direct_base . mro ( ) : if not base in all_bases : all_bases . append ( base ) for base in reversed ( all_bases ) : pmeta = getattr ( base , '_publisher_meta' , None ) or getattr ( base , 'PublisherMeta' , None ) if not pmeta : continue base_exclude_fields = getattr ( pmeta , 'exclude_fields' , None ) base_exclude_fields_append = getattr ( pmeta , 'exclude_fields_append' , None ) if base_exclude_fields and base_exclude_fields_append : raise ValueError , ( "Model %s extends defines PublisherMeta, but " + ) % ( name , ) if base_exclude_fields : exclude_fields = exclude_fields . union ( base_exclude_fields ) elif base_exclude_fields_append : exclude_fields = exclude_fields . union ( base_exclude_fields_append ) if publisher_meta and getattr ( publisher_meta , 'exclude_fields_append' , None ) : exclude_fields = exclude_fields . union ( publisher_meta . exclude_fields_append ) self . exclude_fields = list ( exclude_fields )
