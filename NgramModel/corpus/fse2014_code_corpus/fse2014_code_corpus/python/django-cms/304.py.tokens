from cms . exceptions import NoPermissionsException from cms . models import Page , PagePermission , GlobalPagePermission from cms . plugin_pool import plugin_pool from django . conf import settings from django . contrib . auth . models import User , Group from django . contrib . sites . models import Site from django . db . models import Q from django . utils . translation import ugettext_lazy as _ try : from threading import local except ImportError : from django . utils . _threading_local import local _thread_locals = local ( ) def set_current_user ( user ) : _thread_locals . user = user def get_current_user ( ) : return getattr ( _thread_locals , 'user' , None ) def has_page_add_permission ( request ) : opts = Page . _meta if request . user . is_superuser : return True target = request . GET . get ( 'target' , None ) position = request . GET . get ( 'position' , None ) if target is not None : try : page = Page . objects . get ( pk = target ) except Page . DoesNotExist : return False if ( request . user . has_perm ( opts . app_label + '.' + opts . get_add_permission ( ) ) and GlobalPagePermission . objects . with_user ( request . user ) . filter ( can_add = True , sites__in = [ page . site_id ] ) ) : return True if position in ( "first-child" , "last-child" ) : return page . has_add_permission ( request ) elif position in ( "left" , "right" ) : if page . parent_id : return has_generic_permission ( page . parent_id , request . user , "add" , page . site ) else : from cms . utils . plugins import current_site site = current_site ( request ) if ( request . user . has_perm ( opts . app_label + '.' + opts . get_add_permission ( ) ) and GlobalPagePermission . objects . with_user ( request . user ) . filter ( can_add = True , sites__in = [ site ] ) ) : return True return False def has_any_page_change_permissions ( request ) : from cms . utils . plugins import current_site return PagePermission . objects . filter ( page__site = current_site ( request ) ) . filter ( ( Q ( user = request . user ) | Q ( group__in = request . user . groups . all ( ) ) ) ) . exists ( ) def has_page_change_permission ( request ) : from cms . utils . plugins import current_site opts = Page . _meta if request . user . is_superuser or ( request . user . has_perm ( opts . app_label + '.' + opts . get_change_permission ( ) ) and ( GlobalPagePermission . objects . with_user ( request . user ) . filter ( can_change = True , sites__in = [ current_site ( request ) ] ) . exists ( ) ) or has_any_page_change_permissions ( request ) ) : return True return False def get_any_page_view_permissions ( request , page ) : return PagePermission . objects . for_page ( page = page ) . filter ( can_view = True ) def get_user_permission_level ( user ) : if ( user . is_superuser or GlobalPagePermission . objects . with_can_change_permissions ( user ) . exists ( ) ) : return 0 try : permission = PagePermission . objects . with_can_change_permissions ( user ) . order_by ( 'page__level' ) [ 0 ] except IndexError : raise NoPermissionsException return permission . page . level def get_subordinate_users ( user ) : if user . is_superuser or GlobalPagePermission . objects . with_can_change_permissions ( user ) : return User . objects . all ( ) site = Site . objects . get_current ( ) page_id_allow_list = Page . permissions . get_change_permissions_id_list ( user , site ) try : user_level = get_user_permission_level ( user ) except NoPermissionsException : qs = User . objects . distinct ( ) . filter ( Q ( is_staff = True ) & Q ( pageuser__created_by = user ) & Q ( pagepermission__page = None ) ) qs = qs . exclude ( pk = user . id ) . exclude ( groups__user__pk = user . id ) return qs qs = User . objects . distinct ( ) . filter ( Q ( is_staff = True ) & ( Q ( pagepermission__page__id__in = page_id_allow_list ) & Q ( pagepermission__page__level__gte = user_level ) ) | ( Q ( pageuser__created_by = user ) & Q ( pagepermission__page = None ) ) ) qs = qs . exclude ( pk = user . id ) . exclude ( groups__user__pk = user . id ) return qs def get_subordinate_groups ( user ) : if ( user . is_superuser or GlobalPagePermission . objects . with_can_change_permissions ( user ) ) : return Group . objects . all ( ) site = Site . objects . get_current ( ) page_id_allow_list = Page . permissions . get_change_permissions_id_list ( user , site ) try : user_level = get_user_permission_level ( user ) except NoPermissionsException : qs = Group . objects . distinct ( ) . filter ( Q ( pageusergroup__created_by = user ) & Q ( pagepermission__page = None ) ) return qs qs = Group . objects . distinct ( ) . filter ( ( Q ( pagepermission__page__id__in = page_id_allow_list ) & Q ( pagepermission__page__level__gte = user_level ) ) | ( Q ( pageusergroup__created_by = user ) & Q ( pagepermission__page = None ) ) ) return qs def has_global_change_permissions_permission ( user ) : opts = GlobalPagePermission . _meta if user . is_superuser or ( user . has_perm ( opts . app_label + '.' + opts . get_change_permission ( ) ) and GlobalPagePermission . objects . with_user ( user ) . filter ( can_change = True ) ) : return True return False def has_generic_permission ( page_id , user , attr , site ) : func = getattr ( Page . permissions , "get_%s_id_list" % attr ) permission = func ( user , site ) return permission == Page . permissions . GRANT_ALL or page_id in permission def get_user_sites_queryset ( user ) : qs = Site . objects . all ( ) if user . is_superuser : return qs global_ids = GlobalPagePermission . objects . with_user ( user ) . filter ( Q ( can_add = True ) | Q ( can_change = True ) ) . values_list ( 'id' , flat = True ) q = Q ( ) if global_ids : q = Q ( globalpagepermission__id__in = global_ids ) if not qs . filter ( q ) . exists ( ) : return qs q |= Q ( Q ( page__pagepermission__user = user ) | Q ( page__pagepermission__group__user = user ) ) & ( Q ( Q ( page__pagepermission__can_add = True ) | Q ( page__pagepermission__can_change = True ) ) ) return qs . filter ( q ) . distinct ( ) def has_plugin_permission ( user , plugin_type , permission_type ) : plugin_class = plugin_pool . get_plugin ( plugin_type ) plugin_model = plugin_class . model plugin_opts = plugin_model . _meta return user . has_perm ( '%s.%s_%s' % ( plugin_opts . app_label , permission_type , plugin_opts . object_name . lower ( ) ) )
