from StringIO import StringIO from django . conf import settings from django . core . handlers . wsgi import WSGIRequest from django . http import SimpleCookie from django . test . client import ( FakePayload , MULTIPART_CONTENT , encode_multipart , BOUNDARY , CONTENT_TYPE_RE ) from django . utils . encoding import smart_str from urllib import urlencode from urlparse import urlparse import urllib class RequestFactory ( object ) : def __init__ ( self , ** defaults ) : self . defaults = defaults self . cookies = SimpleCookie ( ) self . errors = StringIO ( ) def _base_environ ( self , ** request ) : environ = { : self . cookies . output ( header = '' , sep = '; ' ) , : '/' , : '' , : '127.0.0.1' , : 'GET' , : '' , : 'testserver' , : '80' , : 'HTTP/1.1' , : ( 1 , 0 ) , : 'http' , : self . errors , : True , : False , : False , } environ . update ( self . defaults ) environ . update ( request ) return environ def request ( self , ** request ) : return WSGIRequest ( self . _base_environ ( ** request ) ) def _get_path ( self , parsed ) : if parsed [ 3 ] : return urllib . unquote ( parsed [ 2 ] + ";" + parsed [ 3 ] ) else : return urllib . unquote ( parsed [ 2 ] ) def get ( self , path , data = { } , ** extra ) : parsed = urlparse ( path ) r = { : 'text/html; charset=utf-8' , : self . _get_path ( parsed ) , : urlencode ( data , doseq = True ) or parsed [ 4 ] , : 'GET' , : FakePayload ( '' ) } r . update ( extra ) return self . request ( ** r ) def post ( self , path , data = { } , content_type = MULTIPART_CONTENT , ** extra ) : if content_type is MULTIPART_CONTENT : post_data = encode_multipart ( BOUNDARY , data ) else : match = CONTENT_TYPE_RE . match ( content_type ) if match : charset = match . group ( 1 ) else : charset = settings . DEFAULT_CHARSET post_data = smart_str ( data , encoding = charset ) parsed = urlparse ( path ) r = { : len ( post_data ) , : content_type , : self . _get_path ( parsed ) , : parsed [ 4 ] , : 'POST' , : FakePayload ( post_data ) , } r . update ( extra ) return self . request ( ** r ) def head ( self , path , data = { } , ** extra ) : parsed = urlparse ( path ) r = { : 'text/html; charset=utf-8' , : self . _get_path ( parsed ) , : urlencode ( data , doseq = True ) or parsed [ 4 ] , : 'HEAD' , : FakePayload ( '' ) } r . update ( extra ) return self . request ( ** r ) def options ( self , path , data = { } , ** extra ) : parsed = urlparse ( path ) r = { : self . _get_path ( parsed ) , : urlencode ( data , doseq = True ) or parsed [ 4 ] , : 'OPTIONS' , : FakePayload ( '' ) } r . update ( extra ) return self . request ( ** r ) def put ( self , path , data = { } , content_type = MULTIPART_CONTENT , ** extra ) : if content_type is MULTIPART_CONTENT : post_data = encode_multipart ( BOUNDARY , data ) else : post_data = data query_string = None if not isinstance ( data , basestring ) : query_string = urlencode ( data , doseq = True ) parsed = urlparse ( path ) r = { : len ( post_data ) , : content_type , : self . _get_path ( parsed ) , : query_string or parsed [ 4 ] , : 'PUT' , : FakePayload ( post_data ) , } r . update ( extra ) return self . request ( ** r ) def delete ( self , path , data = { } , ** extra ) : parsed = urlparse ( path ) r = { : self . _get_path ( parsed ) , : urlencode ( data , doseq = True ) or parsed [ 4 ] , : 'DELETE' , : FakePayload ( '' ) } r . update ( extra )
