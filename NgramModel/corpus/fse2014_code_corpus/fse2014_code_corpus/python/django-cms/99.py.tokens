from cms . toolbar . constants import ALIGNMENTS from django . conf import settings from django . core . exceptions import ImproperlyConfigured from django . utils import simplejson from django . utils . encoding import force_unicode from django . utils . functional import Promise class Serializable ( object ) : base_attributes = [ ] extra_attributes = [ ] def as_json ( self , context , ** kwargs ) : data = self . serialize ( context , ** kwargs ) return simplejson . dumps ( data ) def serialize ( self , context , ** kwargs ) : data = { } for python , javascript in self . base_attributes : self . _populate ( data , python , javascript , context , ** kwargs ) for python , javascript in self . extra_attributes : self . _populate ( data , python , javascript , context , ** kwargs ) data . update ( self . get_extra_data ( context , ** kwargs ) ) return data def _populate ( self , container , python , javascript , context , ** kwargs ) : if hasattr ( self , 'serialize_%s' % python ) : meth = getattr ( self , 'serialize_%s' % python ) value = meth ( context , ** kwargs ) else : value = getattr ( self , python ) if isinstance ( value , Promise ) : value = force_unicode ( value ) container [ javascript ] = value def get_extra_data ( self , context , ** kwargs ) : return { } class Toolbar ( Serializable ) : def __init__ ( self , request ) : self . request = request def get_items ( self , context , ** kwargs ) : return [ ] def get_extra_data ( self , context , ** kwargs ) : raw_items = self . get_items ( context , ** kwargs ) items = [ ] for item in raw_items : items . append ( item . serialize ( context , toolbar = self , ** kwargs ) ) return { : settings . TEMPLATE_DEBUG , : items , } def request_hook ( self ) : return None class BaseItem ( Serializable ) : base_attributes = [ ( 'order' , 'order' ) , ( 'alignment' , 'dir' ) , ( 'item_type' , 'type' ) , ( 'css_class' , 'cls' ) , ] extra_attributes = [ ] alignment = 'left' def __init__ ( self , alignment , css_class_suffix ) : if alignment not in ALIGNMENTS : raise ImproperlyConfigured ( "Item alignment %r is not valid, must " % alignment ) self . alignment = alignment self . css_class_suffix = css_class_suffix self . css_class = 'cms_toolbar-item_%s' % self . css_class_suffix def serialize ( self , context , toolbar , ** kwargs ) : counter_attr = 'counter_%s' % self . alignment current = getattr ( toolbar , counter_attr , 0 ) this = current + 1 self . order = this * 10 setattr ( toolbar , counter_attr , this )
