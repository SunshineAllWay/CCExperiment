from __future__ import with_statement from cms . api import create_page , add_plugin from cms . models . pluginmodel import CMSPlugin from cms . plugins . text . models import Text from cms . test_utils . testcases import ( CMSTestCase , URL_CMS_PLUGIN_ADD , URL_CMS_PLUGIN_EDIT , URL_CMS_PLUGIN_REMOVE ) from django . conf import settings from django . core . urlresolvers import reverse class SecurityTests ( CMSTestCase ) : def get_data ( self ) : page = create_page ( "page" , "nav_playground.html" , "en" ) placeholder = page . placeholders . get ( slot = 'body' ) superuser = self . get_superuser ( ) staff = self . get_staff_user_with_no_permissions ( ) return page , placeholder , superuser , staff def test_add ( self ) : page , placeholder , superuser , staff = self . get_data ( ) plugin_data = { : "TextPlugin" , : settings . LANGUAGES [ 0 ] [ 0 ] , : page . placeholders . get ( slot = "body" ) . pk , } self . assertEqual ( CMSPlugin . objects . count ( ) , 0 ) self . client . logout ( ) response = self . client . post ( URL_CMS_PLUGIN_ADD , plugin_data ) self . assertTemplateUsed ( response , 'admin/login.html' ) self . assertEqual ( CMSPlugin . objects . count ( ) , 0 ) self . client . login ( username = 'staff' , password = 'staff' ) response = self . client . post ( URL_CMS_PLUGIN_ADD , plugin_data ) self . assertEqual ( response . status_code , 403 ) self . assertEqual ( CMSPlugin . objects . count ( ) , 0 ) def test_edit ( self ) : page , placeholder , superuser , staff = self . get_data ( ) plugin = add_plugin ( placeholder , 'TextPlugin' , 'en' , body = 'body' ) plugin_data = { : plugin . pk , : 'newbody' , } self . assertEqual ( plugin . body , 'body' ) self . client . logout ( ) url = URL_CMS_PLUGIN_EDIT + '%s/' % plugin . pk response = self . client . post ( url , plugin_data ) self . assertTemplateUsed ( response , 'admin/login.html' ) plugin = self . reload ( plugin ) self . assertEqual ( plugin . body , 'body' ) self . client . login ( username = 'staff' , password = 'staff' ) response = self . client . post ( url , plugin_data ) self . assertEqual ( response . status_code , 403 ) plugin = self . reload ( plugin ) self . assertEqual ( plugin . body , 'body' ) def test_delete ( self ) : page , placeholder , superuser , staff = self . get_data ( ) plugin = add_plugin ( placeholder , 'TextPlugin' , 'en' , body = 'body' ) plugin_data = { : plugin . pk , } plugin = self . reload ( plugin ) self . assertEqual ( plugin . body , 'body' ) self . client . logout ( ) response = self . client . post ( URL_CMS_PLUGIN_REMOVE , plugin_data ) self . assertTemplateUsed ( response , 'admin/login.html' ) self . assertEqual ( CMSPlugin . objects . count ( ) , 1 ) plugin = self . reload ( plugin ) self . assertEqual ( plugin . body , 'body' ) self . client . login ( username = 'staff' , password = 'staff' ) response = self . client . post ( URL_CMS_PLUGIN_REMOVE , plugin_data ) self . assertEqual ( response . status_code , 403 ) self . assertEqual ( CMSPlugin . objects . count ( ) , 1 ) plugin = self . reload ( plugin ) self . assertEqual ( plugin . body , 'body' ) def test_add_ph ( self ) : page , placeholder , superuser , staff = self . get_data ( ) plugin_data = { : "TextPlugin" , : settings . LANGUAGES [ 0 ] [ 0 ] , : page . placeholders . get ( slot = "body" ) . pk , } url = reverse ( 'admin:placeholderapp_example1_add_plugin' ) self . assertEqual ( CMSPlugin . objects . count ( ) , 0 ) self . client . logout ( ) response = self . client . post ( url , plugin_data ) self . assertTemplateUsed ( response , 'admin/login.html' ) self . assertEqual ( CMSPlugin . objects . count ( ) , 0 ) self . client . login ( username = 'staff' , password = 'staff' ) response = self . client . post ( url , plugin_data ) self . assertEqual ( response . status_code , 403 ) self . assertEqual ( CMSPlugin . objects . count ( ) , 0 ) def test_edit_ph ( self ) : page , placeholder , superuser , staff = self . get_data ( ) plugin = add_plugin ( placeholder , 'TextPlugin' , 'en' , body = 'body' ) url = reverse ( 'admin:placeholderapp_example1_edit_plugin' , args = ( plugin . pk , ) ) plugin_data = { : 'newbody' , : 'en' , : plugin . pk , } plugin = self . reload ( plugin ) self . assertEqual ( plugin . body , 'body' ) self . client . logout ( ) response = self . client . post ( url , plugin_data ) self . assertTemplateUsed ( response , 'admin/login.html' ) plugin = self . reload ( plugin ) self . assertEqual ( plugin . body , 'body' ) self . client . login ( username = 'staff' , password = 'staff' ) response = self . client . post ( url , plugin_data ) self . assertEqual ( response . status_code , 403 ) plugin = self . reload ( plugin ) self . assertEqual ( plugin . body , 'body' ) def test_delete_ph ( self ) : page , placeholder , superuser , staff = self . get_data ( ) plugin = add_plugin ( placeholder , 'TextPlugin' , 'en' , body = 'body' ) plugin_data = { : plugin . pk , } plugin = self . reload ( plugin ) self . assertEqual ( plugin . body , 'body' ) url = reverse ( 'admin:placeholderapp_example1_remove_plugin' ) self . client . logout ( ) response = self . client . post ( url , plugin_data ) self . assertTemplateUsed ( response , 'admin/login.html' ) self . assertEqual ( CMSPlugin . objects . count ( ) , 1 ) self . client . login ( username = 'staff' , password = 'staff' ) response = self . client . post ( url , plugin_data ) self . assertEqual ( response . status_code , 403 ) self . assertEqual ( CMSPlugin . objects . count ( ) , 1 ) def test_text_plugin_xss ( self ) : page , placeholder , superuser , staff = self . get_data ( ) with self . login_user_context ( superuser ) : plugin = add_plugin ( placeholder , 'TextPlugin' , 'en' , body = 'body' ) data = { : "<div onload='do_evil_stuff();'>divcontent</div><a href='javascript:do_evil_stuff()'>acontent</a>" } edit_url = '%s%s/' % ( URL_CMS_PLUGIN_EDIT , plugin . pk ) response = self . client . post ( edit_url , data ) self . assertEquals ( response . status_code , 200 ) txt = Text . objects . all ( ) [ 0 ] self . assertEquals ( txt . body , '<div>divcontent</div><a>acontent</a>' )
