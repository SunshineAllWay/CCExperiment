import datetime import cherrypy import sickbeard MESSAGE = 'notice' ERROR = 'error' class Notifications ( object ) : def __init__ ( self ) : self . _messages = [ ] self . _errors = [ ] def message ( self , title , message = '' ) : self . _messages . append ( Notification ( title , message , MESSAGE ) ) def error ( self , title , message = '' ) : self . _errors . append ( Notification ( title , message , ERROR ) ) def get_notifications ( self ) : self . _errors = [ x for x in self . _errors if not x . is_expired ( ) ] self . _messages = [ x for x in self . _messages if not x . is_expired ( ) ] return [ x . see ( ) for x in self . _errors + self . _messages if x . is_new ( ) ] notifications = Notifications ( ) class Notification ( object ) : def __init__ ( self , title , message = '' , type = None , timeout = None ) : self . title = title self . message = message self . _when = datetime . datetime . now ( ) self . _seen = [ ] if type : self . type = type else : self . type = MESSAGE if timeout : self . _timeout = timeout else : self . _timeout = datetime . timedelta ( minutes = 1 ) def is_new ( self ) : return cherrypy . request . remote . ip not in self . _seen def is_expired ( self ) : return datetime . datetime . now ( ) - self . _when > self . _timeout def see ( self ) : self . _seen . append ( cherrypy . request . remote . ip ) return self class ProgressIndicator ( ) : def __init__ ( self , percentComplete = 0 , currentStatus = { 'title' : '' } ) : self . percentComplete = percentComplete self . currentStatus = currentStatus class ProgressIndicators ( ) : _pi = { 'massUpdate' : [ ] , : [ ] , : [ ] } @ staticmethod def getIndicator ( name ) : if name not in ProgressIndicators . _pi : return [ ] for curPI in ProgressIndicators . _pi [ name ] : if curPI != None and curPI . percentComplete ( ) == 100 : ProgressIndicators . _pi [ name ] . remove ( curPI ) return ProgressIndicators . _pi [ name ] @ staticmethod def setIndicator ( name , indicator ) : ProgressIndicators . _pi [ name ] . append ( indicator ) class QueueProgressIndicator ( ) : def __init__ ( self , name , queueItemList ) : self . queueItemList = queueItemList self . name = name def numTotal ( self ) : return len ( self . queueItemList ) def numFinished ( self ) : return len ( [ x for x in self . queueItemList if not x . isInQueue ( ) ] ) def numRemaining ( self ) : return len ( [ x for x in self . queueItemList if x . isInQueue ( ) ] ) def nextName ( self ) : for curItem in [ sickbeard . showQueueScheduler . action . currentItem ] + sickbeard . showQueueScheduler . action . queue : if curItem in self . queueItemList : return curItem . name return "Unknown" def percentComplete ( self ) : numFinished = self . numFinished ( ) numTotal = self . numTotal ( ) if numTotal == 0 : return 0 else : return int ( float ( numFinished ) / float ( numTotal ) * 100 ) class LoadingTVShow ( ) : def __init__ ( self , dir ) : self . dir = dir self . show = None
