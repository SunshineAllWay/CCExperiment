from __future__ import with_statement import os import threading import logging import sickbeard from sickbeard import classes NUM_LOGS = 3 LOG_SIZE = 10000000 ERROR = logging . ERROR WARNING = logging . WARNING MESSAGE = logging . INFO DEBUG = logging . DEBUG reverseNames = { u'ERROR' : ERROR , : WARNING , : MESSAGE , : DEBUG } class SBRotatingLogHandler ( object ) : def __init__ ( self , log_file , num_files , num_bytes ) : self . num_files = num_files self . num_bytes = num_bytes self . log_file = log_file self . cur_handler = None self . writes_since_check = 0 self . log_lock = threading . Lock ( ) def initLogging ( self , consoleLogging = True ) : self . log_file = os . path . join ( sickbeard . LOG_DIR , self . log_file ) self . cur_handler = self . _config_handler ( ) logging . getLogger ( 'sickbeard' ) . addHandler ( self . cur_handler ) if consoleLogging : console = logging . StreamHandler ( ) console . setLevel ( logging . INFO ) console . setFormatter ( logging . Formatter ( '%(asctime)s %(levelname)s::%(message)s' , '%H:%M:%S' ) ) logging . getLogger ( 'sickbeard' ) . addHandler ( console ) logging . getLogger ( 'sickbeard' ) . setLevel ( logging . DEBUG ) def _config_handler ( self ) : file_handler = logging . FileHandler ( self . log_file ) file_handler . setLevel ( logging . DEBUG ) file_handler . setFormatter ( logging . Formatter ( '%(asctime)s %(levelname)-8s %(message)s' , '%b-%d %H:%M:%S' ) ) return file_handler def _log_file_name ( self , i ) : return self . log_file + ( '.' + str ( i ) if i else '' ) def _num_logs ( self ) : cur_log = 0 while os . path . isfile ( self . _log_file_name ( cur_log ) ) : cur_log += 1 return cur_log - 1 def _rotate_logs ( self ) : sb_logger = logging . getLogger ( 'sickbeard' ) if self . cur_handler : self . cur_handler . flush ( ) self . cur_handler . close ( ) sb_logger . removeHandler ( self . cur_handler ) for i in range ( self . _num_logs ( ) , - 1 , - 1 ) : cur_file_name = self . _log_file_name ( i ) try : if i >= NUM_LOGS : os . remove ( cur_file_name ) else : os . rename ( cur_file_name , self . _log_file_name ( i + 1 ) ) except WindowsError : pass new_file_handler = self . _config_handler ( ) self . cur_handler = new_file_handler sb_logger . addHandler ( new_file_handler ) def log ( self , toLog , logLevel = MESSAGE ) : with self . log_lock : if self . writes_since_check >= 10 : if os . path . isfile ( self . log_file ) and os . path . getsize ( self . log_file ) >= LOG_SIZE : self . _rotate_logs ( ) self . writes_since_check = 0 else : self . writes_since_check += 1 meThread = threading . currentThread ( ) . getName ( ) message = meThread + u" :: " + toLog out_line = message . encode ( 'utf-8' ) sb_logger = logging . getLogger ( 'sickbeard' ) try : if logLevel == DEBUG : sb_logger . debug ( out_line ) elif logLevel == MESSAGE : sb_logger . info ( out_line ) elif logLevel == WARNING : sb_logger . warning ( out_line ) elif logLevel == ERROR : sb_logger . error ( out_line ) classes . ErrorViewer . add ( classes . UIError ( message ) ) else : sb_logger . log ( logLevel , out_line ) except ValueError : pass sb_log_instance = SBRotatingLogHandler ( 'sickbeard.log' , NUM_LOGS , LOG_SIZE ) def log ( toLog , logLevel = MESSAGE ) :
