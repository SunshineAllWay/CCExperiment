import sickbeard import urllib import datetime from common import USER_AGENT class SickBeardURLopener ( urllib . FancyURLopener ) : version = USER_AGENT class AuthURLOpener ( SickBeardURLopener ) : def __init__ ( self , user , pw ) : self . username = user self . password = pw self . numTries = 0 urllib . FancyURLopener . __init__ ( self ) def prompt_user_passwd ( self , host , realm ) : if self . numTries == 0 : self . numTries = 1 return ( self . username , self . password ) else : return ( '' , '' ) def openit ( self , url ) : self . numTries = 0 return SickBeardURLopener . open ( self , url ) class SearchResult : def __init__ ( self , episodes ) : self . provider = - 1 self . url = "" self . extraInfo = [ ] self . episodes = episodes self . quality = - 1 self . name = "" def __str__ ( self ) : if self . provider == None : return "Invalid provider, unable to print self" myString = self . provider . name + " @ " + self . url + "\n" myString += "Extra Info:\n" for extra in self . extraInfo : myString += " " + extra + "\n" return myString def fileName ( self ) : return self . episodes [ 0 ] . prettyName ( True ) + "." + self . resultType class NZBSearchResult ( SearchResult ) : resultType = "nzb" class NZBDataSearchResult ( SearchResult ) : resultType = "nzbdata" class TorrentSearchResult ( SearchResult ) : resultType = "torrent" class ShowListUI : def __init__ ( self , config , log = None ) : self . config = config self . log = log def selectSeries ( self , allSeries ) : idList = [ x . tvdbid for x in sickbeard . showList ] for curShow in allSeries : if int ( curShow [ 'id' ] ) in idList : return curShow return allSeries [ 0 ] class Proper : def __init__ ( self , name , url , date ) : self . name = name self . url = url self . date = date self . provider = None self . quality = - 1 self . tvdbid = - 1 self . season = - 1 self . episode = - 1 def __str__ ( self ) : return str ( self . date ) + " " + self . name + " " + str ( self . season ) + "x" + str ( self . episode ) + " of " + str ( self . tvdbid ) class ErrorViewer ( ) : errors = [ ] def __init__ ( self ) : ErrorViewer . errors = [ ] @ staticmethod def add ( error ) : ErrorViewer . errors . append ( error ) @ staticmethod def clear ( ) : ErrorViewer . errors = [ ] class UIError ( ) : def __init__ ( self , message ) : self . message = message self . time = datetime . datetime . now ( )
