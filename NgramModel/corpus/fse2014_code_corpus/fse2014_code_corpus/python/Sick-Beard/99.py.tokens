"""A library for integrating pyOpenSSL with CherryPy. The ssl module must be importable for SSL functionality. To use this module, set CherryPyWSGIServer.ssl_adapter to an instance of BuiltinSSLAdapter. ssl_adapter.certificate: the filename of the server SSL certificate. ssl_adapter.private_key: the filename of the server's private key file. """ try : import ssl except ImportError : ssl = None from cherrypy import wsgiserver class BuiltinSSLAdapter ( wsgiserver . SSLAdapter ) : def __init__ ( self , certificate , private_key , certificate_chain = None ) : if ssl is None : raise ImportError ( "You must install the ssl module to use HTTPS." ) self . certificate = certificate self . private_key = private_key self . certificate_chain = certificate_chain def bind ( self , sock ) : return sock def wrap ( self , sock ) : try : s = ssl . wrap_socket ( sock , do_handshake_on_connect = True , server_side = True , certfile = self . certificate , keyfile = self . private_key , ssl_version = ssl . PROTOCOL_SSLv23 ) except ssl . SSLError , e : if e . errno == ssl . SSL_ERROR_EOF : return None , { } elif e . errno == ssl . SSL_ERROR_SSL : if e . args [ 1 ] . endswith ( 'http request' ) : raise wsgiserver . NoSSLError raise return s , self . get_environ ( s ) def get_environ ( self , sock ) : cipher = sock . cipher ( ) ssl_environ = { : "https" , : "on" , : cipher [ 1 ] , : cipher [ 0 ] } return ssl_environ def makefile ( self , sock , mode = 'r' , bufsize = - 1 ) : return wsgiserver . CP_fileobject ( sock , mode , bufsize )
