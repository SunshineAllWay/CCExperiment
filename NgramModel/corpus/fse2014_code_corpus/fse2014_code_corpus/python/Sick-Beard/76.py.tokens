import re import time import urllib import datetime import xml . etree . cElementTree as etree import sickbeard import generic from sickbeard import classes , logger , show_name_helpers from sickbeard import tvcache from sickbeard . exceptions import ex class NZBMatrixProvider ( generic . NZBProvider ) : def __init__ ( self ) : generic . NZBProvider . __init__ ( self , "NZBMatrix" ) self . supportsBacklog = True self . cache = NZBMatrixCache ( self ) self . url = 'http://www.nzbmatrix.com/' def isEnabled ( self ) : return sickbeard . NZBMATRIX def _get_season_search_strings ( self , show , season ) : sceneSearchStrings = set ( show_name_helpers . makeSceneSeasonSearchString ( show , season , "nzbmatrix" ) ) return [ ' ' . join ( sceneSearchStrings ) ] def _get_episode_search_strings ( self , ep_obj ) : sceneSearchStrings = set ( show_name_helpers . makeSceneSearchString ( ep_obj ) ) return [ '("' + '","' . join ( sceneSearchStrings ) + '")' ] def _doSearch ( self , curString , quotes = False , show = None ) : term = re . sub ( '[\.\-]' , ' ' , curString ) . encode ( 'utf-8' ) if quotes : term = "\"" + term + "\"" params = { "term" : term , : sickbeard . USENET_RETENTION , : "download" , : sickbeard . NZBMATRIX_USERNAME , : sickbeard . NZBMATRIX_APIKEY , : "6,41" , : 1 , : 1 , : 1 } if show and show . genre and 'documentary' in show . genre . lower ( ) : params [ 'subcat' ] = params [ 'subcat' ] + ',53,9' searchURL = "https://rss.nzbmatrix.com/rss.php?" + urllib . urlencode ( params ) logger . log ( u"Search string: " + searchURL , logger . DEBUG ) logger . log ( u"Sleeping 10 seconds to respect NZBMatrix's rules" ) time . sleep ( 10 ) searchResult = self . getURL ( searchURL ) if not searchResult : return [ ] try : responseSoup = etree . ElementTree ( etree . XML ( searchResult ) ) items = responseSoup . getiterator ( 'item' ) except Exception , e : logger . log ( u"Error trying to load NZBMatrix RSS feed: " + ex ( e ) , logger . ERROR ) return [ ] results = [ ] for curItem in items : title = curItem . findtext ( 'title' ) url = curItem . findtext ( 'link' ) if title == 'Error: No Results Found For Your Search' : continue if not title or not url : logger . log ( u"The XML returned from the NZBMatrix RSS feed is incomplete, this result is unusable" , logger . ERROR ) continue results . append ( curItem ) return results def findPropers ( self , date = None ) : results = [ ] for curResult in self . _doSearch ( "(PROPER,REPACK)" ) : title = curResult . findtext ( 'title' ) url = curResult . findtext ( 'link' ) . replace ( '&amp;' , '&' ) descriptionStr = curResult . findtext ( 'description' ) dateStr = re . search ( '<b>Added:</b> (\d{4}-\d\d-\d\d \d\d:\d\d:\d\d)' , descriptionStr ) . group ( 1 ) if not dateStr : logger . log ( u"Unable to figure out the date for entry " + title + ", skipping it" ) continue else : resultDate = datetime . datetime . strptime ( dateStr , "%Y-%m-%d %H:%M:%S" ) if date == None or resultDate > date : results . append ( classes . Proper ( title , url , resultDate ) ) return results class NZBMatrixCache ( tvcache . TVCache ) : def __init__ ( self , provider ) : tvcache . TVCache . __init__ ( self , provider ) self . minTime = 25 def _getRSSData ( self ) : url = "https://rss.nzbmatrix.com/rss.php?" urlArgs = { 'page' : 'download' , : sickbeard . NZBMATRIX_USERNAME , : sickbeard . NZBMATRIX_APIKEY , : 1 , : 1 , : 1 , : '6,41' } url += urllib . urlencode ( urlArgs ) logger . log ( u"NZBMatrix cache update URL: " + url , logger . DEBUG ) data = self . provider . getURL ( url ) return data provider = NZBMatrixProvider ( )
