import re import urllib from sickbeard . helpers import sanitizeSceneName from sickbeard import name_cache from sickbeard import logger from sickbeard import db def get_scene_exceptions ( tvdb_id ) : myDB = db . DBConnection ( "cache.db" ) exceptions = myDB . select ( "SELECT show_name FROM scene_exceptions WHERE tvdb_id = ?" , [ tvdb_id ] ) return [ cur_exception [ "show_name" ] for cur_exception in exceptions ] def get_scene_exception_by_name ( show_name ) : myDB = db . DBConnection ( "cache.db" ) exception_result = myDB . select ( "SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ?" , [ show_name . lower ( ) ] ) if exception_result : return int ( exception_result [ 0 ] [ "tvdb_id" ] ) all_exception_results = myDB . select ( "SELECT show_name, tvdb_id FROM scene_exceptions" ) for cur_exception in all_exception_results : cur_exception_name = cur_exception [ "show_name" ] cur_tvdb_id = int ( cur_exception [ "tvdb_id" ] ) if show_name . lower ( ) in ( cur_exception_name . lower ( ) , sanitizeSceneName ( cur_exception_name ) . lower ( ) . replace ( '.' , ' ' ) ) : logger . log ( u"Scene exception lookup got tvdb id " + str ( cur_tvdb_id ) + u", using that" , logger . DEBUG ) return cur_tvdb_id return None def retrieve_exceptions ( ) : exception_dict = { } url = 'http://midgetspy.github.com/sb_tvdb_scene_exceptions/exceptions.txt' open_url = urllib . urlopen ( url ) for cur_line in open_url . readlines ( ) : tvdb_id , sep , aliases = cur_line . partition ( ':' ) if not aliases : continue tvdb_id = int ( tvdb_id ) alias_list = [ re . sub ( r'\\(.)' , r'\1' , x ) for x in re . findall ( r"'(.*?)(?<!\\)',?" , aliases ) ] exception_dict [ tvdb_id ] = alias_list myDB = db . DBConnection ( "cache.db" ) changed_exceptions = False for cur_tvdb_id in exception_dict : existing_exceptions = [ x [ "show_name" ] for x in myDB . select ( "SELECT * FROM scene_exceptions WHERE tvdb_id = ?" , [ cur_tvdb_id ] ) ] for cur_exception in exception_dict [ cur_tvdb_id ] : if cur_exception not in existing_exceptions : myDB . action ( "INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?)" , [ cur_tvdb_id , cur_exception ] ) changed_exceptions = True if changed_exceptions :
