from lib . hachoir_core . field import Field , FieldError from lib . hachoir_core . stream import InputStream from lib . hachoir_core . endian import BIG_ENDIAN , LITTLE_ENDIAN from lib . hachoir_core . event_handler import EventHandler class ParserError ( FieldError ) : pass class MatchError ( FieldError ) : pass class BasicFieldSet ( Field ) : _event_handler = None is_field_set = True endian = None def __init__ ( self , parent , name , stream , description , size ) : assert not parent or issubclass ( parent . __class__ , BasicFieldSet ) assert issubclass ( stream . __class__ , InputStream ) if size is None and self . static_size : assert isinstance ( self . static_size , ( int , long ) ) size = self . static_size self . _parent = parent self . _name = name self . _size = size self . _description = description self . stream = stream self . _field_array_count = { } if not self . endian : assert parent and parent . endian self . endian = parent . endian if parent : self . _address = parent . nextFieldAddress ( ) self . root = parent . root assert id ( self . stream ) == id ( parent . stream ) else : self . _address = 0 self . root = self self . _global_event_handler = None assert self . endian in ( BIG_ENDIAN , LITTLE_ENDIAN ) if ( self . _size is not None ) and ( self . _size <= 0 ) : raise ParserError ( "Invalid parser '%s' size: %s" % ( self . path , self . _size ) ) def reset ( self ) : self . _field_array_count = { } def createValue ( self ) : return None def connectEvent ( self , event_name , handler , local = True ) : assert event_name in ( , , , , ) , "Event name %r is invalid" % event_name if local : if self . _event_handler is None : self . _event_handler = EventHandler ( ) self . _event_handler . connect ( event_name , handler ) else : if self . root . _global_event_handler is None : self . root . _global_event_handler = EventHandler ( ) self . root . _global_event_handler . connect ( event_name , handler ) def raiseEvent ( self , event_name , * args ) : if self . _event_handler is not None : self . _event_handler . raiseEvent ( event_name , * args ) if self . root . _global_event_handler is not None : self . root . _global_event_handler . raiseEvent ( event_name , * args ) def setUniqueFieldName ( self , field ) : key = field . _name [ : - 2 ] try : self . _field_array_count [ key ] += 1 except KeyError : self . _field_array_count [ key ] = 0 field . _name = key + "[%u]" % self . _field_array_count [ key ] def readFirstFields ( self , number ) : number = number - self . current_length if 0 < number : return self . readMoreFields ( number ) else : return 0 def createFields ( self ) : raise NotImplementedError ( ) def __iter__ ( self ) : raise NotImplementedError ( ) def __len__ ( self ) : raise NotImplementedError ( ) def getField ( self , key , const = True ) : raise NotImplementedError ( ) def nextFieldAddress ( self ) : raise NotImplementedError ( ) def getFieldIndex ( self , field ) : raise NotImplementedError ( ) def readMoreFields ( self , number ) : raise NotImplementedError ( )
