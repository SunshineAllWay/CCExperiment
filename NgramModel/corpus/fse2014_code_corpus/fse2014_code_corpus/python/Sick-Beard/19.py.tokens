from __future__ import with_statement import os import shutil import sickbeard from sickbeard import postProcessor from sickbeard import db , helpers , exceptions from sickbeard import encodingKludge as ek from sickbeard . exceptions import ex from sickbeard import logger def logHelper ( logMessage , logLevel = logger . MESSAGE ) : logger . log ( logMessage , logLevel ) return logMessage + u"\n" def processDir ( dirName , nzbName = None , recurse = False ) : returnStr = '' returnStr += logHelper ( u"Processing folder " + dirName , logger . DEBUG ) if ek . ek ( os . path . isdir , dirName ) : dirName = ek . ek ( os . path . realpath , dirName ) elif sickbeard . TV_DOWNLOAD_DIR and ek . ek ( os . path . isdir , sickbeard . TV_DOWNLOAD_DIR ) and ek . ek ( os . path . normpath , dirName ) != ek . ek ( os . path . normpath , sickbeard . TV_DOWNLOAD_DIR ) : dirName = ek . ek ( os . path . join , sickbeard . TV_DOWNLOAD_DIR , ek . ek ( os . path . abspath , dirName ) . split ( os . path . sep ) [ - 1 ] ) returnStr += logHelper ( u"Trying to use folder " + dirName , logger . DEBUG ) if not ek . ek ( os . path . isdir , dirName ) : returnStr += logHelper ( u"Unable to figure out what folder to process. If your downloader and Sick Beard aren't on the same PC make sure you fill out your TV download dir in the config." , logger . DEBUG ) return returnStr if ek . ek ( os . path . basename , dirName ) . startswith ( '_FAILED_' ) : returnStr += logHelper ( u"The directory name indicates it failed to extract, cancelling" , logger . DEBUG ) return returnStr elif ek . ek ( os . path . basename , dirName ) . startswith ( '_UNDERSIZED_' ) : returnStr += logHelper ( u"The directory name indicates that it was previously rejected for being undersized, cancelling" , logger . DEBUG ) return returnStr elif ek . ek ( os . path . basename , dirName ) . startswith ( '_UNPACK_' ) : returnStr += logHelper ( u"The directory name indicates that this release is in the process of being unpacked, skipping" , logger . DEBUG ) return returnStr myDB = db . DBConnection ( ) sqlResults = myDB . select ( "SELECT * FROM tv_shows" ) for sqlShow in sqlResults : if dirName . lower ( ) . startswith ( ek . ek ( os . path . realpath , sqlShow [ "location" ] ) . lower ( ) + os . sep ) or dirName . lower ( ) == ek . ek ( os . path . realpath , sqlShow [ "location" ] ) . lower ( ) : returnStr += logHelper ( u"You're trying to post process an episode that's already been moved to its show dir" , logger . ERROR ) return returnStr fileList = ek . ek ( os . listdir , dirName ) folders = filter ( lambda x : ek . ek ( os . path . isdir , ek . ek ( os . path . join , dirName , x ) ) , fileList ) videoFiles = filter ( helpers . isMediaFile , fileList ) for curFolder in folders : returnStr += logHelper ( u"Recursively processing a folder: " + curFolder , logger . DEBUG ) returnStr += processDir ( ek . ek ( os . path . join , dirName , curFolder ) , recurse = True ) remainingFolders = filter ( lambda x : ek . ek ( os . path . isdir , ek . ek ( os . path . join , dirName , x ) ) , fileList ) for cur_video_file_path in videoFiles : cur_video_file_path = ek . ek ( os . path . join , dirName , cur_video_file_path ) try : processor = postProcessor . PostProcessor ( cur_video_file_path , nzbName ) process_result = processor . process ( ) process_fail_message = "" except exceptions . PostProcessingFailed , e : process_result = False process_fail_message = ex ( e ) returnStr += processor . log if process_result : if len ( videoFiles ) == 1 and not sickbeard . KEEP_PROCESSED_DIR and ek . ek ( os . path . normpath , dirName ) != ek . ek ( os . path . normpath , sickbeard . TV_DOWNLOAD_DIR ) and len ( remainingFolders ) == 0 : returnStr += logHelper ( u"Deleting folder " + dirName , logger . DEBUG ) try : shutil . rmtree ( dirName ) except ( OSError , IOError ) , e : returnStr += logHelper ( u"Warning: unable to remove the folder " + dirName + ": " + ex ( e ) , logger . WARNING ) returnStr += logHelper ( u"Processing succeeded for " + cur_video_file_path ) else : returnStr += logHelper ( u"Processing failed for " + cur_video_file_path + ": " + process_fail_message , logger . WARNING ) return returnStr
