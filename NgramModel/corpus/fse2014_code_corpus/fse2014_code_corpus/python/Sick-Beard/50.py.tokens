import os import re import generic from sickbeard import logger , helpers from sickbeard import encodingKludge as ek class WDTVMetadata ( generic . GenericMetadata ) : def __init__ ( self , show_metadata = False , episode_metadata = False , poster = False , fanart = False , episode_thumbnails = False , season_thumbnails = False ) : generic . GenericMetadata . __init__ ( self , show_metadata , episode_metadata , poster , fanart , episode_thumbnails , season_thumbnails ) self . name = 'WDTV' self . eg_show_metadata = "<i>not supported</i>" self . eg_episode_metadata = "<i>not supported</i>" self . eg_fanart = "<i>not supported</i>" self . eg_poster = "folder.jpg" self . eg_episode_thumbnails = "Season##\\<i>filename</i>.jpg" self . eg_season_thumbnails = "Season##\\folder.jpg" def create_show_metadata ( self , show_obj ) : pass def create_episode_metadata ( self , ep_obj ) : pass def create_fanart ( self , show_obj ) : pass def get_episode_thumb_path ( self , ep_obj ) : if ek . ek ( os . path . isfile , ep_obj . location ) : tbn_filename = helpers . replaceExtension ( ep_obj . location , 'jpg' ) else : return None return tbn_filename def get_season_thumb_path ( self , show_obj , season ) : dir_list = [ x for x in ek . ek ( os . listdir , show_obj . location ) if ek . ek ( os . path . isdir , ek . ek ( os . path . join , show_obj . location , x ) ) ] season_dir_regex = '^Season\s+(\d+)$' season_dir = None for cur_dir in dir_list : if season == 0 and cur_dir == 'Specials' : season_dir = cur_dir break match = re . match ( season_dir_regex , cur_dir , re . I ) if not match : continue cur_season = int ( match . group ( 1 ) ) if cur_season == season : season_dir = cur_dir break if not season_dir : logger . log ( u"Unable to find a season dir for season " + str ( season ) , logger . DEBUG ) return None logger . log ( u"Using " + str ( season_dir ) + "/folder.jpg as season dir for season " + str ( season ) , logger . DEBUG ) return ek . ek ( os . path . join , show_obj . location , season_dir , 'folder.jpg' ) def retrieveShowMetadata ( self , dir ) : return ( None , None ) metadata_class = WDTVMetadata
