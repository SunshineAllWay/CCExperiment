import urllib , urllib2 import time import sickbeard from sickbeard import logger from sickbeard . common import notifyStrings , NOTIFY_SNATCH , NOTIFY_DOWNLOAD from sickbeard . exceptions import ex API_URL = "https://boxcar.io/devices/providers/fWc4sgSmpcN6JujtBmR6/notifications" class BoxcarNotifier : def test_notify ( self , email , title = "Test" ) : return self . _sendBoxcar ( "This is a test notification from SickBeard" , title , email ) def _sendBoxcar ( self , msg , title , email , subscribe = False ) : msg = msg . strip ( ) curUrl = API_URL data = urllib . urlencode ( { : email , : title , : msg . encode ( 'utf-8' ) , : int ( time . time ( ) ) } ) if subscribe : data = urllib . urlencode ( { 'email' : email } ) curUrl = curUrl + "/subscribe" req = urllib2 . Request ( curUrl ) try : handle = urllib2 . urlopen ( req , data ) handle . close ( ) except urllib2 . URLError , e : if not hasattr ( e , 'code' ) : logger . log ( "Boxcar notification failed." + ex ( e ) , logger . ERROR ) return False else : logger . log ( "Boxcar notification failed. Error code: " + str ( e . code ) , logger . WARNING ) if e . code == 404 : logger . log ( "Username is wrong/not a boxcar email. Boxcar will send an email to it" , logger . WARNING ) return False elif e . code == 401 : if subscribe : logger . log ( "Already subscribed to service" , logger . ERROR ) return False else : subscribeNote = self . _sendBoxcar ( msg , title , email , True ) if subscribeNote : logger . log ( "Subscription send" , logger . DEBUG ) return True else : logger . log ( "Subscription could not be send" , logger . ERROR ) return False elif e . code == 400 : logger . log ( "Wrong data send to boxcar" , logger . ERROR ) return False else : logger . log ( "Boxcar notification successful." , logger . DEBUG ) return True def notify_snatch ( self , ep_name , title = notifyStrings [ NOTIFY_SNATCH ] ) : if sickbeard . BOXCAR_NOTIFY_ONSNATCH : self . _notifyBoxcar ( title , ep_name ) def notify_download ( self , ep_name , title = notifyStrings [ NOTIFY_DOWNLOAD ] ) : if sickbeard . BOXCAR_NOTIFY_ONDOWNLOAD : self . _notifyBoxcar ( title , ep_name ) def _notifyBoxcar ( self , title , message = None , username = None , force = False ) : if not sickbeard . USE_BOXCAR and not force : logger . log ( "Notification for Boxcar not enabled, skipping this notification" , logger . DEBUG ) return False if not username : username = sickbeard . BOXCAR_USERNAME logger . log ( "Sending notification for " + message , logger . DEBUG ) self . _sendBoxcar ( message , title , username ) return True notifier = BoxcarNotifier
