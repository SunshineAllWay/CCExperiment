import datetime import re import time import urllib import xml . etree . cElementTree as etree import sickbeard import generic from sickbeard import classes , show_name_helpers from sickbeard import exceptions , logger from sickbeard import tvcache from sickbeard . exceptions import ex class NZBsProvider ( generic . NZBProvider ) : def __init__ ( self ) : generic . NZBProvider . __init__ ( self , "NZBs.org" ) self . supportsBacklog = True self . cache = NZBsCache ( self ) self . url = 'https://secure.nzbs.org/' def isEnabled ( self ) : return sickbeard . NZBS def _checkAuth ( self ) : if sickbeard . NZBS_UID in ( None , "" ) or sickbeard . NZBS_HASH in ( None , "" ) : raise exceptions . AuthException ( "NZBs.org authentication details are empty, check your config" ) def _get_season_search_strings ( self , show , season ) : return [ '^' + x for x in show_name_helpers . makeSceneSeasonSearchString ( show , season ) ] def _get_episode_search_strings ( self , ep_obj ) : return [ '^' + x for x in show_name_helpers . makeSceneSearchString ( ep_obj ) ] def _doSearch ( self , curString , show = None ) : curString = curString . replace ( '.' , ' ' ) params = { "action" : "search" , : curString . encode ( 'utf-8' ) , : 1 , : sickbeard . NZBS_UID , : sickbeard . NZBS_HASH , : sickbeard . USENET_RETENTION , : 100 , : 1 } searchURL = self . url + "rss.php?" + urllib . urlencode ( params ) logger . log ( u"Search string: " + searchURL , logger . DEBUG ) data = self . getURL ( searchURL ) time . sleep ( 5 ) if data == None : return [ ] try : responseSoup = etree . ElementTree ( etree . XML ( data ) ) items = responseSoup . getiterator ( 'item' ) except Exception , e : logger . log ( u"Error trying to load NZBs.org RSS feed: " + ex ( e ) , logger . ERROR ) return [ ] results = [ ] for curItem in items : title = curItem . findtext ( 'title' ) url = curItem . findtext ( 'link' ) if not title or not url : logger . log ( u"The XML returned from the NZBs.org RSS feed is incomplete, this result is unusable: " + data , logger . ERROR ) continue url = url . replace ( '&amp;' , '&' ) if "&i=" not in url and "&h=" not in url : raise exceptions . AuthException ( "The NZBs.org result URL has no auth info which means your UID/hash are incorrect, check your config" ) results . append ( curItem ) return results def findPropers ( self , date = None ) : results = [ ] for curString in ( ".PROPER." , ".REPACK." ) : for curResult in self . _doSearch ( curString ) : match = re . search ( '(\w{3}, \d{1,2} \w{3} \d{4} \d\d:\d\d:\d\d) [\+\-]\d{4}' , curResult . findtext ( 'pubDate' ) ) if not match : continue resultDate = datetime . datetime . strptime ( match . group ( 1 ) , "%a, %d %b %Y %H:%M:%S" ) if date == None or resultDate > date : results . append ( classes . Proper ( curResult . findtext ( 'title' ) , curResult . findtext ( 'link' ) , resultDate ) ) return results class NZBsCache ( tvcache . TVCache ) : def __init__ ( self , provider ) : tvcache . TVCache . __init__ ( self , provider ) self . minTime = 15 def _getRSSData ( self ) : url = self . provider . url + 'rss.php?' urlArgs = { 'type' : 1 , : 1 , : 100 , : sickbeard . NZBS_UID , : sickbeard . NZBS_HASH , : sickbeard . USENET_RETENTION } url += urllib . urlencode ( urlArgs ) logger . log ( u"NZBs cache update URL: " + url , logger . DEBUG ) data = self . provider . getURL ( url ) return data def _checkItemAuth ( self , title , url ) : if "&i=" not in url and "&h=" not in url : raise exceptions . AuthException ( "The NZBs.org result URL has no auth info which means your UID/hash are incorrect, check your config" )
