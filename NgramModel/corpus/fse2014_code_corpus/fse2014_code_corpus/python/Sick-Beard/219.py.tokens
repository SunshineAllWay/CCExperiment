"""SocksiPy - Python SOCKS module. Version 1.00 Copyright 2006 Dan-Haim. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of Dan Haim nor the names of his contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY DAN HAIM "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL DAN HAIM OR HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMANGE. This module provides a standard socket-like interface for Python for tunneling connections through SOCKS proxies. """ import re import socket import struct import sys PROXY_TYPE_SOCKS4 = 1 PROXY_TYPE_SOCKS5 = 2 PROXY_TYPE_HTTP = 3 PROXY_REGEX = re . compile ( r"^(([^:/?#]+):)?(//([^/?#]*):([^/?#]*))?" ) _defaultproxy = None _orgsocket = socket . socket class ProxyError ( Exception ) : pass class GeneralProxyError ( ProxyError ) : pass class Socks5AuthError ( ProxyError ) : pass class Socks5Error ( ProxyError ) : pass class Socks4Error ( ProxyError ) : pass class HTTPError ( ProxyError ) : pass _generalerrors = ( "success" , , , , , ) _socks5errors = ( "succeeded" , , , , , , , , , ) _socks5autherrors = ( "succeeded" , , , , ) _socks4errors = ( "request granted" , , , , ) def parseproxyuri ( proxyurl ) : groups = PROXY_REGEX . match ( proxyurl ) . groups ( ) return ( groups [ 1 ] , groups [ 3 ] , groups [ 4 ] ) def setdefaultproxy ( proxytype = None , addr = None , port = None , rdns = True , username = None , password = None ) : global _defaultproxy _defaultproxy = ( proxytype , addr , port , rdns , username , password ) def wrapmodule ( module ) : if _defaultproxy != None : module . socket . socket = socksocket else : raise GeneralProxyError ( ( 4 , "no proxy specified" ) ) class socksocket ( socket . socket ) : def __init__ ( self , family = socket . AF_INET , type = socket . SOCK_STREAM , proto = 0 , _sock = None ) : _orgsocket . __init__ ( self , family , type , proto , _sock ) if _defaultproxy != None : self . __proxy = _defaultproxy else : self . __proxy = ( None , None , None , None , None , None ) self . __proxysockname = None self . __proxypeername = None def __recvall ( self , count ) : data = self . recv ( count ) while len ( data ) < count : d = self . recv ( count - len ( data ) ) if not d : raise GeneralProxyError ( ( 0 , "connection closed unexpectedly" ) ) data = data + d return data def setproxy ( self , proxytype = None , addr = None , port = None , rdns = True , username = None , password = None ) : self . __proxy = ( proxytype , addr , port , rdns , username , password ) def __negotiatesocks5 ( self , destaddr , destport ) : if ( self . __proxy [ 4 ] != None ) and ( self . __proxy [ 5 ] != None ) : self . sendall ( struct . pack ( 'BBBB' , 0x05 , 0x02 , 0x00 , 0x02 ) ) else : self . sendall ( struct . pack ( 'BBB' , 0x05 , 0x01 , 0x00 ) ) chosenauth = self . __recvall ( 2 ) if chosenauth [ 0 : 1 ] != chr ( 0x05 ) . encode ( ) : self . close ( ) raise GeneralProxyError ( ( 1 , _generalerrors [ 1 ] ) ) if chosenauth [ 1 : 2 ] == chr ( 0x00 ) . encode ( ) : pass elif chosenauth [ 1 : 2 ] == chr ( 0x02 ) . encode ( ) : self . sendall ( chr ( 0x01 ) . encode ( ) + chr ( len ( self . __proxy [ 4 ] ) ) + self . __proxy [ 4 ] + chr ( len ( self . __proxy [ 5 ] ) ) + self . __proxy [ 5 ] ) authstat = self . __recvall ( 2 ) if authstat [ 0 : 1 ] != chr ( 0x01 ) . encode ( ) : self . close ( ) raise GeneralProxyError ( ( 1 , _generalerrors [ 1 ] ) ) if authstat [ 1 : 2 ] != chr ( 0x00 ) . encode ( ) : self . close ( ) raise Socks5AuthError ( ( 3 , _socks5autherrors [ 3 ] ) ) else : self . close ( ) if chosenauth [ 1 ] == chr ( 0xFF ) . encode ( ) : raise Socks5AuthError ( ( 2 , _socks5autherrors [ 2 ] ) ) else : raise GeneralProxyError ( ( 1 , _generalerrors [ 1 ] ) ) req = struct . pack ( 'BBB' , 0x05 , 0x01 , 0x00 ) try : ipaddr = socket . inet_aton ( destaddr ) req = req + chr ( 0x01 ) . encode ( ) + ipaddr except socket . error : if self . __proxy [ 3 ] : ipaddr = None req = req + chr ( 0x03 ) . encode ( ) + chr ( len ( destaddr ) ) . encode ( ) + destaddr else : ipaddr = socket . inet_aton ( socket . gethostbyname ( destaddr ) ) req = req + chr ( 0x01 ) . encode ( ) + ipaddr req = req + struct . pack ( ">H" , destport ) self . sendall ( req ) resp = self . __recvall ( 4 ) if resp [ 0 : 1 ] != chr ( 0x05 ) . encode ( ) : self . close ( ) raise GeneralProxyError ( ( 1 , _generalerrors [ 1 ] ) ) elif resp [ 1 : 2 ] != chr ( 0x00 ) . encode ( ) : self . close ( ) if ord ( resp [ 1 : 2 ] ) <= 8 : raise Socks5Error ( ( ord ( resp [ 1 : 2 ] ) , _socks5errors [ ord ( resp [ 1 : 2 ] ) ] ) ) else : raise Socks5Error ( ( 9 , _socks5errors [ 9 ] ) ) elif resp [ 3 : 4 ] == chr ( 0x01 ) . encode ( ) : boundaddr = self . __recvall ( 4 ) elif resp [ 3 : 4 ] == chr ( 0x03 ) . encode ( ) : resp = resp + self . recv ( 1 ) boundaddr = self . __recvall ( ord ( resp [ 4 : 5 ] ) ) else : self . close ( ) raise GeneralProxyError ( ( 1 , _generalerrors [ 1 ] ) ) boundport = struct . unpack ( ">H" , self . __recvall ( 2 ) ) [ 0 ] self . __proxysockname = ( boundaddr , boundport ) if ipaddr != None : self . __proxypeername = ( socket . inet_ntoa ( ipaddr ) , destport ) else : self . __proxypeername = ( destaddr , destport ) def getproxysockname ( self ) : return self . __proxysockname def getproxypeername ( self ) : return _orgsocket . getpeername ( self ) def getpeername ( self ) : return self . __proxypeername def __negotiatesocks4 ( self , destaddr , destport ) : rmtrslv = False try : ipaddr = socket . inet_aton ( destaddr ) except socket . error : if self . __proxy [ 3 ] : ipaddr = struct . pack ( "BBBB" , 0x00 , 0x00 , 0x00 , 0x01 ) rmtrslv = True else : ipaddr = socket . inet_aton ( socket . gethostbyname ( destaddr ) ) req = struct . pack ( ">BBH" , 0x04 , 0x01 , destport ) + ipaddr if self . __proxy [ 4 ] != None : req = req + self . __proxy [ 4 ] req = req + chr ( 0x00 ) . encode ( ) if rmtrslv : req = req + destaddr + chr ( 0x00 ) . encode ( ) self . sendall ( req ) resp = self . __recvall ( 8 ) if resp [ 0 : 1 ] != chr ( 0x00 ) . encode ( ) : self . close ( ) raise GeneralProxyError ( ( 1 , _generalerrors [ 1 ] ) ) if resp [ 1 : 2 ] != chr ( 0x5A ) . encode ( ) : self . close ( ) if ord ( resp [ 1 : 2 ] ) in ( 91 , 92 , 93 ) : self . close ( ) raise Socks4Error ( ( ord ( resp [ 1 : 2 ] ) , _socks4errors [ ord ( resp [ 1 : 2 ] ) - 90 ] ) ) else : raise Socks4Error ( ( 94 , _socks4errors [ 4 ] ) ) self . __proxysockname = ( socket . inet_ntoa ( resp [ 4 : ] ) , struct . unpack ( ">H" , resp [ 2 : 4 ] ) [ 0 ] ) if rmtrslv != None : self . __proxypeername = ( socket . inet_ntoa ( ipaddr ) , destport ) else : self . __proxypeername = ( destaddr , destport ) def __negotiatehttp ( self , destaddr , destport ) : if not self . __proxy [ 3 ] : addr = socket . gethostbyname ( destaddr ) else : addr = destaddr self . sendall ( ( "CONNECT " + addr + ":" + str ( destport ) + " HTTP/1.1\r\n" + "Host: " + destaddr + "\r\n\r\n" ) . encode ( ) ) resp = self . recv ( 1 ) while resp . find ( "\r\n\r\n" . encode ( ) ) == - 1 : resp = resp + self . recv ( 1 ) statusline = resp . splitlines ( ) [ 0 ] . split ( " " . encode ( ) , 2 ) if statusline [ 0 ] not in ( "HTTP/1.0" . encode ( ) , "HTTP/1.1" . encode ( ) ) : self . close ( ) raise GeneralProxyError ( ( 1 , _generalerrors [ 1 ] ) ) try : statuscode = int ( statusline [ 1 ] ) except ValueError : self . close ( ) raise GeneralProxyError ( ( 1 , _generalerrors [ 1 ] ) ) if statuscode != 200 : self . close ( ) raise HTTPError ( ( statuscode , statusline [ 2 ] ) ) self . __proxysockname = ( "0.0.0.0" , 0 ) self . __proxypeername = ( addr , destport ) def connect ( self , destpair ) : if ( not type ( destpair ) in ( list , tuple ) ) or ( len ( destpair ) < 2 ) or ( type ( destpair [ 0 ] ) != type ( '' ) ) or ( type ( destpair [ 1 ] ) != int ) : raise GeneralProxyError ( ( 5 , _generalerrors [ 5 ] ) ) if self . __proxy [ 0 ] == PROXY_TYPE_SOCKS5 : if self . __proxy [ 2 ] != None : portnum = self . __proxy [ 2 ] else : portnum = 1080 _orgsocket . connect ( self , ( self . __proxy [ 1 ] , portnum ) ) self . __negotiatesocks5 ( destpair [ 0 ] , destpair [ 1 ] ) elif self . __proxy [ 0 ] == PROXY_TYPE_SOCKS4 : if self . __proxy [ 2 ] != None : portnum = self . __proxy [ 2 ] else : portnum = 1080 _orgsocket . connect ( self , ( self . __proxy [ 1 ] , portnum ) ) self . __negotiatesocks4 ( destpair [ 0 ] , destpair [ 1 ] ) elif self . __proxy [ 0 ] == PROXY_TYPE_HTTP : if self . __proxy [ 2 ] != None : portnum = self . __proxy [ 2 ] else : portnum = 8080 _orgsocket . connect ( self , ( self . __proxy [ 1 ] , portnum ) ) self . __negotiatehttp ( destpair [ 0 ] , destpair [ 1 ] ) elif self . __proxy [ 0 ] == None : _orgsocket . connect ( self , ( destpair [ 0 ] , destpair [ 1 ] ) ) else : raise GeneralProxyError ( ( 4 , _generalerrors [ 4 ] ) )
