import os import subprocess import sickbeard from sickbeard import logger from sickbeard import encodingKludge as ek from sickbeard . exceptions import ex class synoIndexNotifier : def notify_snatch ( self , ep_name ) : pass def notify_download ( self , ep_name ) : pass def update_library ( self , ep_obj ) : if sickbeard . USE_SYNOINDEX : synoindex_cmd = [ '/usr/syno/bin/synoindex' , '-a' , ek . ek ( os . path . abspath , ep_obj . location ) ] logger . log ( u"Executing command " + str ( synoindex_cmd ) ) logger . log ( u"Absolute path to command: " + ek . ek ( os . path . abspath , synoindex_cmd [ 0 ] ) , logger . DEBUG ) try : p = subprocess . Popen ( synoindex_cmd , stdout = subprocess . PIPE , stderr = subprocess . STDOUT , cwd = sickbeard . PROG_DIR ) out , err = p . communicate ( ) logger . log ( u"Script result: " + str ( out ) , logger . DEBUG ) except OSError , e : logger . log ( u"Unable to run synoindex: " + ex ( e ) ) notifier = synoIndexNotifier
