import os . path import xml . etree . cElementTree as etree import re import sickbeard from sickbeard import exceptions , helpers from sickbeard . metadata import helpers as metadata_helpers from sickbeard import logger from sickbeard import encodingKludge as ek from sickbeard . exceptions import ex from lib . tvdb_api import tvdb_api , tvdb_exceptions class GenericMetadata ( ) : def __init__ ( self , show_metadata = False , episode_metadata = False , poster = False , fanart = False , episode_thumbnails = False , season_thumbnails = False ) : self . _show_file_name = "tvshow.nfo" self . _ep_nfo_extension = "nfo" self . poster_name = "folder.jpg" self . fanart_name = "fanart.jpg" self . generate_show_metadata = True self . generate_ep_metadata = True self . name = 'Generic' self . show_metadata = show_metadata self . episode_metadata = episode_metadata self . poster = poster self . fanart = fanart self . episode_thumbnails = episode_thumbnails self . season_thumbnails = season_thumbnails def get_config ( self ) : config_list = [ self . show_metadata , self . episode_metadata , self . poster , self . fanart , self . episode_thumbnails , self . season_thumbnails ] return '|' . join ( [ str ( int ( x ) ) for x in config_list ] ) def get_id ( self ) : return GenericMetadata . makeID ( self . name ) @ staticmethod def makeID ( name ) : return re . sub ( "[^\w\d_]" , "_" , name ) . lower ( ) def set_config ( self , string ) : config_list = [ bool ( int ( x ) ) for x in string . split ( '|' ) ] self . show_metadata = config_list [ 0 ] self . episode_metadata = config_list [ 1 ] self . poster = config_list [ 2 ] self . fanart = config_list [ 3 ] self . episode_thumbnails = config_list [ 4 ] self . season_thumbnails = config_list [ 5 ] def _has_show_metadata ( self , show_obj ) : result = ek . ek ( os . path . isfile , self . get_show_file_path ( show_obj ) ) logger . log ( "Checking if " + self . get_show_file_path ( show_obj ) + " exists: " + str ( result ) , logger . DEBUG ) return result def _has_episode_metadata ( self , ep_obj ) : result = ek . ek ( os . path . isfile , self . get_episode_file_path ( ep_obj ) ) logger . log ( "Checking if " + self . get_episode_file_path ( ep_obj ) + " exists: " + str ( result ) , logger . DEBUG ) return result def _has_poster ( self , show_obj ) : result = ek . ek ( os . path . isfile , self . get_poster_path ( show_obj ) ) logger . log ( "Checking if " + self . get_poster_path ( show_obj ) + " exists: " + str ( result ) , logger . DEBUG ) return result def _has_fanart ( self , show_obj ) : result = ek . ek ( os . path . isfile , self . get_fanart_path ( show_obj ) ) logger . log ( "Checking if " + self . get_fanart_path ( show_obj ) + " exists: " + str ( result ) , logger . DEBUG ) return result def _has_episode_thumb ( self , ep_obj ) : location = self . get_episode_thumb_path ( ep_obj ) result = location != None and ek . ek ( os . path . isfile , location ) if location : logger . log ( "Checking if " + location + " exists: " + str ( result ) , logger . DEBUG ) return result def _has_season_thumb ( self , show_obj , season ) : location = self . get_season_thumb_path ( show_obj , season ) result = location != None and ek . ek ( os . path . isfile , location ) if location : logger . log ( "Checking if " + location + " exists: " + str ( result ) , logger . DEBUG ) return result def get_show_file_path ( self , show_obj ) : return ek . ek ( os . path . join , show_obj . location , self . _show_file_name ) def get_episode_file_path ( self , ep_obj ) : return helpers . replaceExtension ( ep_obj . location , self . _ep_nfo_extension ) def get_poster_path ( self , show_obj ) : return ek . ek ( os . path . join , show_obj . location , self . poster_name ) def get_fanart_path ( self , show_obj ) : return ek . ek ( os . path . join , show_obj . location , self . fanart_name ) def get_episode_thumb_path ( self , ep_obj ) : if ek . ek ( os . path . isfile , ep_obj . location ) : tbn_filename = helpers . replaceExtension ( ep_obj . location , 'tbn' ) else : return None return tbn_filename def get_season_thumb_path ( self , show_obj , season ) : if season == 0 : season_thumb_file_path = 'season-specials' else : season_thumb_file_path = 'season' + str ( season ) . zfill ( 2 ) return ek . ek ( os . path . join , show_obj . location , season_thumb_file_path + '.tbn' ) def _show_data ( self , show_obj ) : return None def _ep_data ( self , ep_obj ) : return None def create_show_metadata ( self , show_obj ) : if self . show_metadata and show_obj and not self . _has_show_metadata ( show_obj ) : logger . log ( "Metadata provider " + self . name + " creating show metadata for " + show_obj . name , logger . DEBUG ) return self . write_show_file ( show_obj ) return False def create_episode_metadata ( self , ep_obj ) : if self . episode_metadata and ep_obj and not self . _has_episode_metadata ( ep_obj ) : logger . log ( "Metadata provider " + self . name + " creating episode metadata for " + ep_obj . prettyName ( ) , logger . DEBUG ) return self . write_ep_file ( ep_obj ) return False def create_poster ( self , show_obj ) : if self . poster and show_obj and not self . _has_poster ( show_obj ) : logger . log ( "Metadata provider " + self . name + " creating poster for " + show_obj . name , logger . DEBUG ) return self . save_poster ( show_obj ) return False def create_fanart ( self , show_obj ) : if self . fanart and show_obj and not self . _has_fanart ( show_obj ) : logger . log ( "Metadata provider " + self . name + " creating fanart for " + show_obj . name , logger . DEBUG ) return self . save_fanart ( show_obj ) return False def create_episode_thumb ( self , ep_obj ) : if self . episode_thumbnails and ep_obj and not self . _has_episode_thumb ( ep_obj ) : logger . log ( "Metadata provider " + self . name + " creating show metadata for " + ep_obj . prettyName ( ) , logger . DEBUG ) return self . save_thumbnail ( ep_obj ) return False def create_season_thumbs ( self , show_obj ) : if self . season_thumbnails and show_obj : logger . log ( "Metadata provider " + self . name + " creating season thumbnails for " + show_obj . name , logger . DEBUG ) return self . save_season_thumbs ( show_obj ) return False def _get_episode_thumb_url ( self , ep_obj ) : all_eps = [ ep_obj ] + ep_obj . relatedEps tvdb_lang = ep_obj . show . lang try : ltvdb_api_parms = sickbeard . TVDB_API_PARMS . copy ( ) if tvdb_lang and not tvdb_lang == 'en' : ltvdb_api_parms [ 'language' ] = tvdb_lang t = tvdb_api . Tvdb ( actors = True , ** ltvdb_api_parms ) tvdb_show_obj = t [ ep_obj . show . tvdbid ] except tvdb_exceptions . tvdb_shownotfound , e : raise exceptions . ShowNotFoundException ( e . message ) except tvdb_exceptions . tvdb_error , e : logger . log ( u"Unable to connect to TVDB while creating meta files - skipping - " + ex ( e ) , logger . ERROR ) return None for cur_ep in all_eps : try : myEp = tvdb_show_obj [ cur_ep . season ] [ cur_ep . episode ] except ( tvdb_exceptions . tvdb_episodenotfound , tvdb_exceptions . tvdb_seasonnotfound ) : logger . log ( u"Unable to find episode " + str ( cur_ep . season ) + "x" + str ( cur_ep . episode ) + " on tvdb... has it been removed? Should I delete from db?" ) continue thumb_url = myEp [ "filename" ] if thumb_url : return thumb_url return None def write_show_file ( self , show_obj ) : data = self . _show_data ( show_obj ) if not data : return False nfo_file_path = self . get_show_file_path ( show_obj ) nfo_file_dir = ek . ek ( os . path . dirname , nfo_file_path ) try : if not ek . ek ( os . path . isdir , nfo_file_dir ) : logger . log ( "Metadata dir didn't exist, creating it at " + nfo_file_dir , logger . DEBUG ) ek . ek ( os . makedirs , nfo_file_dir ) helpers . chmodAsParent ( nfo_file_dir ) logger . log ( u"Writing show nfo file to " + nfo_file_path ) nfo_file = ek . ek ( open , nfo_file_path , 'w' ) data . write ( nfo_file , encoding = "utf-8" ) nfo_file . close ( ) helpers . chmodAsParent ( nfo_file_path ) except IOError , e : logger . log ( u"Unable to write file to " + nfo_file_path + " - are you sure the folder is writable? " + ex ( e ) , logger . ERROR ) return False return True def write_ep_file ( self , ep_obj ) : data = self . _ep_data ( ep_obj ) if not data : return False nfo_file_path = self . get_episode_file_path ( ep_obj ) nfo_file_dir = ek . ek ( os . path . dirname , nfo_file_path ) try : if not ek . ek ( os . path . isdir , nfo_file_dir ) : logger . log ( "Metadata dir didn't exist, creating it at " + nfo_file_dir , logger . DEBUG ) ek . ek ( os . makedirs , nfo_file_dir ) helpers . chmodAsParent ( nfo_file_dir ) logger . log ( u"Writing episode nfo file to " + nfo_file_path ) nfo_file = ek . ek ( open , nfo_file_path , 'w' ) data . write ( nfo_file , encoding = "utf-8" ) nfo_file . close ( ) helpers . chmodAsParent ( nfo_file_path ) except IOError , e : logger . log ( u"Unable to write file to " + nfo_file_path + " - are you sure the folder is writable? " + ex ( e ) , logger . ERROR ) return False return True def save_thumbnail ( self , ep_obj ) : file_path = self . get_episode_thumb_path ( ep_obj ) if not file_path : logger . log ( u"Unable to find a file path to use for this thumbnail, not generating it" , logger . DEBUG ) return False thumb_url = self . _get_episode_thumb_url ( ep_obj ) if not thumb_url : logger . log ( "No thumb is available for this episode, not creating a thumb" , logger . DEBUG ) return False thumb_data = metadata_helpers . getShowImage ( thumb_url ) result = self . _write_image ( thumb_data , file_path ) if not result : return False for cur_ep in [ ep_obj ] + ep_obj . relatedEps : cur_ep . hastbn = True return True def save_fanart ( self , show_obj , which = None ) : fanart_path = self . get_fanart_path ( show_obj ) fanart_data = self . _retrieve_show_image ( 'fanart' , show_obj , which ) if not fanart_data : logger . log ( u"No fanart image was retrieved, unable to write fanart" , logger . DEBUG ) return False return self . _write_image ( fanart_data , fanart_path ) def save_poster ( self , show_obj , which = None ) : poster_path = self . get_poster_path ( show_obj ) if sickbeard . USE_BANNER : img_type = 'banner' else : img_type = 'poster' poster_data = self . _retrieve_show_image ( img_type , show_obj , which ) if not poster_data : logger . log ( u"No show folder image was retrieved, unable to write poster" , logger . DEBUG ) return False return self . _write_image ( poster_data , poster_path ) def save_season_thumbs ( self , show_obj ) : season_dict = self . _season_thumb_dict ( show_obj ) for cur_season in season_dict : cur_season_art = season_dict [ cur_season ] if len ( cur_season_art ) == 0 : continue art_id , season_url = cur_season_art . popitem ( ) season_thumb_file_path = self . get_season_thumb_path ( show_obj , cur_season ) if not season_thumb_file_path : logger . log ( u"Path for season " + str ( cur_season ) + " came back blank, skipping this season" , logger . DEBUG ) continue seasonData = metadata_helpers . getShowImage ( season_url ) if not seasonData : logger . log ( u"No season thumb data available, skipping this season" , logger . DEBUG ) continue self . _write_image ( seasonData , season_thumb_file_path ) return True def _write_image ( self , image_data , image_path ) : if ek . ek ( os . path . isfile , image_path ) : logger . log ( u"Image already exists, not downloading" , logger . DEBUG ) return False if not image_data : logger . log ( u"Unable to retrieve image, skipping" , logger . WARNING ) return False image_dir = ek . ek ( os . path . dirname , image_path ) try : if not ek . ek ( os . path . isdir , image_dir ) : logger . log ( "Metadata dir didn't exist, creating it at " + image_dir , logger . DEBUG ) ek . ek ( os . makedirs , image_dir ) helpers . chmodAsParent ( image_dir ) outFile = ek . ek ( open , image_path , 'wb' ) outFile . write ( image_data ) outFile . close ( ) helpers . chmodAsParent ( image_path ) except IOError , e : logger . log ( u"Unable to write image to " + image_path + " - are you sure the show folder is writable? " + ex ( e ) , logger . ERROR ) return False return True def _retrieve_show_image ( self , image_type , show_obj , which = None ) : tvdb_lang = show_obj . lang try : ltvdb_api_parms = sickbeard . TVDB_API_PARMS . copy ( ) if tvdb_lang and not tvdb_lang == 'en' : ltvdb_api_parms [ 'language' ] = tvdb_lang t = tvdb_api . Tvdb ( banners = True , ** ltvdb_api_parms ) tvdb_show_obj = t [ show_obj . tvdbid ] except ( tvdb_exceptions . tvdb_error , IOError ) , e : logger . log ( u"Unable to look up show on TVDB, not downloading images: " + ex ( e ) , logger . ERROR ) return None if image_type not in ( 'fanart' , 'poster' , 'banner' ) : logger . log ( u"Invalid image type " + str ( image_type ) + ", couldn't find it in the TVDB object" , logger . ERROR ) return None image_url = tvdb_show_obj [ image_type ] image_data = metadata_helpers . getShowImage ( image_url , which ) return image_data def _season_thumb_dict ( self , show_obj ) : result = { } tvdb_lang = show_obj . lang try : ltvdb_api_parms = sickbeard . TVDB_API_PARMS . copy ( ) if tvdb_lang and not tvdb_lang == 'en' : ltvdb_api_parms [ 'language' ] = tvdb_lang t = tvdb_api . Tvdb ( banners = True , ** ltvdb_api_parms ) tvdb_show_obj = t [ show_obj . tvdbid ] except ( tvdb_exceptions . tvdb_error , IOError ) , e : logger . log ( u"Unable to look up show on TVDB, not downloading images: " + ex ( e ) , logger . ERROR ) return result num_seasons = len ( tvdb_show_obj ) if 'season' not in tvdb_show_obj [ '_banners' ] or 'season' not in tvdb_show_obj [ '_banners' ] [ 'season' ] : return result seasonsArtObj = tvdb_show_obj [ '_banners' ] [ 'season' ] [ 'season' ] for cur_season in range ( num_seasons ) : result [ cur_season ] = { } for seasonArtID in seasonsArtObj . keys ( ) : if int ( seasonsArtObj [ seasonArtID ] [ 'season' ] ) == cur_season and seasonsArtObj [ seasonArtID ] [ 'language' ] == 'en' : result [ cur_season ] [ seasonArtID ] = seasonsArtObj [ seasonArtID ] [ '_bannerpath' ] if len ( result [ cur_season ] ) == 0 : continue return result def retrieveShowMetadata ( self , dir ) : empty_return = ( None , None ) metadata_path = ek . ek ( os . path . join , dir , self . _show_file_name ) if not ek . ek ( os . path . isdir , dir ) or not ek . ek ( os . path . isfile , metadata_path ) : logger . log ( u"Can't load the metadata file from " + repr ( metadata_path ) + ", it doesn't exist" , logger . DEBUG ) return empty_return logger . log ( u"Loading show info from metadata file in " + dir , logger . DEBUG ) try : xmlFileObj = ek . ek ( open , metadata_path , 'r' ) showXML = etree . ElementTree ( file = xmlFileObj ) if showXML . findtext ( 'title' ) == None or ( showXML . findtext ( 'tvdbid' ) == None and showXML . findtext ( 'id' ) == None ) : logger . log ( u"Invalid info in tvshow.nfo (missing name or id):" + str ( showXML . findtext ( 'title' ) ) + " " + str ( showXML . findtext ( 'tvdbid' ) ) + " " + str ( showXML . findtext ( 'id' ) ) ) return empty_return name = showXML . findtext ( 'title' ) if showXML . findtext ( 'tvdbid' ) != None : tvdb_id = int ( showXML . findtext ( 'tvdbid' ) ) elif showXML . findtext ( 'id' ) : tvdb_id = int ( showXML . findtext ( 'id' ) ) else : logger . log ( u"Empty <id> or <tvdbid> field in NFO, unable to find an ID" , logger . WARNING ) return empty_return if not tvdb_id : logger . log ( u"Invalid tvdb id (" + str ( tvdb_id ) + "), not using metadata file" , logger . WARNING ) return empty_return except ( exceptions . NoNFOException , SyntaxError , ValueError ) , e : logger . log ( u"There was an error parsing your existing metadata file: " + ex ( e ) , logger . WARNING ) return empty_return return ( tvdb_id , name )
