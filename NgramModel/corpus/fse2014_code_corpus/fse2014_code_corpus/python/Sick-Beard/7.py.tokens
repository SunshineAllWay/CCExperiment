import cherrypy . lib . auth_basic import os . path from sickbeard import logger from sickbeard . webserve import WebInterface from sickbeard . helpers import create_https_certificates from cherrypy import _cpserver from cherrypy import _cpwsgi_server def initWebServer ( options = { } ) : options . setdefault ( 'port' , 8081 ) options . setdefault ( 'host' , '0.0.0.0' ) options . setdefault ( 'log_dir' , None ) options . setdefault ( 'username' , '' ) options . setdefault ( 'password' , '' ) options . setdefault ( 'web_root' , '/' ) assert isinstance ( options [ 'port' ] , int ) assert 'data_root' in options def http_error_401_hander ( status , message , traceback , version ) : if status != "401 Unauthorized" : logger . log ( u"CherryPy caught an error: %s %s" % ( status , message ) , logger . ERROR ) logger . log ( traceback , logger . DEBUG ) return r''' <html> <head> <title>%s</title> </head> <body> <br/> <font color="#0000FF">Error %s: You need to provide a valid username and password.</font> </body> </html> ''' % ( 'Access denied' , status ) def http_error_404_hander ( status , message , traceback , version ) : return r''' <html> <head> <title>404</title> <script type="text/javascript" charset="utf-8"> <!-- location.href = "%s" //--> </script> </head> <body> <br/> </body> </html> ''' % '/' enable_https = options [ 'enable_https' ] https_port = options [ 'https_port' ] https_cert = options [ 'https_cert' ] https_key = options [ 'https_key' ] if enable_https : if not ( https_cert and os . path . exists ( https_cert ) ) or not ( https_key and os . path . exists ( https_key ) ) : create_https_certificates ( https_cert , https_key ) if not ( os . path . exists ( https_cert ) and os . path . exists ( https_key ) ) : logger . log ( u"Disabled HTTPS because of missing CERT and KEY files" , logger . WARNING ) enable_https = False if enable_https : if https_port : logger . log ( u"Starting Sick Beard on http://" + str ( options [ 'host' ] ) + ":" + str ( options [ 'port' ] ) + "/" ) http_server = _cpwsgi_server . CPWSGIServer ( ) http_server . bind_addr = ( options [ 'host' ] , options [ 'port' ] ) adapter = _cpserver . ServerAdapter ( cherrypy . engine , http_server , http_server . bind_addr ) adapter . subscribe ( ) logger . log ( u"Starting Sick Beard on https://" + str ( options [ 'host' ] ) + ":" + str ( https_port ) + "/" ) cherrypy . config . update ( { : int ( https_port ) , : options [ 'host' ] , : False , : http_error_401_hander , : http_error_404_hander , : https_cert , : https_key , } ) else : logger . log ( u"Starting Sick Beard on https://" + str ( options [ 'host' ] ) + ":" + str ( options [ 'port' ] ) + "/" ) cherrypy . config . update ( { : options [ 'port' ] , : options [ 'host' ] , : False , : http_error_401_hander , : http_error_404_hander , : https_cert , : https_key , } ) else : logger . log ( u"Starting Sick Beard on http://" + str ( options [ 'host' ] ) + ":" + str ( options [ 'port' ] ) + "/" ) cherrypy . config . update ( { : options [ 'port' ] , : options [ 'host' ] , : False , : http_error_401_hander , : http_error_404_hander , } ) if options [ 'log_dir' ] and os . path . isdir ( options [ 'log_dir' ] ) : cherrypy . config . update ( { 'log.access_file' : os . path . join ( options [ 'log_dir' ] , "cherrypy.log" ) } ) logger . log ( 'Using %s for cherrypy log' % cherrypy . config [ 'log.access_file' ] ) conf = { : { : options [ 'data_root' ] , : True , : 'utf-8' , } , : { : True , : 'images' } , : { : True , : 'js' } , : { : True , : 'css' } , } app = cherrypy . tree . mount ( WebInterface ( ) , options [ 'web_root' ] , conf ) if options [ 'username' ] != "" and options [ 'password' ] != "" : checkpassword = cherrypy . lib . auth_basic . checkpassword_dict ( { options [ 'username' ] : options [ 'password' ] } ) app . merge ( { : { : True , : 'SickBeard' , : checkpassword } , : { : False } , : { : True , : 'SickBeard' , : checkpassword } } ) cherrypy . engine . start ( ) cherrypy . server . wait ( )
