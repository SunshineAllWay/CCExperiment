""" The MIT License Copyright (c) 2007 Leah Culver, Joe Stump, Mark Paschal, Vic Fryzel Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. """ import urllib import time import random import urlparse import hmac import binascii import lib . httplib2 as httplib2 try : from urlparse import parse_qs , parse_qsl except ImportError : from cgi import parse_qs , parse_qsl VERSION = '1.0' HTTP_METHOD = 'GET' SIGNATURE_METHOD = 'PLAINTEXT' class Error ( RuntimeError ) : def __init__ ( self , message = 'OAuth error occured.' ) : self . _message = message @ property def message ( self ) : return self . _message def __str__ ( self ) : return self . _message class MissingSignature ( Error ) : pass def build_authenticate_header ( realm = '' ) : return { 'WWW-Authenticate' : 'OAuth realm="%s"' % realm } def escape ( s ) : return urllib . quote ( s , safe = '~' ) def generate_timestamp ( ) : return int ( time . time ( ) ) def generate_nonce ( length = 8 ) : return '' . join ( [ str ( random . randint ( 0 , 9 ) ) for i in range ( length ) ] ) def generate_verifier ( length = 8 ) : return '' . join ( [ str ( random . randint ( 0 , 9 ) ) for i in range ( length ) ] ) class Consumer ( object ) : key = None secret = None def __init__ ( self , key , secret ) : self . key = key self . secret = secret if self . key is None or self . secret is None : raise ValueError ( "Key and secret must be set." ) def __str__ ( self ) : data = { : self . key , : self . secret } return urllib . urlencode ( data ) class Token ( object ) : key = None secret = None callback = None callback_confirmed = None verifier = None def __init__ ( self , key , secret ) : self . key = key self . secret = secret if self . key is None or self . secret is None : raise ValueError ( "Key and secret must be set." ) def set_callback ( self , callback ) : self . callback = callback self . callback_confirmed = 'true' def set_verifier ( self , verifier = None ) : if verifier is not None : self . verifier = verifier else : self . verifier = generate_verifier ( ) def get_callback_url ( self ) : if self . callback and self . verifier : parts = urlparse . urlparse ( self . callback ) scheme , netloc , path , params , query , fragment = parts [ : 6 ] if query : query = '%s&oauth_verifier=%s' % ( query , self . verifier ) else : query = 'oauth_verifier=%s' % self . verifier return urlparse . urlunparse ( ( scheme , netloc , path , params , query , fragment ) ) return self . callback def to_string ( self ) : data = { : self . key , : self . secret , } if self . callback_confirmed is not None : data [ 'oauth_callback_confirmed' ] = self . callback_confirmed return urllib . urlencode ( data ) @ staticmethod def from_string ( s ) : if not len ( s ) : raise ValueError ( "Invalid parameter string." ) params = parse_qs ( s , keep_blank_values = False ) if not len ( params ) : raise ValueError ( "Invalid parameter string." ) try : key = params [ 'oauth_token' ] [ 0 ] except Exception : raise ValueError ( "'oauth_token' not found in OAuth request." ) try : secret = params [ 'oauth_token_secret' ] [ 0 ] except Exception : raise ValueError ( "'oauth_token_secret' not found in " ) token = Token ( key , secret ) try : token . callback_confirmed = params [ 'oauth_callback_confirmed' ] [ 0 ] except KeyError : pass return token def __str__ ( self ) : return self . to_string ( ) def setter ( attr ) : name = attr . __name__ def getter ( self ) : try : return self . __dict__ [ name ] except KeyError : raise AttributeError ( name ) def deleter ( self ) : del self . __dict__ [ name ] return property ( getter , attr , deleter ) class Request ( dict ) : http_method = HTTP_METHOD http_url = None version = VERSION def __init__ ( self , method = HTTP_METHOD , url = None , parameters = None ) : if method is not None : self . method = method if url is not None : self . url = url if parameters is not None : self . update ( parameters ) @ setter def url ( self , value ) : parts = urlparse . urlparse ( value ) scheme , netloc , path = parts [ : 3 ] if scheme == 'http' and netloc [ - 3 : ] == ':80' : netloc = netloc [ : - 3 ] elif scheme == 'https' and netloc [ - 4 : ] == ':443' : netloc = netloc [ : - 4 ] if scheme != 'http' and scheme != 'https' : raise ValueError ( "Unsupported URL %s (%s)." % ( value , scheme ) ) value = '%s://%s%s' % ( scheme , netloc , path ) self . __dict__ [ 'url' ] = value @ setter def method ( self , value ) : self . __dict__ [ 'method' ] = value . upper ( ) def _get_timestamp_nonce ( self ) : return self [ 'oauth_timestamp' ] , self [ 'oauth_nonce' ] def get_nonoauth_parameters ( self ) : return dict ( [ ( k , v ) for k , v in self . iteritems ( ) if not k . startswith ( 'oauth_' ) ] ) def to_header ( self , realm = '' ) : oauth_params = ( ( k , v ) for k , v in self . items ( ) if k . startswith ( 'oauth_' ) ) stringy_params = ( ( k , escape ( str ( v ) ) ) for k , v in oauth_params ) header_params = ( '%s="%s"' % ( k , v ) for k , v in stringy_params ) params_header = ', ' . join ( header_params ) auth_header = 'OAuth realm="%s"' % realm if params_header : auth_header = "%s, %s" % ( auth_header , params_header ) return { 'Authorization' : auth_header } def to_postdata ( self ) : return self . encode_postdata ( self ) def encode_postdata ( self , data ) : return urllib . urlencode ( data , True ) def to_url ( self ) : return '%s?%s' % ( self . url , self . to_postdata ( ) ) def get_parameter ( self , parameter ) : ret = self . get ( parameter ) if ret is None : raise Error ( 'Parameter not found: %s' % parameter ) return ret def get_normalized_parameters ( self ) : items = [ ( k , v ) for k , v in self . items ( ) if k != 'oauth_signature' ] encoded_str = urllib . urlencode ( sorted ( items ) , True ) return encoded_str . replace ( '+' , '%20' ) def sign_request ( self , signature_method , consumer , token ) : if 'oauth_consumer_key' not in self : self [ 'oauth_consumer_key' ] = consumer . key if token and 'oauth_token' not in self : self [ 'oauth_token' ] = token . key self [ 'oauth_signature_method' ] = signature_method . name self [ 'oauth_signature' ] = signature_method . sign ( self , consumer , token ) @ classmethod def make_timestamp ( cls ) : return str ( int ( time . time ( ) ) ) @ classmethod def make_nonce ( cls ) : return str ( random . randint ( 0 , 100000000 ) ) @ classmethod def from_request ( cls , http_method , http_url , headers = None , parameters = None , query_string = None ) : if parameters is None : parameters = { } if headers and 'Authorization' in headers : auth_header = headers [ 'Authorization' ] if auth_header [ : 6 ] == 'OAuth ' : auth_header = auth_header [ 6 : ] try : header_params = cls . _split_header ( auth_header ) parameters . update ( header_params ) except : raise Error ( 'Unable to parse OAuth parameters from ' ) if query_string : query_params = cls . _split_url_string ( query_string ) parameters . update ( query_params ) param_str = urlparse . urlparse ( http_url ) [ 4 ] url_params = cls . _split_url_string ( param_str ) parameters . update ( url_params ) if parameters : return cls ( http_method , http_url , parameters ) return None @ classmethod def from_consumer_and_token ( cls , consumer , token = None , http_method = HTTP_METHOD , http_url = None , parameters = None ) : if not parameters : parameters = { } defaults = { : consumer . key , : cls . make_timestamp ( ) , : cls . make_nonce ( ) , : cls . version , } defaults . update ( parameters ) parameters = defaults if token : parameters [ 'oauth_token' ] = token . key return Request ( http_method , http_url , parameters ) @ classmethod def from_token_and_callback ( cls , token , callback = None , http_method = HTTP_METHOD , http_url = None , parameters = None ) : if not parameters : parameters = { } parameters [ 'oauth_token' ] = token . key if callback : parameters [ 'oauth_callback' ] = callback return cls ( http_method , http_url , parameters ) @ staticmethod def _split_header ( header ) : params = { } parts = header . split ( ',' ) for param in parts : if param . find ( 'realm' ) > - 1 : continue param = param . strip ( ) param_parts = param . split ( '=' , 1 ) params [ param_parts [ 0 ] ] = urllib . unquote ( param_parts [ 1 ] . strip ( '\"' ) ) return params @ staticmethod def _split_url_string ( param_str ) : parameters = parse_qs ( param_str , keep_blank_values = False ) for k , v in parameters . iteritems ( ) : parameters [ k ] = urllib . unquote ( v [ 0 ] ) return parameters class Server ( object ) : timestamp_threshold = 300 version = VERSION signature_methods = None def __init__ ( self , signature_methods = None ) : self . signature_methods = signature_methods or { } def add_signature_method ( self , signature_method ) : self . signature_methods [ signature_method . name ] = signature_method return self . signature_methods def verify_request ( self , request , consumer , token ) : version = self . _get_version ( request ) self . _check_signature ( request , consumer , token ) parameters = request . get_nonoauth_parameters ( ) return parameters def build_authenticate_header ( self , realm = '' ) : return { 'WWW-Authenticate' : 'OAuth realm="%s"' % realm } def _get_version ( self , request ) : try : version = request . get_parameter ( 'oauth_version' ) except : version = VERSION if version and version != self . version : raise Error ( 'OAuth version %s not supported.' % str ( version ) ) return version def _get_signature_method ( self , request ) : try : signature_method = request . get_parameter ( 'oauth_signature_method' ) except : signature_method = SIGNATURE_METHOD try : signature_method = self . signature_methods [ signature_method ] except : signature_method_names = ', ' . join ( self . signature_methods . keys ( ) ) raise Error ( 'Signature method %s not supported try one of the following: %s' % ( signature_method , signature_method_names ) ) return signature_method def _get_verifier ( self , request ) : return request . get_parameter ( 'oauth_verifier' ) def _check_signature ( self , request , consumer , token ) : timestamp , nonce = request . _get_timestamp_nonce ( ) self . _check_timestamp ( timestamp ) signature_method = self . _get_signature_method ( request ) try : signature = request . get_parameter ( 'oauth_signature' ) except : raise MissingSignature ( 'Missing oauth_signature.' ) valid = signature_method . check ( request , consumer , token , signature ) if not valid : key , base = signature_method . signing_base ( request , consumer , token ) raise Error ( 'Invalid signature. Expected signature base ' % base ) built = signature_method . sign ( request , consumer , token ) def _check_timestamp ( self , timestamp ) : timestamp = int ( timestamp ) now = int ( time . time ( ) ) lapsed = now - timestamp if lapsed > self . timestamp_threshold : raise Error ( 'Expired timestamp: given %d and now %s has a ' % ( timestamp , now , self . timestamp_threshold ) ) class Client ( httplib2 . Http ) : def __init__ ( self , consumer , token = None , cache = None , timeout = None , proxy_info = None ) : if consumer is not None and not isinstance ( consumer , Consumer ) : raise ValueError ( "Invalid consumer." ) if token is not None and not isinstance ( token , Token ) : raise ValueError ( "Invalid token." ) self . consumer = consumer self . token = token self . method = SignatureMethod_HMAC_SHA1 ( ) httplib2 . Http . __init__ ( self , cache = cache , timeout = timeout , proxy_info = proxy_info ) def set_signature_method ( self , method ) : if not isinstance ( method , SignatureMethod ) : raise ValueError ( "Invalid signature method." ) self . method = method def request ( self , uri , method = "GET" , body = None , headers = None , redirections = httplib2 . DEFAULT_MAX_REDIRECTS , connection_type = None , force_auth_header = False ) : if not isinstance ( headers , dict ) : headers = { } if body and method == "POST" : parameters = dict ( parse_qsl ( body ) ) elif method == "GET" : parsed = urlparse . urlparse ( uri ) parameters = parse_qs ( parsed . query ) else : parameters = None req = Request . from_consumer_and_token ( self . consumer , token = self . token , http_method = method , http_url = uri , parameters = parameters ) req . sign_request ( self . method , self . consumer , self . token ) if force_auth_header : headers . update ( req . to_header ( ) ) if method == "POST" : if not force_auth_header : body = req . to_postdata ( ) else : body = req . encode_postdata ( req . get_nonoauth_parameters ( ) ) headers [ 'Content-Type' ] = 'application/x-www-form-urlencoded' elif method == "GET" : if not force_auth_header : uri = req . to_url ( ) else : if not force_auth_header : headers . update ( req . to_header ( ) ) return httplib2 . Http . request ( self , uri , method = method , body = body , headers = headers , redirections = redirections , connection_type = connection_type ) class SignatureMethod ( object ) : def signing_base ( self , request , consumer , token ) : raise NotImplementedError def sign ( self , request , consumer , token ) : raise NotImplementedError def check ( self , request , consumer , token , signature ) : built = self . sign ( request , consumer , token ) return built == signature class SignatureMethod_HMAC_SHA1 ( SignatureMethod ) : name = 'HMAC-SHA1' def signing_base ( self , request , consumer , token ) : sig = ( escape ( request . method ) , escape ( request . url ) , escape ( request . get_normalized_parameters ( ) ) , ) key = '%s&' % escape ( consumer . secret ) if token : key += escape ( token . secret ) raw = '&' . join ( sig ) return key , raw def sign ( self , request , consumer , token ) : key , raw = self . signing_base ( request , consumer , token ) try : import hashlib hashed = hmac . new ( key , raw , hashlib . sha1 ) except ImportError : import sha hashed = hmac . new ( key , raw , sha ) return binascii . b2a_base64 ( hashed . digest ( ) ) [ : - 1 ] class SignatureMethod_PLAINTEXT ( SignatureMethod ) : name = 'PLAINTEXT' def signing_base ( self , request , consumer , token ) : sig = '%s&' % escape ( consumer . secret ) if token : sig = sig + escape ( token . secret ) return sig , sig def sign ( self , request , consumer , token ) : key , raw = self . signing_base ( request , consumer , token ) return raw
