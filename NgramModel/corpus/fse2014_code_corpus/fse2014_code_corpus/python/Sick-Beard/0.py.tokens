import sys if sys . version_info < ( 2 , 5 ) : print "Sorry, requires Python 2.5 or higher." sys . exit ( 1 ) if sys . hexversion >= 0x020600F0 : from multiprocessing import freeze_support import locale import os import threading import time import signal import traceback import getopt import sickbeard from sickbeard import db from sickbeard . tv import TVShow from sickbeard import logger from sickbeard . version import SICKBEARD_VERSION from sickbeard . webserveInit import initWebServer from lib . configobj import ConfigObj signal . signal ( signal . SIGINT , sickbeard . sig_handler ) signal . signal ( signal . SIGTERM , sickbeard . sig_handler ) def loadShowsFromDB ( ) : myDB = db . DBConnection ( ) sqlResults = myDB . select ( "SELECT * FROM tv_shows" ) for sqlShow in sqlResults : try : curShow = TVShow ( int ( sqlShow [ "tvdb_id" ] ) ) sickbeard . showList . append ( curShow ) except Exception , e : logger . log ( u"There was an error creating the show in " + sqlShow [ "location" ] + ": " + str ( e ) . decode ( 'utf-8' ) , logger . ERROR ) logger . log ( traceback . format_exc ( ) , logger . DEBUG ) def daemonize ( ) : try : pid = os . fork ( ) if pid != 0 : sys . exit ( 0 ) except OSError , e : raise RuntimeError ( "1st fork failed: %s [%d]" % ( e . strerror , e . errno ) ) os . setsid ( ) prev = os . umask ( 0 ) os . umask ( prev and int ( '077' , 8 ) ) try : pid = os . fork ( ) if pid != 0 : sys . exit ( 0 ) except OSError , e : raise RuntimeError ( "2nd fork failed: %s [%d]" % ( e . strerror , e . errno ) ) dev_null = file ( '/dev/null' , 'r' ) os . dup2 ( dev_null . fileno ( ) , sys . stdin . fileno ( ) ) if sickbeard . CREATEPID : pid = str ( os . getpid ( ) ) logger . log ( u"Writing PID " + pid + " to " + str ( sickbeard . PIDFILE ) ) file ( sickbeard . PIDFILE , 'w' ) . write ( "%s\n" % pid ) def main ( ) : sickbeard . MY_FULLNAME = os . path . normpath ( os . path . abspath ( __file__ ) ) sickbeard . MY_NAME = os . path . basename ( sickbeard . MY_FULLNAME ) sickbeard . PROG_DIR = os . path . dirname ( sickbeard . MY_FULLNAME ) sickbeard . DATA_DIR = sickbeard . PROG_DIR sickbeard . MY_ARGS = sys . argv [ 1 : ] sickbeard . CREATEPID = False sickbeard . DAEMON = False sickbeard . SYS_ENCODING = None try : locale . setlocale ( locale . LC_ALL , "" ) sickbeard . SYS_ENCODING = locale . getpreferredencoding ( ) except ( locale . Error , IOError ) : pass if not sickbeard . SYS_ENCODING or sickbeard . SYS_ENCODING in ( 'ANSI_X3.4-1968' , 'US-ASCII' , 'ASCII' ) : sickbeard . SYS_ENCODING = 'UTF-8' consoleLogging = ( not hasattr ( sys , "frozen" ) ) or ( sickbeard . MY_NAME . lower ( ) . find ( '-console' ) > 0 ) threading . currentThread ( ) . name = "MAIN" try : opts , args = getopt . getopt ( sys . argv [ 1 : ] , "qfdp::" , [ 'quiet' , 'forceupdate' , 'daemon' , 'port=' , 'pidfile=' , 'nolaunch' , 'config=' , 'datadir=' ] ) except getopt . GetoptError : print "Available options: --quiet, --forceupdate, --port, --daemon, --pidfile, --config, --datadir" sys . exit ( ) forceUpdate = False forcedPort = None noLaunch = False for o , a in opts : if o in ( '-q' , '--quiet' ) : consoleLogging = False if o in ( '-f' , '--forceupdate' ) : forceUpdate = True if o in ( '--nolaunch' , ) : noLaunch = True if o in ( '-p' , '--port' ) : forcedPort = int ( a ) if o in ( '-d' , '--daemon' ) : if sys . platform == 'win32' : print "Daemonize not supported under Windows, starting normally" else : consoleLogging = False sickbeard . DAEMON = True if o in ( '--config' , ) : sickbeard . CONFIG_FILE = os . path . abspath ( a ) if o in ( '--datadir' , ) : sickbeard . DATA_DIR = os . path . abspath ( a ) if o in ( '--pidfile' , ) : sickbeard . PIDFILE = str ( a ) if os . path . exists ( sickbeard . PIDFILE ) : sys . exit ( "PID file " + sickbeard . PIDFILE + " already exists. Exiting." ) if sickbeard . DAEMON : sickbeard . CREATEPID = True try : file ( sickbeard . PIDFILE , 'w' ) . write ( "pid\n" ) except IOError , e : raise SystemExit ( "Unable to write PID file: %s [%d]" % ( e . strerror , e . errno ) ) else : logger . log ( u"Not running in daemon mode. PID file creation disabled." ) if not sickbeard . CONFIG_FILE : sickbeard . CONFIG_FILE = os . path . join ( sickbeard . DATA_DIR , "config.ini" ) if not os . access ( sickbeard . DATA_DIR , os . F_OK ) : try : os . makedirs ( sickbeard . DATA_DIR , 0744 ) except os . error , e : raise SystemExit ( "Unable to create datadir '" + sickbeard . DATA_DIR + "'" ) if not os . access ( sickbeard . DATA_DIR , os . W_OK ) : raise SystemExit ( "Data dir must be writeable '" + sickbeard . DATA_DIR + "'" ) if not os . access ( sickbeard . CONFIG_FILE , os . W_OK ) : if os . path . isfile ( sickbeard . CONFIG_FILE ) : raise SystemExit ( "Config file '" + sickbeard . CONFIG_FILE + "' must be writeable" ) elif not os . access ( os . path . dirname ( sickbeard . CONFIG_FILE ) , os . W_OK ) : raise SystemExit ( "Config file root dir '" + os . path . dirname ( sickbeard . CONFIG_FILE ) + "' must be writeable" ) os . chdir ( sickbeard . DATA_DIR ) if consoleLogging : print "Starting up Sick Beard " + SICKBEARD_VERSION + " from " + sickbeard . CONFIG_FILE if not os . path . isfile ( sickbeard . CONFIG_FILE ) : logger . log ( u"Unable to find " + sickbeard . CONFIG_FILE + " , all settings will be default" , logger . WARNING ) sickbeard . CFG = ConfigObj ( sickbeard . CONFIG_FILE ) sickbeard . initialize ( consoleLogging = consoleLogging ) sickbeard . showList = [ ] if sickbeard . DAEMON : daemonize ( ) sickbeard . PID = os . getpid ( ) if forcedPort : logger . log ( u"Forcing web server to port " + str ( forcedPort ) ) startPort = forcedPort else : startPort = sickbeard . WEB_PORT if sickbeard . WEB_LOG : log_dir = sickbeard . LOG_DIR else : log_dir = None if sickbeard . WEB_HOST and sickbeard . WEB_HOST != '0.0.0.0' : webhost = sickbeard . WEB_HOST else : if sickbeard . WEB_IPV6 : webhost = '::' else : webhost = '0.0.0.0' try : initWebServer ( { : startPort , : webhost , : os . path . join ( sickbeard . PROG_DIR , 'data' ) , : sickbeard . WEB_ROOT , : log_dir , : sickbeard . WEB_USERNAME , : sickbeard . WEB_PASSWORD , : sickbeard . ENABLE_HTTPS , : sickbeard . HTTPS_PORT , : sickbeard . HTTPS_CERT , : sickbeard . HTTPS_KEY , } ) except IOError : logger . log ( u"Unable to start web server, is something else running on port %d?" % startPort , logger . ERROR ) if sickbeard . LAUNCH_BROWSER and not sickbeard . DAEMON : logger . log ( u"Launching browser and exiting" , logger . ERROR ) sickbeard . launchBrowser ( startPort ) sys . exit ( ) logger . log ( u"Loading initial show list" ) loadShowsFromDB ( ) sickbeard . start ( ) if sickbeard . LAUNCH_BROWSER and not noLaunch and not sickbeard . DAEMON : sickbeard . launchBrowser ( startPort ) if forceUpdate : sickbeard . showUpdateScheduler . action . run ( force = True ) while ( True ) : if sickbeard . invoked_command : sickbeard . invoked_command ( ) sickbeard . invoked_command = None time . sleep ( 1 ) return if __name__ == "__main__" : if sys . hexversion >= 0x020600F0 : freeze_support ( ) main ( )
