"""Simplified chat demo for websockets. Authentication, error handling, etc are left as an exercise for the reader :) """ import logging import tornado . escape import tornado . ioloop import tornado . options import tornado . web import tornado . websocket import os . path import uuid from tornado . options import define , options define ( "port" , default = 8888 , help = "run on the given port" , type = int ) class Application ( tornado . web . Application ) : def __init__ ( self ) : handlers = [ ( r"/" , MainHandler ) , ( r"/chatsocket" , ChatSocketHandler ) , ] settings = dict ( cookie_secret = "43oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=" , template_path = os . path . join ( os . path . dirname ( __file__ ) , "templates" ) , static_path = os . path . join ( os . path . dirname ( __file__ ) , "static" ) , xsrf_cookies = True , autoescape = None , ) tornado . web . Application . __init__ ( self , handlers , ** settings ) class MainHandler ( tornado . web . RequestHandler ) : def get ( self ) : self . render ( "index.html" , messages = ChatSocketHandler . cache ) class ChatSocketHandler ( tornado . websocket . WebSocketHandler ) : waiters = set ( ) cache = [ ] cache_size = 200 def allow_draft76 ( self ) : return True def open ( self ) : ChatSocketHandler . waiters . add ( self ) def on_close ( self ) : ChatSocketHandler . waiters . remove ( self ) @ classmethod def update_cache ( cls , chat ) : cls . cache . append ( chat ) if len ( cls . cache ) > cls . cache_size : cls . cache = cls . cache [ - cls . cache_size : ] @ classmethod def send_updates ( cls , chat ) : logging . info ( "sending message to %d waiters" , len ( cls . waiters ) ) for waiter in cls . waiters : try : waiter . write_message ( chat ) except : logging . error ( "Error sending message" , exc_info = True ) def on_message ( self , message ) : logging . info ( "got message %r" , message ) parsed = tornado . escape . json_decode ( message ) chat = { : str ( uuid . uuid4 ( ) ) , : parsed [ "body" ] , } chat [ "html" ] = self . render_string ( "message.html" , message = chat ) ChatSocketHandler . update_cache ( chat ) ChatSocketHandler . send_updates ( chat ) def main ( ) : tornado . options . parse_command_line ( ) app = Application ( ) app . listen ( options . port ) tornado . ioloop . IOLoop . instance ( ) . start ( ) if __name__ == "__main__" : main ( )
