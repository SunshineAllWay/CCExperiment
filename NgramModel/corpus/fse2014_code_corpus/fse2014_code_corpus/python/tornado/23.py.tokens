from __future__ import absolute_import , division , with_statement import collections import errno import logging import socket import sys import re from tornado import ioloop from tornado import stack_context from tornado . util import b , bytes_type try : import ssl except ImportError : ssl = None class IOStream ( object ) : def __init__ ( self , socket , io_loop = None , max_buffer_size = 104857600 , read_chunk_size = 4096 ) : self . socket = socket self . socket . setblocking ( False ) self . io_loop = io_loop or ioloop . IOLoop . instance ( ) self . max_buffer_size = max_buffer_size self . read_chunk_size = read_chunk_size self . _read_buffer = collections . deque ( ) self . _write_buffer = collections . deque ( ) self . _read_buffer_size = 0 self . _write_buffer_frozen = False self . _read_delimiter = None self . _read_regex = None self . _read_bytes = None self . _read_until_close = False self . _read_callback = None self . _streaming_callback = None self . _write_callback = None self . _close_callback = None self . _connect_callback = None self . _connecting = False self . _state = None self . _pending_callbacks = 0 def connect ( self , address , callback = None ) : self . _connecting = True try : self . socket . connect ( address ) except socket . error , e : if e . args [ 0 ] not in ( errno . EINPROGRESS , errno . EWOULDBLOCK ) : logging . warning ( "Connect error on fd %d: %s" , self . socket . fileno ( ) , e ) self . close ( ) return self . _connect_callback = stack_context . wrap ( callback ) self . _add_io_state ( self . io_loop . WRITE ) def read_until_regex ( self , regex , callback ) : assert not self . _read_callback , "Already reading" self . _read_regex = re . compile ( regex ) self . _read_callback = stack_context . wrap ( callback ) while True : if self . _read_from_buffer ( ) : return self . _check_closed ( ) if self . _read_to_buffer ( ) == 0 : break self . _add_io_state ( self . io_loop . READ ) def read_until ( self , delimiter , callback ) : assert not self . _read_callback , "Already reading" self . _read_delimiter = delimiter self . _read_callback = stack_context . wrap ( callback ) while True : if self . _read_from_buffer ( ) : return self . _check_closed ( ) if self . _read_to_buffer ( ) == 0 : break self . _add_io_state ( self . io_loop . READ ) def read_bytes ( self , num_bytes , callback , streaming_callback = None ) : assert not self . _read_callback , "Already reading" assert isinstance ( num_bytes , ( int , long ) ) self . _read_bytes = num_bytes self . _read_callback = stack_context . wrap ( callback ) self . _streaming_callback = stack_context . wrap ( streaming_callback ) while True : if self . _read_from_buffer ( ) : return self . _check_closed ( ) if self . _read_to_buffer ( ) == 0 : break self . _add_io_state ( self . io_loop . READ ) def read_until_close ( self , callback , streaming_callback = None ) : assert not self . _read_callback , "Already reading" if self . closed ( ) : self . _run_callback ( callback , self . _consume ( self . _read_buffer_size ) ) return self . _read_until_close = True self . _read_callback = stack_context . wrap ( callback ) self . _streaming_callback = stack_context . wrap ( streaming_callback ) self . _add_io_state ( self . io_loop . READ ) def write ( self , data , callback = None ) : assert isinstance ( data , bytes_type ) self . _check_closed ( ) if data : self . _write_buffer . append ( data ) self . _write_callback = stack_context . wrap ( callback ) self . _handle_write ( ) if self . _write_buffer : self . _add_io_state ( self . io_loop . WRITE ) self . _maybe_add_error_listener ( ) def set_close_callback ( self , callback ) : self . _close_callback = stack_context . wrap ( callback ) def close ( self ) : if self . socket is not None : if self . _read_until_close : callback = self . _read_callback self . _read_callback = None self . _read_until_close = False self . _run_callback ( callback , self . _consume ( self . _read_buffer_size ) ) if self . _state is not None : self . io_loop . remove_handler ( self . socket . fileno ( ) ) self . _state = None self . socket . close ( ) self . socket = None if self . _close_callback and self . _pending_callbacks == 0 : cb = self . _close_callback self . _close_callback = None self . _run_callback ( cb ) def reading ( self ) : return self . _read_callback is not None def writing ( self ) : return bool ( self . _write_buffer ) def closed ( self ) : return self . socket is None def _handle_events ( self , fd , events ) : if not self . socket : logging . warning ( "Got events for closed stream %d" , fd ) return try : if events & self . io_loop . READ : self . _handle_read ( ) if not self . socket : return if events & self . io_loop . WRITE : if self . _connecting : self . _handle_connect ( ) self . _handle_write ( ) if not self . socket : return if events & self . io_loop . ERROR : self . io_loop . add_callback ( self . close ) return state = self . io_loop . ERROR if self . reading ( ) : state |= self . io_loop . READ if self . writing ( ) : state |= self . io_loop . WRITE if state == self . io_loop . ERROR : state |= self . io_loop . READ if state != self . _state : assert self . _state is not None , "shouldn't happen: _handle_events without self._state" self . _state = state self . io_loop . update_handler ( self . socket . fileno ( ) , self . _state ) except Exception : logging . error ( "Uncaught exception, closing connection." , exc_info = True ) self . close ( ) raise def _run_callback ( self , callback , * args ) : def wrapper ( ) : self . _pending_callbacks -= 1 try : callback ( * args ) except Exception : logging . error ( "Uncaught exception, closing connection." , exc_info = True ) self . close ( ) raise self . _maybe_add_error_listener ( ) with stack_context . NullContext ( ) : self . _pending_callbacks += 1 self . io_loop . add_callback ( wrapper ) def _handle_read ( self ) : while True : try : result = self . _read_to_buffer ( ) except Exception : self . close ( ) return if result == 0 : break else : if self . _read_from_buffer ( ) : return def _read_from_socket ( self ) : try : chunk = self . socket . recv ( self . read_chunk_size ) except socket . error , e : if e . args [ 0 ] in ( errno . EWOULDBLOCK , errno . EAGAIN ) : return None else : raise if not chunk : self . close ( ) return None return chunk def _read_to_buffer ( self ) : try : chunk = self . _read_from_socket ( ) except socket . error , e : logging . warning ( "Read error on %d: %s" , self . socket . fileno ( ) , e ) self . close ( ) raise if chunk is None : return 0 self . _read_buffer . append ( chunk ) self . _read_buffer_size += len ( chunk ) if self . _read_buffer_size >= self . max_buffer_size : logging . error ( "Reached maximum read buffer size" ) self . close ( ) raise IOError ( "Reached maximum read buffer size" ) return len ( chunk ) def _read_from_buffer ( self ) : if self . _read_bytes is not None : if self . _streaming_callback is not None and self . _read_buffer_size : bytes_to_consume = min ( self . _read_bytes , self . _read_buffer_size ) self . _read_bytes -= bytes_to_consume self . _run_callback ( self . _streaming_callback , self . _consume ( bytes_to_consume ) ) if self . _read_buffer_size >= self . _read_bytes : num_bytes = self . _read_bytes callback = self . _read_callback self . _read_callback = None self . _streaming_callback = None self . _read_bytes = None self . _run_callback ( callback , self . _consume ( num_bytes ) ) return True elif self . _read_delimiter is not None : loc = - 1 if self . _read_buffer : loc = self . _read_buffer [ 0 ] . find ( self . _read_delimiter ) while loc == - 1 and len ( self . _read_buffer ) > 1 : new_len = max ( len ( self . _read_buffer [ 0 ] ) * 2 , ( len ( self . _read_buffer [ 0 ] ) + len ( self . _read_buffer [ 1 ] ) ) ) _merge_prefix ( self . _read_buffer , new_len ) loc = self . _read_buffer [ 0 ] . find ( self . _read_delimiter ) if loc != - 1 : callback = self . _read_callback delimiter_len = len ( self . _read_delimiter ) self . _read_callback = None self . _streaming_callback = None self . _read_delimiter = None self . _run_callback ( callback , self . _consume ( loc + delimiter_len ) ) return True elif self . _read_regex is not None : m = None if self . _read_buffer : m = self . _read_regex . search ( self . _read_buffer [ 0 ] ) while m is None and len ( self . _read_buffer ) > 1 : new_len = max ( len ( self . _read_buffer [ 0 ] ) * 2 , ( len ( self . _read_buffer [ 0 ] ) + len ( self . _read_buffer [ 1 ] ) ) ) _merge_prefix ( self . _read_buffer , new_len ) m = self . _read_regex . search ( self . _read_buffer [ 0 ] ) _merge_prefix ( self . _read_buffer , sys . maxint ) m = self . _read_regex . search ( self . _read_buffer [ 0 ] ) if m : callback = self . _read_callback self . _read_callback = None self . _streaming_callback = None self . _read_regex = None self . _run_callback ( callback , self . _consume ( m . end ( ) ) ) return True elif self . _read_until_close : if self . _streaming_callback is not None and self . _read_buffer_size : self . _run_callback ( self . _streaming_callback , self . _consume ( self . _read_buffer_size ) ) return False def _handle_connect ( self ) : err = self . socket . getsockopt ( socket . SOL_SOCKET , socket . SO_ERROR ) if err != 0 : logging . warning ( "Connect error on fd %d: %s" , self . socket . fileno ( ) , errno . errorcode [ err ] ) self . close ( ) return if self . _connect_callback is not None : callback = self . _connect_callback self . _connect_callback = None self . _run_callback ( callback ) self . _connecting = False def _handle_write ( self ) : while self . _write_buffer : try : if not self . _write_buffer_frozen : _merge_prefix ( self . _write_buffer , 128 * 1024 ) num_bytes = self . socket . send ( self . _write_buffer [ 0 ] ) if num_bytes == 0 : self . _write_buffer_frozen = True break self . _write_buffer_frozen = False _merge_prefix ( self . _write_buffer , num_bytes ) self . _write_buffer . popleft ( ) except socket . error , e : if e . args [ 0 ] in ( errno . EWOULDBLOCK , errno . EAGAIN ) : self . _write_buffer_frozen = True break else : logging . warning ( "Write error on %d: %s" , self . socket . fileno ( ) , e ) self . close ( ) return if not self . _write_buffer and self . _write_callback : callback = self . _write_callback self . _write_callback = None self . _run_callback ( callback ) def _consume ( self , loc ) : if loc == 0 : return b ( "" ) _merge_prefix ( self . _read_buffer , loc ) self . _read_buffer_size -= loc return self . _read_buffer . popleft ( ) def _check_closed ( self ) : if not self . socket : raise IOError ( "Stream is closed" ) def _maybe_add_error_listener ( self ) : if self . _state is None and self . _pending_callbacks == 0 : if self . socket is None : cb = self . _close_callback if cb is not None : self . _close_callback = None self . _run_callback ( cb ) else : self . _add_io_state ( ioloop . IOLoop . READ ) def _add_io_state ( self , state ) : if self . socket is None : return if self . _state is None : self . _state = ioloop . IOLoop . ERROR | state with stack_context . NullContext ( ) : self . io_loop . add_handler ( self . socket . fileno ( ) , self . _handle_events , self . _state ) elif not self . _state & state : self . _state = self . _state | state self . io_loop . update_handler ( self . socket . fileno ( ) , self . _state ) class SSLIOStream ( IOStream ) : def __init__ ( self , * args , ** kwargs ) : self . _ssl_options = kwargs . pop ( 'ssl_options' , { } ) super ( SSLIOStream , self ) . __init__ ( * args , ** kwargs ) self . _ssl_accepting = True self . _handshake_reading = False self . _handshake_writing = False def reading ( self ) : return self . _handshake_reading or super ( SSLIOStream , self ) . reading ( ) def writing ( self ) : return self . _handshake_writing or super ( SSLIOStream , self ) . writing ( ) def _do_ssl_handshake ( self ) : try : self . _handshake_reading = False self . _handshake_writing = False self . socket . do_handshake ( ) except ssl . SSLError , err : if err . args [ 0 ] == ssl . SSL_ERROR_WANT_READ : self . _handshake_reading = True return elif err . args [ 0 ] == ssl . SSL_ERROR_WANT_WRITE : self . _handshake_writing = True return elif err . args [ 0 ] in ( ssl . SSL_ERROR_EOF , ssl . SSL_ERROR_ZERO_RETURN ) : return self . close ( ) elif err . args [ 0 ] == ssl . SSL_ERROR_SSL : logging . warning ( "SSL Error on %d: %s" , self . socket . fileno ( ) , err ) return self . close ( ) raise except socket . error , err : if err . args [ 0 ] == errno . ECONNABORTED : return self . close ( ) else : self . _ssl_accepting = False super ( SSLIOStream , self ) . _handle_connect ( ) def _handle_read ( self ) : if self . _ssl_accepting : self . _do_ssl_handshake ( ) return super ( SSLIOStream , self ) . _handle_read ( ) def _handle_write ( self ) : if self . _ssl_accepting : self . _do_ssl_handshake ( ) return super ( SSLIOStream , self ) . _handle_write ( ) def _handle_connect ( self ) : self . socket = ssl . wrap_socket ( self . socket , do_handshake_on_connect = False , ** self . _ssl_options ) def _read_from_socket ( self ) : if self . _ssl_accepting : return None try : chunk = self . socket . read ( self . read_chunk_size ) except ssl . SSLError , e : if e . args [ 0 ] == ssl . SSL_ERROR_WANT_READ : return None else : raise except socket . error , e : if e . args [ 0 ] in ( errno . EWOULDBLOCK , errno . EAGAIN ) : return None else : raise if not chunk : self . close ( ) return None return chunk def _merge_prefix ( deque , size ) : if len ( deque ) == 1 and len ( deque [ 0 ] ) <= size : return prefix = [ ] remaining = size while deque and remaining > 0 : chunk = deque . popleft ( ) if len ( chunk ) > remaining : deque . appendleft ( chunk [ remaining : ] ) chunk = chunk [ : remaining ] prefix . append ( chunk ) remaining -= len ( chunk ) if prefix : deque . appendleft ( type ( prefix [ 0 ] ) ( ) . join ( prefix ) ) if not deque : deque . appendleft ( b ( "" ) ) def doctests ( ) : import doctest return doctest . DocTestSuite ( )
