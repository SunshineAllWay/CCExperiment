from __future__ import absolute_import , division , with_statement import logging import os import signal import sys from tornado . httpclient import HTTPClient , HTTPError from tornado . httpserver import HTTPServer from tornado . ioloop import IOLoop from tornado . netutil import bind_sockets from tornado . process import fork_processes , task_id from tornado . simple_httpclient import SimpleAsyncHTTPClient from tornado . testing import LogTrapTestCase , get_unused_port from tornado . web import RequestHandler , Application class ProcessTest ( LogTrapTestCase ) : def get_app ( self ) : class ProcessHandler ( RequestHandler ) : def get ( self ) : if self . get_argument ( "exit" , None ) : os . _exit ( int ( self . get_argument ( "exit" ) ) ) if self . get_argument ( "signal" , None ) : os . kill ( os . getpid ( ) , int ( self . get_argument ( "signal" ) ) ) self . write ( str ( os . getpid ( ) ) ) return Application ( [ ( "/" , ProcessHandler ) ] ) def tearDown ( self ) : if task_id ( ) is not None : logging . error ( "aborting child process from tearDown" ) logging . shutdown ( ) os . _exit ( 1 ) super ( ProcessTest , self ) . tearDown ( ) def test_multi_process ( self ) : self . assertFalse ( IOLoop . initialized ( ) ) port = get_unused_port ( ) def get_url ( path ) : return "http://127.0.0.1:%d%s" % ( port , path ) sockets = bind_sockets ( port , "127.0.0.1" ) signal . alarm ( 5 ) try : id = fork_processes ( 3 , max_restarts = 3 ) except SystemExit , e : self . assertEqual ( e . code , 0 ) self . assertTrue ( task_id ( ) is None ) for sock in sockets : sock . close ( ) signal . alarm ( 0 ) return signal . alarm ( 5 ) try : if id in ( 0 , 1 ) : signal . alarm ( 5 ) self . assertEqual ( id , task_id ( ) ) server = HTTPServer ( self . get_app ( ) ) server . add_sockets ( sockets ) IOLoop . instance ( ) . start ( ) elif id == 2 : signal . alarm ( 5 ) self . assertEqual ( id , task_id ( ) ) for sock in sockets : sock . close ( ) client = HTTPClient ( SimpleAsyncHTTPClient ) def fetch ( url , fail_ok = False ) : try : return client . fetch ( get_url ( url ) ) except HTTPError , e : if not ( fail_ok and e . code == 599 ) : raise fetch ( "/?exit=2" , fail_ok = True ) fetch ( "/?exit=3" , fail_ok = True ) int ( fetch ( "/" ) . body ) fetch ( "/?exit=0" , fail_ok = True ) pid = int ( fetch ( "/" ) . body ) fetch ( "/?exit=4" , fail_ok = True ) pid2 = int ( fetch ( "/" ) . body ) self . assertNotEqual ( pid , pid2 ) fetch ( "/?exit=0" , fail_ok = True ) os . _exit ( 0 ) except Exception : logging . error ( "exception in child process %d" , id , exc_info = True ) raise if os . name != 'posix' or sys . platform == 'cygwin' : del ProcessTest
