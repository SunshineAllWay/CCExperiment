from __future__ import absolute_import , division , with_statement import csv import datetime import logging import os import re _default_locale = "en_US" _translations = { } _supported_locales = frozenset ( [ _default_locale ] ) _use_gettext = False def get ( * locale_codes ) : return Locale . get_closest ( * locale_codes ) def set_default_locale ( code ) : global _default_locale global _supported_locales _default_locale = code _supported_locales = frozenset ( _translations . keys ( ) + [ _default_locale ] ) def load_translations ( directory ) : global _translations global _supported_locales _translations = { } for path in os . listdir ( directory ) : if not path . endswith ( ".csv" ) : continue locale , extension = path . split ( "." ) if not re . match ( "[a-z]+(_[A-Z]+)?$" , locale ) : logging . error ( "Unrecognized locale %r (path: %s)" , locale , os . path . join ( directory , path ) ) continue f = open ( os . path . join ( directory , path ) , "r" ) _translations [ locale ] = { } for i , row in enumerate ( csv . reader ( f ) ) : if not row or len ( row ) < 2 : continue row = [ c . decode ( "utf-8" ) . strip ( ) for c in row ] english , translation = row [ : 2 ] if len ( row ) > 2 : plural = row [ 2 ] or "unknown" else : plural = "unknown" if plural not in ( "plural" , "singular" , "unknown" ) : logging . error ( "Unrecognized plural indicator %r in %s line %d" , plural , path , i + 1 ) continue _translations [ locale ] . setdefault ( plural , { } ) [ english ] = translation f . close ( ) _supported_locales = frozenset ( _translations . keys ( ) + [ _default_locale ] ) logging . info ( "Supported locales: %s" , sorted ( _supported_locales ) ) def load_gettext_translations ( directory , domain ) : import gettext global _translations global _supported_locales global _use_gettext _translations = { } for lang in os . listdir ( directory ) : if lang . startswith ( '.' ) : continue if os . path . isfile ( os . path . join ( directory , lang ) ) : continue try : os . stat ( os . path . join ( directory , lang , "LC_MESSAGES" , domain + ".mo" ) ) _translations [ lang ] = gettext . translation ( domain , directory , languages = [ lang ] ) except Exception , e : logging . error ( "Cannot load translation for '%s': %s" , lang , str ( e ) ) continue _supported_locales = frozenset ( _translations . keys ( ) + [ _default_locale ] ) _use_gettext = True logging . info ( "Supported locales: %s" , sorted ( _supported_locales ) ) def get_supported_locales ( cls ) : return _supported_locales class Locale ( object ) : @ classmethod def get_closest ( cls , * locale_codes ) : for code in locale_codes : if not code : continue code = code . replace ( "-" , "_" ) parts = code . split ( "_" ) if len ( parts ) > 2 : continue elif len ( parts ) == 2 : code = parts [ 0 ] . lower ( ) + "_" + parts [ 1 ] . upper ( ) if code in _supported_locales : return cls . get ( code ) if parts [ 0 ] . lower ( ) in _supported_locales : return cls . get ( parts [ 0 ] . lower ( ) ) return cls . get ( _default_locale ) @ classmethod def get ( cls , code ) : if not hasattr ( cls , "_cache" ) : cls . _cache = { } if code not in cls . _cache : assert code in _supported_locales translations = _translations . get ( code , None ) if translations is None : locale = CSVLocale ( code , { } ) elif _use_gettext : locale = GettextLocale ( code , translations ) else : locale = CSVLocale ( code , translations ) cls . _cache [ code ] = locale return cls . _cache [ code ] def __init__ ( self , code , translations ) : self . code = code self . name = LOCALE_NAMES . get ( code , { } ) . get ( "name" , u"Unknown" ) self . rtl = False for prefix in [ "fa" , "ar" , "he" ] : if self . code . startswith ( prefix ) : self . rtl = True break self . translations = translations _ = self . translate self . _months = [ _ ( "January" ) , _ ( "February" ) , _ ( "March" ) , _ ( "April" ) , _ ( "May" ) , _ ( "June" ) , _ ( "July" ) , _ ( "August" ) , _ ( "September" ) , _ ( "October" ) , _ ( "November" ) , _ ( "December" ) ] self . _weekdays = [ _ ( "Monday" ) , _ ( "Tuesday" ) , _ ( "Wednesday" ) , _ ( "Thursday" ) , _ ( "Friday" ) , _ ( "Saturday" ) , _ ( "Sunday" ) ] def translate ( self , message , plural_message = None , count = None ) : raise NotImplementedError ( ) def format_date ( self , date , gmt_offset = 0 , relative = True , shorter = False , full_format = False ) : if self . code . startswith ( "ru" ) : relative = False if type ( date ) in ( int , long , float ) : date = datetime . datetime . utcfromtimestamp ( date ) now = datetime . datetime . utcnow ( ) if date > now : if relative and ( date - now ) . seconds < 60 : date = now else : full_format = True local_date = date - datetime . timedelta ( minutes = gmt_offset ) local_now = now - datetime . timedelta ( minutes = gmt_offset ) local_yesterday = local_now - datetime . timedelta ( hours = 24 ) difference = now - date seconds = difference . seconds days = difference . days _ = self . translate format = None if not full_format : if relative and days == 0 : if seconds < 50 : return _ ( "1 second ago" , "%(seconds)d seconds ago" , seconds ) % { "seconds" : seconds } if seconds < 50 * 60 : minutes = round ( seconds / 60.0 ) return _ ( "1 minute ago" , "%(minutes)d minutes ago" , minutes ) % { "minutes" : minutes } hours = round ( seconds / ( 60.0 * 60 ) ) return _ ( "1 hour ago" , "%(hours)d hours ago" , hours ) % { "hours" : hours } if days == 0 : format = _ ( "%(time)s" ) elif days == 1 and local_date . day == local_yesterday . day and relative : format = _ ( "yesterday" ) if shorter else _ ( "yesterday at %(time)s" ) elif days < 5 : format = _ ( "%(weekday)s" ) if shorter else _ ( "%(weekday)s at %(time)s" ) elif days < 334 : format = _ ( "%(month_name)s %(day)s" ) if shorter else _ ( "%(month_name)s %(day)s at %(time)s" ) if format is None : format = _ ( "%(month_name)s %(day)s, %(year)s" ) if shorter else _ ( "%(month_name)s %(day)s, %(year)s at %(time)s" ) tfhour_clock = self . code not in ( "en" , "en_US" , "zh_CN" ) if tfhour_clock : str_time = "%d:%02d" % ( local_date . hour , local_date . minute ) elif self . code == "zh_CN" : str_time = "%s%d:%02d" % ( ( u'\u4e0a\u5348' , u'\u4e0b\u5348' ) [ local_date . hour >= 12 ] , local_date . hour % 12 or 12 , local_date . minute ) else : str_time = "%d:%02d %s" % ( local_date . hour % 12 or 12 , local_date . minute , ( "am" , "pm" ) [ local_date . hour >= 12 ] ) return format % { : self . _months [ local_date . month - 1 ] , : self . _weekdays [ local_date . weekday ( ) ] , : str ( local_date . day ) , : str ( local_date . year ) , : str_time } def format_day ( self , date , gmt_offset = 0 , dow = True ) : local_date = date - datetime . timedelta ( minutes = gmt_offset ) _ = self . translate if dow : return _ ( "%(weekday)s, %(month_name)s %(day)s" ) % { : self . _months [ local_date . month - 1 ] , : self . _weekdays [ local_date . weekday ( ) ] , : str ( local_date . day ) , } else : return _ ( "%(month_name)s %(day)s" ) % { : self . _months [ local_date . month - 1 ] , : str ( local_date . day ) , } def list ( self , parts ) : _ = self . translate if len ( parts ) == 0 : return "" if len ( parts ) == 1 : return parts [ 0 ] comma = u' \u0648 ' if self . code . startswith ( "fa" ) else u", " return _ ( "%(commas)s and %(last)s" ) % { : comma . join ( parts [ : - 1 ] ) , : parts [ len ( parts ) - 1 ] , } def friendly_number ( self , value ) : if self . code not in ( "en" , "en_US" ) : return str ( value ) value = str ( value ) parts = [ ] while value : parts . append ( value [ - 3 : ] ) value = value [ : - 3 ] return "," . join ( reversed ( parts ) ) class CSVLocale ( Locale ) : def translate ( self , message , plural_message = None , count = None ) : if plural_message is not None : assert count is not None if count != 1 : message = plural_message message_dict = self . translations . get ( "plural" , { } ) else : message_dict = self . translations . get ( "singular" , { } ) else : message_dict = self . translations . get ( "unknown" , { } ) return message_dict . get ( message , message ) class GettextLocale ( Locale ) : def translate ( self , message , plural_message = None , count = None ) : if plural_message is not None : assert count is not None return self . translations . ungettext ( message , plural_message , count ) else : return self . translations . ugettext ( message ) LOCALE_NAMES = { : { "name_en" : u"Afrikaans" , "name" : u"Afrikaans" } , : { "name_en" : u"Amharic" , "name" : u'\u12a0\u121b\u122d\u129b' } , : { "name_en" : u"Arabic" , "name" : u"\u0627\u0644\u0639\u0631\u0628\u064a\u0629" } , : { "name_en" : u"Bulgarian" , "name" : u"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438" } , : { "name_en" : u"Bengali" , "name" : u"\u09ac\u09be\u0982\u09b2\u09be" } , : { "name_en" : u"Bosnian" , "name" : u"Bosanski" } , : { "name_en" : u"Catalan" , "name" : u"Catal\xe0" } , : { "name_en" : u"Czech" , "name" : u"\u010ce\u0161tina" } , : { "name_en" : u"Welsh" , "name" : u"Cymraeg" } , : { "name_en" : u"Danish" , "name" : u"Dansk" } , : { "name_en" : u"German" , "name" : u"Deutsch" } , : { "name_en" : u"Greek" , "name" : u"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac" } , : { "name_en" : u"English (UK)" , "name" : u"English (UK)" } , : { "name_en" : u"English (US)" , "name" : u"English (US)" } , : { "name_en" : u"Spanish (Spain)" , "name" : u"Espa\xf1ol (Espa\xf1a)" } , : { "name_en" : u"Spanish" , "name" : u"Espa\xf1ol" } , : { "name_en" : u"Estonian" , "name" : u"Eesti" } , : { "name_en" : u"Basque" , "name" : u"Euskara" } , : { "name_en" : u"Persian" , "name" : u"\u0641\u0627\u0631\u0633\u06cc" } , : { "name_en" : u"Finnish" , "name" : u"Suomi" } , : { "name_en" : u"French (Canada)" , "name" : u"Fran\xe7ais (Canada)" } , : { "name_en" : u"French" , "name" : u"Fran\xe7ais" } , : { "name_en" : u"Irish" , "name" : u"Gaeilge" } , : { "name_en" : u"Galician" , "name" : u"Galego" } , : { "name_en" : u"Hebrew" , "name" : u"\u05e2\u05d1\u05e8\u05d9\u05ea" } , : { "name_en" : u"Hindi" , "name" : u"\u0939\u093f\u0928\u094d\u0926\u0940" } , : { "name_en" : u"Croatian" , "name" : u"Hrvatski" } , : { "name_en" : u"Hungarian" , "name" : u"Magyar" } , : { "name_en" : u"Indonesian" , "name" : u"Bahasa Indonesia" } , : { "name_en" : u"Icelandic" , "name" : u"\xcdslenska" } , : { "name_en" : u"Italian" , "name" : u"Italiano" } , : { "name_en" : u"Japanese" , "name" : u"\u65e5\u672c\u8a9e" } , : { "name_en" : u"Korean" , "name" : u"\ud55c\uad6d\uc5b4" } , : { "name_en" : u"Lithuanian" , "name" : u"Lietuvi\u0173" } , : { "name_en" : u"Latvian" , "name" : u"Latvie\u0161u" } , : { "name_en" : u"Macedonian" , "name" : u"\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438" } , : { "name_en" : u"Malayalam" , "name" : u"\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02" } , : { "name_en" : u"Malay" , "name" : u"Bahasa Melayu" } , : { "name_en" : u"Norwegian (bokmal)" , "name" : u"Norsk (bokm\xe5l)" } , : { "name_en" : u"Dutch" , "name" : u"Nederlands" } , : { "name_en" : u"Norwegian (nynorsk)" , "name" : u"Norsk (nynorsk)" } , : { "name_en" : u"Punjabi" , "name" : u"\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40" } , : { "name_en" : u"Polish" , "name" : u"Polski" } , : { "name_en" : u"Portuguese (Brazil)" , "name" : u"Portugu\xeas (Brasil)" } , : { "name_en" : u"Portuguese (Portugal)" , "name" : u"Portugu\xeas (Portugal)" } , : { "name_en" : u"Romanian" , "name" : u"Rom\xe2n\u0103" } , : { "name_en" : u"Russian" , "name" : u"\u0420\u0443\u0441\u0441\u043a\u0438\u0439" } , : { "name_en" : u"Slovak" , "name" : u"Sloven\u010dina" } , : { "name_en" : u"Slovenian" , "name" : u"Sloven\u0161\u010dina" } , : { "name_en" : u"Albanian" , "name" : u"Shqip" } , : { "name_en" : u"Serbian" , "name" : u"\u0421\u0440\u043f\u0441\u043a\u0438" } , : { "name_en" : u"Swedish" , "name" : u"Svenska" } , : { "name_en" : u"Swahili" , "name" : u"Kiswahili" } , : { "name_en" : u"Tamil" , "name" : u"\u0ba4\u0bae\u0bbf\u0bb4\u0bcd" } , : { "name_en" : u"Telugu" , "name" : u"\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41" } , : { "name_en" : u"Thai" , "name" : u"\u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22" } , : { "name_en" : u"Filipino" , "name" : u"Filipino" } , : { "name_en" : u"Turkish" , "name" : u"T\xfcrk\xe7e" } , : { "name_en" : u"Ukraini " , "name" : u"\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430" } , : { "name_en" : u"Vietnamese" , "name" : u"Ti\u1ebfng Vi\u1ec7t" } , : { "name_en" : u"Chinese (Simplified)" , "name" : u"\u4e2d\u6587(\u7b80\u4f53)" } , : { "name_en" : u"Chinese (Traditional)" , "name" : u"\u4e2d\u6587(\u7e41\u9ad4)" } , }
