from boto . ec2 . cloudwatch . alarm import MetricAlarm from boto . ec2 . cloudwatch . dimension import Dimension class Metric ( object ) : Statistics = [ 'Minimum' , 'Maximum' , 'Sum' , 'Average' , 'SampleCount' ] Units = [ 'Seconds' , 'Microseconds' , 'Milliseconds' , 'Bytes' , 'Kilobytes' , , 'Gigabytes' , 'Terabytes' , 'Bits' , 'Kilobits' , , 'Gigabits' , 'Terabits' , 'Percent' , 'Count' , , 'Kilobytes/Second' , 'Megabytes/Second' , , 'Terabytes/Second' , 'Bits/Second' , , 'Megabits/Second' , 'Gigabits/Second' , , 'Count/Second' , None ] def __init__ ( self , connection = None ) : self . connection = connection self . name = None self . namespace = None self . dimensions = None def __repr__ ( self ) : return 'Metric:%s' % self . name def startElement ( self , name , attrs , connection ) : if name == 'Dimensions' : self . dimensions = Dimension ( ) return self . dimensions def endElement ( self , name , value , connection ) : if name == 'MetricName' : self . name = value elif name == 'Namespace' : self . namespace = value else : setattr ( self , name , value ) def query ( self , start_time , end_time , statistics , unit = None , period = 60 ) : if not isinstance ( statistics , list ) : statistics = [ statistics ] return self . connection . get_metric_statistics ( period , start_time , end_time , self . name , self . namespace , statistics , self . dimensions , unit ) def create_alarm ( self , name , comparison , threshold , period , evaluation_periods , statistic , enabled = True , description = None , dimensions = None , alarm_actions = None , ok_actions = None , insufficient_data_actions = None , unit = None ) : if not dimensions : dimensions = self . dimensions alarm = MetricAlarm ( self . connection , name , self . name , self . namespace , statistic , comparison , threshold , period , evaluation_periods , unit , description , dimensions , alarm_actions , insufficient_data_actions , ok_actions ) if self . connection . put_metric_alarm ( alarm ) : return alarm def describe_alarms ( self , period = None , statistic = None , dimensions = None , unit = None ) : return self . connection . describe_alarms_for_metric ( self . name , self . namespace , period , statistic , dimensions , unit )
