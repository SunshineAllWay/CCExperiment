from boto . sdb . db . property import ListProperty from boto . sdb . db . model import Model import time class SimpleListModel ( Model ) : nums = ListProperty ( int ) strs = ListProperty ( str ) class TestLists ( object ) : def setup_class ( cls ) : cls . objs = [ ] def teardown_class ( cls ) : for o in cls . objs : try : o . delete ( ) except : pass def test_list_order ( self ) : t = SimpleListModel ( ) t . nums = [ 5 , 4 , 1 , 3 , 2 ] t . strs = [ "B" , "C" , "A" , "D" , "Foo" ] t . put ( ) self . objs . append ( t ) time . sleep ( 3 ) t = SimpleListModel . get_by_id ( t . id ) assert ( t . nums == [ 5 , 4 , 1 , 3 , 2 ] ) assert ( t . strs == [ "B" , "C" , "A" , "D" , "Foo" ] ) def test_old_compat ( self ) : t = SimpleListModel ( ) t . put ( ) self . objs . append ( t ) time . sleep ( 3 ) item = t . _get_raw_item ( ) item [ 'strs' ] = [ "A" , "B" , "C" ] item . save ( ) time . sleep ( 3 ) t = SimpleListModel . get_by_id ( t . id ) i1 = item [ 'strs' ] i1 . sort ( ) i2 = t . strs i2 . sort ( ) assert ( i1 == i2 ) def test_query_equals ( self ) : t = SimpleListModel ( ) t . strs = [ "Bizzle" , "Bar" ] t . put ( ) self . objs . append ( t ) time . sleep ( 3 ) assert ( SimpleListModel . find ( strs = "Bizzle" ) . count ( ) == 1 ) assert ( SimpleListModel . find ( strs = "Bar" ) . count ( ) == 1 ) assert ( SimpleListModel . find ( strs = [ "Bar" , "Bizzle" ] ) . count ( ) == 1 ) def test_query_not_equals ( self ) : t = SimpleListModel ( ) t . strs = [ "Fizzle" ] t . put ( ) self . objs . append ( t ) time . sleep ( 3 ) print SimpleListModel . all ( ) . filter ( "strs !=" , "Fizzle" ) . get_query ( ) for tt in SimpleListModel . all ( ) . filter ( "strs !=" , "Fizzle" ) : print tt . strs assert ( "Fizzle" not in tt . strs )
