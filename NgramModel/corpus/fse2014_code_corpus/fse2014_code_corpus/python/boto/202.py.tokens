from boto . resultset import ResultSet class AppCookieStickinessPolicy ( object ) : def __init__ ( self , connection = None ) : self . cookie_name = None self . policy_name = None def __repr__ ( self ) : return 'AppCookieStickiness(%s, %s)' % ( self . policy_name , self . cookie_name ) def startElement ( self , name , attrs , connection ) : pass def endElement ( self , name , value , connection ) : if name == 'CookieName' : self . cookie_name = value elif name == 'PolicyName' : self . policy_name = value class LBCookieStickinessPolicy ( object ) : def __init__ ( self , connection = None ) : self . policy_name = None self . cookie_expiration_period = None def __repr__ ( self ) : return 'LBCookieStickiness(%s, %s)' % ( self . policy_name , self . cookie_expiration_period ) def startElement ( self , name , attrs , connection ) : pass def endElement ( self , name , value , connection ) : if name == 'CookieExpirationPeriod' : self . cookie_expiration_period = value elif name == 'PolicyName' : self . policy_name = value class Policies ( object ) : def __init__ ( self , connection = None ) : self . connection = connection self . app_cookie_stickiness_policies = None self . lb_cookie_stickiness_policies = None def __repr__ ( self ) : app = 'AppCookieStickiness%s' % self . app_cookie_stickiness_policies lb = 'LBCookieStickiness%s' % self . lb_cookie_stickiness_policies return 'Policies(%s,%s)' % ( app , lb ) def startElement ( self , name , attrs , connection ) : if name == 'AppCookieStickinessPolicies' : rs = ResultSet ( [ ( 'member' , AppCookieStickinessPolicy ) ] ) self . app_cookie_stickiness_policies = rs elif name == 'LBCookieStickinessPolicies' : rs = ResultSet ( [ ( 'member' , LBCookieStickinessPolicy ) ] ) self . lb_cookie_stickiness_policies = rs def endElement ( self , name , value , connection ) : return
