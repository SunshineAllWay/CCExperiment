from boto . ec2 . ec2object import TaggedEC2Object class Snapshot ( TaggedEC2Object ) : AttrName = 'createVolumePermission' def __init__ ( self , connection = None ) : TaggedEC2Object . __init__ ( self , connection ) self . id = None self . volume_id = None self . status = None self . progress = None self . start_time = None self . owner_id = None self . volume_size = None self . description = None def __repr__ ( self ) : return 'Snapshot:%s' % self . id def endElement ( self , name , value , connection ) : if name == 'snapshotId' : self . id = value elif name == 'volumeId' : self . volume_id = value elif name == 'status' : self . status = value elif name == 'startTime' : self . start_time = value elif name == 'ownerId' : self . owner_id = value elif name == 'volumeSize' : try : self . volume_size = int ( value ) except : self . volume_size = value elif name == 'description' : self . description = value else : setattr ( self , name , value ) def _update ( self , updated ) : self . progress = updated . progress self . status = updated . status def update ( self , validate = False ) : rs = self . connection . get_all_snapshots ( [ self . id ] ) if len ( rs ) > 0 : self . _update ( rs [ 0 ] ) elif validate : raise ValueError ( '%s is not a valid Snapshot ID' % self . id ) return self . progress def delete ( self ) : return self . connection . delete_snapshot ( self . id ) def get_permissions ( self ) : attrs = self . connection . get_snapshot_attribute ( self . id , self . AttrName ) return attrs . attrs def share ( self , user_ids = None , groups = None ) : return self . connection . modify_snapshot_attribute ( self . id , self . AttrName , , user_ids , groups ) def unshare ( self , user_ids = None , groups = None ) : return self . connection . modify_snapshot_attribute ( self . id , self . AttrName , , user_ids , groups ) def reset_permissions ( self ) : return self . connection . reset_snapshot_attribute ( self . id , self . AttrName ) class SnapshotAttribute : def __init__ ( self , parent = None ) : self . snapshot_id = None self . attrs = { } def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'createVolumePermission' : self . name = 'create_volume_permission' elif name == 'group' : if self . attrs . has_key ( 'groups' ) : self . attrs [ 'groups' ] . append ( value ) else : self . attrs [ 'groups' ] = [ value ] elif name == 'userId' : if self . attrs . has_key ( 'user_ids' ) : self . attrs [ 'user_ids' ] . append ( value ) else : self . attrs [ 'user_ids' ] = [ value ] elif name == 'snapshotId' : self . snapshot_id = value else : setattr ( self , name , value )
