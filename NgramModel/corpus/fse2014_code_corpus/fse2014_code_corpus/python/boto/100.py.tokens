from boto import handler import xml . sax class Rule ( object ) : def __init__ ( self , id = None , prefix = None , status = None , expiration = None ) : self . id = id self . prefix = prefix self . status = status self . expiration = expiration def __repr__ ( self ) : return '<Rule: %s>' % self . id def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'ID' : self . id = value elif name == 'Prefix' : self . prefix = value elif name == 'Status' : self . status = value elif name == 'Days' : self . expiration = int ( value ) else : setattr ( self , name , value ) def to_xml ( self ) : s = '<Rule>' s += '<ID>%s</ID>' % self . id s += '<Prefix>%s</Prefix>' % self . prefix s += '<Status>%s</Status>' % self . status s += '<Expiration><Days>%d</Days></Expiration>' % self . expiration s += '</Rule>' return s class Lifecycle ( list ) : def startElement ( self , name , attrs , connection ) : if name == 'Rule' : rule = Rule ( ) self . append ( rule ) return rule return None def endElement ( self , name , value , connection ) : setattr ( self , name , value ) def to_xml ( self ) : s = '<LifecycleConfiguration>' for rule in self : s += rule . to_xml ( ) s += '</LifecycleConfiguration>' return s def add_rule ( self , id , prefix , status , expiration ) : rule = Rule ( id , prefix , status , expiration ) self . append ( rule )
