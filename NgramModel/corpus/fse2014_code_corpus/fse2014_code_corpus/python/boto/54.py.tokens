import glob import imp , os . path class Plugin ( object ) : capability = [ ] @ classmethod def is_capable ( cls , requested_capability ) : for c in requested_capability : if not c in cls . capability : return False return True def get_plugin ( cls , requested_capability = None ) : if not requested_capability : requested_capability = [ ] result = [ ] for handler in cls . __subclasses__ ( ) : if handler . is_capable ( requested_capability ) : result . append ( handler ) return result def _import_module ( filename ) : ( path , name ) = os . path . split ( filename ) ( name , ext ) = os . path . splitext ( name ) ( file , filename , data ) = imp . find_module ( name , [ path ] ) try : return imp . load_module ( name , file , filename , data ) finally : if file : file . close ( ) _plugin_loaded = False def load_plugins ( config ) : global _plugin_loaded if _plugin_loaded : return _plugin_loaded = True if not config . has_option ( 'Plugin' , 'plugin_directory' ) : return directory = config . get ( 'Plugin' , 'plugin_directory' ) for file in glob . glob ( os . path . join ( directory , '*.py' ) ) : _import_module ( file )
