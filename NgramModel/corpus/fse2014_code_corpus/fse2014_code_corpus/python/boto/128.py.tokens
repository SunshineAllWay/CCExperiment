from boto . ec2 . connection import EC2Connection from boto . resultset import ResultSet from boto . vpc . vpc import VPC from boto . vpc . customergateway import CustomerGateway from boto . vpc . routetable import RouteTable from boto . vpc . internetgateway import InternetGateway from boto . vpc . vpngateway import VpnGateway , Attachment from boto . vpc . dhcpoptions import DhcpOptions from boto . vpc . subnet import Subnet from boto . vpc . vpnconnection import VpnConnection class VPCConnection ( EC2Connection ) : def get_all_vpcs ( self , vpc_ids = None , filters = None ) : params = { } if vpc_ids : self . build_list_params ( params , vpc_ids , 'VpcId' ) if filters : i = 1 for filter in filters : params [ ( 'Filter.%d.Name' % i ) ] = filter [ 0 ] params [ ( 'Filter.%d.Value.1' % i ) ] = filter [ 1 ] i += 1 return self . get_list ( 'DescribeVpcs' , params , [ ( 'item' , VPC ) ] ) def create_vpc ( self , cidr_block ) : params = { 'CidrBlock' : cidr_block } return self . get_object ( 'CreateVpc' , params , VPC ) def delete_vpc ( self , vpc_id ) : params = { 'VpcId' : vpc_id } return self . get_status ( 'DeleteVpc' , params ) def get_all_route_tables ( self , route_table_ids = None , filters = None ) : params = { } if route_table_ids : self . build_list_params ( params , route_table_ids , "RouteTableId" ) if filters : self . build_filter_params ( params , dict ( filters ) ) return self . get_list ( 'DescribeRouteTables' , params , [ ( 'item' , RouteTable ) ] ) def associate_route_table ( self , route_table_id , subnet_id ) : params = { : route_table_id , : subnet_id } result = self . get_object ( 'AssociateRouteTable' , params , ResultSet ) return result . associationId def disassociate_route_table ( self , association_id ) : params = { 'AssociationId' : association_id } return self . get_status ( 'DisassociateRouteTable' , params ) def create_route_table ( self , vpc_id ) : params = { 'VpcId' : vpc_id } return self . get_object ( 'CreateRouteTable' , params , RouteTable ) def delete_route_table ( self , route_table_id ) : params = { 'RouteTableId' : route_table_id } return self . get_status ( 'DeleteRouteTable' , params ) def create_route ( self , route_table_id , destination_cidr_block , gateway_id = None , instance_id = None ) : params = { : route_table_id , : destination_cidr_block } if gateway_id is not None : params [ 'GatewayId' ] = gateway_id elif instance_id is not None : params [ 'InstanceId' ] = instance_id return self . get_status ( 'CreateRoute' , params ) def delete_route ( self , route_table_id , destination_cidr_block ) : params = { : route_table_id , : destination_cidr_block } return self . get_status ( 'DeleteRoute' , params ) def get_all_internet_gateways ( self , internet_gateway_ids = None , filters = None ) : params = { } if internet_gateway_ids : self . build_list_params ( params , internet_gateway_ids , 'InternetGatewayId' ) if filters : self . build_filter_params ( params , dict ( filters ) ) return self . get_list ( 'DescribeInternetGateways' , params , [ ( 'item' , InternetGateway ) ] ) def create_internet_gateway ( self ) : return self . get_object ( 'CreateInternetGateway' , { } , InternetGateway ) def delete_internet_gateway ( self , internet_gateway_id ) : params = { 'InternetGatewayId' : internet_gateway_id } return self . get_status ( 'DeleteInternetGateway' , params ) def attach_internet_gateway ( self , internet_gateway_id , vpc_id ) : params = { : internet_gateway_id , : vpc_id } return self . get_status ( 'AttachInternetGateway' , params ) def detach_internet_gateway ( self , internet_gateway_id , vpc_id ) : params = { : internet_gateway_id , : vpc_id } return self . get_status ( 'DetachInternetGateway' , params ) def get_all_customer_gateways ( self , customer_gateway_ids = None , filters = None ) : params = { } if customer_gateway_ids : self . build_list_params ( params , customer_gateway_ids , 'CustomerGatewayId' ) if filters : i = 1 for filter in filters : params [ ( 'Filter.%d.Name' % i ) ] = filter [ 0 ] params [ ( 'Filter.%d.Value.1' ) ] = filter [ 1 ] i += 1 return self . get_list ( 'DescribeCustomerGateways' , params , [ ( 'item' , CustomerGateway ) ] ) def create_customer_gateway ( self , type , ip_address , bgp_asn ) : params = { 'Type' : type , : ip_address , : bgp_asn } return self . get_object ( 'CreateCustomerGateway' , params , CustomerGateway ) def delete_customer_gateway ( self , customer_gateway_id ) : params = { 'CustomerGatewayId' : customer_gateway_id } return self . get_status ( 'DeleteCustomerGateway' , params ) def get_all_vpn_gateways ( self , vpn_gateway_ids = None , filters = None ) : params = { } if vpn_gateway_ids : self . build_list_params ( params , vpn_gateway_ids , 'VpnGatewayId' ) if filters : i = 1 for filter in filters : params [ ( 'Filter.%d.Name' % i ) ] = filter [ 0 ] params [ ( 'Filter.%d.Value.1' ) ] = filter [ 1 ] i += 1 return self . get_list ( 'DescribeVpnGateways' , params , [ ( 'item' , VpnGateway ) ] ) def create_vpn_gateway ( self , type , availability_zone = None ) : params = { 'Type' : type } if availability_zone : params [ 'AvailabilityZone' ] = availability_zone return self . get_object ( 'CreateVpnGateway' , params , VpnGateway ) def delete_vpn_gateway ( self , vpn_gateway_id ) : params = { 'VpnGatewayId' : vpn_gateway_id } return self . get_status ( 'DeleteVpnGateway' , params ) def attach_vpn_gateway ( self , vpn_gateway_id , vpc_id ) : params = { 'VpnGatewayId' : vpn_gateway_id , : vpc_id } return self . get_object ( 'AttachVpnGateway' , params , Attachment ) def get_all_subnets ( self , subnet_ids = None , filters = None ) : params = { } if subnet_ids : self . build_list_params ( params , subnet_ids , 'SubnetId' ) if filters : i = 1 for filter in filters : params [ ( 'Filter.%d.Name' % i ) ] = filter [ 0 ] params [ ( 'Filter.%d.Value.1' % i ) ] = filter [ 1 ] i += 1 return self . get_list ( 'DescribeSubnets' , params , [ ( 'item' , Subnet ) ] ) def create_subnet ( self , vpc_id , cidr_block , availability_zone = None ) : params = { 'VpcId' : vpc_id , : cidr_block } if availability_zone : params [ 'AvailabilityZone' ] = availability_zone return self . get_object ( 'CreateSubnet' , params , Subnet ) def delete_subnet ( self , subnet_id ) : params = { 'SubnetId' : subnet_id } return self . get_status ( 'DeleteSubnet' , params ) def get_all_dhcp_options ( self , dhcp_options_ids = None ) : params = { } if dhcp_options_ids : self . build_list_params ( params , dhcp_options_ids , 'DhcpOptionsId' ) return self . get_list ( 'DescribeDhcpOptions' , params , [ ( 'item' , DhcpOptions ) ] ) def create_dhcp_options ( self , vpc_id , cidr_block , availability_zone = None ) : params = { 'VpcId' : vpc_id , : cidr_block } if availability_zone : params [ 'AvailabilityZone' ] = availability_zone return self . get_object ( 'CreateDhcpOption' , params , DhcpOptions ) def delete_dhcp_options ( self , dhcp_options_id ) : params = { 'DhcpOptionsId' : dhcp_options_id } return self . get_status ( 'DeleteDhcpOptions' , params ) def associate_dhcp_options ( self , dhcp_options_id , vpc_id ) : params = { 'DhcpOptionsId' : dhcp_options_id , : vpc_id } return self . get_status ( 'AssociateDhcpOptions' , params ) def get_all_vpn_connections ( self , vpn_connection_ids = None , filters = None ) : params = { } if vpn_connection_ids : self . build_list_params ( params , vpn_connection_ids , 'Vpn_ConnectionId' ) if filters : i = 1 for filter in filters : params [ ( 'Filter.%d.Name' % i ) ] = filter [ 0 ] params [ ( 'Filter.%d.Value.1' ) ] = filter [ 1 ] i += 1 return self . get_list ( 'DescribeVpnConnections' , params , [ ( 'item' , VpnConnection ) ] ) def create_vpn_connection ( self , type , customer_gateway_id , vpn_gateway_id ) : params = { 'Type' : type , : customer_gateway_id , : vpn_gateway_id } return self . get_object ( 'CreateVpnConnection' , params , VpnConnection ) def delete_vpn_connection ( self , vpn_connection_id ) : params = { 'VpnConnectionId' : vpn_connection_id } return self . get_status ( 'DeleteVpnConnection' , params )
