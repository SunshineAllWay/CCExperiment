class Qualifications : def __init__ ( self , requirements = None ) : if requirements == None : requirements = [ ] self . requirements = requirements def add ( self , req ) : self . requirements . append ( req ) def get_as_params ( self ) : params = { } assert ( len ( self . requirements ) <= 10 ) for n , req in enumerate ( self . requirements ) : reqparams = req . get_as_params ( ) for rp in reqparams : params [ 'QualificationRequirement.%s.%s' % ( ( n + 1 ) , rp ) ] = reqparams [ rp ] return params class Requirement ( object ) : def __init__ ( self , qualification_type_id , comparator , integer_value = None , required_to_preview = False ) : self . qualification_type_id = qualification_type_id self . comparator = comparator self . integer_value = integer_value self . required_to_preview = required_to_preview def get_as_params ( self ) : params = { : self . qualification_type_id , : self . comparator , } if self . comparator != 'Exists' and self . integer_value is not None : params [ 'IntegerValue' ] = self . integer_value if self . required_to_preview : params [ 'RequiredToPreview' ] = "true" return params class PercentAssignmentsSubmittedRequirement ( Requirement ) : def __init__ ( self , comparator , integer_value , required_to_preview = False ) : Requirement . __init__ ( self , qualification_type_id = "00000000000000000000" , comparator = comparator , integer_value = integer_value , required_to_preview = required_to_preview ) class PercentAssignmentsAbandonedRequirement ( Requirement ) : def __init__ ( self , comparator , integer_value , required_to_preview = False ) : Requirement . __init__ ( self , qualification_type_id = "00000000000000000070" , comparator = comparator , integer_value = integer_value , required_to_preview = required_to_preview ) class PercentAssignmentsReturnedRequirement ( Requirement ) : def __init__ ( self , comparator , integer_value , required_to_preview = False ) : Requirement . __init__ ( self , qualification_type_id = "000000000000000000E0" , comparator = comparator , integer_value = integer_value , required_to_preview = required_to_preview ) class PercentAssignmentsApprovedRequirement ( Requirement ) : def __init__ ( self , comparator , integer_value , required_to_preview = False ) : Requirement . __init__ ( self , qualification_type_id = "000000000000000000L0" , comparator = comparator , integer_value = integer_value , required_to_preview = required_to_preview ) class PercentAssignmentsRejectedRequirement ( Requirement ) : def __init__ ( self , comparator , integer_value , required_to_preview = False ) : Requirement . __init__ ( self , qualification_type_id = "000000000000000000S0" , comparator = comparator , integer_value = integer_value , required_to_preview = required_to_preview ) class NumberHitsApprovedRequirement ( Requirement ) : def __init__ ( self , comparator , integer_value , required_to_preview = False ) : Requirement . __init__ ( self , qualification_type_id = "00000000000000000040" , comparator = comparator , integer_value = integer_value , required_to_preview = required_to_preview ) class LocaleRequirement ( Requirement ) : def __init__ ( self , comparator , locale , required_to_preview = False ) : Requirement . __init__ ( self , qualification_type_id = "00000000000000000071" , comparator = comparator , integer_value = None , required_to_preview = required_to_preview ) self . locale = locale def get_as_params ( self ) : params = { : self . qualification_type_id , : self . comparator , : self . locale , } if self . required_to_preview : params [ 'RequiredToPreview' ] = "true" return params class AdultRequirement ( Requirement ) : def __init__ ( self , comparator , integer_value , required_to_preview = False ) : Requirement . __init__ ( self , qualification_type_id = "00000000000000000060" , comparator = comparator , integer_value = integer_value , required_to_preview = required_to_preview )
