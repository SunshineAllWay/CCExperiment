import unittest import time from boto . s3 . key import Key from boto . s3 . deletemarker import DeleteMarker from boto . s3 . prefix import Prefix from boto . s3 . connection import S3Connection from boto . exception import S3ResponseError class S3MultiDeleteTest ( unittest . TestCase ) : def setUp ( self ) : self . conn = S3Connection ( ) self . bucket_name = 'multidelete-%d' % int ( time . time ( ) ) self . bucket = self . conn . create_bucket ( self . bucket_name ) def tearDown ( self ) : for key in self . bucket : key . delete ( ) self . bucket . delete ( ) def test_delete_nothing ( self ) : result = self . bucket . delete_keys ( [ ] ) self . assertEqual ( len ( result . deleted ) , 0 ) self . assertEqual ( len ( result . errors ) , 0 ) def test_delete_illegal ( self ) : result = self . bucket . delete_keys ( [ { "dict" : "notallowed" } ] ) self . assertEqual ( len ( result . deleted ) , 0 ) self . assertEqual ( len ( result . errors ) , 1 ) def test_delete_mix ( self ) : result = self . bucket . delete_keys ( [ "king" , ( "mice" , None ) , Key ( name = "regular" ) , Key ( ) , Prefix ( name = "folder/" ) , DeleteMarker ( name = "deleted" ) , { "bad" : "type" } ] ) self . assertEqual ( len ( result . deleted ) , 4 ) self . assertEqual ( len ( result . errors ) , 3 ) def test_delete_quietly ( self ) : result = self . bucket . delete_keys ( [ "king" ] , quiet = True ) self . assertEqual ( len ( result . deleted ) , 0 ) self . assertEqual ( len ( result . errors ) , 0 ) def test_delete_must_escape ( self ) : result = self . bucket . delete_keys ( [ Key ( name = ">_<;" ) ] ) self . assertEqual ( len ( result . deleted ) , 1 ) self . assertEqual ( len ( result . errors ) , 0 ) def test_delete_unknown_version ( self ) : no_ver = Key ( name = "no" ) no_ver . version_id = "version" result = self . bucket . delete_keys ( [ no_ver ] ) self . assertEqual ( len ( result . deleted ) , 0 ) self . assertEqual ( len ( result . errors ) , 1 ) def test_delete_kanji ( self ) : result = self . bucket . delete_keys ( [ u"漢字" , Key ( name = u"日本語" ) ] ) self . assertEqual ( len ( result . deleted ) , 2 ) self . assertEqual ( len ( result . errors ) , 0 ) def test_delete_empty_by_list ( self ) : result = self . bucket . delete_keys ( self . bucket . list ( ) ) self . assertEqual ( len ( result . deleted ) , 0 ) self . assertEqual ( len ( result . errors ) , 0 ) def test_delete_kanji_by_list ( self ) : for key_name in [ u"漢字" , u"日本語" , u"テスト" ] : key = self . bucket . new_key ( key_name ) key . set_contents_from_string ( 'this is a test' ) result = self . bucket . delete_keys ( self . bucket . list ( ) ) self . assertEqual ( len ( result . deleted ) , 3 ) self . assertEqual ( len ( result . errors ) , 0 ) def test_delete_with_prefixes ( self ) : for key_name in [ "a" , "a/b" , "b" ] : key = self . bucket . new_key ( key_name ) key . set_contents_from_string ( 'this is a test' ) result = self . bucket . delete_keys ( self . bucket . list ( delimiter = "/" ) ) self . assertEqual ( len ( result . deleted ) , 2 ) self . assertEqual ( len ( result . errors ) , 1 ) self . assertEqual ( result . errors [ 0 ] . key , "a/" ) result = self . bucket . delete_keys ( self . bucket . list ( ) ) self . assertEqual ( len ( result . deleted ) , 1 ) self . assertEqual ( len ( result . errors ) , 0 ) self . assertEqual ( result . deleted [ 0 ] . key , "a/b" ) def test_delete_too_many_versions ( self ) : self . bucket . configure_versioning ( True ) key_names = [ 'key-%03d' % i for i in range ( 0 , 1000 ) ] result = self . bucket . delete_keys ( key_names ) self . assertEqual ( len ( result . deleted ) , 1000 ) self . assertEqual ( len ( result . errors ) , 0 ) result = self . bucket . delete_keys ( key_names ) self . assertEqual ( len ( result . deleted ) , 1000 ) self . assertEqual ( len ( result . errors ) , 0 ) time . sleep ( 10 ) result = self . bucket . delete_keys ( self . bucket . list_versions ( ) ) self . assertEqual ( len ( result . deleted ) , 2000 ) self . assertEqual ( len ( result . errors ) , 0 ) def test_1 ( self ) : nkeys = 100 key_names = [ 'key-%03d' % i for i in range ( 0 , nkeys ) ] for key_name in key_names : key = self . bucket . new_key ( key_name ) key . set_contents_from_string ( 'this is a test' ) n = 0 for key in self . bucket : n += 1 self . assertEqual ( n , nkeys ) result = self . bucket . delete_keys ( key_names ) self . assertEqual ( len ( result . deleted ) , nkeys ) self . assertEqual ( len ( result . errors ) , 0 ) time . sleep ( 5 ) n = 0 for key in self . bucket : n += 1 self . assertEqual ( n , 0 )
