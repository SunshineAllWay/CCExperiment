from boto . gs . bucket import Bucket from boto . s3 . connection import S3Connection from boto . s3 . connection import SubdomainCallingFormat from boto . s3 . connection import check_lowercase_bucketname class Location : DEFAULT = '' EU = 'EU' class GSConnection ( S3Connection ) : DefaultHost = 'commondatastorage.googleapis.com' QueryString = 'Signature=%s&Expires=%d&AWSAccessKeyId=%s' def __init__ ( self , gs_access_key_id = None , gs_secret_access_key = None , is_secure = True , port = None , proxy = None , proxy_port = None , proxy_user = None , proxy_pass = None , host = DefaultHost , debug = 0 , https_connection_factory = None , calling_format = SubdomainCallingFormat ( ) , path = '/' , suppress_consec_slashes = True ) : S3Connection . __init__ ( self , gs_access_key_id , gs_secret_access_key , is_secure , port , proxy , proxy_port , proxy_user , proxy_pass , host , debug , https_connection_factory , calling_format , path , , Bucket , suppress_consec_slashes = suppress_consec_slashes ) def create_bucket ( self , bucket_name , headers = None , location = Location . DEFAULT , policy = None ) : check_lowercase_bucketname ( bucket_name ) if policy : if headers : headers [ self . provider . acl_header ] = policy else : headers = { self . provider . acl_header : policy } if not location : data = '' else : data = ( '<CreateBucketConfiguration>' % location ) response = self . make_request ( 'PUT' , bucket_name , headers = headers , data = data ) body = response . read ( ) if response . status == 409 : raise self . provider . storage_create_error ( response . status , response . reason , body ) if response . status == 200 : return self . bucket_class ( self , bucket_name ) else : raise self . provider . storage_response_error ( response . status , response . reason , body )
