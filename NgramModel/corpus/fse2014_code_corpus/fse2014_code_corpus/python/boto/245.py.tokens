import StringIO from boto . exception import BotoClientError from boto . s3 . key import Key as S3Key class Key ( S3Key ) : def add_email_grant ( self , permission , email_address ) : acl = self . get_acl ( ) acl . add_email_grant ( permission , email_address ) self . set_acl ( acl ) def add_user_grant ( self , permission , user_id ) : acl = self . get_acl ( ) acl . add_user_grant ( permission , user_id ) self . set_acl ( acl ) def add_group_email_grant ( self , permission , email_address , headers = None ) : acl = self . get_acl ( headers = headers ) acl . add_group_email_grant ( permission , email_address ) self . set_acl ( acl , headers = headers ) def add_group_grant ( self , permission , group_id ) : acl = self . get_acl ( ) acl . add_group_grant ( permission , group_id ) self . set_acl ( acl ) def set_contents_from_file ( self , fp , headers = None , replace = True , cb = None , num_cb = 10 , policy = None , md5 = None , res_upload_handler = None , size = None ) : provider = self . bucket . connection . provider if res_upload_handler and size : raise BotoClientError ( '"size" param not supported for resumable uploads.' ) headers = headers or { } if policy : headers [ provider . acl_header ] = policy if hasattr ( fp , 'name' ) : self . path = fp . name if self . bucket != None : if not md5 : md5 = self . compute_md5 ( fp , size ) size = self . size elif size : self . size = size else : spos = fp . tell ( ) fp . seek ( 0 , os . SEEK_END ) self . size = fp . tell ( ) - spos fp . seek ( spos ) size = self . size self . md5 = md5 [ 0 ] self . base64md5 = md5 [ 1 ] if self . name == None : self . name = self . md5 if not replace : if self . bucket . lookup ( self . name ) : return if res_upload_handler : res_upload_handler . send_file ( self , fp , headers , cb , num_cb ) else : self . send_file ( fp , headers , cb , num_cb , size = size ) def set_contents_from_filename ( self , filename , headers = None , replace = True , cb = None , num_cb = 10 , policy = None , md5 = None , reduced_redundancy = None , res_upload_handler = None ) : fp = open ( filename , 'rb' ) self . set_contents_from_file ( fp , headers , replace , cb , num_cb , policy , md5 , res_upload_handler ) fp . close ( ) def set_contents_from_string ( self , s , headers = None , replace = True , cb = None , num_cb = 10 , policy = None , md5 = None ) : if isinstance ( s , unicode ) : s = s . encode ( "utf-8" ) fp = StringIO . StringIO ( s ) r = self . set_contents_from_file ( fp , headers , replace , cb , num_cb , policy , md5 ) fp . close ( ) return r
