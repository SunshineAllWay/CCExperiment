from boto . pyami . config import Config , BotoConfigLocations from boto . storage_uri import BucketStorageUri , FileStorageUri import boto . plugin import os , re , sys import logging import logging . config import urlparse from boto . exception import InvalidUriError __version__ = '2.2.2-dev' Version = __version__ UserAgent = 'Boto/%s (%s)' % ( __version__ , sys . platform ) config = Config ( ) def init_logging ( ) : for file in BotoConfigLocations : try : logging . config . fileConfig ( os . path . expanduser ( file ) ) except : pass class NullHandler ( logging . Handler ) : def emit ( self , record ) : pass log = logging . getLogger ( 'boto' ) log . addHandler ( NullHandler ( ) ) init_logging ( ) def set_file_logger ( name , filepath , level = logging . INFO , format_string = None ) : global log if not format_string : format_string = "%(asctime)s %(name)s [%(levelname)s]:%(message)s" logger = logging . getLogger ( name ) logger . setLevel ( level ) fh = logging . FileHandler ( filepath ) fh . setLevel ( level ) formatter = logging . Formatter ( format_string ) fh . setFormatter ( formatter ) logger . addHandler ( fh ) log = logger def set_stream_logger ( name , level = logging . DEBUG , format_string = None ) : global log if not format_string : format_string = "%(asctime)s %(name)s [%(levelname)s]:%(message)s" logger = logging . getLogger ( name ) logger . setLevel ( level ) fh = logging . StreamHandler ( ) fh . setLevel ( level ) formatter = logging . Formatter ( format_string ) fh . setFormatter ( formatter ) logger . addHandler ( fh ) log = logger def connect_sqs ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . sqs . connection import SQSConnection return SQSConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_s3 ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . s3 . connection import S3Connection return S3Connection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_gs ( gs_access_key_id = None , gs_secret_access_key = None , ** kwargs ) : from boto . gs . connection import GSConnection return GSConnection ( gs_access_key_id , gs_secret_access_key , ** kwargs ) def connect_ec2 ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . ec2 . connection import EC2Connection return EC2Connection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_elb ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . ec2 . elb import ELBConnection return ELBConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_autoscale ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . ec2 . autoscale import AutoScaleConnection return AutoScaleConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_cloudwatch ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . ec2 . cloudwatch import CloudWatchConnection return CloudWatchConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_sdb ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . sdb . connection import SDBConnection return SDBConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_fps ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . fps . connection import FPSConnection return FPSConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_mturk ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . mturk . connection import MTurkConnection return MTurkConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_cloudfront ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . cloudfront import CloudFrontConnection return CloudFrontConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_vpc ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . vpc import VPCConnection return VPCConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_rds ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . rds import RDSConnection return RDSConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_emr ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . emr import EmrConnection return EmrConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_sns ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . sns import SNSConnection return SNSConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_iam ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . iam import IAMConnection return IAMConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_route53 ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . route53 import Route53Connection return Route53Connection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_cloudformation ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . cloudformation import CloudFormationConnection return CloudFormationConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_euca ( host = None , aws_access_key_id = None , aws_secret_access_key = None , port = 8773 , path = '/services/Eucalyptus' , is_secure = False , ** kwargs ) : from boto . ec2 import EC2Connection from boto . ec2 . regioninfo import RegionInfo if not aws_access_key_id : aws_access_key_id = config . get ( 'Credentials' , , None ) if not aws_secret_access_key : aws_secret_access_key = config . get ( 'Credentials' , , None ) if not host : host = config . get ( 'Boto' , 'eucalyptus_host' , None ) reg = RegionInfo ( name = 'eucalyptus' , endpoint = host ) return EC2Connection ( aws_access_key_id , aws_secret_access_key , region = reg , port = port , path = path , is_secure = is_secure , ** kwargs ) def connect_ec2_endpoint ( url , aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . ec2 . regioninfo import RegionInfo purl = urlparse . urlparse ( url ) kwargs [ 'port' ] = purl . port kwargs [ 'host' ] = purl . hostname kwargs [ 'path' ] = purl . path if not 'is_secure' in kwargs : kwargs [ 'is_secure' ] = ( purl . scheme == "https" ) kwargs [ 'region' ] = RegionInfo ( name = purl . hostname , endpoint = purl . hostname ) kwargs [ 'aws_access_key_id' ] = aws_access_key_id kwargs [ 'aws_secret_access_key' ] = aws_secret_access_key return ( connect_ec2 ( ** kwargs ) ) def connect_walrus ( host = None , aws_access_key_id = None , aws_secret_access_key = None , port = 8773 , path = '/services/Walrus' , is_secure = False , ** kwargs ) : from boto . s3 . connection import S3Connection from boto . s3 . connection import OrdinaryCallingFormat if not aws_access_key_id : aws_access_key_id = config . get ( 'Credentials' , , None ) if not aws_secret_access_key : aws_secret_access_key = config . get ( 'Credentials' , , None ) if not host : host = config . get ( 'Boto' , 'walrus_host' , None ) return S3Connection ( aws_access_key_id , aws_secret_access_key , host = host , port = port , path = path , calling_format = OrdinaryCallingFormat ( ) , is_secure = is_secure , ** kwargs ) def connect_ses ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . ses import SESConnection return SESConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_sts ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . sts import STSConnection return STSConnection ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def connect_ia ( ia_access_key_id = None , ia_secret_access_key = None , is_secure = False , ** kwargs ) : from boto . s3 . connection import S3Connection from boto . s3 . connection import OrdinaryCallingFormat access_key = config . get ( 'Credentials' , 'ia_access_key_id' , ia_access_key_id ) secret_key = config . get ( 'Credentials' , 'ia_secret_access_key' , ia_secret_access_key ) return S3Connection ( access_key , secret_key , host = 's3.us.archive.org' , calling_format = OrdinaryCallingFormat ( ) , is_secure = is_secure , ** kwargs ) def connect_dynamodb ( aws_access_key_id = None , aws_secret_access_key = None , ** kwargs ) : from boto . dynamodb . layer2 import Layer2 return Layer2 ( aws_access_key_id , aws_secret_access_key , ** kwargs ) def check_extensions ( module_name , module_path ) : option_name = '%s_extend' % module_name version = config . get ( 'Boto' , option_name , None ) if version : dirname = module_path [ 0 ] path = os . path . join ( dirname , version ) if os . path . isdir ( path ) : log . info ( 'extending module %s with: %s' % ( module_name , path ) ) module_path . insert ( 0 , path ) _aws_cache = { } def _get_aws_conn ( service ) : global _aws_cache conn = _aws_cache . get ( service ) if not conn : meth = getattr ( sys . modules [ __name__ ] , 'connect_' + service ) conn = meth ( ) _aws_cache [ service ] = conn return conn def lookup ( service , name ) : global _aws_cache conn = _get_aws_conn ( service ) obj = _aws_cache . get ( '.' . join ( ( service , name ) ) , None ) if not obj : obj = conn . lookup ( name ) _aws_cache [ '.' . join ( ( service , name ) ) ] = obj return obj def storage_uri ( uri_str , default_scheme = 'file' , debug = 0 , validate = True , bucket_storage_uri_class = BucketStorageUri , suppress_consec_slashes = True ) : end_scheme_idx = uri_str . find ( '://' ) if end_scheme_idx == - 1 : if uri_str . find ( ':' ) != - 1 : raise InvalidUriError ( '"%s" contains ":" instead of "://"' % uri_str ) scheme = default_scheme . lower ( ) path = uri_str else : scheme = uri_str [ 0 : end_scheme_idx ] . lower ( ) path = uri_str [ end_scheme_idx + 3 : ] if scheme not in [ 'file' , 's3' , 'gs' ] : raise InvalidUriError ( 'Unrecognized scheme "%s"' % scheme ) if scheme == 'file' : is_stream = False if path == '-' : is_stream = True return FileStorageUri ( path , debug , is_stream ) else : path_parts = path . split ( '/' , 1 ) bucket_name = path_parts [ 0 ] if ( validate and bucket_name and ( not re . match ( '^[a-z0-9][a-z0-9\._-]{1,253}[a-z0-9]$' , bucket_name ) or re . search ( '[-_a-z0-9]{64}' , bucket_name ) ) ) : raise InvalidUriError ( 'Invalid bucket name in URI "%s"' % uri_str ) object_name = '' if len ( path_parts ) > 1 : object_name = path_parts [ 1 ] return bucket_storage_uri_class ( scheme , bucket_name , object_name , debug , suppress_consec_slashes = suppress_consec_slashes ) def storage_uri_for_key ( key ) : if not isinstance ( key , boto . s3 . key . Key ) : raise InvalidUriError ( 'Requested key (%s) is not a subclass of ' % str ( type ( key ) ) ) prov_name = key . bucket . connection . provider . get_provider_name ( ) uri_str = '%s://%s/%s' % ( prov_name , key . bucket . name , key . name ) return storage_uri ( uri_str ) boto . plugin . load_plugins ( config )
