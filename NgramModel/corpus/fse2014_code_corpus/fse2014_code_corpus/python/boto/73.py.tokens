import uuid import base64 import json from boto . cloudfront . identity import OriginAccessIdentity from boto . cloudfront . object import Object , StreamingObject from boto . cloudfront . signers import ActiveTrustedSigners , TrustedSigners from boto . cloudfront . logging import LoggingInfo from boto . cloudfront . origin import S3Origin , CustomOrigin from boto . s3 . acl import ACL class DistributionConfig : def __init__ ( self , connection = None , origin = None , enabled = False , caller_reference = '' , cnames = None , comment = '' , trusted_signers = None , default_root_object = None , logging = None ) : self . connection = connection self . origin = origin self . enabled = enabled if caller_reference : self . caller_reference = caller_reference else : self . caller_reference = str ( uuid . uuid4 ( ) ) self . cnames = [ ] if cnames : self . cnames = cnames self . comment = comment self . trusted_signers = trusted_signers self . logging = None self . default_root_object = default_root_object def to_xml ( self ) : s = '<?xml version="1.0" encoding="UTF-8"?>\n' s += '<DistributionConfig xmlns="http://cloudfront.amazonaws.com/doc/2010-07-15/">\n' if self . origin : s += self . origin . to_xml ( ) s += ' <CallerReference>%s</CallerReference>\n' % self . caller_reference for cname in self . cnames : s += ' <CNAME>%s</CNAME>\n' % cname if self . comment : s += ' <Comment>%s</Comment>\n' % self . comment s += ' <Enabled>' if self . enabled : s += 'true' else : s += 'false' s += '</Enabled>\n' if self . trusted_signers : s += '<TrustedSigners>\n' for signer in self . trusted_signers : if signer == 'Self' : s += ' <Self></Self>\n' else : s += ' <AwsAccountNumber>%s</AwsAccountNumber>\n' % signer s += '</TrustedSigners>\n' if self . logging : s += '<Logging>\n' s += ' <Bucket>%s</Bucket>\n' % self . logging . bucket s += ' <Prefix>%s</Prefix>\n' % self . logging . prefix s += '</Logging>\n' if self . default_root_object : dro = self . default_root_object s += '<DefaultRootObject>%s</DefaultRootObject>\n' % dro s += '</DistributionConfig>\n' return s def startElement ( self , name , attrs , connection ) : if name == 'TrustedSigners' : self . trusted_signers = TrustedSigners ( ) return self . trusted_signers elif name == 'Logging' : self . logging = LoggingInfo ( ) return self . logging elif name == 'S3Origin' : self . origin = S3Origin ( ) return self . origin elif name == 'CustomOrigin' : self . origin = CustomOrigin ( ) return self . origin else : return None def endElement ( self , name , value , connection ) : if name == 'CNAME' : self . cnames . append ( value ) elif name == 'Comment' : self . comment = value elif name == 'Enabled' : if value . lower ( ) == 'true' : self . enabled = True else : self . enabled = False elif name == 'CallerReference' : self . caller_reference = value elif name == 'DefaultRootObject' : self . default_root_object = value else : setattr ( self , name , value ) class StreamingDistributionConfig ( DistributionConfig ) : def __init__ ( self , connection = None , origin = '' , enabled = False , caller_reference = '' , cnames = None , comment = '' , trusted_signers = None , logging = None ) : DistributionConfig . __init__ ( self , connection = connection , origin = origin , enabled = enabled , caller_reference = caller_reference , cnames = cnames , comment = comment , trusted_signers = trusted_signers , logging = logging ) def to_xml ( self ) : s = '<?xml version="1.0" encoding="UTF-8"?>\n' s += '<StreamingDistributionConfig xmlns="http://cloudfront.amazonaws.com/doc/2010-07-15/">\n' if self . origin : s += self . origin . to_xml ( ) s += ' <CallerReference>%s</CallerReference>\n' % self . caller_reference for cname in self . cnames : s += ' <CNAME>%s</CNAME>\n' % cname if self . comment : s += ' <Comment>%s</Comment>\n' % self . comment s += ' <Enabled>' if self . enabled : s += 'true' else : s += 'false' s += '</Enabled>\n' if self . trusted_signers : s += '<TrustedSigners>\n' for signer in self . trusted_signers : if signer == 'Self' : s += ' <Self/>\n' else : s += ' <AwsAccountNumber>%s</AwsAccountNumber>\n' % signer s += '</TrustedSigners>\n' if self . logging : s += '<Logging>\n' s += ' <Bucket>%s</Bucket>\n' % self . logging . bucket s += ' <Prefix>%s</Prefix>\n' % self . logging . prefix s += '</Logging>\n' s += '</StreamingDistributionConfig>\n' return s class DistributionSummary : def __init__ ( self , connection = None , domain_name = '' , id = '' , last_modified_time = None , status = '' , origin = None , cname = '' , comment = '' , enabled = False ) : self . connection = connection self . domain_name = domain_name self . id = id self . last_modified_time = last_modified_time self . status = status self . origin = origin self . enabled = enabled self . cnames = [ ] if cname : self . cnames . append ( cname ) self . comment = comment self . trusted_signers = None self . etag = None self . streaming = False def startElement ( self , name , attrs , connection ) : if name == 'TrustedSigners' : self . trusted_signers = TrustedSigners ( ) return self . trusted_signers elif name == 'S3Origin' : self . origin = S3Origin ( ) return self . origin elif name == 'CustomOrigin' : self . origin = CustomOrigin ( ) return self . origin return None def endElement ( self , name , value , connection ) : if name == 'Id' : self . id = value elif name == 'Status' : self . status = value elif name == 'LastModifiedTime' : self . last_modified_time = value elif name == 'DomainName' : self . domain_name = value elif name == 'Origin' : self . origin = value elif name == 'CNAME' : self . cnames . append ( value ) elif name == 'Comment' : self . comment = value elif name == 'Enabled' : if value . lower ( ) == 'true' : self . enabled = True else : self . enabled = False elif name == 'StreamingDistributionSummary' : self . streaming = True else : setattr ( self , name , value ) def get_distribution ( self ) : return self . connection . get_distribution_info ( self . id ) class StreamingDistributionSummary ( DistributionSummary ) : def get_distribution ( self ) : return self . connection . get_streaming_distribution_info ( self . id ) class Distribution : def __init__ ( self , connection = None , config = None , domain_name = '' , id = '' , last_modified_time = None , status = '' ) : self . connection = connection self . config = config self . domain_name = domain_name self . id = id self . last_modified_time = last_modified_time self . status = status self . in_progress_invalidation_batches = 0 self . active_signers = None self . etag = None self . _bucket = None self . _object_class = Object def startElement ( self , name , attrs , connection ) : if name == 'DistributionConfig' : self . config = DistributionConfig ( ) return self . config elif name == 'ActiveTrustedSigners' : self . active_signers = ActiveTrustedSigners ( ) return self . active_signers else : return None def endElement ( self , name , value , connection ) : if name == 'Id' : self . id = value elif name == 'LastModifiedTime' : self . last_modified_time = value elif name == 'Status' : self . status = value elif name == 'InProgressInvalidationBatches' : self . in_progress_invalidation_batches = int ( value ) elif name == 'DomainName' : self . domain_name = value else : setattr ( self , name , value ) def update ( self , enabled = None , cnames = None , comment = None ) : new_config = DistributionConfig ( self . connection , self . config . origin , self . config . enabled , self . config . caller_reference , self . config . cnames , self . config . comment , self . config . trusted_signers , self . config . default_root_object ) if enabled != None : new_config . enabled = enabled if cnames != None : new_config . cnames = cnames if comment != None : new_config . comment = comment self . etag = self . connection . set_distribution_config ( self . id , self . etag , new_config ) self . config = new_config self . _object_class = Object def enable ( self ) : self . update ( enabled = True ) def disable ( self ) : self . update ( enabled = False ) def delete ( self ) : self . connection . delete_distribution ( self . id , self . etag ) def _get_bucket ( self ) : if isinstance ( self . config . origin , S3Origin ) : if not self . _bucket : bucket_dns_name = self . config . origin . dns_name bucket_name = bucket_dns_name . replace ( '.s3.amazonaws.com' , '' ) from boto . s3 . connection import S3Connection s3 = S3Connection ( self . connection . aws_access_key_id , self . connection . aws_secret_access_key , proxy = self . connection . proxy , proxy_port = self . connection . proxy_port , proxy_user = self . connection . proxy_user , proxy_pass = self . connection . proxy_pass ) self . _bucket = s3 . get_bucket ( bucket_name ) self . _bucket . distribution = self self . _bucket . set_key_class ( self . _object_class ) return self . _bucket else : raise NotImplementedError ( 'Unable to get_objects on CustomOrigin' ) def get_objects ( self ) : bucket = self . _get_bucket ( ) objs = [ ] for key in bucket : objs . append ( key ) return objs def set_permissions ( self , object , replace = False ) : if isinstance ( self . config . origin , S3Origin ) : if self . config . origin . origin_access_identity : id = self . config . origin . origin_access_identity . split ( '/' ) [ - 1 ] oai = self . connection . get_origin_access_identity_info ( id ) policy = object . get_acl ( ) if replace : policy . acl = ACL ( ) policy . acl . add_user_grant ( 'READ' , oai . s3_user_id ) object . set_acl ( policy ) else : object . set_canned_acl ( 'public-read' ) def set_permissions_all ( self , replace = False ) : bucket = self . _get_bucket ( ) for key in bucket : self . set_permissions ( key , replace ) def add_object ( self , name , content , headers = None , replace = True ) : if self . config . origin . origin_access_identity : policy = 'private' else : policy = 'public-read' bucket = self . _get_bucket ( ) object = bucket . new_key ( name ) object . set_contents_from_file ( content , headers = headers , policy = policy ) if self . config . origin . origin_access_identity : self . set_permissions ( object , replace ) return object def create_signed_url ( self , url , keypair_id , expire_time = None , valid_after_time = None , ip_address = None , policy_url = None , private_key_file = None , private_key_string = None ) : params = self . _create_signing_params ( url = url , keypair_id = keypair_id , expire_time = expire_time , valid_after_time = valid_after_time , ip_address = ip_address , policy_url = policy_url , private_key_file = private_key_file , private_key_string = private_key_string ) if "?" in url : sep = "&" else : sep = "?" signed_url_params = [ ] for key in [ "Expires" , "Policy" , "Signature" , "Key-Pair-Id" ] : if key in params : param = "%s=%s" % ( key , params [ key ] ) signed_url_params . append ( param ) signed_url = url + sep + "&" . join ( signed_url_params ) return signed_url def _create_signing_params ( self , url , keypair_id , expire_time = None , valid_after_time = None , ip_address = None , policy_url = None , private_key_file = None , private_key_string = None ) : params = { } if expire_time and not valid_after_time and not ip_address and not policy_url : policy = self . _canned_policy ( url , expire_time ) params [ "Expires" ] = str ( expire_time ) else : if policy_url is None : policy_url = url policy = self . _custom_policy ( policy_url , expires = expire_time , valid_after = valid_after_time , ip_address = ip_address ) encoded_policy = self . _url_base64_encode ( policy ) params [ "Policy" ] = encoded_policy signature = self . _sign_string ( policy , private_key_file , private_key_string ) encoded_signature = self . _url_base64_encode ( signature ) params [ "Signature" ] = encoded_signature params [ "Key-Pair-Id" ] = keypair_id return params @ staticmethod def _canned_policy ( resource , expires ) : policy = ( '{"Statement":[{"Resource":"%(resource)s",' % locals ( ) ) return policy @ staticmethod def _custom_policy ( resource , expires = None , valid_after = None , ip_address = None ) : condition = { } if expires : condition [ "DateLessThan" ] = { "AWS:EpochTime" : expires } if valid_after : condition [ "DateGreaterThan" ] = { "AWS:EpochTime" : valid_after } if ip_address : if '/' not in ip_address : ip_address += "/32" condition [ "IpAddress" ] = { "AWS:SourceIp" : ip_address } policy = { "Statement" : [ { : resource , : condition } ] } return json . dumps ( policy , separators = ( "," , ":" ) ) @ staticmethod def _sign_string ( message , private_key_file = None , private_key_string = None ) : try : from M2Crypto import EVP except ImportError : raise NotImplementedError ( "Boto depends on the python M2Crypto " ) if private_key_file and private_key_string : raise ValueError ( "Only specify the private_key_file or the private_key_string not both" ) if not private_key_file and not private_key_string : raise ValueError ( "You must specify one of private_key_file or private_key_string" ) if isinstance ( private_key_file , file ) : private_key_string = private_key_file . read ( ) if private_key_string : key = EVP . load_key_string ( private_key_string ) else : key = EVP . load_key ( private_key_file ) key . reset_context ( md = 'sha1' ) key . sign_init ( ) key . sign_update ( str ( message ) ) signature = key . sign_final ( ) return signature @ staticmethod def _url_base64_encode ( msg ) : msg_base64 = base64 . b64encode ( msg ) msg_base64 = msg_base64 . replace ( '+' , '-' ) msg_base64 = msg_base64 . replace ( '=' , '_' ) msg_base64 = msg_base64 . replace ( '/' , '~' ) return msg_base64 class StreamingDistribution ( Distribution ) : def __init__ ( self , connection = None , config = None , domain_name = '' , id = '' , last_modified_time = None , status = '' ) : Distribution . __init__ ( self , connection , config , domain_name , id , last_modified_time , status ) self . _object_class = StreamingObject def startElement ( self , name , attrs , connection ) : if name == 'StreamingDistributionConfig' : self . config = StreamingDistributionConfig ( ) return self . config else : return Distribution . startElement ( self , name , attrs , connection ) def update ( self , enabled = None , cnames = None , comment = None ) : new_config = StreamingDistributionConfig ( self . connection , self . config . origin , self . config . enabled , self . config . caller_reference , self . config . cnames , self . config . comment , self . config . trusted_signers ) if enabled != None : new_config . enabled = enabled if cnames != None : new_config . cnames = cnames if comment != None : new_config . comment = comment self . etag = self . connection . set_streaming_distribution_config ( self . id , self . etag , new_config ) self . config = new_config self . _object_class = StreamingObject def delete ( self ) : self . connection . delete_streaming_distribution ( self . id , self . etag )
