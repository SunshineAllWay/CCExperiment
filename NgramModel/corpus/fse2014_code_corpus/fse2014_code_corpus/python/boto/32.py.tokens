import unittest from boto . ec2 . elb import ELBConnection class ELBConnectionTest ( unittest . TestCase ) : def tearDown ( self ) : for lb in ELBConnection ( ) . get_all_load_balancers ( ) : lb . delete ( ) def test_build_list_params ( self ) : c = ELBConnection ( ) params = { } c . build_list_params ( params , [ 'thing1' , 'thing2' , 'thing3' ] , 'ThingName%d' ) expected_params = { : 'thing1' , : 'thing2' , : 'thing3' } self . assertEqual ( params , expected_params ) def test_create_load_balancer ( self ) : c = ELBConnection ( ) name = 'elb-boto-unit-test' availability_zones = [ 'us-east-1a' ] listeners = [ ( 80 , 8000 , 'HTTP' ) ] balancer = c . create_load_balancer ( name , availability_zones , listeners ) self . assertEqual ( balancer . name , name ) self . assertEqual ( balancer . availability_zones , availability_zones ) self . assertEqual ( balancer . listeners , listeners ) balancers = c . get_all_load_balancers ( ) self . assertEqual ( [ lb . name for lb in balancers ] , [ name ] ) def test_create_load_balancer_listeners ( self ) : c = ELBConnection ( ) name = 'elb-boto-unit-test' availability_zones = [ 'us-east-1a' ] listeners = [ ( 80 , 8000 , 'HTTP' ) ] balancer = c . create_load_balancer ( name , availability_zones , listeners ) more_listeners = [ ( 443 , 8001 , 'HTTP' ) ] c . create_load_balancer_listeners ( name , more_listeners ) balancers = c . get_all_load_balancers ( ) self . assertEqual ( [ lb . name for lb in balancers ] , [ name ] ) self . assertEqual ( sorted ( l . get_tuple ( ) for l in balancers [ 0 ] . listeners ) , sorted ( listeners + more_listeners ) ) def test_delete_load_balancer_listeners ( self ) : c = ELBConnection ( ) name = 'elb-boto-unit-test' availability_zones = [ 'us-east-1a' ] listeners = [ ( 80 , 8000 , 'HTTP' ) , ( 443 , 8001 , 'HTTP' ) ] balancer = c . create_load_balancer ( name , availability_zones , listeners ) balancers = c . get_all_load_balancers ( ) self . assertEqual ( [ lb . name for lb in balancers ] , [ name ] ) self . assertEqual ( [ l . get_tuple ( ) for l in balancers [ 0 ] . listeners ] , listeners ) c . delete_load_balancer_listeners ( name , [ 443 ] ) balancers = c . get_all_load_balancers ( ) self . assertEqual ( [ lb . name for lb in balancers ] , [ name ] ) self . assertEqual ( [ l . get_tuple ( ) for l in balancers [ 0 ] . listeners ] , listeners [ : 1 ] ) if __name__ == '__main__' :
