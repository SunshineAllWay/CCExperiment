from boto . connection import AWSQueryConnection from boto . sqs . regioninfo import SQSRegionInfo from boto . sqs . queue import Queue from boto . sqs . message import Message from boto . sqs . attributes import Attributes from boto . sqs . batchresults import BatchResults from boto . exception import SQSError class SQSConnection ( AWSQueryConnection ) : DefaultRegionName = 'us-east-1' DefaultRegionEndpoint = 'sqs.us-east-1.amazonaws.com' APIVersion = '2011-10-01' DefaultContentType = 'text/plain' ResponseError = SQSError def __init__ ( self , aws_access_key_id = None , aws_secret_access_key = None , is_secure = True , port = None , proxy = None , proxy_port = None , proxy_user = None , proxy_pass = None , debug = 0 , https_connection_factory = None , region = None , path = '/' , security_token = None ) : if not region : region = SQSRegionInfo ( self , self . DefaultRegionName , self . DefaultRegionEndpoint ) self . region = region AWSQueryConnection . __init__ ( self , aws_access_key_id , aws_secret_access_key , is_secure , port , proxy , proxy_port , proxy_user , proxy_pass , self . region . endpoint , debug , https_connection_factory , path , security_token = security_token ) def _required_auth_capability ( self ) : return [ 'sqs' ] def create_queue ( self , queue_name , visibility_timeout = None ) : params = { 'QueueName' : queue_name } if visibility_timeout : params [ 'Attribute.1.Name' ] = 'VisibilityTimeout' params [ 'Attribute.1.Value' ] = int ( visibility_timeout ) return self . get_object ( 'CreateQueue' , params , Queue ) def delete_queue ( self , queue , force_deletion = False ) : return self . get_status ( 'DeleteQueue' , None , queue . id ) def get_queue_attributes ( self , queue , attribute = 'All' ) : params = { 'AttributeName' : attribute } return self . get_object ( 'GetQueueAttributes' , params , Attributes , queue . id ) def set_queue_attribute ( self , queue , attribute , value ) : params = { 'Attribute.Name' : attribute , 'Attribute.Value' : value } return self . get_status ( 'SetQueueAttributes' , params , queue . id ) def receive_message ( self , queue , number_messages = 1 , visibility_timeout = None , attributes = None ) : params = { 'MaxNumberOfMessages' : number_messages } if visibility_timeout : params [ 'VisibilityTimeout' ] = visibility_timeout if attributes : self . build_list_params ( params , attributes , 'AttributeName' ) return self . get_list ( 'ReceiveMessage' , params , [ ( 'Message' , queue . message_class ) ] , queue . id , queue ) def delete_message ( self , queue , message ) : params = { 'ReceiptHandle' : message . receipt_handle } return self . get_status ( 'DeleteMessage' , params , queue . id ) def delete_message_from_handle ( self , queue , receipt_handle ) : params = { 'ReceiptHandle' : receipt_handle } return self . get_status ( 'DeleteMessage' , params , queue . id ) def send_message ( self , queue , message_content , delay_seconds = None ) : params = { 'MessageBody' : message_content } if delay_seconds : params [ 'DelaySeconds' ] = int ( delay_seconds ) return self . get_object ( 'SendMessage' , params , Message , queue . id , verb = 'POST' ) def send_message_batch ( self , queue , messages ) : params = { } for i , msg in enumerate ( messages ) : p_name = 'SendMessageBatchRequestEntry.%i.Id' % ( i + 1 ) params [ p_name ] = msg [ 0 ] p_name = 'SendMessageBatchRequestEntry.%i.MessageBody' % ( i + 1 ) params [ p_name ] = msg [ 1 ] p_name = 'SendMessageBatchRequestEntry.%i.DelaySeconds' % ( i + 1 ) params [ p_name ] = msg [ 2 ] return self . get_object ( 'SendMessageBatch' , params , BatchResults , queue . id , verb = 'POST' ) def change_message_visibility ( self , queue , receipt_handle , visibility_timeout ) : params = { 'ReceiptHandle' : receipt_handle , : visibility_timeout } return self . get_status ( 'ChangeMessageVisibility' , params , queue . id ) def get_all_queues ( self , prefix = '' ) : params = { } if prefix : params [ 'QueueNamePrefix' ] = prefix return self . get_list ( 'ListQueues' , params , [ ( 'QueueUrl' , Queue ) ] ) def get_queue ( self , queue_name ) : rs = self . get_all_queues ( queue_name ) for q in rs : if q . url . endswith ( queue_name ) : return q return None lookup = get_queue def add_permission ( self , queue , label , aws_account_id , action_name ) : params = { 'Label' : label , : aws_account_id , : action_name } return self . get_status ( 'AddPermission' , params , queue . id ) def remove_permission ( self , queue , label ) : params = { 'Label' : label } return self . get_status ( 'RemovePermission' , params , queue . id )
