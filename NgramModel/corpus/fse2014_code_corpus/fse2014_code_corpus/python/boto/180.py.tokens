from boto . ec2 . ec2object import EC2Object from boto . resultset import ResultSet from boto . ec2 . blockdevicemapping import BlockDeviceMapping from boto . ec2 . instance import Group class GroupList ( list ) : def startElement ( self , name , attrs , connection ) : pass def endElement ( self , name , value , connection ) : if name == 'groupId' : self . append ( value ) class LaunchSpecification ( EC2Object ) : def __init__ ( self , connection = None ) : EC2Object . __init__ ( self , connection ) self . key_name = None self . instance_type = None self . image_id = None self . groups = [ ] self . placement = None self . kernel = None self . ramdisk = None self . monitored = False self . subnet_id = None self . _in_monitoring_element = False self . block_device_mapping = None def __repr__ ( self ) : return 'LaunchSpecification(%s)' % self . image_id def startElement ( self , name , attrs , connection ) : if name == 'groupSet' : self . groups = ResultSet ( [ ( 'item' , Group ) ] ) return self . groups elif name == 'monitoring' : self . _in_monitoring_element = True elif name == 'blockDeviceMapping' : self . block_device_mapping = BlockDeviceMapping ( ) return self . block_device_mapping else : return None def endElement ( self , name , value , connection ) : if name == 'imageId' : self . image_id = value elif name == 'keyName' : self . key_name = value elif name == 'instanceType' : self . instance_type = value elif name == 'availabilityZone' : self . placement = value elif name == 'placement' : pass elif name == 'kernelId' : self . kernel = value elif name == 'ramdiskId' : self . ramdisk = value elif name == 'subnetId' : self . subnet_id = value elif name == 'state' : if self . _in_monitoring_element : if value == 'enabled' : self . monitored = True self . _in_monitoring_element = False else : setattr ( self , name , value )
