class Item ( dict ) : def __init__ ( self , table , hash_key = None , range_key = None , attrs = None ) : self . table = table self . _hash_key_name = self . table . schema . hash_key_name self . _range_key_name = self . table . schema . range_key_name if hash_key : self [ self . _hash_key_name ] = hash_key if range_key : self [ self . _range_key_name ] = range_key if attrs : self . update ( attrs ) self . consumed_units = 0 self . _updates = { } @ property def hash_key ( self ) : return self [ self . _hash_key_name ] @ property def range_key ( self ) : return self . get ( self . _range_key_name ) @ property def hash_key_name ( self ) : return self . _hash_key_name @ property def range_key_name ( self ) : return self . _range_key_name def add_attribute ( self , attr_name , attr_value ) : self . _updates [ attr_name ] = ( "ADD" , attr_value ) def delete_attribute ( self , attr_name , attr_value = None ) : self . _updates [ attr_name ] = ( "DELETE" , attr_value ) def put_attribute ( self , attr_name , attr_value ) : self . _updates [ attr_name ] = ( "PUT" , attr_value ) def save ( self , expected_value = None , return_values = None ) : return self . table . layer2 . update_item ( self , expected_value , return_values ) def delete ( self , expected_value = None , return_values = None ) : return self . table . layer2 . delete_item ( self , expected_value , return_values ) def put ( self , expected_value = None , return_values = None ) : return self . table . layer2 . put_item ( self , expected_value , return_values )
