from boto . ec2 . ec2object import TaggedEC2Object class Volume ( TaggedEC2Object ) : def __init__ ( self , connection = None ) : TaggedEC2Object . __init__ ( self , connection ) self . id = None self . create_time = None self . status = None self . size = None self . snapshot_id = None self . attach_data = None self . zone = None def __repr__ ( self ) : return 'Volume:%s' % self . id def startElement ( self , name , attrs , connection ) : retval = TaggedEC2Object . startElement ( self , name , attrs , connection ) if retval is not None : return retval if name == 'attachmentSet' : self . attach_data = AttachmentSet ( ) return self . attach_data elif name == 'tagSet' : self . tags = boto . resultset . ResultSet ( [ ( 'item' , Tag ) ] ) return self . tags else : return None def endElement ( self , name , value , connection ) : if name == 'volumeId' : self . id = value elif name == 'createTime' : self . create_time = value elif name == 'status' : if value != '' : self . status = value elif name == 'size' : self . size = int ( value ) elif name == 'snapshotId' : self . snapshot_id = value elif name == 'availabilityZone' : self . zone = value else : setattr ( self , name , value ) def _update ( self , updated ) : self . __dict__ . update ( updated . __dict__ ) def update ( self , validate = False ) : unfiltered_rs = self . connection . get_all_volumes ( [ self . id ] ) rs = [ x for x in unfiltered_rs if x . id == self . id ] if len ( rs ) > 0 : self . _update ( rs [ 0 ] ) elif validate : raise ValueError ( '%s is not a valid Volume ID' % self . id ) return self . status def delete ( self ) : return self . connection . delete_volume ( self . id ) def attach ( self , instance_id , device ) : return self . connection . attach_volume ( self . id , instance_id , device ) def detach ( self , force = False ) : instance_id = None if self . attach_data : instance_id = self . attach_data . instance_id device = None if self . attach_data : device = self . attach_data . device return self . connection . detach_volume ( self . id , instance_id , device , force ) def create_snapshot ( self , description = None ) : return self . connection . create_snapshot ( self . id , description ) def volume_state ( self ) : return self . status def attachment_state ( self ) : state = None if self . attach_data : state = self . attach_data . status return state def snapshots ( self , owner = None , restorable_by = None ) : rs = self . connection . get_all_snapshots ( owner = owner , restorable_by = restorable_by ) mine = [ ] for snap in rs : if snap . volume_id == self . id : mine . append ( snap ) return mine class AttachmentSet ( object ) : def __init__ ( self ) : self . id = None self . instance_id = None self . status = None self . attach_time = None self . device = None def __repr__ ( self ) : return 'AttachmentSet:%s' % self . id def startElement ( self , name , attrs , connection ) : pass def endElement ( self , name , value , connection ) : if name == 'volumeId' : self . id = value elif name == 'instanceId' : self . instance_id = value elif name == 'status' : self . status = value elif name == 'attachTime' : self . attach_time = value elif name == 'device' : self . device = value else : setattr ( self , name , value )
