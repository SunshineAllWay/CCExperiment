import unittest import time import uuid from boto . dynamodb . exceptions import DynamoDBKeyNotFoundError from boto . dynamodb . layer2 import Layer2 class DynamoDBLayer2Test ( unittest . TestCase ) : def test_layer2_basic ( self ) : print '--- running Amazon DynamoDB Layer2 tests ---' c = Layer2 ( ) hash_key_name = 'forum_name' hash_key_proto_value = '' range_key_name = 'subject' range_key_proto_value = '' schema = c . create_schema ( hash_key_name , hash_key_proto_value , range_key_name , range_key_proto_value ) schema2 = c . create_schema ( 'post_id' , '' ) index = int ( time . time ( ) ) table_name = 'test-%d' % index read_units = 5 write_units = 5 table = c . create_table ( table_name , schema , read_units , write_units ) assert table . name == table_name assert table . schema . hash_key_name == hash_key_name assert table . schema . hash_key_type == c . get_dynamodb_type ( hash_key_proto_value ) assert table . schema . range_key_name == range_key_name assert table . schema . range_key_type == c . get_dynamodb_type ( range_key_proto_value ) assert table . read_units == read_units assert table . write_units == write_units table2_name = 'test-%d' % ( index + 1 ) table2 = c . create_table ( table2_name , schema2 , read_units , write_units ) table . refresh ( wait_for_active = True ) table2 . refresh ( wait_for_active = True ) table_names = c . list_tables ( ) assert table_name in table_names assert table2_name in table_names new_read_units = 10 new_write_units = 5 table . update_throughput ( new_read_units , new_write_units ) table . refresh ( wait_for_active = True ) assert table . read_units == new_read_units assert table . write_units == new_write_units item1_key = 'Amazon DynamoDB' item1_range = 'DynamoDB Thread 1' item1_attrs = { : 'DynamoDB thread 1 message text' , : 'User A' , : 0 , : 0 , : 0 , : True , : set ( [ 'index' , 'primarykey' , 'table' ] ) , : '12/9/2011 11:36:03 PM' } item1 = table . new_item ( item1_key , item1_range , item1_attrs ) try : item1 . put ( ) except c . layer1 . ResponseError , e : raise Exception ( "Item put failed: %s" % e ) self . assertRaises ( DynamoDBKeyNotFoundError , table . get_item , 'bogus_key' , item1_range ) item1_copy = table . get_item ( item1_key , item1_range , consistent_read = True ) assert item1_copy . hash_key == item1 . hash_key assert item1_copy . range_key == item1 . range_key for attr_name in item1_copy : val = item1_copy [ attr_name ] if isinstance ( val , ( int , long , float , basestring ) ) : assert val == item1 [ attr_name ] attributes = [ 'Message' , 'Views' ] item1_small = table . get_item ( item1_key , item1_range , attributes_to_get = attributes , consistent_read = True ) for attr_name in item1_small : if attr_name not in ( item1_small . hash_key_name , item1_small . range_key_name ) : assert attr_name in attributes self . assertTrue ( table . has_item ( item1_key , range_key = item1_range , consistent_read = True ) ) expected = { 'Views' : 1 } try : item1 . delete ( expected_value = expected ) except c . layer1 . ResponseError , e : pass else : raise Exception ( "Expected Value condition failed" ) expected = { 'FooBar' : True } try : item1 . delete ( expected_value = expected ) except c . layer1 . ResponseError , e : pass item1 . add_attribute ( 'Replies' , 2 ) removed_attr = 'Public' item1 . delete_attribute ( removed_attr ) removed_tag = item1_attrs [ 'Tags' ] . copy ( ) . pop ( ) item1 . delete_attribute ( 'Tags' , set ( [ removed_tag ] ) ) replies_by_set = set ( [ 'Adam' , 'Arnie' ] ) item1 . put_attribute ( 'RepliesBy' , replies_by_set ) retvals = item1 . save ( return_values = 'ALL_OLD' ) assert 'Attributes' in retvals item1_updated = table . get_item ( item1_key , item1_range , consistent_read = True ) assert item1_updated [ 'Replies' ] == item1_attrs [ 'Replies' ] + 2 self . assertFalse ( item1_updated . has_key ( removed_attr ) ) self . assertTrue ( removed_tag not in item1_updated [ 'Tags' ] ) self . assertTrue ( item1_updated . has_key ( 'RepliesBy' ) ) self . assertTrue ( item1_updated [ 'RepliesBy' ] == replies_by_set ) item2_key = 'Amazon DynamoDB' item2_range = 'DynamoDB Thread 2' item2_attrs = { : 'DynamoDB thread 2 message text' , : 'User A' , : 0 , : 0 , : 0 , : set ( [ "index" , "primarykey" , "table" ] ) , : '12/9/2011 11:36:03 PM' } item2 = table . new_item ( item2_key , item2_range , item2_attrs ) item2 . put ( ) item3_key = 'Amazon S3' item3_range = 'S3 Thread 1' item3_attrs = { : 'S3 Thread 1 message text' , : 'User A' , : 0 , : 0 , : 0 , : set ( [ 'largeobject' , 'multipart upload' ] ) , : '12/9/2011 11:36:03 PM' } item3 = table . new_item ( item3_key , item3_range , item3_attrs ) item3 . put ( ) table2_item1_key = uuid . uuid4 ( ) . hex table2_item1_attrs = { : '25/1/2011 12:34:56 PM' , : 'I think boto rocks and so does DynamoDB' } table2_item1 = table2 . new_item ( table2_item1_key , attrs = table2_item1_attrs ) table2_item1 . put ( ) items = table . query ( 'Amazon DynamoDB' , { 'DynamoDB' : 'BEGINS_WITH' } ) n = 0 for item in items : n += 1 assert n == 2 items = table . query ( 'Amazon DynamoDB' , { 'DynamoDB' : 'BEGINS_WITH' } , request_limit = 1 , max_results = 1 ) n = 0 for item in items : n += 1 assert n == 1 items = table . scan ( ) n = 0 for item in items : n += 1 assert n == 3 integer_value = 42 float_value = 345.678 item3 [ 'IntAttr' ] = integer_value item3 [ 'FloatAttr' ] = float_value item3 [ 'TrueBoolean' ] = True item3 [ 'FalseBoolean' ] = False integer_set = set ( [ 1 , 2 , 3 , 4 , 5 ] ) float_set = set ( [ 1.1 , 2.2 , 3.3 , 4.4 , 5.5 ] ) mixed_set = set ( [ 1 , 2 , 3.3 , 4 , 5.555 ] ) str_set = set ( [ 'foo' , 'bar' , 'fie' , 'baz' ] ) item3 [ 'IntSetAttr' ] = integer_set item3 [ 'FloatSetAttr' ] = float_set item3 [ 'MixedSetAttr' ] = mixed_set item3 [ 'StrSetAttr' ] = str_set item3 . put ( ) item4 = table . get_item ( item3_key , item3_range , consistent_read = True ) assert item4 [ 'IntAttr' ] == integer_value assert item4 [ 'FloatAttr' ] == float_value assert item4 [ 'TrueBoolean' ] == True assert item4 [ 'FalseBoolean' ] == False for i in item4 [ 'IntSetAttr' ] : assert i in integer_set for i in item4 [ 'FloatSetAttr' ] : assert i in float_set for i in item4 [ 'MixedSetAttr' ] : assert i in mixed_set for i in item4 [ 'StrSetAttr' ] : assert i in str_set batch_list = c . new_batch_list ( ) batch_list . add_batch ( table , [ ( item2_key , item2_range ) , ( item3_key , item3_range ) ] ) response = batch_list . submit ( ) assert len ( response [ 'Responses' ] [ table . name ] [ 'Items' ] ) == 2 results = table . query ( 'Amazon DynamoDB' , range_key_condition = { 'DynamoDB' : 'BEGINS_WITH' } ) n = 0 for item in results : n += 1 assert n == 2 results = table . scan ( [ ( 'Tags' , 'CONTAINS' , 'table' ) ] ) n = 0 for item in results : n += 1 assert n == 2 expected = { 'Views' : 0 } item1 . delete ( expected_value = expected ) self . assertFalse ( table . has_item ( item1_key , range_key = item1_range , consistent_read = True ) ) ret_vals = item2 . delete ( return_values = 'ALL_OLD' ) assert ret_vals [ 'Attributes' ] [ hash_key_name ] == item2_key assert ret_vals [ 'Attributes' ] [ range_key_name ] == item2_range item3 . delete ( ) table2_item1 . delete ( ) table . delete ( ) table2 . delete ( ) assert table . status == 'DELETING' assert table2 . status == 'DELETING' print '--- tests completed ---'
