from boto . connection import AWSQueryConnection from boto . regioninfo import RegionInfo import boto import uuid try : import simplejson as json except ImportError : import json class SNSConnection ( AWSQueryConnection ) : DefaultRegionName = 'us-east-1' DefaultRegionEndpoint = 'sns.us-east-1.amazonaws.com' APIVersion = '2010-03-31' def __init__ ( self , aws_access_key_id = None , aws_secret_access_key = None , is_secure = True , port = None , proxy = None , proxy_port = None , proxy_user = None , proxy_pass = None , debug = 0 , https_connection_factory = None , region = None , path = '/' , security_token = None ) : if not region : region = RegionInfo ( self , self . DefaultRegionName , self . DefaultRegionEndpoint , connection_cls = SNSConnection ) self . region = region AWSQueryConnection . __init__ ( self , aws_access_key_id , aws_secret_access_key , is_secure , port , proxy , proxy_port , proxy_user , proxy_pass , self . region . endpoint , debug , https_connection_factory , path , security_token = security_token ) def _required_auth_capability ( self ) : return [ 'sns' ] def get_all_topics ( self , next_token = None ) : params = { 'ContentType' : 'JSON' } if next_token : params [ 'NextToken' ] = next_token response = self . make_request ( 'ListTopics' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def get_topic_attributes ( self , topic ) : params = { 'ContentType' : 'JSON' , : topic } response = self . make_request ( 'GetTopicAttributes' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def set_topic_attributes ( self , topic , attr_name , attr_value ) : params = { 'ContentType' : 'JSON' , : topic , : attr_name , : attr_value } response = self . make_request ( 'SetTopicAttributes' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def add_permission ( self , topic , label , account_ids , actions ) : params = { 'ContentType' : 'JSON' , : topic , : label } self . build_list_params ( params , account_ids , 'AWSAccountId' ) self . build_list_params ( params , actions , 'ActionName' ) response = self . make_request ( 'AddPermission' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def remove_permission ( self , topic , label ) : params = { 'ContentType' : 'JSON' , : topic , : label } response = self . make_request ( 'RemovePermission' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def create_topic ( self , topic ) : params = { 'ContentType' : 'JSON' , : topic } response = self . make_request ( 'CreateTopic' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def delete_topic ( self , topic ) : params = { 'ContentType' : 'JSON' , : topic } response = self . make_request ( 'DeleteTopic' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def publish ( self , topic , message , subject = None ) : params = { 'ContentType' : 'JSON' , : topic , : message } if subject : params [ 'Subject' ] = subject response = self . make_request ( 'Publish' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def subscribe ( self , topic , protocol , endpoint ) : params = { 'ContentType' : 'JSON' , : topic , : protocol , : endpoint } response = self . make_request ( 'Subscribe' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def subscribe_sqs_queue ( self , topic , queue ) : t = queue . id . split ( '/' ) q_arn = 'arn:aws:sqs:%s:%s:%s' % ( queue . connection . region . name , t [ 1 ] , t [ 2 ] ) resp = self . subscribe ( topic , 'sqs' , q_arn ) policy = queue . get_attributes ( 'Policy' ) if 'Version' not in policy : policy [ 'Version' ] = '2008-10-17' if 'Statement' not in policy : policy [ 'Statement' ] = [ ] statement = { 'Action' : 'SQS:SendMessage' , : 'Allow' , : { 'AWS' : '*' } , : q_arn , : str ( uuid . uuid4 ( ) ) , : { 'StringLike' : { 'aws:SourceArn' : topic } } } policy [ 'Statement' ] . append ( statement ) queue . set_attribute ( 'Policy' , json . dumps ( policy ) ) return resp def confirm_subscription ( self , topic , token , authenticate_on_unsubscribe = False ) : params = { 'ContentType' : 'JSON' , : topic , : token } if authenticate_on_unsubscribe : params [ 'AuthenticateOnUnsubscribe' ] = 'true' response = self . make_request ( 'ConfirmSubscription' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def unsubscribe ( self , subscription ) : params = { 'ContentType' : 'JSON' , : subscription } response = self . make_request ( 'Unsubscribe' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def get_all_subscriptions ( self , next_token = None ) : params = { 'ContentType' : 'JSON' } if next_token : params [ 'NextToken' ] = next_token response = self . make_request ( 'ListSubscriptions' , params , '/' , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def get_all_subscriptions_by_topic ( self , topic , next_token = None ) : params = { 'ContentType' : 'JSON' , : topic } if next_token : params [ 'NextToken' ] = next_token response = self . make_request ( 'ListSubscriptionsByTopic' , params , , 'GET' ) body = response . read ( ) if response . status == 200 : return json . loads ( body ) else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body )
