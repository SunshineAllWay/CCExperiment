from boto . sdb . queryresultset import SelectResultSet class Domain : def __init__ ( self , connection = None , name = None ) : self . connection = connection self . name = name self . _metadata = None def __repr__ ( self ) : return 'Domain:%s' % self . name def __iter__ ( self ) : return iter ( self . select ( "SELECT * FROM `%s`" % self . name ) ) def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'DomainName' : self . name = value else : setattr ( self , name , value ) def get_metadata ( self ) : if not self . _metadata : self . _metadata = self . connection . domain_metadata ( self ) return self . _metadata def put_attributes ( self , item_name , attributes , replace = True , expected_value = None ) : return self . connection . put_attributes ( self , item_name , attributes , replace , expected_value ) def batch_put_attributes ( self , items , replace = True ) : return self . connection . batch_put_attributes ( self , items , replace ) def get_attributes ( self , item_name , attribute_name = None , consistent_read = False , item = None ) : return self . connection . get_attributes ( self , item_name , attribute_name , consistent_read , item ) def delete_attributes ( self , item_name , attributes = None , expected_values = None ) : return self . connection . delete_attributes ( self , item_name , attributes , expected_values ) def batch_delete_attributes ( self , items ) : return self . connection . batch_delete_attributes ( self , items ) def select ( self , query = '' , next_token = None , consistent_read = False , max_items = None ) : return SelectResultSet ( self , query , max_items = max_items , next_token = next_token , consistent_read = consistent_read ) def get_item ( self , item_name , consistent_read = False ) : item = self . get_attributes ( item_name , consistent_read = consistent_read ) if item : item . domain = self return item else : return None def new_item ( self , item_name ) : return self . connection . item_cls ( self , item_name ) def delete_item ( self , item ) : self . delete_attributes ( item . name ) def to_xml ( self , f = None ) : if not f : from tempfile import TemporaryFile f = TemporaryFile ( ) print >> f , '<?xml version="1.0" encoding="UTF-8"?>' print >> f , '<Domain id="%s">' % self . name for item in self : print >> f , '\t<Item id="%s">' % item . name for k in item : print >> f , '\t\t<attribute id="%s">' % k values = item [ k ] if not isinstance ( values , list ) : values = [ values ] for value in values : print >> f , '\t\t\t<value><![CDATA[' , if isinstance ( value , unicode ) : value = value . encode ( 'utf-8' , 'replace' ) else : value = unicode ( value , errors = 'replace' ) . encode ( 'utf-8' , 'replace' ) f . write ( value ) print >> f , ']]></value>' print >> f , '\t\t</attribute>' print >> f , '\t</Item>' print >> f , '</Domain>' f . flush ( ) f . seek ( 0 ) return f def from_xml ( self , doc ) : import xml . sax handler = DomainDumpParser ( self ) xml . sax . parse ( doc , handler ) return handler def delete ( self ) : return self . connection . delete_domain ( self ) class DomainMetaData : def __init__ ( self , domain = None ) : self . domain = domain self . item_count = None self . item_names_size = None self . attr_name_count = None self . attr_names_size = None self . attr_value_count = None self . attr_values_size = None def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'ItemCount' : self . item_count = int ( value ) elif name == 'ItemNamesSizeBytes' : self . item_names_size = int ( value ) elif name == 'AttributeNameCount' : self . attr_name_count = int ( value ) elif name == 'AttributeNamesSizeBytes' : self . attr_names_size = int ( value ) elif name == 'AttributeValueCount' : self . attr_value_count = int ( value ) elif name == 'AttributeValuesSizeBytes' : self . attr_values_size = int ( value ) elif name == 'Timestamp' : self . timestamp = value else : setattr ( self , name , value ) import sys from xml . sax . handler import ContentHandler class DomainDumpParser ( ContentHandler ) : def __init__ ( self , domain ) : self . uploader = UploaderThread ( domain ) self . item_id = None self . attrs = { } self . attribute = None self . value = "" self . domain = domain def startElement ( self , name , attrs ) : if name == "Item" : self . item_id = attrs [ 'id' ] self . attrs = { } elif name == "attribute" : self . attribute = attrs [ 'id' ] elif name == "value" : self . value = "" def characters ( self , ch ) : self . value += ch def endElement ( self , name ) : if name == "value" : if self . value and self . attribute : value = self . value . strip ( ) attr_name = self . attribute . strip ( ) if self . attrs . has_key ( attr_name ) : self . attrs [ attr_name ] . append ( value ) else : self . attrs [ attr_name ] = [ value ] elif name == "Item" : self . uploader . items [ self . item_id ] = self . attrs if len ( self . uploader . items ) >= 20 : self . uploader . start ( ) self . uploader = UploaderThread ( self . domain ) elif name == "Domain" : self . uploader . start ( ) from threading import Thread class UploaderThread ( Thread ) : def __init__ ( self , domain ) : self . db = domain self . items = { } Thread . __init__ ( self ) def run ( self ) : try : self . db . batch_put_attributes ( self . items ) except : print "Exception using batch put, trying regular put instead" for item_name in self . items : self . db . put_attributes ( item_name , self . items [ item_name ] ) print "." , sys . stdout . flush ( )
