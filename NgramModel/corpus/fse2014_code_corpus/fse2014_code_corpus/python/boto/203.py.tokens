""" This module provides an interface to the Elastic Compute Cloud (EC2) load balancing service from AWS. """ from boto . connection import AWSQueryConnection from boto . ec2 . instanceinfo import InstanceInfo from boto . ec2 . elb . loadbalancer import LoadBalancer from boto . ec2 . elb . instancestate import InstanceState from boto . ec2 . elb . healthcheck import HealthCheck from boto . regioninfo import RegionInfo import boto RegionData = { : 'elasticloadbalancing.us-east-1.amazonaws.com' , : 'elasticloadbalancing.us-west-1.amazonaws.com' , : 'elasticloadbalancing.us-west-2.amazonaws.com' , : 'elasticloadbalancing.sa-east-1.amazonaws.com' , : 'elasticloadbalancing.eu-west-1.amazonaws.com' , : 'elasticloadbalancing.ap-northeast-1.amazonaws.com' , : 'elasticloadbalancing.ap-southeast-1.amazonaws.com' } def regions ( ) : regions = [ ] for region_name in RegionData : region = RegionInfo ( name = region_name , endpoint = RegionData [ region_name ] , connection_cls = ELBConnection ) regions . append ( region ) return regions def connect_to_region ( region_name , ** kw_params ) : for region in regions ( ) : if region . name == region_name : return region . connect ( ** kw_params ) return None class ELBConnection ( AWSQueryConnection ) : APIVersion = boto . config . get ( 'Boto' , 'elb_version' , '2011-11-15' ) DefaultRegionName = boto . config . get ( 'Boto' , 'elb_region_name' , 'us-east-1' ) DefaultRegionEndpoint = boto . config . get ( 'Boto' , 'elb_region_endpoint' , ) def __init__ ( self , aws_access_key_id = None , aws_secret_access_key = None , is_secure = False , port = None , proxy = None , proxy_port = None , proxy_user = None , proxy_pass = None , debug = 0 , https_connection_factory = None , region = None , path = '/' ) : if not region : region = RegionInfo ( self , self . DefaultRegionName , self . DefaultRegionEndpoint ) self . region = region AWSQueryConnection . __init__ ( self , aws_access_key_id , aws_secret_access_key , is_secure , port , proxy , proxy_port , proxy_user , proxy_pass , self . region . endpoint , debug , https_connection_factory , path ) def _required_auth_capability ( self ) : return [ 'ec2' ] def build_list_params ( self , params , items , label ) : if isinstance ( items , str ) : items = [ items ] for index , item in enumerate ( items ) : params [ label % ( index + 1 ) ] = item def get_all_load_balancers ( self , load_balancer_names = None ) : params = { } if load_balancer_names : self . build_list_params ( params , load_balancer_names , ) return self . get_list ( 'DescribeLoadBalancers' , params , [ ( 'member' , LoadBalancer ) ] ) def create_load_balancer ( self , name , zones , listeners , subnets = None , security_groups = None ) : params = { 'LoadBalancerName' : name } for index , listener in enumerate ( listeners ) : i = index + 1 params [ 'Listeners.member.%d.LoadBalancerPort' % i ] = listener [ 0 ] params [ 'Listeners.member.%d.InstancePort' % i ] = listener [ 1 ] params [ 'Listeners.member.%d.Protocol' % i ] = listener [ 2 ] if listener [ 2 ] == 'HTTPS' : params [ 'Listeners.member.%d.SSLCertificateId' % i ] = listener [ 3 ] if zones : self . build_list_params ( params , zones , 'AvailabilityZones.member.%d' ) if subnets : self . build_list_params ( params , subnets , 'Subnets.member.%d' ) if security_groups : self . build_list_params ( params , security_groups , ) load_balancer = self . get_object ( 'CreateLoadBalancer' , params , LoadBalancer ) load_balancer . name = name load_balancer . listeners = listeners load_balancer . availability_zones = zones load_balancer . subnets = subnets load_balancer . security_groups = security_groups return load_balancer def create_load_balancer_listeners ( self , name , listeners ) : params = { 'LoadBalancerName' : name } for index , listener in enumerate ( listeners ) : i = index + 1 params [ 'Listeners.member.%d.LoadBalancerPort' % i ] = listener [ 0 ] params [ 'Listeners.member.%d.InstancePort' % i ] = listener [ 1 ] params [ 'Listeners.member.%d.Protocol' % i ] = listener [ 2 ] if listener [ 2 ] == 'HTTPS' : params [ 'Listeners.member.%d.SSLCertificateId' % i ] = listener [ 3 ] return self . get_status ( 'CreateLoadBalancerListeners' , params ) def delete_load_balancer ( self , name ) : params = { 'LoadBalancerName' : name } return self . get_status ( 'DeleteLoadBalancer' , params ) def delete_load_balancer_listeners ( self , name , ports ) : params = { 'LoadBalancerName' : name } for index , port in enumerate ( ports ) : params [ 'LoadBalancerPorts.member.%d' % ( index + 1 ) ] = port return self . get_status ( 'DeleteLoadBalancerListeners' , params ) def enable_availability_zones ( self , load_balancer_name , zones_to_add ) : params = { 'LoadBalancerName' : load_balancer_name } self . build_list_params ( params , zones_to_add , ) return self . get_list ( 'EnableAvailabilityZonesForLoadBalancer' , params , None ) def disable_availability_zones ( self , load_balancer_name , zones_to_remove ) : params = { 'LoadBalancerName' : load_balancer_name } self . build_list_params ( params , zones_to_remove , ) return self . get_list ( 'DisableAvailabilityZonesForLoadBalancer' , params , None ) def register_instances ( self , load_balancer_name , instances ) : params = { 'LoadBalancerName' : load_balancer_name } self . build_list_params ( params , instances , ) return self . get_list ( 'RegisterInstancesWithLoadBalancer' , params , [ ( 'member' , InstanceInfo ) ] ) def deregister_instances ( self , load_balancer_name , instances ) : params = { 'LoadBalancerName' : load_balancer_name } self . build_list_params ( params , instances , ) return self . get_list ( 'DeregisterInstancesFromLoadBalancer' , params , [ ( 'member' , InstanceInfo ) ] ) def describe_instance_health ( self , load_balancer_name , instances = None ) : params = { 'LoadBalancerName' : load_balancer_name } if instances : self . build_list_params ( params , instances , ) return self . get_list ( 'DescribeInstanceHealth' , params , [ ( 'member' , InstanceState ) ] ) def configure_health_check ( self , name , health_check ) : params = { 'LoadBalancerName' : name , : health_check . timeout , : health_check . target , : health_check . interval , : health_check . unhealthy_threshold , : health_check . healthy_threshold } return self . get_object ( 'ConfigureHealthCheck' , params , HealthCheck ) def set_lb_listener_SSL_certificate ( self , lb_name , lb_port , ssl_certificate_id ) : params = { : lb_name , : lb_port , : ssl_certificate_id , } return self . get_status ( 'SetLoadBalancerListenerSSLCertificate' , params ) def create_app_cookie_stickiness_policy ( self , name , lb_name , policy_name ) : params = { : name , : lb_name , : policy_name , } return self . get_status ( 'CreateAppCookieStickinessPolicy' , params ) def create_lb_cookie_stickiness_policy ( self , cookie_expiration_period , lb_name , policy_name ) : params = { : cookie_expiration_period , : lb_name , : policy_name , } return self . get_status ( 'CreateLBCookieStickinessPolicy' , params ) def delete_lb_policy ( self , lb_name , policy_name ) : params = { : lb_name , : policy_name , } return self . get_status ( 'DeleteLoadBalancerPolicy' , params ) def set_lb_policies_of_listener ( self , lb_name , lb_port , policies ) : params = { : lb_name , : lb_port , } self . build_list_params ( params , policies , 'PolicyNames.member.%d' ) return self . get_status ( 'SetLoadBalancerPoliciesOfListener' , params ) def apply_security_groups_to_lb ( self , name , security_groups ) : params = { 'LoadBalancerName' : name } self . build_list_params ( params , security_groups , ) return self . get_list ( 'ApplySecurityGroupsToLoadBalancer' , params , None ) def attach_lb_to_subnets ( self , name , subnets ) : params = { 'LoadBalancerName' : name } self . build_list_params ( params , subnets , ) return self . get_list ( 'AttachLoadBalancerToSubnets' , params , None ) def detach_lb_from_subnets ( self , name , subnets ) : params = { 'LoadBalancerName' : name } self . build_list_params ( params , subnets , ) return self . get_list ( 'DettachLoadBalancerFromSubnets' , params , None )
