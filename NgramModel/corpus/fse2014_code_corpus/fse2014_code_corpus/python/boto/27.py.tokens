import unittest import time from boto . dynamodb . exceptions import DynamoDBKeyNotFoundError from boto . dynamodb . layer1 import Layer1 from boto . sts . credentials import Credentials json_doc = """{"access_key": "ASIAIV7R2NUUJ6SB7GKQ", "secret_key": "eIfijGxJlejHDSQiaGr6b7U805U0GKWmllCTt2ZM", "request_id": "28c17897-4555-11e1-8bb1-2529f165f2f0", "expiration": "2012-01-23T00:59:45.617Z", "session_token": "AQoDYXdzEPn//////////wEasAGDXeGY8bx36NLRSA1v3dy2x00k3FNA2KVsMEXkQuKY08gPTtYs2tefZTBsTjgjC+O6j8ieoB1on2bPyCq872+Yq3cipls8jna+PNSEcsXtC8CJBKai/FfYNg1XUHam6EUCtRiUHvqztOVgaGqUUS1UbrBKB7kKSXzgKrJ9AT0bvqi4hZS0ayaU8969f2HIbN9psXhRBKpJyB9FUPuVYpYYZsz9NY3y2kGtK+dgfrKvxyDxxfL4BA=="}""" class DynamoDBLayer1Test ( unittest . TestCase ) : def test_layer1_basic ( self ) : print '--- running DynamoDB Layer1 tests ---' bad_creds = Credentials . from_json ( json_doc ) c = Layer1 ( session_token = bad_creds ) table_name = 'test-%d' % int ( time . time ( ) ) hash_key_name = 'forum_name' hash_key_type = 'S' range_key_name = 'subject' range_key_type = 'S' read_units = 5 write_units = 5 schema = { 'HashKeyElement' : { 'AttributeName' : hash_key_name , : hash_key_type } , : { 'AttributeName' : range_key_name , : range_key_type } } provisioned_throughput = { 'ReadCapacityUnits' : read_units , : write_units } result = c . create_table ( table_name , schema , provisioned_throughput ) assert result [ 'TableDescription' ] [ 'TableName' ] == table_name result_schema = result [ 'TableDescription' ] [ 'KeySchema' ] assert result_schema [ 'HashKeyElement' ] [ 'AttributeName' ] == hash_key_name assert result_schema [ 'HashKeyElement' ] [ 'AttributeType' ] == hash_key_type assert result_schema [ 'RangeKeyElement' ] [ 'AttributeName' ] == range_key_name assert result_schema [ 'RangeKeyElement' ] [ 'AttributeType' ] == range_key_type result_thruput = result [ 'TableDescription' ] [ 'ProvisionedThroughput' ] assert result_thruput [ 'ReadCapacityUnits' ] == read_units assert result_thruput [ 'WriteCapacityUnits' ] == write_units result = c . describe_table ( table_name ) while result [ 'Table' ] [ 'TableStatus' ] != 'ACTIVE' : time . sleep ( 5 ) result = c . describe_table ( table_name ) result = c . list_tables ( ) assert table_name in result [ 'TableNames' ] new_read_units = 10 new_write_units = 5 new_provisioned_throughput = { 'ReadCapacityUnits' : new_read_units , : new_write_units } result = c . update_table ( table_name , new_provisioned_throughput ) result = c . describe_table ( table_name ) while result [ 'Table' ] [ 'TableStatus' ] == 'UPDATING' : time . sleep ( 5 ) result = c . describe_table ( table_name ) result_thruput = result [ 'Table' ] [ 'ProvisionedThroughput' ] assert result_thruput [ 'ReadCapacityUnits' ] == new_read_units assert result_thruput [ 'WriteCapacityUnits' ] == new_write_units item1_key = 'Amazon DynamoDB' item1_range = 'DynamoDB Thread 1' item1_data = { hash_key_name : { hash_key_type : item1_key } , range_key_name : { range_key_type : item1_range } , : { 'S' : 'DynamoDB thread 1 message text' } , : { 'S' : 'User A' } , : { 'N' : '0' } , : { 'N' : '0' } , : { 'N' : '0' } , : { 'SS' : [ "index" , "primarykey" , "table" ] } , : { 'S' : '12/9/2011 11:36:03 PM' } } result = c . put_item ( table_name , item1_data ) key1 = { 'HashKeyElement' : { hash_key_type : item1_key } , : { range_key_type : item1_range } } result = c . get_item ( table_name , key = key1 , consistent_read = True ) for name in item1_data : assert name in result [ 'Item' ] invalid_key = { 'HashKeyElement' : { hash_key_type : 'bogus_key' } , : { range_key_type : item1_range } } self . assertRaises ( DynamoDBKeyNotFoundError , c . get_item , table_name , key = invalid_key ) attributes = [ 'Message' , 'Views' ] result = c . get_item ( table_name , key = key1 , consistent_read = True , attributes_to_get = attributes ) for name in result [ 'Item' ] : assert name in attributes expected = { 'Views' : { 'Value' : { 'N' : '1' } } } try : result = c . delete_item ( 'table_name' , key = key1 , expected = expected ) except c . ResponseError , e : pass attribute_updates = { 'Views' : { 'Value' : { 'N' : '5' } , : 'PUT' } , : { 'Value' : { 'SS' : [ 'foobar' ] } , : 'ADD' } } result = c . update_item ( table_name , key = key1 , attribute_updates = attribute_updates ) item2_key = 'Amazon DynamoDB' item2_range = 'DynamoDB Thread 2' item2_data = { hash_key_name : { hash_key_type : item2_key } , range_key_name : { range_key_type : item2_range } , : { 'S' : 'DynamoDB thread 2 message text' } , : { 'S' : 'User A' } , : { 'N' : '0' } , : { 'N' : '0' } , : { 'N' : '0' } , : { 'SS' : [ "index" , "primarykey" , "table" ] } , : { 'S' : '12/9/2011 11:36:03 PM' } } result = c . put_item ( table_name , item2_data ) key2 = { 'HashKeyElement' : { hash_key_type : item2_key } , : { range_key_type : item2_range } } item3_key = 'Amazon S3' item3_range = 'S3 Thread 1' item3_data = { hash_key_name : { hash_key_type : item3_key } , range_key_name : { range_key_type : item3_range } , : { 'S' : 'S3 Thread 1 message text' } , : { 'S' : 'User A' } , : { 'N' : '0' } , : { 'N' : '0' } , : { 'N' : '0' } , : { 'SS' : [ 'largeobject' , 'multipart upload' ] } , : { 'S' : '12/9/2011 11:36:03 PM' } } result = c . put_item ( table_name , item3_data ) key3 = { 'HashKeyElement' : { hash_key_type : item3_key } , : { range_key_type : item3_range } } result = c . query ( table_name , { 'S' : 'Amazon DynamoDB' } , { 'AttributeValueList' : [ { 'S' : 'DynamoDB' } ] , : 'BEGINS_WITH' } ) assert 'Count' in result assert result [ 'Count' ] == 2 result = c . scan ( table_name , { 'Tags' : { 'AttributeValueList' : [ { 'S' : 'table' } ] , : 'CONTAINS' } } ) assert 'Count' in result assert result [ 'Count' ] == 2 result = c . delete_item ( table_name , key = key1 ) result = c . delete_item ( table_name , key = key2 ) result = c . delete_item ( table_name , key = key3 ) result = c . delete_table ( table_name ) assert result [ 'TableDescription' ] [ 'TableStatus' ] == 'DELETING' print '--- tests completed ---'
