from boto . pyami . config import Config from boto . services . message import ServiceMessage import boto class ServiceDef ( Config ) : def __init__ ( self , config_file , aws_access_key_id = None , aws_secret_access_key = None ) : Config . __init__ ( self , config_file ) self . aws_access_key_id = aws_access_key_id self . aws_secret_access_key = aws_secret_access_key script = Config . get ( self , 'Pyami' , 'scripts' ) if script : self . name = script . split ( '.' ) [ - 1 ] else : self . name = None def get ( self , name , default = None ) : return Config . get ( self , self . name , name , default ) def has_option ( self , option ) : return Config . has_option ( self , self . name , option ) def getint ( self , option , default = 0 ) : try : val = Config . get ( self , self . name , option ) val = int ( val ) except : val = int ( default ) return val def getbool ( self , option , default = False ) : try : val = Config . get ( self , self . name , option ) if val . lower ( ) == 'true' : val = True else : val = False except : val = default return val def get_obj ( self , name ) : val = self . get ( name ) if not val : return None if name . find ( 'queue' ) >= 0 : obj = boto . lookup ( 'sqs' , val ) if obj : obj . set_message_class ( ServiceMessage ) elif name . find ( 'bucket' ) >= 0 : obj = boto . lookup ( 's3' , val ) elif name . find ( 'domain' ) >= 0 : obj = boto . lookup ( 'sdb' , val ) else : obj = None return obj
