import xml . sax import time import uuid import urllib import boto from boto . connection import AWSAuthConnection from boto import handler from boto . resultset import ResultSet import boto . jsonresponse import exception import hostedzone HZXML = """<?xml version="1.0" encoding="UTF-8"?> <CreateHostedZoneRequest xmlns="%(xmlns)s"> <Name>%(name)s</Name> <CallerReference>%(caller_ref)s</CallerReference> <HostedZoneConfig> <Comment>%(comment)s</Comment> </HostedZoneConfig> </CreateHostedZoneRequest>""" class Route53Connection ( AWSAuthConnection ) : DefaultHost = 'route53.amazonaws.com' Version = '2011-05-05' XMLNameSpace = 'https://route53.amazonaws.com/doc/2011-05-05/' def __init__ ( self , aws_access_key_id = None , aws_secret_access_key = None , port = None , proxy = None , proxy_port = None , host = DefaultHost , debug = 0 ) : AWSAuthConnection . __init__ ( self , host , aws_access_key_id , aws_secret_access_key , True , port , proxy , proxy_port , debug = debug ) def _required_auth_capability ( self ) : return [ 'route53' ] def make_request ( self , action , path , headers = None , data = '' , params = None ) : if params : pairs = [ ] for key , val in params . iteritems ( ) : if val is None : continue pairs . append ( key + '=' + urllib . quote ( str ( val ) ) ) path += '?' + '&' . join ( pairs ) return AWSAuthConnection . make_request ( self , action , path , headers , data ) def get_all_hosted_zones ( self , start_marker = None , zone_list = None ) : params = { } if start_marker : params = { 'marker' : start_marker } response = self . make_request ( 'GET' , '/%s/hostedzone' % self . Version , params = params ) body = response . read ( ) boto . log . debug ( body ) if response . status >= 300 : raise exception . DNSServerError ( response . status , response . reason , body ) e = boto . jsonresponse . Element ( list_marker = 'HostedZones' , item_marker = ( 'HostedZone' , ) ) h = boto . jsonresponse . XmlHandler ( e , None ) h . parse ( body ) if zone_list : e [ 'ListHostedZonesResponse' ] [ 'HostedZones' ] . extend ( zone_list ) while e [ 'ListHostedZonesResponse' ] . has_key ( 'NextMarker' ) : next_marker = e [ 'ListHostedZonesResponse' ] [ 'NextMarker' ] zone_list = e [ 'ListHostedZonesResponse' ] [ 'HostedZones' ] e = self . get_all_hosted_zones ( next_marker , zone_list ) return e def get_hosted_zone ( self , hosted_zone_id ) : uri = '/%s/hostedzone/%s' % ( self . Version , hosted_zone_id ) response = self . make_request ( 'GET' , uri ) body = response . read ( ) boto . log . debug ( body ) if response . status >= 300 : raise exception . DNSServerError ( response . status , response . reason , body ) e = boto . jsonresponse . Element ( list_marker = 'NameServers' , item_marker = ( 'NameServer' , ) ) h = boto . jsonresponse . XmlHandler ( e , None ) h . parse ( body ) return e def create_hosted_zone ( self , domain_name , caller_ref = None , comment = '' ) : if caller_ref is None : caller_ref = str ( uuid . uuid4 ( ) ) params = { 'name' : domain_name , : caller_ref , : comment , : self . XMLNameSpace } xml = HZXML % params uri = '/%s/hostedzone' % self . Version response = self . make_request ( 'POST' , uri , { 'Content-Type' : 'text/xml' } , xml ) body = response . read ( ) boto . log . debug ( body ) if response . status == 201 : e = boto . jsonresponse . Element ( list_marker = 'NameServers' , item_marker = ( 'NameServer' , ) ) h = boto . jsonresponse . XmlHandler ( e , None ) h . parse ( body ) return e else : raise exception . DNSServerError ( response . status , response . reason , body ) def delete_hosted_zone ( self , hosted_zone_id ) : uri = '/%s/hostedzone/%s' % ( self . Version , hosted_zone_id ) response = self . make_request ( 'DELETE' , uri ) body = response . read ( ) boto . log . debug ( body ) if response . status not in ( 200 , 204 ) : raise exception . DNSServerError ( response . status , response . reason , body ) e = boto . jsonresponse . Element ( ) h = boto . jsonresponse . XmlHandler ( e , None ) h . parse ( body ) return e def get_all_rrsets ( self , hosted_zone_id , type = None , name = None , identifier = None , maxitems = None ) : from boto . route53 . record import ResourceRecordSets params = { 'type' : type , 'name' : name , : identifier , 'maxitems' : maxitems } uri = '/%s/hostedzone/%s/rrset' % ( self . Version , hosted_zone_id ) response = self . make_request ( 'GET' , uri , params = params ) body = response . read ( ) boto . log . debug ( body ) if response . status >= 300 : raise exception . DNSServerError ( response . status , response . reason , body ) rs = ResourceRecordSets ( connection = self , hosted_zone_id = hosted_zone_id ) h = handler . XmlHandler ( rs , self ) xml . sax . parseString ( body , h ) return rs def change_rrsets ( self , hosted_zone_id , xml_body ) : uri = '/%s/hostedzone/%s/rrset' % ( self . Version , hosted_zone_id ) response = self . make_request ( 'POST' , uri , { 'Content-Type' : 'text/xml' } , xml_body ) body = response . read ( ) boto . log . debug ( body ) if response . status >= 300 : raise exception . DNSServerError ( response . status , response . reason , body ) e = boto . jsonresponse . Element ( ) h = boto . jsonresponse . XmlHandler ( e , None ) h . parse ( body ) return e def get_change ( self , change_id ) : uri = '/%s/change/%s' % ( self . Version , change_id ) response = self . make_request ( 'GET' , uri ) body = response . read ( ) boto . log . debug ( body ) if response . status >= 300 : raise exception . DNSServerError ( response . status , response . reason , body ) e = boto . jsonresponse . Element ( ) h = boto . jsonresponse . XmlHandler ( e , None ) h . parse ( body ) return e
