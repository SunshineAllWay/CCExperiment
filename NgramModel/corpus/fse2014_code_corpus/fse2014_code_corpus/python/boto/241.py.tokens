import boto from boto import handler from boto . exception import InvalidAclError from boto . gs . acl import ACL , CannedACLStrings from boto . gs . acl import SupportedPermissions as GSPermissions from boto . gs . key import Key as GSKey from boto . s3 . acl import Policy from boto . s3 . bucket import Bucket as S3Bucket import xml . sax DEF_OBJ_ACL = 'defaultObjectAcl' STANDARD_ACL = 'acl' class Bucket ( S3Bucket ) : def __init__ ( self , connection = None , name = None , key_class = GSKey ) : super ( Bucket , self ) . __init__ ( connection , name , key_class ) def set_acl ( self , acl_or_str , key_name = '' , headers = None , version_id = None ) : if isinstance ( acl_or_str , Policy ) : raise InvalidAclError ( 'Attempt to set S3 Policy on GS ACL' ) elif isinstance ( acl_or_str , ACL ) : self . set_xml_acl ( acl_or_str . to_xml ( ) , key_name , headers = headers ) else : self . set_canned_acl ( acl_or_str , key_name , headers = headers ) def set_def_acl ( self , acl_or_str , key_name = '' , headers = None ) : if isinstance ( acl_or_str , Policy ) : raise InvalidAclError ( 'Attempt to set S3 Policy on GS ACL' ) elif isinstance ( acl_or_str , ACL ) : self . set_def_xml_acl ( acl_or_str . to_xml ( ) , key_name , headers = headers ) else : self . set_def_canned_acl ( acl_or_str , key_name , headers = headers ) def get_acl_helper ( self , key_name , headers , query_args ) : response = self . connection . make_request ( 'GET' , self . name , key_name , query_args = query_args , headers = headers ) body = response . read ( ) if response . status == 200 : acl = ACL ( self ) h = handler . XmlHandler ( acl , self ) xml . sax . parseString ( body , h ) return acl else : raise self . connection . provider . storage_response_error ( response . status , response . reason , body ) def get_acl ( self , key_name = '' , headers = None , version_id = None ) : return self . get_acl_helper ( key_name , headers , STANDARD_ACL ) def get_def_acl ( self , key_name = '' , headers = None ) : return self . get_acl_helper ( key_name , headers , DEF_OBJ_ACL ) def set_canned_acl_helper ( self , acl_str , key_name , headers , query_args ) : assert acl_str in CannedACLStrings if headers : headers [ self . connection . provider . acl_header ] = acl_str else : headers = { self . connection . provider . acl_header : acl_str } response = self . connection . make_request ( 'PUT' , self . name , key_name , headers = headers , query_args = query_args ) body = response . read ( ) if response . status != 200 : raise self . connection . provider . storage_response_error ( response . status , response . reason , body ) def set_canned_acl ( self , acl_str , key_name = '' , headers = None , version_id = None ) : return self . set_canned_acl_helper ( acl_str , key_name , headers , STANDARD_ACL ) def set_def_canned_acl ( self , acl_str , key_name = '' , headers = None ) : return self . set_canned_acl_helper ( acl_str , key_name , headers , query_args = DEF_OBJ_ACL ) def set_def_xml_acl ( self , acl_str , key_name = '' , headers = None ) : return self . set_xml_acl ( acl_str , key_name , headers , query_args = DEF_OBJ_ACL ) def add_email_grant ( self , permission , email_address , recursive = False , headers = None ) : if permission not in GSPermissions : raise self . connection . provider . storage_permissions_error ( % permission ) acl = self . get_acl ( headers = headers ) acl . add_email_grant ( permission , email_address ) self . set_acl ( acl , headers = headers ) if recursive : for key in self : key . add_email_grant ( permission , email_address , headers = headers ) def add_user_grant ( self , permission , user_id , recursive = False , headers = None ) : if permission not in GSPermissions : raise self . connection . provider . storage_permissions_error ( % permission ) acl = self . get_acl ( headers = headers ) acl . add_user_grant ( permission , user_id ) self . set_acl ( acl , headers = headers ) if recursive : for key in self : key . add_user_grant ( permission , user_id , headers = headers ) def add_group_email_grant ( self , permission , email_address , recursive = False , headers = None ) : if permission not in GSPermissions : raise self . connection . provider . storage_permissions_error ( % permission ) acl = self . get_acl ( headers = headers ) acl . add_group_email_grant ( permission , email_address ) self . set_acl ( acl , headers = headers ) if recursive : for key in self : key . add_group_email_grant ( permission , email_address , headers = headers ) def list_grants ( self , headers = None ) : acl = self . get_acl ( headers = headers ) return acl . entries def disable_logging ( self , headers = None ) : xml_str = '<?xml version="1.0" encoding="UTF-8"?><Logging/>' self . set_subresource ( 'logging' , xml_str , headers = headers ) def enable_logging ( self , target_bucket , target_prefix = None , headers = None ) : if isinstance ( target_bucket , Bucket ) : target_bucket = target_bucket . name xml_str = '<?xml version="1.0" encoding="UTF-8"?><Logging>' xml_str = ( xml_str + '<LogBucket>%s</LogBucket>' % target_bucket ) if target_prefix : xml_str = ( xml_str + % target_prefix ) xml_str = xml_str + '</Logging>' self . set_subresource ( 'logging' , xml_str , headers = headers )
