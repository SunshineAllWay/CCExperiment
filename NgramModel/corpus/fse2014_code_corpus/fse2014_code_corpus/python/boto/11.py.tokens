import unittest import time import StringIO from boto . s3 . connection import S3Connection class S3MultiPartUploadTest ( unittest . TestCase ) : def setUp ( self ) : self . conn = S3Connection ( is_secure = False ) self . bucket_name = 'multipart-%d' % int ( time . time ( ) ) self . bucket = self . conn . create_bucket ( self . bucket_name ) def tearDown ( self ) : for key in self . bucket : key . delete ( ) self . bucket . delete ( ) def test_abort ( self ) : key_name = u"テスト" mpu = self . bucket . initiate_multipart_upload ( key_name ) mpu . cancel_upload ( ) def test_complete_ascii ( self ) : key_name = "test" mpu = self . bucket . initiate_multipart_upload ( key_name ) fp = StringIO . StringIO ( "small file" ) mpu . upload_part_from_file ( fp , part_num = 1 ) fp . close ( ) cmpu = mpu . complete_upload ( ) self . assertEqual ( cmpu . key_name , key_name ) self . assertNotEqual ( cmpu . etag , None ) def test_complete_japanese ( self ) : key_name = u"テスト" mpu = self . bucket . initiate_multipart_upload ( key_name ) fp = StringIO . StringIO ( "small file" ) mpu . upload_part_from_file ( fp , part_num = 1 ) fp . close ( ) cmpu = mpu . complete_upload ( ) self . assertEqual ( cmpu . key_name , "???" ) self . assertNotEqual ( cmpu . etag , None ) def test_list_japanese ( self ) : key_name = u"テスト" mpu = self . bucket . initiate_multipart_upload ( key_name ) rs = self . bucket . list_multipart_uploads ( ) lmpu = iter ( rs ) . next ( ) self . assertEqual ( lmpu . id , mpu . id ) self . assertEqual ( lmpu . key_name , key_name ) lmpu . cancel_upload ( ) def test_four_part_file ( self ) : key_name = "k" contents = "01234567890123456789" sfp = StringIO . StringIO ( contents ) mpu = self . bucket . initiate_multipart_upload ( key_name ) mpu . upload_part_from_file ( sfp , part_num = 1 , size = 5 ) mpu . upload_part_from_file ( sfp , part_num = 2 , size = 5 ) mpu . upload_part_from_file ( sfp , part_num = 3 , size = 5 ) mpu . upload_part_from_file ( sfp , part_num = 4 , size = 5 ) sfp . close ( ) etags = { } pn = 0 for part in mpu : pn += 1 self . assertEqual ( 5 , part . size ) etags [ pn ] = part . etag self . assertEqual ( pn , 4 ) self . assertEqual ( etags [ 1 ] , etags [ 3 ] ) self . assertEqual ( etags [ 2 ] , etags [ 4 ] ) self . assertNotEqual ( etags [ 1 ] , etags [ 2 ] ) mpu . cancel_upload ( )
