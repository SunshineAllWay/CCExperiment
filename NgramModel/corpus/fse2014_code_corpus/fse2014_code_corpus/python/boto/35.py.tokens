import unittest import logging log = logging . getLogger ( __file__ ) class TestPassword ( unittest . TestCase ) : def clstest ( self , cls ) : password = cls ( 'foo' ) log . debug ( "Password %s" % password ) self . assertNotEquals ( password , 'foo' ) password . set ( 'foo' ) hashed = str ( password ) self . assertEquals ( password , 'foo' ) self . assertEquals ( password . str , hashed ) password = cls ( hashed ) self . assertNotEquals ( password . str , 'foo' ) self . assertEquals ( password , 'foo' ) self . assertEquals ( password . str , hashed ) def test_aaa_version_1_9_default_behavior ( self ) : from boto . utils import Password self . clstest ( Password ) def test_custom_hashclass ( self ) : from boto . utils import Password import hashlib class SHA224Password ( Password ) : hashfunc = hashlib . sha224 password = SHA224Password ( ) password . set ( 'foo' ) self . assertEquals ( hashlib . sha224 ( 'foo' ) . hexdigest ( ) , str ( password ) ) def test_hmac ( self ) : from boto . utils import Password import hmac def hmac_hashfunc ( cls , msg ) : log . debug ( "\n%s %s" % ( cls . __class__ , cls ) ) return hmac . new ( 'mysecretkey' , msg ) class HMACPassword ( Password ) : hashfunc = hmac_hashfunc self . clstest ( HMACPassword ) password = HMACPassword ( ) password . set ( 'foo' ) self . assertEquals ( str ( password ) , hmac . new ( 'mysecretkey' , 'foo' ) . hexdigest ( ) ) def test_constructor ( self ) : from boto . utils import Password import hmac hmac_hashfunc = lambda msg : hmac . new ( 'mysecretkey' , msg ) password = Password ( hashfunc = hmac_hashfunc ) password . set ( 'foo' ) self . assertEquals ( password . str , hmac . new ( 'mysecretkey' , 'foo' ) . hexdigest ( ) ) if __name__ == '__main__' : import sys sys . path = [ '../../' ] + sys . path suite = unittest . TestLoader ( ) . loadTestsFromTestCase ( TestPassword ) unittest . TextTestRunner ( verbosity = 2 ) . run ( suite )
