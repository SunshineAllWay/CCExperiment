import boto . utils import os import datetime try : import simplejson as json except ImportError : import json class Credentials ( object ) : def __init__ ( self , parent = None ) : self . parent = parent self . access_key = None self . secret_key = None self . session_token = None self . expiration = None @ classmethod def from_json ( cls , json_doc ) : d = json . loads ( json_doc ) token = cls ( ) token . __dict__ . update ( d ) return token @ classmethod def load ( cls , file_path ) : fp = open ( file_path ) json_doc = fp . read ( ) fp . close ( ) return cls . from_json ( json_doc ) def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'AccessKeyId' : self . access_key = value elif name == 'SecretAccessKey' : self . secret_key = value elif name == 'SessionToken' : self . session_token = value elif name == 'Expiration' : self . expiration = value elif name == 'RequestId' : self . request_id = value else : pass def to_dict ( self ) : return { 'access_key' : self . access_key , : self . secret_key , : self . session_token , : self . expiration , : self . request_id } def save ( self , file_path ) : fp = open ( file_path , 'wb' ) json . dump ( self . to_dict ( ) , fp ) fp . close ( ) os . chmod ( file_path , 0600 ) def is_expired ( self , time_offset_seconds = 0 ) : now = datetime . datetime . utcnow ( ) if time_offset_seconds : now = now + datetime . timedelta ( seconds = time_offset_seconds ) ts = boto . utils . parse_ts ( self . expiration ) delta = ts - now return delta . total_seconds ( ) <= 0 class FederationToken ( object ) : def __init__ ( self , parent = None ) : self . parent = parent self . credentials = None self . federated_user_arn = None self . federated_user_id = None self . packed_policy_size = None def startElement ( self , name , attrs , connection ) : if name == 'Credentials' : self . credentials = Credentials ( ) return self . credentials else : return None def endElement ( self , name , value , connection ) : if name == 'Arn' : self . federated_user_arn = value elif name == 'FederatedUserId' : self . federated_user_id = value elif name == 'PackedPolicySize' : self . packed_policy_size = int ( value ) elif name == 'RequestId' : self . request_id = value else : pass
