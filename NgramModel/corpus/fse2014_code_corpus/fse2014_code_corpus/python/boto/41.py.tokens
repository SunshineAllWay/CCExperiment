from boto . sdb . db . property import ListProperty , StringProperty , ReferenceProperty , IntegerProperty from boto . sdb . db . model import Model import time class SimpleModel ( Model ) : name = StringProperty ( ) strs = ListProperty ( str ) num = IntegerProperty ( ) class SubModel ( SimpleModel ) : ref = ReferenceProperty ( SimpleModel , collection_name = "reverse_ref" ) class TestQuerying ( object ) : def setup_class ( cls ) : cls . objs = [ ] o = SimpleModel ( ) o . name = "Simple Object" o . strs = [ "B" , "A" , "C" , "Foo" ] o . num = 1 o . put ( ) cls . objs . append ( o ) o2 = SimpleModel ( ) o2 . name = "Referenced Object" o2 . num = 2 o2 . put ( ) cls . objs . append ( o2 ) o3 = SubModel ( ) o3 . name = "Sub Object" o3 . num = 3 o3 . ref = o2 o3 . put ( ) cls . objs . append ( o3 ) time . sleep ( 3 ) def teardown_class ( cls ) : for o in cls . objs : try : o . delete ( ) except : pass def test_find ( self ) : assert ( SimpleModel . find ( name = "Simple Object" ) . next ( ) . id == self . objs [ 0 ] . id ) assert ( SimpleModel . find ( name = "Referenced Object" ) . next ( ) . id == self . objs [ 1 ] . id ) assert ( SimpleModel . find ( name = "Sub Object" ) . next ( ) . id == self . objs [ 2 ] . id ) def test_like_filter ( self ) : query = SimpleModel . all ( ) query . filter ( "name like" , "% Object" ) assert ( query . count ( ) == 3 ) query = SimpleModel . all ( ) query . filter ( "name not like" , "% Object" ) assert ( query . count ( ) == 0 ) def test_equals_filter ( self ) : query = SimpleModel . all ( ) query . filter ( "name =" , "Simple Object" ) assert ( query . count ( ) == 1 ) query = SimpleModel . all ( ) query . filter ( "name !=" , "Simple Object" ) assert ( query . count ( ) == 2 ) def test_or_filter ( self ) : query = SimpleModel . all ( ) query . filter ( "name =" , [ "Simple Object" , "Sub Object" ] ) assert ( query . count ( ) == 2 ) def test_and_filter ( self ) : query = SimpleModel . all ( ) query . filter ( "name like" , "% Object" ) query . filter ( "name like" , "Simple %" ) assert ( query . count ( ) == 1 ) def test_none_filter ( self ) : query = SimpleModel . all ( ) query . filter ( "ref =" , None ) assert ( query . count ( ) == 2 ) def test_greater_filter ( self ) : query = SimpleModel . all ( ) query . filter ( "num >" , 1 ) assert ( query . count ( ) == 2 ) query = SimpleModel . all ( ) query . filter ( "num >=" , 1 ) assert ( query . count ( ) == 3 ) def test_less_filter ( self ) : query = SimpleModel . all ( ) query . filter ( "num <" , 3 ) assert ( query . count ( ) == 2 ) query = SimpleModel . all ( ) query . filter ( "num <=" , 3 ) assert ( query . count ( ) == 3 ) def test_query_on_list ( self ) : assert ( SimpleModel . find ( strs = "A" ) . next ( ) . id == self . objs [ 0 ] . id ) assert ( SimpleModel . find ( strs = "B" ) . next ( ) . id == self . objs [ 0 ] . id ) assert ( SimpleModel . find ( strs = "C" ) . next ( ) . id == self . objs [ 0 ] . id ) def test_like ( self ) : query = SimpleModel . all ( ) query . filter ( "strs like" , "%oo%" ) print query . get_query ( ) assert ( query . count ( ) == 1 )
