import os from key import Key from boto . file . simpleresultset import SimpleResultSet from boto . s3 . bucketlistresultset import BucketListResultSet class Bucket ( object ) : def __init__ ( self , name , contained_key ) : self . name = name self . contained_key = contained_key def __iter__ ( self ) : return iter ( BucketListResultSet ( self ) ) def __str__ ( self ) : return 'anonymous bucket for file://' + self . contained_key def delete_key ( self , key_name , headers = None , version_id = None , mfa_token = None ) : os . remove ( key_name ) def get_all_keys ( self , headers = None , ** params ) : key = Key ( self . name , self . contained_key ) return SimpleResultSet ( [ key ] ) def get_key ( self , key_name , headers = None , version_id = None , key_type = Key . KEY_REGULAR_FILE ) : if key_name == '-' : return Key ( self . name , '-' , key_type = Key . KEY_STREAM_READABLE ) else : fp = open ( key_name , 'rb' ) return Key ( self . name , key_name , fp ) def new_key ( self , key_name = None , key_type = Key . KEY_REGULAR_FILE ) : if key_name == '-' : return Key ( self . name , '-' , key_type = Key . KEY_STREAM_WRITABLE ) else : dir_name = os . path . dirname ( key_name ) if dir_name and not os . path . exists ( dir_name ) : os . makedirs ( dir_name ) fp = open ( key_name , 'wb' ) return Key ( self . name , key_name , fp )
