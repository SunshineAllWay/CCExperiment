from boto . resultset import ResultSet class EmrObject ( object ) : Fields = set ( ) def __init__ ( self , connection = None ) : self . connection = connection def startElement ( self , name , attrs , connection ) : pass def endElement ( self , name , value , connection ) : if name in self . Fields : setattr ( self , name . lower ( ) , value ) class RunJobFlowResponse ( EmrObject ) : Fields = set ( [ 'JobFlowId' ] ) class AddInstanceGroupsResponse ( EmrObject ) : Fields = set ( [ 'InstanceGroupIds' , 'JobFlowId' ] ) class ModifyInstanceGroupsResponse ( EmrObject ) : Fields = set ( [ 'RequestId' ] ) class Arg ( EmrObject ) : def __init__ ( self , connection = None ) : self . value = None def endElement ( self , name , value , connection ) : self . value = value class BootstrapAction ( EmrObject ) : Fields = set ( [ , , , ] ) def startElement ( self , name , attrs , connection ) : if name == 'Args' : self . args = ResultSet ( [ ( 'member' , Arg ) ] ) return self . args class KeyValue ( EmrObject ) : Fields = set ( [ , , ] ) class Step ( EmrObject ) : Fields = set ( [ , , , , , , , , , ] ) def __init__ ( self , connection = None ) : self . connection = connection self . args = None def startElement ( self , name , attrs , connection ) : if name == 'Args' : self . args = ResultSet ( [ ( 'member' , Arg ) ] ) return self . args if name == 'Properties' : self . properties = ResultSet ( [ ( 'member' , KeyValue ) ] ) return self . properties class InstanceGroup ( EmrObject ) : Fields = set ( [ , , , , , , , , , , , , , , , ] ) class JobFlow ( EmrObject ) : Fields = set ( [ , , , , , , , , , , , , , , , , , , , , , , , , , ] ) def __init__ ( self , connection = None ) : self . connection = connection self . steps = None self . instancegroups = None self . bootstrapactions = None def startElement ( self , name , attrs , connection ) : if name == 'Steps' : self . steps = ResultSet ( [ ( 'member' , Step ) ] ) return self . steps elif name == 'InstanceGroups' : self . instancegroups = ResultSet ( [ ( 'member' , InstanceGroup ) ] ) return self . instancegroups elif name == 'BootstrapActions' : self . bootstrapactions = ResultSet ( [ ( 'member' , BootstrapAction ) ] ) return self . bootstrapactions else : return None
