from boto . connection import AWSQueryConnection from boto . regioninfo import RegionInfo from credentials import Credentials , FederationToken import boto import boto . utils import datetime import threading _session_token_cache = { } class STSConnection ( AWSQueryConnection ) : DefaultRegionName = 'us-east-1' DefaultRegionEndpoint = 'sts.amazonaws.com' APIVersion = '2011-06-15' def __init__ ( self , aws_access_key_id = None , aws_secret_access_key = None , is_secure = True , port = None , proxy = None , proxy_port = None , proxy_user = None , proxy_pass = None , debug = 0 , https_connection_factory = None , region = None , path = '/' , converter = None ) : if not region : region = RegionInfo ( self , self . DefaultRegionName , self . DefaultRegionEndpoint , connection_cls = STSConnection ) self . region = region self . _mutex = threading . Semaphore ( ) AWSQueryConnection . __init__ ( self , aws_access_key_id , aws_secret_access_key , is_secure , port , proxy , proxy_port , proxy_user , proxy_pass , self . region . endpoint , debug , https_connection_factory , path ) def _required_auth_capability ( self ) : return [ 'sign-v2' ] def _check_token_cache ( self , token_key , duration = None , window_seconds = 60 ) : token = _session_token_cache . get ( token_key , None ) if token : now = datetime . datetime . utcnow ( ) expires = boto . utils . parse_ts ( token . expiration ) delta = expires - now if delta < datetime . timedelta ( seconds = window_seconds ) : msg = 'Cached session token %s is expired' % token_key boto . log . debug ( msg ) token = None return token def _get_session_token ( self , duration = None ) : params = { } if duration : params [ 'DurationSeconds' ] = duration return self . get_object ( 'GetSessionToken' , params , Credentials , verb = 'POST' ) def get_session_token ( self , duration = None , force_new = False ) : token_key = '%s:%s' % ( self . region . name , self . provider . access_key ) token = self . _check_token_cache ( token_key , duration ) if force_new or not token : boto . log . debug ( 'fetching a new token for %s' % token_key ) self . _mutex . acquire ( ) token = self . _get_session_token ( duration ) _session_token_cache [ token_key ] = token self . _mutex . release ( ) return token def get_federation_token ( self , name , duration = None , policy = None ) : params = { 'Name' : name } if duration : params [ 'DurationSeconds' ] = duration if policy : params [ 'Policy' ] = policy return self . get_object ( 'GetFederationToken' , params , FederationToken , verb = 'POST' )
