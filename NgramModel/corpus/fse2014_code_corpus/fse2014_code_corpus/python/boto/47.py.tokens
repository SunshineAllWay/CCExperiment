import base64 import xml . sax from boto import handler from boto . resultset import ResultSet class BotoClientError ( StandardError ) : def __init__ ( self , reason , * args ) : StandardError . __init__ ( self , reason , * args ) self . reason = reason def __repr__ ( self ) : return 'BotoClientError: %s' % self . reason def __str__ ( self ) : return 'BotoClientError: %s' % self . reason class SDBPersistenceError ( StandardError ) : pass class StoragePermissionsError ( BotoClientError ) : pass class S3PermissionsError ( StoragePermissionsError ) : pass class GSPermissionsError ( StoragePermissionsError ) : pass class BotoServerError ( StandardError ) : def __init__ ( self , status , reason , body = None , * args ) : StandardError . __init__ ( self , status , reason , body , * args ) self . status = status self . reason = reason self . body = body or '' self . request_id = None self . error_code = None self . error_message = None self . box_usage = None if self . body : try : h = handler . XmlHandler ( self , self ) xml . sax . parseString ( self . body , h ) except ( TypeError , xml . sax . SAXParseException ) , pe : self . error_message = self . body self . body = None def __getattr__ ( self , name ) : if name == 'message' : return self . error_message if name == 'code' : return self . error_code raise AttributeError def __repr__ ( self ) : return '%s: %s %s\n%s' % ( self . __class__ . __name__ , self . status , self . reason , self . body ) def __str__ ( self ) : return '%s: %s %s\n%s' % ( self . __class__ . __name__ , self . status , self . reason , self . body ) def startElement ( self , name , attrs , connection ) : pass def endElement ( self , name , value , connection ) : if name in ( 'RequestId' , 'RequestID' ) : self . request_id = value elif name == 'Code' : self . error_code = value elif name == 'Message' : self . error_message = value elif name == 'BoxUsage' : self . box_usage = value return None def _cleanupParsedProperties ( self ) : self . request_id = None self . error_code = None self . error_message = None self . box_usage = None class ConsoleOutput : def __init__ ( self , parent = None ) : self . parent = parent self . instance_id = None self . timestamp = None self . comment = None self . output = None def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'instanceId' : self . instance_id = value elif name == 'output' : self . output = base64 . b64decode ( value ) else : setattr ( self , name , value ) class StorageCreateError ( BotoServerError ) : def __init__ ( self , status , reason , body = None ) : self . bucket = None BotoServerError . __init__ ( self , status , reason , body ) def endElement ( self , name , value , connection ) : if name == 'BucketName' : self . bucket = value else : return BotoServerError . endElement ( self , name , value , connection ) class S3CreateError ( StorageCreateError ) : pass class GSCreateError ( StorageCreateError ) : pass class StorageCopyError ( BotoServerError ) : pass class S3CopyError ( StorageCopyError ) : pass class GSCopyError ( StorageCopyError ) : pass class SQSError ( BotoServerError ) : def __init__ ( self , status , reason , body = None ) : self . detail = None self . type = None BotoServerError . __init__ ( self , status , reason , body ) def startElement ( self , name , attrs , connection ) : return BotoServerError . startElement ( self , name , attrs , connection ) def endElement ( self , name , value , connection ) : if name == 'Detail' : self . detail = value elif name == 'Type' : self . type = value else : return BotoServerError . endElement ( self , name , value , connection ) def _cleanupParsedProperties ( self ) : BotoServerError . _cleanupParsedProperties ( self ) for p in ( 'detail' , 'type' ) : setattr ( self , p , None ) class SQSDecodeError ( BotoClientError ) : def __init__ ( self , reason , message ) : BotoClientError . __init__ ( self , reason , message ) self . message = message def __repr__ ( self ) : return 'SQSDecodeError: %s' % self . reason def __str__ ( self ) : return 'SQSDecodeError: %s' % self . reason class StorageResponseError ( BotoServerError ) : def __init__ ( self , status , reason , body = None ) : self . resource = None BotoServerError . __init__ ( self , status , reason , body ) def startElement ( self , name , attrs , connection ) : return BotoServerError . startElement ( self , name , attrs , connection ) def endElement ( self , name , value , connection ) : if name == 'Resource' : self . resource = value else : return BotoServerError . endElement ( self , name , value , connection ) def _cleanupParsedProperties ( self ) : BotoServerError . _cleanupParsedProperties ( self ) for p in ( 'resource' ) : setattr ( self , p , None ) class S3ResponseError ( StorageResponseError ) : pass class GSResponseError ( StorageResponseError ) : pass class EC2ResponseError ( BotoServerError ) : def __init__ ( self , status , reason , body = None ) : self . errors = None self . _errorResultSet = [ ] BotoServerError . __init__ ( self , status , reason , body ) self . errors = [ ( e . error_code , e . error_message ) for e in self . _errorResultSet ] if len ( self . errors ) : self . error_code , self . error_message = self . errors [ 0 ] def startElement ( self , name , attrs , connection ) : if name == 'Errors' : self . _errorResultSet = ResultSet ( [ ( 'Error' , _EC2Error ) ] ) return self . _errorResultSet else : return None def endElement ( self , name , value , connection ) : if name == 'RequestID' : self . request_id = value else : return None def _cleanupParsedProperties ( self ) : BotoServerError . _cleanupParsedProperties ( self ) self . _errorResultSet = [ ] for p in ( 'errors' ) : setattr ( self , p , None ) class DynamoDBResponseError ( BotoServerError ) : def __init__ ( self , status , reason , data ) : BotoServerError . __init__ ( self , status , reason ) self . data = data self . body = '%s' % self . data class EmrResponseError ( BotoServerError ) : pass class _EC2Error : def __init__ ( self , connection = None ) : self . connection = connection self . error_code = None self . error_message = None def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'Code' : self . error_code = value elif name == 'Message' : self . error_message = value else : return None class SDBResponseError ( BotoServerError ) : pass class AWSConnectionError ( BotoClientError ) : pass class StorageDataError ( BotoClientError ) : pass class S3DataError ( StorageDataError ) : pass class GSDataError ( StorageDataError ) : pass class FPSResponseError ( BotoServerError ) : pass class InvalidUriError ( Exception ) : def __init__ ( self , message ) : Exception . __init__ ( self , message ) self . message = message class InvalidAclError ( Exception ) : def __init__ ( self , message ) : Exception . __init__ ( self , message ) self . message = message class NoAuthHandlerFound ( Exception ) : pass class TooManyAuthHandlerReadyToAuthenticate ( Exception ) : pass class ResumableTransferDisposition ( object ) : START_OVER = 'START_OVER' WAIT_BEFORE_RETRY = 'WAIT_BEFORE_RETRY' ABORT_CUR_PROCESS = 'ABORT_CUR_PROCESS' ABORT = 'ABORT' class ResumableUploadException ( Exception ) : def __init__ ( self , message , disposition ) : Exception . __init__ ( self , message , disposition ) self . message = message self . disposition = disposition def __repr__ ( self ) : return 'ResumableUploadException("%s", %s)' % ( self . message , self . disposition ) class ResumableDownloadException ( Exception ) : def __init__ ( self , message , disposition ) : Exception . __init__ ( self , message , disposition ) self . message = message self . disposition = disposition def __repr__ ( self ) : return 'ResumableDownloadException("%s", %s)' % ( self . message , self . disposition )
