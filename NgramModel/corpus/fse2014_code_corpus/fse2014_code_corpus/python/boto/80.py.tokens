import os , shutil , StringIO import sys class Key ( object ) : KEY_STREAM_READABLE = 0x01 KEY_STREAM_WRITABLE = 0x02 KEY_STREAM = ( KEY_STREAM_READABLE | KEY_STREAM_WRITABLE ) KEY_REGULAR_FILE = 0x00 def __init__ ( self , bucket , name , fp = None , key_type = KEY_REGULAR_FILE ) : self . bucket = bucket self . full_path = name if name == '-' : self . name = None else : self . name = name self . key_type = key_type if key_type == self . KEY_STREAM_READABLE : self . fp = sys . stdin self . full_path = '<STDIN>' elif key_type == self . KEY_STREAM_WRITABLE : self . fp = sys . stdout self . full_path = '<STDOUT>' else : self . fp = fp def __str__ ( self ) : return 'file://' + self . full_path def get_file ( self , fp , headers = None , cb = None , num_cb = 10 , torrent = False ) : if self . key_type & self . KEY_STREAM_READABLE : raise BotoClientError ( 'Stream is not Readable' ) elif self . key_type & self . KEY_STREAM_WRITABLE : key_file = self . fp else : key_file = open ( self . full_path , 'rb' ) try : shutil . copyfileobj ( key_file , fp ) finally : key_file . close ( ) def set_contents_from_file ( self , fp , headers = None , replace = True , cb = None , num_cb = 10 , policy = None , md5 = None ) : if self . key_type & self . KEY_STREAM_WRITABLE : raise BotoClientError ( 'Stream is not writable' ) elif self . key_type & self . KEY_STREAM_READABLE : key_file = self . fp else : if not replace and os . path . exists ( self . full_path ) : return key_file = open ( self . full_path , 'wb' ) try : shutil . copyfileobj ( fp , key_file ) finally : key_file . close ( ) def get_contents_as_string ( self , headers = None , cb = None , num_cb = 10 , torrent = False ) : fp = StringIO . StringIO ( ) self . get_contents_to_file ( fp ) return fp . getvalue ( ) def is_stream ( self ) : return ( self . key_type & self . KEY_STREAM ) def close ( self ) : self . fp . close ( )
