from boto . ec2 . ec2object import TaggedEC2Object from boto . resultset import ResultSet class RouteTable ( TaggedEC2Object ) : def __init__ ( self , connection = None ) : TaggedEC2Object . __init__ ( self , connection ) self . id = None self . vpc_id = None self . routes = [ ] self . associations = [ ] def __repr__ ( self ) : return 'RouteTable:%s' % self . id def startElement ( self , name , attrs , connection ) : result = super ( RouteTable , self ) . startElement ( name , attrs , connection ) if result is not None : return result if name == 'routeSet' : self . routes = ResultSet ( [ ( 'item' , Route ) ] ) return self . routes elif name == 'associationSet' : self . associations = ResultSet ( [ ( 'item' , RouteAssociation ) ] ) return self . associations else : return None def endElement ( self , name , value , connection ) : if name == 'routeTableId' : self . id = value elif name == 'vpcId' : self . vpc_id = value else : setattr ( self , name , value ) class Route ( object ) : def __init__ ( self , connection = None ) : self . destination_cidr_block = None self . gateway_id = None self . instance_id = None self . state = None def __repr__ ( self ) : return 'Route:%s' % self . destination_cidr_block def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'destinationCidrBlock' : self . destination_cidr_block = value elif name == 'gatewayId' : self . gateway_id = value elif name == 'instanceId' : self . instance_id = value elif name == 'state' : self . state = value class RouteAssociation ( object ) : def __init__ ( self , connection = None ) : self . id = None self . route_table_id = None self . subnet_id = None self . main = False def __repr__ ( self ) : return 'RouteAssociation:%s' % self . id def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'routeTableAssociationId' : self . id = value elif name == 'routeTableId' : self . route_table_id = value elif name == 'subnetId' : self . subnet_id = value elif name == 'main' : self . main = value == 'true'
