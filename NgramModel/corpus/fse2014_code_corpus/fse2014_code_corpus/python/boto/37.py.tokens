import unittest import time from boto . sqs . connection import SQSConnection from boto . sqs . message import MHMessage from boto . exception import SQSError class SQSConnectionTest ( unittest . TestCase ) : def test_1_basic ( self ) : print '--- running SQSConnection tests ---' c = SQSConnection ( ) rs = c . get_all_queues ( ) num_queues = 0 for q in rs : num_queues += 1 try : queue = c . create_queue ( 'bad*queue*name' ) self . fail ( 'queue name should have been bad' ) except SQSError : pass queue_name = 'test%d' % int ( time . time ( ) ) timeout = 60 queue = c . create_queue ( queue_name , timeout ) time . sleep ( 60 ) rs = c . get_all_queues ( ) i = 0 for q in rs : i += 1 assert i == num_queues + 1 assert queue . count_slow ( ) == 0 t = queue . get_timeout ( ) assert t == timeout , '%d != %d' % ( t , timeout ) a = q . get_attributes ( ) assert a . has_key ( 'ApproximateNumberOfMessages' ) assert a . has_key ( 'VisibilityTimeout' ) a = q . get_attributes ( 'ApproximateNumberOfMessages' ) assert a . has_key ( 'ApproximateNumberOfMessages' ) assert not a . has_key ( 'VisibilityTimeout' ) a = q . get_attributes ( 'VisibilityTimeout' ) assert not a . has_key ( 'ApproximateNumberOfMessages' ) assert a . has_key ( 'VisibilityTimeout' ) timeout = 45 queue . set_timeout ( timeout ) time . sleep ( 60 ) t = queue . get_timeout ( ) assert t == timeout , '%d != %d' % ( t , timeout ) message_body = 'This is a test\n' message = queue . new_message ( message_body ) queue . write ( message ) time . sleep ( 60 ) assert queue . count_slow ( ) == 1 time . sleep ( 90 ) message = queue . read ( visibility_timeout = 10 ) assert message assert message . get_body ( ) == message_body message = queue . read ( ) assert message == None time . sleep ( 30 ) message = queue . read ( ) assert message queue . delete_message ( message ) time . sleep ( 30 ) assert queue . count_slow ( ) == 0 queue_name = 'test%d' % int ( time . time ( ) ) timeout = 60 queue = c . create_queue ( queue_name , timeout ) queue . set_message_class ( MHMessage ) time . sleep ( 30 ) message = queue . new_message ( ) message [ 'foo' ] = 'bar' queue . write ( message ) message_body = { 'fie' : 'baz' , 'foo' : 'bar' } message = queue . new_message ( body = message_body ) queue . write ( message ) time . sleep ( 30 ) m = queue . read ( ) assert m [ 'foo' ] == 'bar' c . delete_queue ( queue , True ) print '--- tests completed ---'
