import xml . sax import cgi from StringIO import StringIO class ResponseGroup ( xml . sax . ContentHandler ) : def __init__ ( self , connection = None , nodename = None ) : self . _connection = connection self . _nodename = nodename self . _nodepath = [ ] self . _curobj = None self . _xml = StringIO ( ) def __repr__ ( self ) : return '<%s: %s>' % ( self . __class__ . __name__ , self . __dict__ ) def get ( self , name ) : return self . __dict__ . get ( name ) def set ( self , name , value ) : self . __dict__ [ name ] = value def to_xml ( self ) : return "<%s>%s</%s>" % ( self . _nodename , self . _xml . getvalue ( ) , self . _nodename ) def startElement ( self , name , attrs , connection ) : self . _xml . write ( "<%s>" % name ) self . _nodepath . append ( name ) if len ( self . _nodepath ) == 1 : obj = ResponseGroup ( self . _connection ) self . set ( name , obj ) self . _curobj = obj elif self . _curobj : self . _curobj . startElement ( name , attrs , connection ) return None def endElement ( self , name , value , connection ) : self . _xml . write ( "%s</%s>" % ( cgi . escape ( value ) . replace ( "&amp;amp;" , "&amp;" ) , name ) ) if len ( self . _nodepath ) == 0 : return obj = None curval = self . get ( name ) if len ( self . _nodepath ) == 1 : if value or not curval : self . set ( name , value ) if self . _curobj : self . _curobj = None elif self . _curobj : self . _curobj . endElement ( name , value , connection ) self . _nodepath . pop ( ) return None class Item ( ResponseGroup ) : def __init__ ( self , connection = None ) : ResponseGroup . __init__ ( self , connection , "Item" ) class ItemSet ( ResponseGroup ) : def __init__ ( self , connection , action , params , page = 0 ) : ResponseGroup . __init__ ( self , connection , "Items" ) self . objs = [ ] self . iter = None self . page = page self . action = action self . params = params self . curItem = None self . total_results = 0 self . total_pages = 0 def startElement ( self , name , attrs , connection ) : if name == "Item" : self . curItem = Item ( self . _connection ) elif self . curItem != None : self . curItem . startElement ( name , attrs , connection ) return None def endElement ( self , name , value , connection ) : if name == 'TotalResults' : self . total_results = value elif name == 'TotalPages' : self . total_pages = value elif name == "Item" : self . objs . append ( self . curItem ) self . _xml . write ( self . curItem . to_xml ( ) ) self . curItem = None elif self . curItem != None : self . curItem . endElement ( name , value , connection ) return None def next ( self ) : if self . iter == None : self . iter = iter ( self . objs ) try : return self . iter . next ( ) except StopIteration : self . iter = None self . objs = [ ] if int ( self . page ) < int ( self . total_pages ) : self . page += 1 self . _connection . get_response ( self . action , self . params , self . page , self ) return self . next ( ) else : raise def __iter__ ( self ) : return self def to_xml ( self ) : for item in self : pass return ResponseGroup . to_xml ( self )
