from boto . ec2 . elb . listelement import ListElement from boto . resultset import ResultSet from boto . ec2 . autoscale . launchconfig import LaunchConfiguration from boto . ec2 . autoscale . request import Request from boto . ec2 . autoscale . instance import Instance from boto . ec2 . autoscale . tag import Tag class ProcessType ( object ) : def __init__ ( self , connection = None ) : self . connection = connection self . process_name = None def __repr__ ( self ) : return 'ProcessType(%s)' % self . process_name def startElement ( self , name , attrs , connection ) : pass def endElement ( self , name , value , connection ) : if name == 'ProcessName' : self . process_name = value class SuspendedProcess ( object ) : def __init__ ( self , connection = None ) : self . connection = connection self . process_name = None self . reason = None def __repr__ ( self ) : return 'SuspendedProcess(%s, %s)' % ( self . process_name , self . reason ) def startElement ( self , name , attrs , connection ) : pass def endElement ( self , name , value , connection ) : if name == 'ProcessName' : self . process_name = value elif name == 'SuspensionReason' : self . reason = value class EnabledMetric ( object ) : def __init__ ( self , connection = None , metric = None , granularity = None ) : self . connection = connection self . metric = metric self . granularity = granularity def __repr__ ( self ) : return 'EnabledMetric(%s, %s)' % ( self . metric , self . granularity ) def startElement ( self , name , attrs , connection ) : pass def endElement ( self , name , value , connection ) : if name == 'Granularity' : self . granularity = value elif name == 'Metric' : self . metric = value class AutoScalingGroup ( object ) : def __init__ ( self , connection = None , name = None , launch_config = None , availability_zones = None , load_balancers = None , default_cooldown = None , health_check_type = None , health_check_period = None , placement_group = None , vpc_zone_identifier = None , desired_capacity = None , min_size = None , max_size = None , ** kwargs ) : self . name = name or kwargs . get ( 'group_name' ) self . connection = connection self . min_size = int ( min_size ) if min_size is not None else None self . max_size = int ( max_size ) if max_size is not None else None self . created_time = None default_cooldown = default_cooldown or kwargs . get ( 'cooldown' ) if default_cooldown is not None : default_cooldown = int ( default_cooldown ) self . default_cooldown = default_cooldown self . launch_config_name = launch_config if launch_config and isinstance ( launch_config , LaunchConfiguration ) : self . launch_config_name = launch_config . name self . desired_capacity = desired_capacity lbs = load_balancers or [ ] self . load_balancers = ListElement ( lbs ) zones = availability_zones or [ ] self . availability_zones = ListElement ( zones ) self . health_check_period = health_check_period self . health_check_type = health_check_type self . placement_group = placement_group self . autoscaling_group_arn = None self . vpc_zone_identifier = vpc_zone_identifier self . instances = None self . tags = None def _get_cooldown ( self ) : return self . default_cooldown def _set_cooldown ( self , val ) : self . default_cooldown = val cooldown = property ( _get_cooldown , _set_cooldown ) def __repr__ ( self ) : return 'AutoScaleGroup<%s>' % self . name def startElement ( self , name , attrs , connection ) : if name == 'Instances' : self . instances = ResultSet ( [ ( 'member' , Instance ) ] ) return self . instances elif name == 'LoadBalancerNames' : return self . load_balancers elif name == 'AvailabilityZones' : return self . availability_zones elif name == 'EnabledMetrics' : self . enabled_metrics = ResultSet ( [ ( 'member' , EnabledMetric ) ] ) return self . enabled_metrics elif name == 'SuspendedProcesses' : self . suspended_processes = ResultSet ( [ ( 'member' , SuspendedProcess ) ] ) return self . suspended_processes elif name == 'Tags' : self . tags = ResultSet ( [ ( 'member' , Tag ) ] ) return self . tags else : return def endElement ( self , name , value , connection ) : if name == 'MinSize' : self . min_size = int ( value ) elif name == 'AutoScalingGroupARN' : self . autoscaling_group_arn = value elif name == 'CreatedTime' : self . created_time = value elif name == 'DefaultCooldown' : self . default_cooldown = int ( value ) elif name == 'LaunchConfigurationName' : self . launch_config_name = value elif name == 'DesiredCapacity' : self . desired_capacity = int ( value ) elif name == 'MaxSize' : self . max_size = int ( value ) elif name == 'AutoScalingGroupName' : self . name = value elif name == 'PlacementGroup' : self . placement_group = value elif name == 'HealthCheckGracePeriod' : try : self . health_check_period = int ( value ) except ValueError : self . health_check_period = None elif name == 'HealthCheckType' : self . health_check_type = value elif name == 'VPCZoneIdentifier' : self . vpc_zone_identifier = value else : setattr ( self , name , value ) def set_capacity ( self , capacity ) : params = { 'AutoScalingGroupName' : self . name , : capacity } req = self . connection . get_object ( 'SetDesiredCapacity' , params , Request ) self . connection . last_request = req return req def update ( self ) : return self . connection . _update_group ( 'UpdateAutoScalingGroup' , self ) def shutdown_instances ( self ) : self . min_size = 0 self . max_size = 0 self . desired_capacity = 0 self . update ( ) def delete ( self , force_delete = False ) : return self . connection . delete_auto_scaling_group ( self . name , force_delete ) def get_activities ( self , activity_ids = None , max_records = 50 ) : return self . connection . get_all_activities ( self , activity_ids , max_records ) def suspend_processes ( self , scaling_processes = None ) : return self . connection . suspend_processes ( self . name , scaling_processes ) def resume_processes ( self , scaling_processes = None ) : return self . connection . resume_processes ( self . name , scaling_processes ) class AutoScalingGroupMetric ( object ) : def __init__ ( self , connection = None ) : self . connection = connection self . metric = None self . granularity = None def __repr__ ( self ) : return 'AutoScalingGroupMetric:%s' % self . metric def startElement ( self , name , attrs , connection ) : return def endElement ( self , name , value , connection ) : if name == 'Metric' : self . metric = value elif name == 'Granularity' : self . granularity = value else : setattr ( self , name , value )
