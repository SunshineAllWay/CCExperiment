from identity import OriginAccessIdentity def get_oai_value ( origin_access_identity ) : if isinstance ( origin_access_identity , OriginAccessIdentity ) : return origin_access_identity . uri ( ) else : return origin_access_identity class S3Origin ( object ) : def __init__ ( self , dns_name = None , origin_access_identity = None ) : self . dns_name = dns_name self . origin_access_identity = origin_access_identity def __repr__ ( self ) : return '<S3Origin: %s>' % self . dns_name def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'DNSName' : self . dns_name = value elif name == 'OriginAccessIdentity' : self . origin_access_identity = value else : setattr ( self , name , value ) def to_xml ( self ) : s = ' <S3Origin>\n' s += ' <DNSName>%s</DNSName>\n' % self . dns_name if self . origin_access_identity : val = get_oai_value ( self . origin_access_identity ) s += ' <OriginAccessIdentity>%s</OriginAccessIdentity>\n' % val s += ' </S3Origin>\n' return s class CustomOrigin ( object ) : def __init__ ( self , dns_name = None , http_port = 80 , https_port = 443 , origin_protocol_policy = None ) : self . dns_name = dns_name self . http_port = http_port self . https_port = https_port self . origin_protocol_policy = origin_protocol_policy def __repr__ ( self ) : return '<CustomOrigin: %s>' % self . dns_name def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'DNSName' : self . dns_name = value elif name == 'HTTPPort' : try : self . http_port = int ( value ) except ValueError : self . http_port = value elif name == 'HTTPSPort' : try : self . https_port = int ( value ) except ValueError : self . https_port = value elif name == 'OriginProtocolPolicy' : self . origin_protocol_policy = value else : setattr ( self , name , value ) def to_xml ( self ) : s = ' <CustomOrigin>\n' s += ' <DNSName>%s</DNSName>\n' % self . dns_name s += ' <HTTPPort>%d</HTTPPort>\n' % self . http_port s += ' <HTTPSPort>%d</HTTPSPort>\n' % self . https_port s += ' <OriginProtocolPolicy>%s</OriginProtocolPolicy>\n' % self . origin_protocol_policy s += ' </CustomOrigin>\n' return s
