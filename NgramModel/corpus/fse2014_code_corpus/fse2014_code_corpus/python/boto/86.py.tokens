import boto . utils import urllib from boto . connection import AWSQueryConnection from boto . rds . dbinstance import DBInstance from boto . rds . dbsecuritygroup import DBSecurityGroup from boto . rds . parametergroup import ParameterGroup from boto . rds . dbsnapshot import DBSnapshot from boto . rds . event import Event from boto . rds . regioninfo import RDSRegionInfo def regions ( ) : return [ RDSRegionInfo ( name = 'us-east-1' , endpoint = 'rds.us-east-1.amazonaws.com' ) , RDSRegionInfo ( name = 'eu-west-1' , endpoint = 'rds.eu-west-1.amazonaws.com' ) , RDSRegionInfo ( name = 'us-west-1' , endpoint = 'rds.us-west-1.amazonaws.com' ) , RDSRegionInfo ( name = 'us-west-2' , endpoint = 'rds.us-west-2.amazonaws.com' ) , RDSRegionInfo ( name = 'sa-east-1' , endpoint = 'rds.sa-east-1.amazonaws.com' ) , RDSRegionInfo ( name = 'ap-northeast-1' , endpoint = 'rds.ap-northeast-1.amazonaws.com' ) , RDSRegionInfo ( name = 'ap-southeast-1' , endpoint = 'rds.ap-southeast-1.amazonaws.com' ) ] def connect_to_region ( region_name , ** kw_params ) : for region in regions ( ) : if region . name == region_name : return region . connect ( ** kw_params ) return None class RDSConnection ( AWSQueryConnection ) : DefaultRegionName = 'us-east-1' DefaultRegionEndpoint = 'rds.us-east-1.amazonaws.com' APIVersion = '2011-04-01' def __init__ ( self , aws_access_key_id = None , aws_secret_access_key = None , is_secure = True , port = None , proxy = None , proxy_port = None , proxy_user = None , proxy_pass = None , debug = 0 , https_connection_factory = None , region = None , path = '/' ) : if not region : region = RDSRegionInfo ( self , self . DefaultRegionName , self . DefaultRegionEndpoint ) self . region = region AWSQueryConnection . __init__ ( self , aws_access_key_id , aws_secret_access_key , is_secure , port , proxy , proxy_port , proxy_user , proxy_pass , self . region . endpoint , debug , https_connection_factory , path ) def _required_auth_capability ( self ) : return [ 'rds' ] def get_all_dbinstances ( self , instance_id = None , max_records = None , marker = None ) : params = { } if instance_id : params [ 'DBInstanceIdentifier' ] = instance_id if max_records : params [ 'MaxRecords' ] = max_records if marker : params [ 'Marker' ] = marker return self . get_list ( 'DescribeDBInstances' , params , [ ( 'DBInstance' , DBInstance ) ] ) def create_dbinstance ( self , id , allocated_storage , instance_class , master_username , master_password , port = 3306 , engine = 'MySQL5.1' , db_name = None , param_group = None , security_groups = None , availability_zone = None , preferred_maintenance_window = None , backup_retention_period = None , preferred_backup_window = None , multi_az = False , engine_version = None , auto_minor_version_upgrade = True ) : params = { 'DBInstanceIdentifier' : id , : allocated_storage , : instance_class , : engine , : master_username , : master_password , : port , : str ( multi_az ) . lower ( ) , : str ( auto_minor_version_upgrade ) . lower ( ) } if db_name : params [ 'DBName' ] = db_name if param_group : params [ 'DBParameterGroupName' ] = param_group if security_groups : l = [ ] for group in security_groups : if isinstance ( group , DBSecurityGroup ) : l . append ( group . name ) else : l . append ( group ) self . build_list_params ( params , l , 'DBSecurityGroups.member' ) if availability_zone : params [ 'AvailabilityZone' ] = availability_zone if preferred_maintenance_window : params [ 'PreferredMaintenanceWindow' ] = preferred_maintenance_window if backup_retention_period is not None : params [ 'BackupRetentionPeriod' ] = backup_retention_period if preferred_backup_window : params [ 'PreferredBackupWindow' ] = preferred_backup_window if engine_version : params [ 'EngineVersion' ] = engine_version return self . get_object ( 'CreateDBInstance' , params , DBInstance ) def create_dbinstance_read_replica ( self , id , source_id , instance_class = None , port = 3306 , availability_zone = None , auto_minor_version_upgrade = None ) : params = { 'DBInstanceIdentifier' : id , : source_id } if instance_class : params [ 'DBInstanceClass' ] = instance_class if port : params [ 'Port' ] = port if availability_zone : params [ 'AvailabilityZone' ] = availability_zone if auto_minor_version_upgrade is not None : if auto_minor_version_upgrade is True : params [ 'AutoMinorVersionUpgrade' ] = 'true' else : params [ 'AutoMinorVersionUpgrade' ] = 'false' return self . get_object ( 'CreateDBInstanceReadReplica' , params , DBInstance ) def modify_dbinstance ( self , id , param_group = None , security_groups = None , preferred_maintenance_window = None , master_password = None , allocated_storage = None , instance_class = None , backup_retention_period = None , preferred_backup_window = None , multi_az = False , apply_immediately = False ) : params = { 'DBInstanceIdentifier' : id } if param_group : params [ 'DBParameterGroupName' ] = param_group if security_groups : l = [ ] for group in security_groups : if isinstance ( group , DBSecurityGroup ) : l . append ( group . name ) else : l . append ( group ) self . build_list_params ( params , l , 'DBSecurityGroups.member' ) if preferred_maintenance_window : params [ 'PreferredMaintenanceWindow' ] = preferred_maintenance_window if master_password : params [ 'MasterUserPassword' ] = master_password if allocated_storage : params [ 'AllocatedStorage' ] = allocated_storage if instance_class : params [ 'DBInstanceClass' ] = instance_class if backup_retention_period is not None : params [ 'BackupRetentionPeriod' ] = backup_retention_period if preferred_backup_window : params [ 'PreferredBackupWindow' ] = preferred_backup_window if multi_az : params [ 'MultiAZ' ] = 'true' if apply_immediately : params [ 'ApplyImmediately' ] = 'true' return self . get_object ( 'ModifyDBInstance' , params , DBInstance ) def delete_dbinstance ( self , id , skip_final_snapshot = False , final_snapshot_id = '' ) : params = { 'DBInstanceIdentifier' : id } if skip_final_snapshot : params [ 'SkipFinalSnapshot' ] = 'true' else : params [ 'SkipFinalSnapshot' ] = 'false' params [ 'FinalDBSnapshotIdentifier' ] = final_snapshot_id return self . get_object ( 'DeleteDBInstance' , params , DBInstance ) def reboot_dbinstance ( self , id ) : params = { 'DBInstanceIdentifier' : id } return self . get_object ( 'RebootDBInstance' , params , DBInstance ) def get_all_dbparameter_groups ( self , groupname = None , max_records = None , marker = None ) : params = { } if groupname : params [ 'DBParameterGroupName' ] = groupname if max_records : params [ 'MaxRecords' ] = max_records if marker : params [ 'Marker' ] = marker return self . get_list ( 'DescribeDBParameterGroups' , params , [ ( 'DBParameterGroup' , ParameterGroup ) ] ) def get_all_dbparameters ( self , groupname , source = None , max_records = None , marker = None ) : params = { 'DBParameterGroupName' : groupname } if source : params [ 'Source' ] = source if max_records : params [ 'MaxRecords' ] = max_records if marker : params [ 'Marker' ] = marker pg = self . get_object ( 'DescribeDBParameters' , params , ParameterGroup ) pg . name = groupname return pg def create_parameter_group ( self , name , engine = 'MySQL5.1' , description = '' ) : params = { 'DBParameterGroupName' : name , : engine , : description } return self . get_object ( 'CreateDBParameterGroup' , params , ParameterGroup ) def modify_parameter_group ( self , name , parameters = None ) : params = { 'DBParameterGroupName' : name } for i in range ( 0 , len ( parameters ) ) : parameter = parameters [ i ] parameter . merge ( params , i + 1 ) return self . get_list ( 'ModifyDBParameterGroup' , params , ParameterGroup , verb = 'POST' ) def reset_parameter_group ( self , name , reset_all_params = False , parameters = None ) : params = { 'DBParameterGroupName' : name } if reset_all_params : params [ 'ResetAllParameters' ] = 'true' else : params [ 'ResetAllParameters' ] = 'false' for i in range ( 0 , len ( parameters ) ) : parameter = parameters [ i ] parameter . merge ( params , i + 1 ) return self . get_status ( 'ResetDBParameterGroup' , params ) def delete_parameter_group ( self , name ) : params = { 'DBParameterGroupName' : name } return self . get_status ( 'DeleteDBParameterGroup' , params ) def get_all_dbsecurity_groups ( self , groupname = None , max_records = None , marker = None ) : params = { } if groupname : params [ 'DBSecurityGroupName' ] = groupname if max_records : params [ 'MaxRecords' ] = max_records if marker : params [ 'Marker' ] = marker return self . get_list ( 'DescribeDBSecurityGroups' , params , [ ( 'DBSecurityGroup' , DBSecurityGroup ) ] ) def create_dbsecurity_group ( self , name , description = None ) : params = { 'DBSecurityGroupName' : name } if description : params [ 'DBSecurityGroupDescription' ] = description group = self . get_object ( 'CreateDBSecurityGroup' , params , DBSecurityGroup ) group . name = name group . description = description return group def delete_dbsecurity_group ( self , name ) : params = { 'DBSecurityGroupName' : name } return self . get_status ( 'DeleteDBSecurityGroup' , params ) def authorize_dbsecurity_group ( self , group_name , cidr_ip = None , ec2_security_group_name = None , ec2_security_group_owner_id = None ) : params = { 'DBSecurityGroupName' : group_name } if ec2_security_group_name : params [ 'EC2SecurityGroupName' ] = ec2_security_group_name if ec2_security_group_owner_id : params [ 'EC2SecurityGroupOwnerId' ] = ec2_security_group_owner_id if cidr_ip : params [ 'CIDRIP' ] = urllib . quote ( cidr_ip ) return self . get_object ( 'AuthorizeDBSecurityGroupIngress' , params , DBSecurityGroup ) def revoke_dbsecurity_group ( self , group_name , ec2_security_group_name = None , ec2_security_group_owner_id = None , cidr_ip = None ) : params = { 'DBSecurityGroupName' : group_name } if ec2_security_group_name : params [ 'EC2SecurityGroupName' ] = ec2_security_group_name if ec2_security_group_owner_id : params [ 'EC2SecurityGroupOwnerId' ] = ec2_security_group_owner_id if cidr_ip : params [ 'CIDRIP' ] = cidr_ip return self . get_object ( 'RevokeDBSecurityGroupIngress' , params , DBSecurityGroup ) revoke_security_group = revoke_dbsecurity_group def get_all_dbsnapshots ( self , snapshot_id = None , instance_id = None , max_records = None , marker = None ) : params = { } if snapshot_id : params [ 'DBSnapshotIdentifier' ] = snapshot_id if instance_id : params [ 'DBInstanceIdentifier' ] = instance_id if max_records : params [ 'MaxRecords' ] = max_records if marker : params [ 'Marker' ] = marker return self . get_list ( 'DescribeDBSnapshots' , params , [ ( 'DBSnapshot' , DBSnapshot ) ] ) def create_dbsnapshot ( self , snapshot_id , dbinstance_id ) : params = { 'DBSnapshotIdentifier' : snapshot_id , : dbinstance_id } return self . get_object ( 'CreateDBSnapshot' , params , DBSnapshot ) def delete_dbsnapshot ( self , identifier ) : params = { 'DBSnapshotIdentifier' : identifier } return self . get_object ( 'DeleteDBSnapshot' , params , DBSnapshot ) def restore_dbinstance_from_dbsnapshot ( self , identifier , instance_id , instance_class , port = None , availability_zone = None ) : params = { 'DBSnapshotIdentifier' : identifier , : instance_id , : instance_class } if port : params [ 'Port' ] = port if availability_zone : params [ 'AvailabilityZone' ] = availability_zone return self . get_object ( 'RestoreDBInstanceFromDBSnapshot' , params , DBInstance ) def restore_dbinstance_from_point_in_time ( self , source_instance_id , target_instance_id , use_latest = False , restore_time = None , dbinstance_class = None , port = None , availability_zone = None ) : params = { 'SourceDBInstanceIdentifier' : source_instance_id , : target_instance_id } if use_latest : params [ 'UseLatestRestorableTime' ] = 'true' elif restore_time : params [ 'RestoreTime' ] = restore_time . isoformat ( ) if dbinstance_class : params [ 'DBInstanceClass' ] = dbinstance_class if port : params [ 'Port' ] = port if availability_zone : params [ 'AvailabilityZone' ] = availability_zone return self . get_object ( 'RestoreDBInstanceToPointInTime' , params , DBInstance ) def get_all_events ( self , source_identifier = None , source_type = None , start_time = None , end_time = None , max_records = None , marker = None ) : params = { } if source_identifier and source_type : params [ 'SourceIdentifier' ] = source_identifier params [ 'SourceType' ] = source_type if start_time : params [ 'StartTime' ] = start_time . isoformat ( ) if end_time : params [ 'EndTime' ] = end_time . isoformat ( ) if max_records : params [ 'MaxRecords' ] = max_records if marker : params [ 'Marker' ] = marker return self . get_list ( 'DescribeEvents' , params , [ ( 'Event' , Event ) ] )
