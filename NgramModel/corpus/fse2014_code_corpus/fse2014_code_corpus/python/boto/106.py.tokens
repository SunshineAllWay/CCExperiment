import user import key from boto import handler import xml . sax class CompleteMultiPartUpload ( object ) : def __init__ ( self , bucket = None ) : self . bucket = bucket self . location = None self . bucket_name = None self . key_name = None self . etag = None def __repr__ ( self ) : return '<CompleteMultiPartUpload: %s.%s>' % ( self . bucket_name , self . key_name ) def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'Location' : self . location = value elif name == 'Bucket' : self . bucket_name = value elif name == 'Key' : self . key_name = value elif name == 'ETag' : self . etag = value else : setattr ( self , name , value ) class Part ( object ) : def __init__ ( self , bucket = None ) : self . bucket = bucket self . part_number = None self . last_modified = None self . etag = None self . size = None def __repr__ ( self ) : if isinstance ( self . part_number , int ) : return '<Part %d>' % self . part_number else : return '<Part %s>' % None def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'PartNumber' : self . part_number = int ( value ) elif name == 'LastModified' : self . last_modified = value elif name == 'ETag' : self . etag = value elif name == 'Size' : self . size = int ( value ) else : setattr ( self , name , value ) def part_lister ( mpupload , part_number_marker = None ) : more_results = True part = None while more_results : parts = mpupload . get_all_parts ( None , part_number_marker ) for part in parts : yield part part_number_marker = mpupload . next_part_number_marker more_results = mpupload . is_truncated class MultiPartUpload ( object ) : def __init__ ( self , bucket = None ) : self . bucket = bucket self . bucket_name = None self . key_name = None self . id = id self . initiator = None self . owner = None self . storage_class = None self . initiated = None self . part_number_marker = None self . next_part_number_marker = None self . max_parts = None self . is_truncated = False self . _parts = None def __repr__ ( self ) : return '<MultiPartUpload %s>' % self . key_name def __iter__ ( self ) : return part_lister ( self ) def to_xml ( self ) : s = '<CompleteMultipartUpload>\n' for part in self : s += ' <Part>\n' s += ' <PartNumber>%d</PartNumber>\n' % part . part_number s += ' <ETag>%s</ETag>\n' % part . etag s += ' </Part>\n' s += '</CompleteMultipartUpload>' return s def startElement ( self , name , attrs , connection ) : if name == 'Initiator' : self . initiator = user . User ( self ) return self . initiator elif name == 'Owner' : self . owner = user . User ( self ) return self . owner elif name == 'Part' : part = Part ( self . bucket ) self . _parts . append ( part ) return part return None def endElement ( self , name , value , connection ) : if name == 'Bucket' : self . bucket_name = value elif name == 'Key' : self . key_name = value elif name == 'UploadId' : self . id = value elif name == 'StorageClass' : self . storage_class = value elif name == 'PartNumberMarker' : self . part_number_marker = value elif name == 'NextPartNumberMarker' : self . next_part_number_marker = value elif name == 'MaxParts' : self . max_parts = int ( value ) elif name == 'IsTruncated' : if value == 'true' : self . is_truncated = True else : self . is_truncated = False else : setattr ( self , name , value ) def get_all_parts ( self , max_parts = None , part_number_marker = None ) : self . _parts = [ ] query_args = 'uploadId=%s' % self . id if max_parts : query_args += '&max-parts=%d' % max_parts if part_number_marker : query_args += '&part-number-marker=%s' % part_number_marker response = self . bucket . connection . make_request ( 'GET' , self . bucket . name , self . key_name , query_args = query_args ) body = response . read ( ) if response . status == 200 : h = handler . XmlHandler ( self , self ) xml . sax . parseString ( body , h ) return self . _parts def upload_part_from_file ( self , fp , part_num , headers = None , replace = True , cb = None , num_cb = 10 , policy = None , md5 = None , size = None ) : if part_num < 1 : raise ValueError ( 'Part numbers must be greater than zero' ) query_args = 'uploadId=%s&partNumber=%d' % ( self . id , part_num ) key = self . bucket . new_key ( self . key_name ) key . set_contents_from_file ( fp , headers , replace , cb , num_cb , policy , md5 , reduced_redundancy = False , query_args = query_args , size = size ) def copy_part_from_key ( self , src_bucket_name , src_key_name , part_num , start = None , end = None ) : if part_num < 1 : raise ValueError ( 'Part numbers must be greater than zero' ) query_args = 'uploadId=%s&partNumber=%d' % ( self . id , part_num ) if start is not None and end is not None : rng = 'bytes=%s-%s' % ( start , end ) provider = self . bucket . connection . provider headers = { provider . copy_source_range_header : rng } else : headers = None return self . bucket . copy_key ( self . key_name , src_bucket_name , src_key_name , storage_class = None , headers = headers , query_args = query_args ) def complete_upload ( self ) : xml = self . to_xml ( ) return self . bucket . complete_multipart_upload ( self . key_name , self . id , xml ) def cancel_upload ( self ) : self . bucket . cancel_multipart_upload ( self . key_name , self . id )
