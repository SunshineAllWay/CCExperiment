import boto import boto . jsonresponse from boto . iam . summarymap import SummaryMap from boto . connection import AWSQueryConnection class IAMConnection ( AWSQueryConnection ) : APIVersion = '2010-05-08' def __init__ ( self , aws_access_key_id = None , aws_secret_access_key = None , is_secure = True , port = None , proxy = None , proxy_port = None , proxy_user = None , proxy_pass = None , host = 'iam.amazonaws.com' , debug = 0 , https_connection_factory = None , path = '/' ) : AWSQueryConnection . __init__ ( self , aws_access_key_id , aws_secret_access_key , is_secure , port , proxy , proxy_port , proxy_user , proxy_pass , host , debug , https_connection_factory , path ) def _required_auth_capability ( self ) : return [ 'iam' ] def get_response ( self , action , params , path = '/' , parent = None , verb = 'GET' , list_marker = 'Set' ) : if not parent : parent = self response = self . make_request ( action , params , path , verb ) body = response . read ( ) boto . log . debug ( body ) if response . status == 200 : e = boto . jsonresponse . Element ( list_marker = list_marker , pythonize_name = True ) h = boto . jsonresponse . XmlHandler ( e , parent ) h . parse ( body ) return e else : boto . log . error ( '%s %s' % ( response . status , response . reason ) ) boto . log . error ( '%s' % body ) raise self . ResponseError ( response . status , response . reason , body ) def get_all_groups ( self , path_prefix = '/' , marker = None , max_items = None ) : params = { } if path_prefix : params [ 'PathPrefix' ] = path_prefix if marker : params [ 'Marker' ] = marker if max_items : params [ 'MaxItems' ] = max_items return self . get_response ( 'ListGroups' , params , list_marker = 'Groups' ) def get_group ( self , group_name , marker = None , max_items = None ) : params = { 'GroupName' : group_name } if marker : params [ 'Marker' ] = marker if max_items : params [ 'MaxItems' ] = max_items return self . get_response ( 'GetGroup' , params , list_marker = 'Users' ) def create_group ( self , group_name , path = '/' ) : params = { 'GroupName' : group_name , : path } return self . get_response ( 'CreateGroup' , params ) def delete_group ( self , group_name ) : params = { 'GroupName' : group_name } return self . get_response ( 'DeleteGroup' , params ) def update_group ( self , group_name , new_group_name = None , new_path = None ) : params = { 'GroupName' : group_name } if new_group_name : params [ 'NewGroupName' ] = new_group_name if new_path : params [ 'NewPath' ] = new_path return self . get_response ( 'UpdateGroup' , params ) def add_user_to_group ( self , group_name , user_name ) : params = { 'GroupName' : group_name , : user_name } return self . get_response ( 'AddUserToGroup' , params ) def remove_user_from_group ( self , group_name , user_name ) : params = { 'GroupName' : group_name , : user_name } return self . get_response ( 'RemoveUserFromGroup' , params ) def put_group_policy ( self , group_name , policy_name , policy_json ) : params = { 'GroupName' : group_name , : policy_name , : policy_json } return self . get_response ( 'PutGroupPolicy' , params , verb = 'POST' ) def get_all_group_policies ( self , group_name , marker = None , max_items = None ) : params = { 'GroupName' : group_name } if marker : params [ 'Marker' ] = marker if max_items : params [ 'MaxItems' ] = max_items return self . get_response ( 'ListGroupPolicies' , params , list_marker = 'PolicyNames' ) def get_group_policy ( self , group_name , policy_name ) : params = { 'GroupName' : group_name , : policy_name } return self . get_response ( 'GetGroupPolicy' , params , verb = 'POST' ) def delete_group_policy ( self , group_name , policy_name ) : params = { 'GroupName' : group_name , : policy_name } return self . get_response ( 'DeleteGroupPolicy' , params , verb = 'POST' ) def get_all_users ( self , path_prefix = '/' , marker = None , max_items = None ) : params = { 'PathPrefix' : path_prefix } if marker : params [ 'Marker' ] = marker if max_items : params [ 'MaxItems' ] = max_items return self . get_response ( 'ListUsers' , params , list_marker = 'Users' ) def create_user ( self , user_name , path = '/' ) : params = { 'UserName' : user_name , : path } return self . get_response ( 'CreateUser' , params ) def delete_user ( self , user_name ) : params = { 'UserName' : user_name } return self . get_response ( 'DeleteUser' , params ) def get_user ( self , user_name = None ) : params = { } if user_name : params [ 'UserName' ] = user_name return self . get_response ( 'GetUser' , params ) def update_user ( self , user_name , new_user_name = None , new_path = None ) : params = { 'UserName' : user_name } if new_user_name : params [ 'NewUserName' ] = new_user_name if new_path : params [ 'NewPath' ] = new_path return self . get_response ( 'UpdateUser' , params ) def get_all_user_policies ( self , user_name , marker = None , max_items = None ) : params = { 'UserName' : user_name } if marker : params [ 'Marker' ] = marker if max_items : params [ 'MaxItems' ] = max_items return self . get_response ( 'ListUserPolicies' , params , list_marker = 'PolicyNames' ) def put_user_policy ( self , user_name , policy_name , policy_json ) : params = { 'UserName' : user_name , : policy_name , : policy_json } return self . get_response ( 'PutUserPolicy' , params , verb = 'POST' ) def get_user_policy ( self , user_name , policy_name ) : params = { 'UserName' : user_name , : policy_name } return self . get_response ( 'GetUserPolicy' , params , verb = 'POST' ) def delete_user_policy ( self , user_name , policy_name ) : params = { 'UserName' : user_name , : policy_name } return self . get_response ( 'DeleteUserPolicy' , params , verb = 'POST' ) def get_groups_for_user ( self , user_name , marker = None , max_items = None ) : params = { 'UserName' : user_name } if marker : params [ 'Marker' ] = marker if max_items : params [ 'MaxItems' ] = max_items return self . get_response ( 'ListGroupsForUser' , params , list_marker = 'Groups' ) def get_all_access_keys ( self , user_name , marker = None , max_items = None ) : params = { 'UserName' : user_name } if marker : params [ 'Marker' ] = marker if max_items : params [ 'MaxItems' ] = max_items return self . get_response ( 'ListAccessKeys' , params , list_marker = 'AccessKeyMetadata' ) def create_access_key ( self , user_name = None ) : params = { 'UserName' : user_name } return self . get_response ( 'CreateAccessKey' , params ) def update_access_key ( self , access_key_id , status , user_name = None ) : params = { 'AccessKeyId' : access_key_id , : status } if user_name : params [ 'UserName' ] = user_name return self . get_response ( 'UpdateAccessKey' , params ) def delete_access_key ( self , access_key_id , user_name = None ) : params = { 'AccessKeyId' : access_key_id } if user_name : params [ 'UserName' ] = user_name return self . get_response ( 'DeleteAccessKey' , params ) def get_all_signing_certs ( self , marker = None , max_items = None , user_name = None ) : params = { } if marker : params [ 'Marker' ] = marker if max_items : params [ 'MaxItems' ] = max_items if user_name : params [ 'UserName' ] = user_name return self . get_response ( 'ListSigningCertificates' , params , list_marker = 'Certificates' ) def update_signing_cert ( self , cert_id , status , user_name = None ) : params = { 'CertificateId' : cert_id , : status } if user_name : params [ 'UserName' ] = user_name return self . get_response ( 'UpdateSigningCertificate' , params ) def upload_signing_cert ( self , cert_body , user_name = None ) : params = { 'CertificateBody' : cert_body } if user_name : params [ 'UserName' ] = user_name return self . get_response ( 'UploadSigningCertificate' , params , verb = 'POST' ) def delete_signing_cert ( self , cert_id , user_name = None ) : params = { 'CertificateId' : cert_id } if user_name : params [ 'UserName' ] = user_name return self . get_response ( 'DeleteSigningCertificate' , params ) def get_all_server_certs ( self , path_prefix = '/' , marker = None , max_items = None ) : params = { } if path_prefix : params [ 'PathPrefix' ] = path_prefix if marker : params [ 'Marker' ] = marker if max_items : params [ 'MaxItems' ] = max_items return self . get_response ( 'ListServerCertificates' , params , list_marker = 'ServerCertificateMetadataList' ) def update_server_cert ( self , cert_name , new_cert_name = None , new_path = None ) : params = { 'ServerCertificateName' : cert_name } if new_cert_name : params [ 'NewServerCertificateName' ] = new_cert_name if new_path : params [ 'NewPath' ] = new_path return self . get_response ( 'UpdateServerCertificate' , params ) def upload_server_cert ( self , cert_name , cert_body , private_key , cert_chain = None , path = None ) : params = { 'ServerCertificateName' : cert_name , : cert_body , : private_key } if cert_chain : params [ 'CertificateChain' ] = cert_chain if path : params [ 'Path' ] = path return self . get_response ( 'UploadServerCertificate' , params , verb = 'POST' ) def get_server_certificate ( self , cert_name ) : params = { 'ServerCertificateName' : cert_name } return self . get_response ( 'GetServerCertificate' , params ) def delete_server_cert ( self , cert_name ) : params = { 'ServerCertificateName' : cert_name } return self . get_response ( 'DeleteServerCertificate' , params ) def get_all_mfa_devices ( self , user_name , marker = None , max_items = None ) : params = { 'UserName' : user_name } if marker : params [ 'Marker' ] = marker if max_items : params [ 'MaxItems' ] = max_items return self . get_response ( 'ListMFADevices' , params , list_marker = 'MFADevices' ) def enable_mfa_device ( self , user_name , serial_number , auth_code_1 , auth_code_2 ) : params = { 'UserName' : user_name , : serial_number , : auth_code_1 , : auth_code_2 } return self . get_response ( 'EnableMFADevice' , params ) def deactivate_mfa_device ( self , user_name , serial_number ) : params = { 'UserName' : user_name , : serial_number } return self . get_response ( 'DeactivateMFADevice' , params ) def resync_mfa_device ( self , user_name , serial_number , auth_code_1 , auth_code_2 ) : params = { 'UserName' : user_name , : serial_number , : auth_code_1 , : auth_code_2 } return self . get_response ( 'ResyncMFADevice' , params ) def get_login_profiles ( self , user_name ) : params = { 'UserName' : user_name } return self . get_response ( 'GetLoginProfile' , params ) def create_login_profile ( self , user_name , password ) : params = { 'UserName' : user_name , : password } return self . get_response ( 'CreateLoginProfile' , params ) def delete_login_profile ( self , user_name ) : params = { 'UserName' : user_name } return self . get_response ( 'DeleteLoginProfile' , params ) def update_login_profile ( self , user_name , password ) : params = { 'UserName' : user_name , : password } return self . get_response ( 'UpdateLoginProfile' , params ) def create_account_alias ( self , alias ) : params = { 'AccountAlias' : alias } return self . get_response ( 'CreateAccountAlias' , params ) def delete_account_alias ( self , alias ) : params = { 'AccountAlias' : alias } return self . get_response ( 'DeleteAccountAlias' , params ) def get_account_alias ( self ) : return self . get_response ( 'ListAccountAliases' , { } , list_marker = 'AccountAliases' ) def get_signin_url ( self , service = 'ec2' ) : alias = self . get_account_alias ( ) if not alias : raise Exception ( 'No alias associated with this account. Please use iam.create_account_alias() first.' ) return "https://%s.signin.aws.amazon.com/console/%s" % ( alias , service ) def get_account_summary ( self ) : return self . get_object ( 'GetAccountSummary' , { } , SummaryMap )
