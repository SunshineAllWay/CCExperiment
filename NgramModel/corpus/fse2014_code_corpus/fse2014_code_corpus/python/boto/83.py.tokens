from boto . rds . dbsecuritygroup import DBSecurityGroup from boto . rds . parametergroup import ParameterGroup class DBInstance ( object ) : def __init__ ( self , connection = None , id = None ) : self . connection = connection self . id = id self . create_time = None self . engine = None self . status = None self . allocated_storage = None self . endpoint = None self . instance_class = None self . master_username = None self . parameter_group = None self . security_group = None self . availability_zone = None self . backup_retention_period = None self . preferred_backup_window = None self . preferred_maintenance_window = None self . latest_restorable_time = None self . multi_az = False self . pending_modified_values = None self . _in_endpoint = False self . _port = None self . _address = None def __repr__ ( self ) : return 'DBInstance:%s' % self . id def startElement ( self , name , attrs , connection ) : if name == 'Endpoint' : self . _in_endpoint = True elif name == 'DBParameterGroup' : self . parameter_group = ParameterGroup ( self . connection ) return self . parameter_group elif name == 'DBSecurityGroup' : self . security_group = DBSecurityGroup ( self . connection ) return self . security_group elif name == 'PendingModifiedValues' : self . pending_modified_values = PendingModifiedValues ( ) return self . pending_modified_values return None def endElement ( self , name , value , connection ) : if name == 'DBInstanceIdentifier' : self . id = value elif name == 'DBInstanceStatus' : self . status = value elif name == 'InstanceCreateTime' : self . create_time = value elif name == 'Engine' : self . engine = value elif name == 'DBInstanceStatus' : self . status = value elif name == 'AllocatedStorage' : self . allocated_storage = int ( value ) elif name == 'DBInstanceClass' : self . instance_class = value elif name == 'MasterUsername' : self . master_username = value elif name == 'Port' : if self . _in_endpoint : self . _port = int ( value ) elif name == 'Address' : if self . _in_endpoint : self . _address = value elif name == 'Endpoint' : self . endpoint = ( self . _address , self . _port ) self . _in_endpoint = False elif name == 'AvailabilityZone' : self . availability_zone = value elif name == 'BackupRetentionPeriod' : self . backup_retention_period = value elif name == 'LatestRestorableTime' : self . latest_restorable_time = value elif name == 'PreferredMaintenanceWindow' : self . preferred_maintenance_window = value elif name == 'PreferredBackupWindow' : self . preferred_backup_window = value elif name == 'MultiAZ' : if value . lower ( ) == 'true' : self . multi_az = True else : setattr ( self , name , value ) def snapshot ( self , snapshot_id ) : return self . connection . create_dbsnapshot ( snapshot_id , self . id ) def reboot ( self ) : return self . connection . reboot_dbinstance ( self . id ) def update ( self , validate = False ) : rs = self . connection . get_all_dbinstances ( self . id ) if len ( rs ) > 0 : for i in rs : if i . id == self . id : self . __dict__ . update ( i . __dict__ ) elif validate : raise ValueError ( '%s is not a valid Instance ID' % self . id ) return self . status def stop ( self , skip_final_snapshot = False , final_snapshot_id = '' ) : return self . connection . delete_dbinstance ( self . id , skip_final_snapshot , final_snapshot_id ) def modify ( self , param_group = None , security_groups = None , preferred_maintenance_window = None , master_password = None , allocated_storage = None , instance_class = None , backup_retention_period = None , preferred_backup_window = None , multi_az = False , apply_immediately = False ) : return self . connection . modify_dbinstance ( self . id , param_group , security_groups , preferred_maintenance_window , master_password , allocated_storage , instance_class , backup_retention_period , preferred_backup_window , multi_az , apply_immediately ) class PendingModifiedValues ( dict ) : def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name != 'PendingModifiedValues' : self [ name ] = value
