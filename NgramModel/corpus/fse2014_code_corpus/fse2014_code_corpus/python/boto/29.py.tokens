import unittest import time from boto . ec2 . connection import EC2Connection import telnetlib import socket class EC2ConnectionTest ( unittest . TestCase ) : def test_1_basic ( self ) : user_id = '963068290131' print '--- running EC2Connection tests ---' c = EC2Connection ( ) rs = c . get_all_images ( owners = [ user_id ] ) assert len ( rs ) > 0 image = rs [ 0 ] status = image . set_launch_permissions ( group_names = [ 'all' ] ) assert status d = image . get_launch_permissions ( ) assert d . has_key ( 'groups' ) assert len ( d [ 'groups' ] ) > 0 status = image . remove_launch_permissions ( group_names = [ 'all' ] ) assert status time . sleep ( 10 ) d = image . get_launch_permissions ( ) assert not d . has_key ( 'groups' ) group1_name = 'test-%d' % int ( time . time ( ) ) group_desc = 'This is a security group created during unit testing' group1 = c . create_security_group ( group1_name , group_desc ) time . sleep ( 2 ) group2_name = 'test-%d' % int ( time . time ( ) ) group_desc = 'This is a security group created during unit testing' group2 = c . create_security_group ( group2_name , group_desc ) rs = c . get_all_security_groups ( ) found = False for g in rs : if g . name == group1_name : found = True assert found rs = c . get_all_security_groups ( [ group1_name ] ) assert len ( rs ) == 1 status = c . authorize_security_group ( group1 . name , group2 . name , group2 . owner_id ) assert status status = c . revoke_security_group ( group1 . name , group2 . name , group2 . owner_id ) assert status status = c . authorize_security_group ( group1 . name , group2 . name , group2 . owner_id , , 22 , 22 ) assert status status = c . revoke_security_group ( group1 . name , group2 . name , group2 . owner_id , , 22 , 22 ) assert status status = c . delete_security_group ( group2_name ) rs = c . get_all_security_groups ( ) found = False for g in rs : if g . name == group2_name : found = True assert not found group = group1 rs = c . get_all_images ( ) img_loc = 'ec2-public-images/fedora-core4-apache.manifest.xml' for image in rs : if image . location == img_loc : break reservation = image . run ( security_groups = [ group . name ] ) instance = reservation . instances [ 0 ] while instance . state != 'running' : print '\tinstance is %s' % instance . state time . sleep ( 30 ) instance . update ( ) t = telnetlib . Telnet ( ) try : t . open ( instance . dns_name , 80 ) except socket . error : pass group . authorize ( 'tcp' , 80 , 80 , '0.0.0.0/0' ) t . open ( instance . dns_name , 80 ) t . close ( ) group . revoke ( 'tcp' , 80 , 80 , '0.0.0.0/0' ) try : t . open ( instance . dns_name , 80 ) except socket . error : pass instance . terminate ( ) key_name = 'test-%d' % int ( time . time ( ) ) status = c . create_key_pair ( key_name ) assert status rs = c . get_all_key_pairs ( ) found = False for k in rs : if k . name == key_name : found = True assert found rs = c . get_all_key_pairs ( [ key_name ] ) assert len ( rs ) == 1 key_pair = rs [ 0 ] status = c . delete_key_pair ( key_name ) rs = c . get_all_key_pairs ( ) found = False for k in rs : if k . name == key_name : found = True assert not found demo_paid_ami_id = 'ami-bd9d78d4' demo_paid_ami_product_code = 'A79EC0DB' l = c . get_all_images ( [ demo_paid_ami_id ] ) assert len ( l ) == 1 assert len ( l [ 0 ] . product_codes ) == 1 assert l [ 0 ] . product_codes [ 0 ] == demo_paid_ami_product_code print '--- tests completed ---'
