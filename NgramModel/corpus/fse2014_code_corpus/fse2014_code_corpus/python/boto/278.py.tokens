import base64 import StringIO from boto . sqs . attributes import Attributes from boto . exception import SQSDecodeError class RawMessage : def __init__ ( self , queue = None , body = '' ) : self . queue = queue self . set_body ( body ) self . id = None self . receipt_handle = None self . md5 = None self . attributes = Attributes ( self ) def __len__ ( self ) : return len ( self . encode ( self . _body ) ) def startElement ( self , name , attrs , connection ) : if name == 'Attribute' : return self . attributes return None def endElement ( self , name , value , connection ) : if name == 'Body' : self . set_body ( self . decode ( value ) ) elif name == 'MessageId' : self . id = value elif name == 'ReceiptHandle' : self . receipt_handle = value elif name == 'MD5OfMessageBody' : self . md5 = value else : setattr ( self , name , value ) def encode ( self , value ) : return value def decode ( self , value ) : return value def set_body ( self , body ) : self . _body = body def get_body ( self ) : return self . _body def get_body_encoded ( self ) : return self . encode ( self . get_body ( ) ) def delete ( self ) : if self . queue : return self . queue . delete_message ( self ) def change_visibility ( self , visibility_timeout ) : if self . queue : self . queue . connection . change_message_visibility ( self . queue , self . receipt_handle , visibility_timeout ) class Message ( RawMessage ) : def encode ( self , value ) : return base64 . b64encode ( value ) def decode ( self , value ) : try : value = base64 . b64decode ( value ) except : raise SQSDecodeError ( 'Unable to decode message' , self ) return value class MHMessage ( Message ) : def __init__ ( self , queue = None , body = None , xml_attrs = None ) : if body == None or body == '' : body = { } Message . __init__ ( self , queue , body ) def decode ( self , value ) : try : msg = { } fp = StringIO . StringIO ( value ) line = fp . readline ( ) while line : delim = line . find ( ':' ) key = line [ 0 : delim ] value = line [ delim + 1 : ] . strip ( ) msg [ key . strip ( ) ] = value . strip ( ) line = fp . readline ( ) except : raise SQSDecodeError ( 'Unable to decode message' , self ) return msg def encode ( self , value ) : s = '' for item in value . items ( ) : s = s + '%s: %s\n' % ( item [ 0 ] , item [ 1 ] ) return s def __getitem__ ( self , key ) : if self . _body . has_key ( key ) : return self . _body [ key ] else : raise KeyError ( key ) def __setitem__ ( self , key , value ) : self . _body [ key ] = value self . set_body ( self . _body ) def keys ( self ) : return self . _body . keys ( ) def values ( self ) : return self . _body . values ( ) def items ( self ) : return self . _body . items ( ) def has_key ( self , key ) : return self . _body . has_key ( key ) def update ( self , d ) : self . _body . update ( d ) self . set_body ( self . _body ) def get ( self , key , default = None ) : return self . _body . get ( key , default ) class EncodedMHMessage ( MHMessage ) : def decode ( self , value ) : try : value = base64 . b64decode ( value ) except : raise SQSDecodeError ( 'Unable to decode message' , self ) return MHMessage . decode ( self , value ) def encode ( self , value ) : value = MHMessage . encode ( self , value ) return base64 . b64encode ( value )
