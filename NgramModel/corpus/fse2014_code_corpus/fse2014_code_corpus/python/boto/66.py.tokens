class Step ( object ) : def jar ( self ) : raise NotImplemented ( ) def args ( self ) : raise NotImplemented ( ) def main_class ( self ) : raise NotImplemented ( ) class JarStep ( Step ) : def __init__ ( self , name , jar , main_class = None , action_on_failure = 'TERMINATE_JOB_FLOW' , step_args = None ) : self . name = name self . _jar = jar self . _main_class = main_class self . action_on_failure = action_on_failure if isinstance ( step_args , basestring ) : step_args = [ step_args ] self . step_args = step_args def jar ( self ) : return self . _jar def args ( self ) : args = [ ] if self . step_args : args . extend ( self . step_args ) return args def main_class ( self ) : return self . _main_class class StreamingStep ( Step ) : def __init__ ( self , name , mapper , reducer = None , combiner = None , action_on_failure = 'TERMINATE_JOB_FLOW' , cache_files = None , cache_archives = None , step_args = None , input = None , output = None , jar = '/home/hadoop/contrib/streaming/hadoop-streaming.jar' ) : self . name = name self . mapper = mapper self . reducer = reducer self . combiner = combiner self . action_on_failure = action_on_failure self . cache_files = cache_files self . cache_archives = cache_archives self . input = input self . output = output self . _jar = jar if isinstance ( step_args , basestring ) : step_args = [ step_args ] self . step_args = step_args def jar ( self ) : return self . _jar def main_class ( self ) : return None def args ( self ) : args = [ ] if self . step_args : args . extend ( self . step_args ) args . extend ( [ '-mapper' , self . mapper ] ) if self . combiner : args . extend ( [ '-combiner' , self . combiner ] ) if self . reducer : args . extend ( [ '-reducer' , self . reducer ] ) else : args . extend ( [ '-jobconf' , 'mapred.reduce.tasks=0' ] ) if self . input : if isinstance ( self . input , list ) : for input in self . input : args . extend ( ( '-input' , input ) ) else : args . extend ( ( '-input' , self . input ) ) if self . output : args . extend ( ( '-output' , self . output ) ) if self . cache_files : for cache_file in self . cache_files : args . extend ( ( '-cacheFile' , cache_file ) ) if self . cache_archives : for cache_archive in self . cache_archives : args . extend ( ( '-cacheArchive' , cache_archive ) ) return args def __repr__ ( self ) : return '%s.%s(name=%r, mapper=%r, reducer=%r, action_on_failure=%r, cache_files=%r, cache_archives=%r, step_args=%r, input=%r, output=%r, jar=%r)' % ( self . __class__ . __module__ , self . __class__ . __name__ , self . name , self . mapper , self . reducer , self . action_on_failure , self . cache_files , self . cache_archives , self . step_args , self . input , self . output , self . _jar )
