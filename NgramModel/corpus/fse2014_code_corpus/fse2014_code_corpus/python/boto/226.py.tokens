from boto . exception import SDBResponseError class SequenceGenerator ( object ) : __name__ = "SequenceGenerator" def __init__ ( self , sequence_string , rollover = False ) : self . sequence_string = sequence_string self . sequence_length = len ( sequence_string [ 0 ] ) self . rollover = rollover self . last_item = sequence_string [ - 1 ] self . __name__ = "%s('%s')" % ( self . __class__ . __name__ , sequence_string ) def __call__ ( self , val , last = None ) : if val == None or len ( val ) < self . sequence_length : return self . sequence_string [ 0 ] last_value = val [ - self . sequence_length : ] if ( not self . rollover ) and ( last_value == self . last_item ) : val = "%s%s" % ( self ( val [ : - self . sequence_length ] ) , self . _inc ( last_value ) ) else : val = "%s%s" % ( val [ : - self . sequence_length ] , self . _inc ( last_value ) ) return val def _inc ( self , val ) : assert ( len ( val ) == self . sequence_length ) return self . sequence_string [ ( self . sequence_string . index ( val ) + 1 ) % len ( self . sequence_string ) ] def increment_by_one ( cv = None , lv = None ) : if cv == None : return 0 return cv + 1 def double ( cv = None , lv = None ) : if cv == None : return 1 return cv * 2 def fib ( cv = 1 , lv = 0 ) : if cv == None : cv = 1 if lv == None : lv = 0 return cv + lv increment_string = SequenceGenerator ( "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ) class Sequence ( object ) : def __init__ ( self , id = None , domain_name = None , fnc = increment_by_one , init_val = None ) : self . _db = None self . _value = None self . last_value = None self . domain_name = domain_name self . id = id if init_val == None : init_val = fnc ( init_val ) if self . id == None : import uuid self . id = str ( uuid . uuid4 ( ) ) self . item_type = type ( fnc ( None ) ) self . timestamp = None if type ( fnc ) == str : from boto . utils import find_class fnc = find_class ( fnc ) self . fnc = fnc if not self . val : self . val = init_val def set ( self , val ) : import time now = time . time ( ) expected_value = [ ] new_val = { } new_val [ 'timestamp' ] = now if self . _value != None : new_val [ 'last_value' ] = self . _value expected_value = [ 'current_value' , str ( self . _value ) ] new_val [ 'current_value' ] = val try : self . db . put_attributes ( self . id , new_val , expected_value = expected_value ) self . timestamp = new_val [ 'timestamp' ] except SDBResponseError , e : if e . status == 409 : raise ValueError , "Sequence out of sync" else : raise def get ( self ) : val = self . db . get_attributes ( self . id , consistent_read = True ) if val : if val . has_key ( 'timestamp' ) : self . timestamp = val [ 'timestamp' ] if val . has_key ( 'current_value' ) : self . _value = self . item_type ( val [ 'current_value' ] ) if val . has_key ( "last_value" ) and val [ 'last_value' ] != None : self . last_value = self . item_type ( val [ 'last_value' ] ) return self . _value val = property ( get , set ) def __repr__ ( self ) : return "%s('%s', '%s', '%s.%s', '%s')" % ( self . __class__ . __name__ , self . id , self . domain_name , self . fnc . __module__ , self . fnc . __name__ , self . val ) def _connect ( self ) : if not self . _db : import boto sdb = boto . connect_sdb ( ) if not self . domain_name : self . domain_name = boto . config . get ( "DB" , "sequence_db" , boto . config . get ( "DB" , "db_name" , "default" ) ) try : self . _db = sdb . get_domain ( self . domain_name ) except SDBResponseError , e : if e . status == 400 : self . _db = sdb . create_domain ( self . domain_name ) else : raise return self . _db db = property ( _connect ) def next ( self ) : self . val = self . fnc ( self . val , self . last_value ) return self . val def delete ( self ) : self . db . delete_attributes ( self . id )
