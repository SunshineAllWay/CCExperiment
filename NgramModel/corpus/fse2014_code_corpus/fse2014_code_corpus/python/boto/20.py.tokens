import os import ssl import unittest import boto from boto import exception , https_connection from boto . gs . connection import GSConnection from boto . s3 . connection import S3Connection DEFAULT_CA_CERTS_FILE = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , 'other_cacerts.txt' ) PROXY_HOST = os . environ . get ( 'PROXY_HOST' , 'cache' ) PROXY_PORT = os . environ . get ( 'PROXY_PORT' , '3128' ) INVALID_HOSTNAME_HOST = os . environ . get ( 'INVALID_HOSTNAME_HOST' , 'www' ) class CertValidationTest ( unittest . TestCase ) : def setUp ( self ) : for section in boto . config . sections ( ) : boto . config . remove_section ( section ) boto . config . add_section ( 'Boto' ) boto . config . setbool ( 'Boto' , 'https_validate_certificates' , True ) boto . config . add_section ( 'Credentials' ) boto . config . set ( 'Credentials' , 'gs_access_key_id' , 'xyz' ) boto . config . set ( 'Credentials' , 'gs_secret_access_key' , 'xyz' ) boto . config . set ( 'Credentials' , 'aws_access_key_id' , 'xyz' ) boto . config . set ( 'Credentials' , 'aws_secret_access_key' , 'xyz' ) def enableProxy ( self ) : boto . config . set ( 'Boto' , 'proxy' , PROXY_HOST ) boto . config . set ( 'Boto' , 'proxy_port' , PROXY_PORT ) def assertConnectionThrows ( self , connection_class , error ) : conn = connection_class ( ) self . assertRaises ( error , conn . get_all_buckets ) def do_test_valid_cert ( self ) : self . assertConnectionThrows ( S3Connection , exception . S3ResponseError ) self . assertConnectionThrows ( GSConnection , exception . GSResponseError ) def test_valid_cert ( self ) : self . do_test_valid_cert ( ) def test_valid_cert_with_proxy ( self ) : self . enableProxy ( ) self . do_test_valid_cert ( ) def do_test_invalid_signature ( self ) : boto . config . set ( 'Boto' , 'ca_certificates_file' , DEFAULT_CA_CERTS_FILE ) self . assertConnectionThrows ( S3Connection , ssl . SSLError ) self . assertConnectionThrows ( GSConnection , ssl . SSLError ) def test_invalid_signature ( self ) : self . do_test_invalid_signature ( ) def test_invalid_signature_with_proxy ( self ) : self . enableProxy ( ) self . do_test_invalid_signature ( ) def do_test_invalid_host ( self ) : boto . config . set ( 'Credentials' , 'gs_host' , INVALID_HOSTNAME_HOST ) boto . config . set ( 'Credentials' , 's3_host' , INVALID_HOSTNAME_HOST ) self . assertConnectionThrows ( S3Connection , ssl . SSLError ) self . assertConnectionThrows ( GSConnection , ssl . SSLError ) def do_test_invalid_host ( self ) : boto . config . set ( 'Credentials' , 'gs_host' , INVALID_HOSTNAME_HOST ) boto . config . set ( 'Credentials' , 's3_host' , INVALID_HOSTNAME_HOST ) self . assertConnectionThrows ( S3Connection , https_connection . InvalidCertificateException ) self . assertConnectionThrows ( GSConnection , https_connection . InvalidCertificateException ) def test_invalid_host ( self ) : self . do_test_invalid_host ( ) def test_invalid_host_with_proxy ( self ) : self . enableProxy ( ) self . do_test_invalid_host ( )
