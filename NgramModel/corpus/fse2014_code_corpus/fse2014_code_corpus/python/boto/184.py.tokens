import base64 import warnings from datetime import datetime from datetime import timedelta import boto from boto . connection import AWSQueryConnection from boto . resultset import ResultSet from boto . ec2 . image import Image , ImageAttribute from boto . ec2 . instance import Reservation , Instance from boto . ec2 . instance import ConsoleOutput , InstanceAttribute from boto . ec2 . keypair import KeyPair from boto . ec2 . address import Address from boto . ec2 . volume import Volume from boto . ec2 . snapshot import Snapshot from boto . ec2 . snapshot import SnapshotAttribute from boto . ec2 . zone import Zone from boto . ec2 . securitygroup import SecurityGroup from boto . ec2 . regioninfo import RegionInfo from boto . ec2 . instanceinfo import InstanceInfo from boto . ec2 . reservedinstance import ReservedInstancesOffering from boto . ec2 . reservedinstance import ReservedInstance from boto . ec2 . spotinstancerequest import SpotInstanceRequest from boto . ec2 . spotpricehistory import SpotPriceHistory from boto . ec2 . spotdatafeedsubscription import SpotDatafeedSubscription from boto . ec2 . bundleinstance import BundleInstanceTask from boto . ec2 . placementgroup import PlacementGroup from boto . ec2 . tag import Tag from boto . ec2 . instancestatus import InstanceStatusSet from boto . ec2 . networkinterface import NetworkInterface from boto . exception import EC2ResponseError class EC2Connection ( AWSQueryConnection ) : APIVersion = boto . config . get ( 'Boto' , 'ec2_version' , '2011-12-15' ) DefaultRegionName = boto . config . get ( 'Boto' , 'ec2_region_name' , 'us-east-1' ) DefaultRegionEndpoint = boto . config . get ( 'Boto' , 'ec2_region_endpoint' , ) ResponseError = EC2ResponseError def __init__ ( self , aws_access_key_id = None , aws_secret_access_key = None , is_secure = True , host = None , port = None , proxy = None , proxy_port = None , proxy_user = None , proxy_pass = None , debug = 0 , https_connection_factory = None , region = None , path = '/' , api_version = None , security_token = None ) : if not region : region = RegionInfo ( self , self . DefaultRegionName , self . DefaultRegionEndpoint ) self . region = region AWSQueryConnection . __init__ ( self , aws_access_key_id , aws_secret_access_key , is_secure , port , proxy , proxy_port , proxy_user , proxy_pass , self . region . endpoint , debug , https_connection_factory , path , security_token ) if api_version : self . APIVersion = api_version def _required_auth_capability ( self ) : return [ 'ec2' ] def get_params ( self ) : param_names = [ 'aws_access_key_id' , 'aws_secret_access_key' , , 'port' , 'proxy' , 'proxy_port' , , 'proxy_pass' , , 'https_connection_factory' ] params = { } for name in param_names : params [ name ] = getattr ( self , name ) return params def build_filter_params ( self , params , filters ) : i = 1 for name in filters : aws_name = name if not aws_name . startswith ( 'tag:' ) : aws_name = name . replace ( '_' , '-' ) params [ 'Filter.%d.Name' % i ] = aws_name value = filters [ name ] if not isinstance ( value , list ) : value = [ value ] j = 1 for v in value : params [ 'Filter.%d.Value.%d' % ( i , j ) ] = v j += 1 i += 1 def get_all_images ( self , image_ids = None , owners = None , executable_by = None , filters = None ) : params = { } if image_ids : self . build_list_params ( params , image_ids , 'ImageId' ) if owners : self . build_list_params ( params , owners , 'Owner' ) if executable_by : self . build_list_params ( params , executable_by , 'ExecutableBy' ) if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeImages' , params , [ ( 'item' , Image ) ] , verb = 'POST' ) def get_all_kernels ( self , kernel_ids = None , owners = None ) : params = { } if kernel_ids : self . build_list_params ( params , kernel_ids , 'ImageId' ) if owners : self . build_list_params ( params , owners , 'Owner' ) filter = { 'image-type' : 'kernel' } self . build_filter_params ( params , filter ) return self . get_list ( 'DescribeImages' , params , [ ( 'item' , Image ) ] , verb = 'POST' ) def get_all_ramdisks ( self , ramdisk_ids = None , owners = None ) : params = { } if ramdisk_ids : self . build_list_params ( params , ramdisk_ids , 'ImageId' ) if owners : self . build_list_params ( params , owners , 'Owner' ) filter = { 'image-type' : 'ramdisk' } self . build_filter_params ( params , filter ) return self . get_list ( 'DescribeImages' , params , [ ( 'item' , Image ) ] , verb = 'POST' ) def get_image ( self , image_id ) : try : return self . get_all_images ( image_ids = [ image_id ] ) [ 0 ] except IndexError : return None def register_image ( self , name = None , description = None , image_location = None , architecture = None , kernel_id = None , ramdisk_id = None , root_device_name = None , block_device_map = None ) : params = { } if name : params [ 'Name' ] = name if description : params [ 'Description' ] = description if architecture : params [ 'Architecture' ] = architecture if kernel_id : params [ 'KernelId' ] = kernel_id if ramdisk_id : params [ 'RamdiskId' ] = ramdisk_id if image_location : params [ 'ImageLocation' ] = image_location if root_device_name : params [ 'RootDeviceName' ] = root_device_name if block_device_map : block_device_map . build_list_params ( params ) rs = self . get_object ( 'RegisterImage' , params , ResultSet , verb = 'POST' ) image_id = getattr ( rs , 'imageId' , None ) return image_id def deregister_image ( self , image_id , delete_snapshot = False ) : snapshot_id = None if delete_snapshot : image = self . get_image ( image_id ) for key in image . block_device_mapping : if key == "/dev/sda1" : snapshot_id = image . block_device_mapping [ key ] . snapshot_id break result = self . get_status ( 'DeregisterImage' , { 'ImageId' : image_id } , verb = 'POST' ) if result and snapshot_id : return result and self . delete_snapshot ( snapshot_id ) return result def create_image ( self , instance_id , name , description = None , no_reboot = False ) : params = { 'InstanceId' : instance_id , : name } if description : params [ 'Description' ] = description if no_reboot : params [ 'NoReboot' ] = 'true' img = self . get_object ( 'CreateImage' , params , Image , verb = 'POST' ) return img . id def get_image_attribute ( self , image_id , attribute = 'launchPermission' ) : params = { 'ImageId' : image_id , : attribute } return self . get_object ( 'DescribeImageAttribute' , params , ImageAttribute , verb = 'POST' ) def modify_image_attribute ( self , image_id , attribute = 'launchPermission' , operation = 'add' , user_ids = None , groups = None , product_codes = None ) : params = { 'ImageId' : image_id , : attribute , : operation } if user_ids : self . build_list_params ( params , user_ids , 'UserId' ) if groups : self . build_list_params ( params , groups , 'UserGroup' ) if product_codes : self . build_list_params ( params , product_codes , 'ProductCode' ) return self . get_status ( 'ModifyImageAttribute' , params , verb = 'POST' ) def reset_image_attribute ( self , image_id , attribute = 'launchPermission' ) : params = { 'ImageId' : image_id , : attribute } return self . get_status ( 'ResetImageAttribute' , params , verb = 'POST' ) def get_all_instances ( self , instance_ids = None , filters = None ) : params = { } if instance_ids : self . build_list_params ( params , instance_ids , 'InstanceId' ) if filters : if 'group-id' in filters : gid = filters . get ( 'group-id' ) if not gid . startswith ( 'sg-' ) or len ( gid ) != 11 : warnings . warn ( , UserWarning ) self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeInstances' , params , [ ( 'item' , Reservation ) ] , verb = 'POST' ) def get_all_instance_status ( self , instance_ids = None , max_results = None , next_token = None , filters = None ) : params = { } if instance_ids : self . build_list_params ( params , instance_ids , 'InstanceId' ) if max_results : params [ 'MaxResults' ] = max_results if next_token : params [ 'NextToken' ] = next_token if filters : self . build_filter_params ( params , filters ) return self . get_object ( 'DescribeInstanceStatus' , params , InstanceStatusSet , verb = 'POST' ) def run_instances ( self , image_id , min_count = 1 , max_count = 1 , key_name = None , security_groups = None , user_data = None , addressing_type = None , instance_type = 'm1.small' , placement = None , kernel_id = None , ramdisk_id = None , monitoring_enabled = False , subnet_id = None , block_device_map = None , disable_api_termination = False , instance_initiated_shutdown_behavior = None , private_ip_address = None , placement_group = None , client_token = None , security_group_ids = None ) : params = { 'ImageId' : image_id , : min_count , : max_count } if key_name : params [ 'KeyName' ] = key_name if security_group_ids : l = [ ] for group in security_group_ids : if isinstance ( group , SecurityGroup ) : l . append ( group . id ) else : l . append ( group ) self . build_list_params ( params , l , 'SecurityGroupId' ) if security_groups : l = [ ] for group in security_groups : if isinstance ( group , SecurityGroup ) : l . append ( group . name ) else : l . append ( group ) self . build_list_params ( params , l , 'SecurityGroup' ) if user_data : params [ 'UserData' ] = base64 . b64encode ( user_data ) if addressing_type : params [ 'AddressingType' ] = addressing_type if instance_type : params [ 'InstanceType' ] = instance_type if placement : params [ 'Placement.AvailabilityZone' ] = placement if placement_group : params [ 'Placement.GroupName' ] = placement_group if kernel_id : params [ 'KernelId' ] = kernel_id if ramdisk_id : params [ 'RamdiskId' ] = ramdisk_id if monitoring_enabled : params [ 'Monitoring.Enabled' ] = 'true' if subnet_id : params [ 'SubnetId' ] = subnet_id if private_ip_address : params [ 'PrivateIpAddress' ] = private_ip_address if block_device_map : block_device_map . build_list_params ( params ) if disable_api_termination : params [ 'DisableApiTermination' ] = 'true' if instance_initiated_shutdown_behavior : val = instance_initiated_shutdown_behavior params [ 'InstanceInitiatedShutdownBehavior' ] = val if client_token : params [ 'ClientToken' ] = client_token return self . get_object ( 'RunInstances' , params , Reservation , verb = 'POST' ) def terminate_instances ( self , instance_ids = None ) : params = { } if instance_ids : self . build_list_params ( params , instance_ids , 'InstanceId' ) return self . get_list ( 'TerminateInstances' , params , [ ( 'item' , Instance ) ] , verb = 'POST' ) def stop_instances ( self , instance_ids = None , force = False ) : params = { } if force : params [ 'Force' ] = 'true' if instance_ids : self . build_list_params ( params , instance_ids , 'InstanceId' ) return self . get_list ( 'StopInstances' , params , [ ( 'item' , Instance ) ] , verb = 'POST' ) def start_instances ( self , instance_ids = None ) : params = { } if instance_ids : self . build_list_params ( params , instance_ids , 'InstanceId' ) return self . get_list ( 'StartInstances' , params , [ ( 'item' , Instance ) ] , verb = 'POST' ) def get_console_output ( self , instance_id ) : params = { } self . build_list_params ( params , [ instance_id ] , 'InstanceId' ) return self . get_object ( 'GetConsoleOutput' , params , ConsoleOutput , verb = 'POST' ) def reboot_instances ( self , instance_ids = None ) : params = { } if instance_ids : self . build_list_params ( params , instance_ids , 'InstanceId' ) return self . get_status ( 'RebootInstances' , params ) def confirm_product_instance ( self , product_code , instance_id ) : params = { 'ProductCode' : product_code , : instance_id } rs = self . get_object ( 'ConfirmProductInstance' , params , ResultSet , verb = 'POST' ) return ( rs . status , rs . ownerId ) def get_instance_attribute ( self , instance_id , attribute ) : params = { 'InstanceId' : instance_id } if attribute : params [ 'Attribute' ] = attribute return self . get_object ( 'DescribeInstanceAttribute' , params , InstanceAttribute , verb = 'POST' ) def modify_instance_attribute ( self , instance_id , attribute , value ) : if attribute == 'disableApiTermination' : if isinstance ( value , bool ) : if value : value = 'true' else : value = 'false' params = { 'InstanceId' : instance_id , : attribute , : value } return self . get_status ( 'ModifyInstanceAttribute' , params , verb = 'POST' ) def reset_instance_attribute ( self , instance_id , attribute ) : params = { 'InstanceId' : instance_id , : attribute } return self . get_status ( 'ResetInstanceAttribute' , params , verb = 'POST' ) def get_all_spot_instance_requests ( self , request_ids = None , filters = None ) : params = { } if request_ids : self . build_list_params ( params , request_ids , 'SpotInstanceRequestId' ) if filters : if 'launch.group-id' in filters : lgid = filters . get ( 'launch.group-id' ) if not lgid . startswith ( 'sg-' ) or len ( lgid ) != 11 : warnings . warn ( , UserWarning ) self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeSpotInstanceRequests' , params , [ ( 'item' , SpotInstanceRequest ) ] , verb = 'POST' ) def get_spot_price_history ( self , start_time = None , end_time = None , instance_type = None , product_description = None , availability_zone = None ) : params = { } if start_time : params [ 'StartTime' ] = start_time if end_time : params [ 'EndTime' ] = end_time if instance_type : params [ 'InstanceType' ] = instance_type if product_description : params [ 'ProductDescription' ] = product_description if availability_zone : params [ 'AvailabilityZone' ] = availability_zone return self . get_list ( 'DescribeSpotPriceHistory' , params , [ ( 'item' , SpotPriceHistory ) ] , verb = 'POST' ) def request_spot_instances ( self , price , image_id , count = 1 , type = 'one-time' , valid_from = None , valid_until = None , launch_group = None , availability_zone_group = None , key_name = None , security_groups = None , user_data = None , addressing_type = None , instance_type = 'm1.small' , placement = None , kernel_id = None , ramdisk_id = None , monitoring_enabled = False , subnet_id = None , block_device_map = None ) : params = { 'LaunchSpecification.ImageId' : image_id , : type , : price } if count : params [ 'InstanceCount' ] = count if valid_from : params [ 'ValidFrom' ] = valid_from if valid_until : params [ 'ValidUntil' ] = valid_until if launch_group : params [ 'LaunchGroup' ] = launch_group if availability_zone_group : params [ 'AvailabilityZoneGroup' ] = availability_zone_group if key_name : params [ 'LaunchSpecification.KeyName' ] = key_name if security_groups : l = [ ] for group in security_groups : if isinstance ( group , SecurityGroup ) : l . append ( group . name ) else : l . append ( group ) self . build_list_params ( params , l , ) if user_data : params [ 'LaunchSpecification.UserData' ] = base64 . b64encode ( user_data ) if addressing_type : params [ 'LaunchSpecification.AddressingType' ] = addressing_type if instance_type : params [ 'LaunchSpecification.InstanceType' ] = instance_type if placement : params [ 'LaunchSpecification.Placement.AvailabilityZone' ] = placement if kernel_id : params [ 'LaunchSpecification.KernelId' ] = kernel_id if ramdisk_id : params [ 'LaunchSpecification.RamdiskId' ] = ramdisk_id if monitoring_enabled : params [ 'LaunchSpecification.Monitoring.Enabled' ] = 'true' if subnet_id : params [ 'LaunchSpecification.SubnetId' ] = subnet_id if block_device_map : block_device_map . build_list_params ( params , 'LaunchSpecification.' ) return self . get_list ( 'RequestSpotInstances' , params , [ ( 'item' , SpotInstanceRequest ) ] , verb = 'POST' ) def cancel_spot_instance_requests ( self , request_ids ) : params = { } if request_ids : self . build_list_params ( params , request_ids , 'SpotInstanceRequestId' ) return self . get_list ( 'CancelSpotInstanceRequests' , params , [ ( 'item' , Instance ) ] , verb = 'POST' ) def get_spot_datafeed_subscription ( self ) : return self . get_object ( 'DescribeSpotDatafeedSubscription' , None , SpotDatafeedSubscription , verb = 'POST' ) def create_spot_datafeed_subscription ( self , bucket , prefix ) : params = { 'Bucket' : bucket } if prefix : params [ 'Prefix' ] = prefix return self . get_object ( 'CreateSpotDatafeedSubscription' , params , SpotDatafeedSubscription , verb = 'POST' ) def delete_spot_datafeed_subscription ( self ) : return self . get_status ( 'DeleteSpotDatafeedSubscription' , None , verb = 'POST' ) def get_all_zones ( self , zones = None , filters = None ) : params = { } if zones : self . build_list_params ( params , zones , 'ZoneName' ) if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeAvailabilityZones' , params , [ ( 'item' , Zone ) ] , verb = 'POST' ) def get_all_addresses ( self , addresses = None , filters = None , allocation_ids = None ) : params = { } if addresses : self . build_list_params ( params , addresses , 'PublicIp' ) if allocation_ids : self . build_list_params ( params , allocation_ids , 'AllocationId' ) if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeAddresses' , params , [ ( 'item' , Address ) ] , verb = 'POST' ) def allocate_address ( self , domain = None ) : params = { } if domain is not None : params [ 'Domain' ] = domain return self . get_object ( 'AllocateAddress' , params , Address , verb = 'POST' ) def associate_address ( self , instance_id , public_ip = None , allocation_id = None ) : params = { 'InstanceId' : instance_id } if public_ip is not None : params [ 'PublicIp' ] = public_ip elif allocation_id is not None : params [ 'AllocationId' ] = allocation_id return self . get_status ( 'AssociateAddress' , params , verb = 'POST' ) def disassociate_address ( self , public_ip = None , association_id = None ) : params = { } if public_ip is not None : params [ 'PublicIp' ] = public_ip elif association_id is not None : params [ 'AssociationId' ] = association_id return self . get_status ( 'DisassociateAddress' , params , verb = 'POST' ) def release_address ( self , public_ip = None , allocation_id = None ) : params = { } if public_ip is not None : params [ 'PublicIp' ] = public_ip elif allocation_id is not None : params [ 'AllocationId' ] = allocation_id return self . get_status ( 'ReleaseAddress' , params , verb = 'POST' ) def get_all_volumes ( self , volume_ids = None , filters = None ) : params = { } if volume_ids : self . build_list_params ( params , volume_ids , 'VolumeId' ) if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeVolumes' , params , [ ( 'item' , Volume ) ] , verb = 'POST' ) def create_volume ( self , size , zone , snapshot = None ) : if isinstance ( zone , Zone ) : zone = zone . name params = { 'AvailabilityZone' : zone } if size : params [ 'Size' ] = size if snapshot : if isinstance ( snapshot , Snapshot ) : snapshot = snapshot . id params [ 'SnapshotId' ] = snapshot return self . get_object ( 'CreateVolume' , params , Volume , verb = 'POST' ) def delete_volume ( self , volume_id ) : params = { 'VolumeId' : volume_id } return self . get_status ( 'DeleteVolume' , params , verb = 'POST' ) def attach_volume ( self , volume_id , instance_id , device ) : params = { 'InstanceId' : instance_id , : volume_id , : device } return self . get_status ( 'AttachVolume' , params , verb = 'POST' ) def detach_volume ( self , volume_id , instance_id = None , device = None , force = False ) : params = { 'VolumeId' : volume_id } if instance_id : params [ 'InstanceId' ] = instance_id if device : params [ 'Device' ] = device if force : params [ 'Force' ] = 'true' return self . get_status ( 'DetachVolume' , params , verb = 'POST' ) def get_all_snapshots ( self , snapshot_ids = None , owner = None , restorable_by = None , filters = None ) : params = { } if snapshot_ids : self . build_list_params ( params , snapshot_ids , 'SnapshotId' ) if owner : params [ 'Owner' ] = owner if restorable_by : params [ 'RestorableBy' ] = restorable_by if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeSnapshots' , params , [ ( 'item' , Snapshot ) ] , verb = 'POST' ) def create_snapshot ( self , volume_id , description = None ) : params = { 'VolumeId' : volume_id } if description : params [ 'Description' ] = description [ 0 : 255 ] snapshot = self . get_object ( 'CreateSnapshot' , params , Snapshot , verb = 'POST' ) volume = self . get_all_volumes ( [ volume_id ] ) [ 0 ] volume_name = volume . tags . get ( 'Name' ) if volume_name : snapshot . add_tag ( 'Name' , volume_name ) return snapshot def delete_snapshot ( self , snapshot_id ) : params = { 'SnapshotId' : snapshot_id } return self . get_status ( 'DeleteSnapshot' , params , verb = 'POST' ) def trim_snapshots ( self , hourly_backups = 8 , daily_backups = 7 , weekly_backups = 4 ) : now = datetime . utcnow ( ) last_hour = datetime ( now . year , now . month , now . day , now . hour ) last_midnight = datetime ( now . year , now . month , now . day ) last_sunday = datetime ( now . year , now . month , now . day ) - timedelta ( days = ( now . weekday ( ) + 1 ) % 7 ) start_of_month = datetime ( now . year , now . month , 1 ) target_backup_times = [ ] oldest_snapshot_date = datetime ( 2007 , 1 , 1 ) for hour in range ( 0 , hourly_backups ) : target_backup_times . append ( last_hour - timedelta ( hours = hour ) ) for day in range ( 0 , daily_backups ) : target_backup_times . append ( last_midnight - timedelta ( days = day ) ) for week in range ( 0 , weekly_backups ) : target_backup_times . append ( last_sunday - timedelta ( weeks = week ) ) one_day = timedelta ( days = 1 ) while start_of_month > oldest_snapshot_date : target_backup_times . append ( start_of_month ) start_of_month -= one_day start_of_month = datetime ( start_of_month . year , start_of_month . month , 1 ) temp = [ ] for t in target_backup_times : if temp . __contains__ ( t ) == False : temp . append ( t ) target_backup_times = temp target_backup_times . sort ( ) all_snapshots = self . get_all_snapshots ( owner = 'self' ) all_snapshots . sort ( cmp = lambda x , y : cmp ( x . start_time , y . start_time ) ) snaps_for_each_volume = { } for snap in all_snapshots : volume_name = snap . tags . get ( 'Name' ) if volume_name : snaps_for_volume = snaps_for_each_volume . get ( volume_name ) if not snaps_for_volume : snaps_for_volume = [ ] snaps_for_each_volume [ volume_name ] = snaps_for_volume snaps_for_volume . append ( snap ) for volume_name in snaps_for_each_volume : snaps = snaps_for_each_volume [ volume_name ] snaps = snaps [ : - 1 ] time_period_number = 0 snap_found_for_this_time_period = False for snap in snaps : check_this_snap = True while check_this_snap and time_period_number < target_backup_times . __len__ ( ) : snap_date = datetime . strptime ( snap . start_time , ) if snap_date < target_backup_times [ time_period_number ] : if snap_found_for_this_time_period == True : if not snap . tags . get ( 'preserve_snapshot' ) : try : self . delete_snapshot ( snap . id ) boto . log . info ( 'Trimmed snapshot %s (%s)' % ( snap . tags [ 'Name' ] , snap . start_time ) ) except EC2ResponseError : boto . log . error ( 'Attempt to trim snapshot %s (%s) failed. Possible result of a race condition with trimming on another server?' % ( snap . tags [ 'Name' ] , snap . start_time ) ) else : snap_found_for_this_time_period = True check_this_snap = False else : time_period_number += 1 snap_found_for_this_time_period = False def get_snapshot_attribute ( self , snapshot_id , attribute = 'createVolumePermission' ) : params = { 'Attribute' : attribute } if snapshot_id : params [ 'SnapshotId' ] = snapshot_id return self . get_object ( 'DescribeSnapshotAttribute' , params , SnapshotAttribute , verb = 'POST' ) def modify_snapshot_attribute ( self , snapshot_id , attribute = 'createVolumePermission' , operation = 'add' , user_ids = None , groups = None ) : params = { 'SnapshotId' : snapshot_id , : attribute , : operation } if user_ids : self . build_list_params ( params , user_ids , 'UserId' ) if groups : self . build_list_params ( params , groups , 'UserGroup' ) return self . get_status ( 'ModifySnapshotAttribute' , params , verb = 'POST' ) def reset_snapshot_attribute ( self , snapshot_id , attribute = 'createVolumePermission' ) : params = { 'SnapshotId' : snapshot_id , : attribute } return self . get_status ( 'ResetSnapshotAttribute' , params , verb = 'POST' ) def get_all_key_pairs ( self , keynames = None , filters = None ) : params = { } if keynames : self . build_list_params ( params , keynames , 'KeyName' ) if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeKeyPairs' , params , [ ( 'item' , KeyPair ) ] , verb = 'POST' ) def get_key_pair ( self , keyname ) : try : return self . get_all_key_pairs ( keynames = [ keyname ] ) [ 0 ] except self . ResponseError , e : if e . code == 'InvalidKeyPair.NotFound' : return None else : raise def create_key_pair ( self , key_name ) : params = { 'KeyName' : key_name } return self . get_object ( 'CreateKeyPair' , params , KeyPair , verb = 'POST' ) def delete_key_pair ( self , key_name ) : params = { 'KeyName' : key_name } return self . get_status ( 'DeleteKeyPair' , params , verb = 'POST' ) def import_key_pair ( self , key_name , public_key_material ) : public_key_material = base64 . b64encode ( public_key_material ) params = { 'KeyName' : key_name , : public_key_material } return self . get_object ( 'ImportKeyPair' , params , KeyPair , verb = 'POST' ) def get_all_security_groups ( self , groupnames = None , group_ids = None , filters = None ) : params = { } if groupnames is not None : self . build_list_params ( params , groupnames , 'GroupName' ) if group_ids is not None : self . build_list_params ( params , group_ids , 'GroupId' ) if filters is not None : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeSecurityGroups' , params , [ ( 'item' , SecurityGroup ) ] , verb = 'POST' ) def create_security_group ( self , name , description , vpc_id = None ) : params = { : name , : description } if vpc_id is not None : params [ 'VpcId' ] = vpc_id group = self . get_object ( 'CreateSecurityGroup' , params , SecurityGroup , verb = 'POST' ) group . name = name group . description = description return group def delete_security_group ( self , name = None , group_id = None ) : params = { } if name is not None : params [ 'GroupName' ] = name elif group_id is not None : params [ 'GroupId' ] = group_id return self . get_status ( 'DeleteSecurityGroup' , params , verb = 'POST' ) def authorize_security_group_deprecated ( self , group_name , src_security_group_name = None , src_security_group_owner_id = None , ip_protocol = None , from_port = None , to_port = None , cidr_ip = None ) : params = { 'GroupName' : group_name } if src_security_group_name : params [ 'SourceSecurityGroupName' ] = src_security_group_name if src_security_group_owner_id : params [ 'SourceSecurityGroupOwnerId' ] = src_security_group_owner_id if ip_protocol : params [ 'IpProtocol' ] = ip_protocol if from_port : params [ 'FromPort' ] = from_port if to_port : params [ 'ToPort' ] = to_port if cidr_ip : params [ 'CidrIp' ] = cidr_ip return self . get_status ( 'AuthorizeSecurityGroupIngress' , params ) def authorize_security_group ( self , group_name = None , src_security_group_name = None , src_security_group_owner_id = None , ip_protocol = None , from_port = None , to_port = None , cidr_ip = None , group_id = None , src_security_group_group_id = None ) : if src_security_group_name : if from_port is None and to_port is None and ip_protocol is None : return self . authorize_security_group_deprecated ( group_name , src_security_group_name , src_security_group_owner_id ) params = { } if group_name : params [ 'GroupName' ] = group_name if group_id : params [ 'GroupId' ] = group_id if src_security_group_name : param_name = 'IpPermissions.1.Groups.1.GroupName' params [ param_name ] = src_security_group_name if src_security_group_owner_id : param_name = 'IpPermissions.1.Groups.1.UserId' params [ param_name ] = src_security_group_owner_id if src_security_group_group_id : param_name = 'IpPermissions.1.Groups.1.GroupId' params [ param_name ] = src_security_group_group_id if ip_protocol : params [ 'IpPermissions.1.IpProtocol' ] = ip_protocol if from_port is not None : params [ 'IpPermissions.1.FromPort' ] = from_port if to_port is not None : params [ 'IpPermissions.1.ToPort' ] = to_port if cidr_ip : params [ 'IpPermissions.1.IpRanges.1.CidrIp' ] = cidr_ip return self . get_status ( 'AuthorizeSecurityGroupIngress' , params , verb = 'POST' ) def authorize_security_group_egress ( self , group_id , ip_protocol , from_port = None , to_port = None , src_group_id = None , cidr_ip = None ) : params = { : group_id , : ip_protocol } if from_port is not None : params [ 'IpPermissions.1.FromPort' ] = from_port if to_port is not None : params [ 'IpPermissions.1.ToPort' ] = to_port if src_group_id is not None : params [ 'IpPermissions.1.Groups.1.GroupId' ] = src_group_id if cidr_ip is not None : params [ 'IpPermissions.1.IpRanges.1.CidrIp' ] = cidr_ip return self . get_status ( 'AuthorizeSecurityGroupEgress' , params , verb = 'POST' ) def revoke_security_group_deprecated ( self , group_name , src_security_group_name = None , src_security_group_owner_id = None , ip_protocol = None , from_port = None , to_port = None , cidr_ip = None ) : params = { 'GroupName' : group_name } if src_security_group_name : params [ 'SourceSecurityGroupName' ] = src_security_group_name if src_security_group_owner_id : params [ 'SourceSecurityGroupOwnerId' ] = src_security_group_owner_id if ip_protocol : params [ 'IpProtocol' ] = ip_protocol if from_port : params [ 'FromPort' ] = from_port if to_port : params [ 'ToPort' ] = to_port if cidr_ip : params [ 'CidrIp' ] = cidr_ip return self . get_status ( 'RevokeSecurityGroupIngress' , params ) def revoke_security_group ( self , group_name = None , src_security_group_name = None , src_security_group_owner_id = None , ip_protocol = None , from_port = None , to_port = None , cidr_ip = None , group_id = None , src_security_group_group_id = None ) : if src_security_group_name : if from_port is None and to_port is None and ip_protocol is None : return self . revoke_security_group_deprecated ( group_name , src_security_group_name , src_security_group_owner_id ) params = { } if group_name is not None : params [ 'GroupName' ] = group_name if group_id is not None : params [ 'GroupId' ] = group_id if src_security_group_name : param_name = 'IpPermissions.1.Groups.1.GroupName' params [ param_name ] = src_security_group_name if src_security_group_group_id : param_name = 'IpPermissions.1.Groups.1.GroupId' params [ param_name ] = src_security_group_group_id if src_security_group_owner_id : param_name = 'IpPermissions.1.Groups.1.UserId' params [ param_name ] = src_security_group_owner_id if ip_protocol : params [ 'IpPermissions.1.IpProtocol' ] = ip_protocol if from_port is not None : params [ 'IpPermissions.1.FromPort' ] = from_port if to_port is not None : params [ 'IpPermissions.1.ToPort' ] = to_port if cidr_ip : params [ 'IpPermissions.1.IpRanges.1.CidrIp' ] = cidr_ip return self . get_status ( 'RevokeSecurityGroupIngress' , params , verb = 'POST' ) def revoke_security_group_egress ( self , group_id , ip_protocol , from_port = None , to_port = None , src_group_id = None , cidr_ip = None ) : params = { } if group_id : params [ 'GroupId' ] = group_id if ip_protocol : params [ 'IpPermissions.1.IpProtocol' ] = ip_protocol if from_port is not None : params [ 'IpPermissions.1.FromPort' ] = from_port if to_port is not None : params [ 'IpPermissions.1.ToPort' ] = to_port if src_group_id is not None : params [ 'IpPermissions.1.Groups.1.GroupId' ] = src_group_id if cidr_ip : params [ 'IpPermissions.1.IpRanges.1.CidrIp' ] = cidr_ip return self . get_status ( 'RevokeSecurityGroupEgress' , params , verb = 'POST' ) def get_all_regions ( self , region_names = None , filters = None ) : params = { } if region_names : self . build_list_params ( params , region_names , 'RegionName' ) if filters : self . build_filter_params ( params , filters ) regions = self . get_list ( 'DescribeRegions' , params , [ ( 'item' , RegionInfo ) ] , verb = 'POST' ) for region in regions : region . connection_cls = EC2Connection return regions def get_all_reserved_instances_offerings ( self , reserved_instances_id = None , instance_type = None , availability_zone = None , product_description = None , filters = None ) : params = { } if reserved_instances_id : params [ 'ReservedInstancesId' ] = reserved_instances_id if instance_type : params [ 'InstanceType' ] = instance_type if availability_zone : params [ 'AvailabilityZone' ] = availability_zone if product_description : params [ 'ProductDescription' ] = product_description if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeReservedInstancesOfferings' , params , [ ( 'item' , ReservedInstancesOffering ) ] , verb = 'POST' ) def get_all_reserved_instances ( self , reserved_instances_id = None , filters = None ) : params = { } if reserved_instances_id : self . build_list_params ( params , reserved_instances_id , ) if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeReservedInstances' , params , [ ( 'item' , ReservedInstance ) ] , verb = 'POST' ) def purchase_reserved_instance_offering ( self , reserved_instances_offering_id , instance_count = 1 ) : params = { : reserved_instances_offering_id , : instance_count } return self . get_object ( 'PurchaseReservedInstancesOffering' , params , ReservedInstance , verb = 'POST' ) def monitor_instances ( self , instance_ids ) : params = { } self . build_list_params ( params , instance_ids , 'InstanceId' ) return self . get_list ( 'MonitorInstances' , params , [ ( 'item' , InstanceInfo ) ] , verb = 'POST' ) def monitor_instance ( self , instance_id ) : return self . monitor_instances ( [ instance_id ] ) def unmonitor_instances ( self , instance_ids ) : params = { } self . build_list_params ( params , instance_ids , 'InstanceId' ) return self . get_list ( 'UnmonitorInstances' , params , [ ( 'item' , InstanceInfo ) ] , verb = 'POST' ) def unmonitor_instance ( self , instance_id ) : return self . unmonitor_instances ( [ instance_id ] ) def bundle_instance ( self , instance_id , s3_bucket , s3_prefix , s3_upload_policy ) : params = { 'InstanceId' : instance_id , : s3_bucket , : s3_prefix , : s3_upload_policy } s3auth = boto . auth . get_auth_handler ( None , boto . config , self . provider , [ 's3' ] ) params [ 'Storage.S3.AWSAccessKeyId' ] = self . aws_access_key_id signature = s3auth . sign_string ( s3_upload_policy ) params [ 'Storage.S3.UploadPolicySignature' ] = signature return self . get_object ( 'BundleInstance' , params , BundleInstanceTask , verb = 'POST' ) def get_all_bundle_tasks ( self , bundle_ids = None , filters = None ) : params = { } if bundle_ids : self . build_list_params ( params , bundle_ids , 'BundleId' ) if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeBundleTasks' , params , [ ( 'item' , BundleInstanceTask ) ] , verb = 'POST' ) def cancel_bundle_task ( self , bundle_id ) : params = { 'BundleId' : bundle_id } return self . get_object ( 'CancelBundleTask' , params , BundleInstanceTask , verb = 'POST' ) def get_password_data ( self , instance_id ) : params = { 'InstanceId' : instance_id } rs = self . get_object ( 'GetPasswordData' , params , ResultSet , verb = 'POST' ) return rs . passwordData def get_all_placement_groups ( self , groupnames = None , filters = None ) : params = { } if groupnames : self . build_list_params ( params , groupnames , 'GroupName' ) if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribePlacementGroups' , params , [ ( 'item' , PlacementGroup ) ] , verb = 'POST' ) def create_placement_group ( self , name , strategy = 'cluster' ) : params = { 'GroupName' : name , 'Strategy' : strategy } group = self . get_status ( 'CreatePlacementGroup' , params , verb = 'POST' ) return group def delete_placement_group ( self , name ) : params = { 'GroupName' : name } return self . get_status ( 'DeletePlacementGroup' , params , verb = 'POST' ) def build_tag_param_list ( self , params , tags ) : keys = tags . keys ( ) keys . sort ( ) i = 1 for key in keys : value = tags [ key ] params [ 'Tag.%d.Key' % i ] = key if value is not None : params [ 'Tag.%d.Value' % i ] = value i += 1 def get_all_tags ( self , filters = None ) : params = { } if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeTags' , params , [ ( 'item' , Tag ) ] , verb = 'POST' ) def create_tags ( self , resource_ids , tags ) : params = { } self . build_list_params ( params , resource_ids , 'ResourceId' ) self . build_tag_param_list ( params , tags ) return self . get_status ( 'CreateTags' , params , verb = 'POST' ) def delete_tags ( self , resource_ids , tags ) : if isinstance ( tags , list ) : tags = { } . fromkeys ( tags , None ) params = { } self . build_list_params ( params , resource_ids , 'ResourceId' ) self . build_tag_param_list ( params , tags ) return self . get_status ( 'DeleteTags' , params , verb = 'POST' ) def get_all_network_interfaces ( self , filters = None ) : params = { } if filters : self . build_filter_params ( params , filters ) return self . get_list ( 'DescribeNetworkInterfaces' , params , [ ( 'item' , NetworkInterface ) ] , verb = 'POST' ) def create_network_interface ( self , subnet_id , private_ip_address = None , description = None , groups = None ) : params = { 'SubnetId' : subnet_id } if private_ip_address : params [ 'PrivateIpAddress' ] = private_ip_address if description : params [ 'Description' ] = description if groups : ids = [ ] for group in groups : if isinstance ( group , SecurityGroup ) : ids . append ( group . id ) else : ids . append ( group ) self . build_list_params ( params , ids , 'SecurityGroupId' ) return self . get_object ( 'CreateNetworkInterface' , params , NetworkInterface , verb = 'POST' ) def attach_network_interface ( self , network_interface_id , instance_id , device_index ) : params = { 'NetworkInterfaceId' : network_interface_id , : instance_id , : device_index } return self . get_status ( 'AttachNetworkInterface' , params , verb = 'POST' ) def detach_network_interface ( self , network_interface_id , force = False ) : params = { 'NetworkInterfaceId' : network_interface_id } if force : params [ 'Force' ] = 'true' return self . get_status ( 'DetachNetworkInterface' , params , verb = 'POST' ) def delete_network_interface ( self , network_interface_id ) : params = { 'NetworkInterfaceId' : network_interface_id } return self . get_status ( 'DeleteNetworkInterface' , params , verb = 'POST' )
