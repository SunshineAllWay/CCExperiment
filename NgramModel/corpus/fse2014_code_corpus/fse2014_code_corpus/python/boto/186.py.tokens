from boto . ec2 . ec2object import TaggedEC2Object from boto . ec2 . launchspecification import LaunchSpecification class SpotInstanceStateFault ( object ) : def __init__ ( self , code = None , message = None ) : self . code = code self . message = message def __repr__ ( self ) : return '(%s, %s)' % ( self . code , self . message ) def startElement ( self , name , attrs , connection ) : return None def endElement ( self , name , value , connection ) : if name == 'code' : self . code = value elif name == 'message' : self . message = value setattr ( self , name , value ) class SpotInstanceRequest ( TaggedEC2Object ) : def __init__ ( self , connection = None ) : TaggedEC2Object . __init__ ( self , connection ) self . id = None self . price = None self . type = None self . state = None self . fault = None self . valid_from = None self . valid_until = None self . launch_group = None self . product_description = None self . availability_zone_group = None self . create_time = None self . launch_specification = None self . instance_id = None def __repr__ ( self ) : return 'SpotInstanceRequest:%s' % self . id def startElement ( self , name , attrs , connection ) : retval = TaggedEC2Object . startElement ( self , name , attrs , connection ) if retval is not None : return retval if name == 'launchSpecification' : self . launch_specification = LaunchSpecification ( connection ) return self . launch_specification elif name == 'fault' : self . fault = SpotInstanceStateFault ( ) return self . fault else : return None def endElement ( self , name , value , connection ) : if name == 'spotInstanceRequestId' : self . id = value elif name == 'spotPrice' : self . price = float ( value ) elif name == 'type' : self . type = value elif name == 'state' : self . state = value elif name == 'productDescription' : self . product_description = value elif name == 'validFrom' : self . valid_from = value elif name == 'validUntil' : self . valid_until = value elif name == 'launchGroup' : self . launch_group = value elif name == 'availabilityZoneGroup' : self . availability_zone_group = value elif name == 'createTime' : self . create_time = value elif name == 'instanceId' : self . instance_id = value else : setattr ( self , name , value ) def cancel ( self ) : self . connection . cancel_spot_instance_requests ( [ self . id ] )
