import unittest import time import StringIO from boto . s3 . connection import S3Connection from boto . s3 . key import Key from boto . exception import S3ResponseError class S3KeyTest ( unittest . TestCase ) : def setUp ( self ) : self . conn = S3Connection ( ) self . bucket_name = 'keytest-%d' % int ( time . time ( ) ) self . bucket = self . conn . create_bucket ( self . bucket_name ) def tearDown ( self ) : for key in self . bucket : key . delete ( ) self . bucket . delete ( ) def test_set_contents_as_file ( self ) : content = "01234567890123456789" sfp = StringIO . StringIO ( content ) k = self . bucket . new_key ( "k" ) k . set_contents_from_file ( sfp ) self . assertEqual ( k . size , 20 ) kn = self . bucket . new_key ( "k" ) ks = kn . get_contents_as_string ( ) self . assertEqual ( ks , content ) sfp . seek ( 5 ) k = self . bucket . new_key ( "k" ) k . set_contents_from_file ( sfp ) self . assertEqual ( k . size , 15 ) kn = self . bucket . new_key ( "k" ) ks = kn . get_contents_as_string ( ) self . assertEqual ( ks , content [ 5 : ] ) sfp . seek ( 5 ) k = self . bucket . new_key ( "k" ) k . set_contents_from_file ( sfp , size = 5 ) self . assertEqual ( k . size , 5 ) self . assertEqual ( sfp . tell ( ) , 10 ) kn = self . bucket . new_key ( "k" ) ks = kn . get_contents_as_string ( ) self . assertEqual ( ks , content [ 5 : 10 ] ) def test_set_contents_with_md5 ( self ) : content = "01234567890123456789" sfp = StringIO . StringIO ( content ) k = self . bucket . new_key ( "k" ) good_md5 = k . compute_md5 ( sfp ) k . set_contents_from_file ( sfp , md5 = good_md5 ) kn = self . bucket . new_key ( "k" ) ks = kn . get_contents_as_string ( ) self . assertEqual ( ks , content ) sfp . seek ( 5 ) k = self . bucket . new_key ( "k" ) good_md5 = k . compute_md5 ( sfp , size = 5 ) k . set_contents_from_file ( sfp , size = 5 , md5 = good_md5 ) self . assertEqual ( sfp . tell ( ) , 10 ) kn = self . bucket . new_key ( "k" ) ks = kn . get_contents_as_string ( ) self . assertEqual ( ks , content [ 5 : 10 ] ) k = self . bucket . new_key ( "k" ) sfp . seek ( 0 ) hexdig , base64 = k . compute_md5 ( sfp ) bad_md5 = ( hexdig , base64 [ 3 : ] ) try : k . set_contents_from_file ( sfp , md5 = bad_md5 ) self . fail ( "should fail with bad md5" ) except S3ResponseError : pass def test_get_contents_with_md5 ( self ) : content = "01234567890123456789" sfp = StringIO . StringIO ( content ) k = self . bucket . new_key ( "k" ) k . set_contents_from_file ( sfp ) kn = self . bucket . new_key ( "k" ) s = kn . get_contents_as_string ( ) self . assertEqual ( kn . md5 , k . md5 ) self . assertEqual ( s , content ) def test_file_callback ( self ) : def callback ( wrote , total ) : self . my_cb_cnt += 1 self . assertNotEqual ( wrote , self . my_cb_last , "called twice with same value" ) self . my_cb_last = wrote self . my_cb_cnt = 0 self . my_cb_last = None k = self . bucket . new_key ( "k" ) k . BufferSize = 2 sfp = StringIO . StringIO ( "" ) k . set_contents_from_file ( sfp , cb = callback , num_cb = 10 ) self . assertEqual ( self . my_cb_cnt , 1 ) self . assertEqual ( self . my_cb_last , 0 ) sfp . close ( ) self . my_cb_cnt = 0 self . my_cb_last = None s = k . get_contents_as_string ( cb = callback ) self . assertEqual ( self . my_cb_cnt , 1 ) self . assertEqual ( self . my_cb_last , 0 ) content = "01234567890123456789" sfp = StringIO . StringIO ( content ) self . my_cb_cnt = 0 self . my_cb_last = None k = self . bucket . new_key ( "k" ) k . set_contents_from_file ( sfp , cb = callback , num_cb = 10 ) self . assertEqual ( self . my_cb_cnt , 2 ) self . assertEqual ( self . my_cb_last , 20 ) self . my_cb_cnt = 0 self . my_cb_last = None s = k . get_contents_as_string ( cb = callback ) self . assertEqual ( self . my_cb_cnt , 2 ) self . assertEqual ( self . my_cb_last , 20 ) self . assertEqual ( s , content ) sfp . seek ( 0 ) self . my_cb_cnt = 0 self . my_cb_last = None k = self . bucket . new_key ( "k" ) k . BufferSize = 2 k . set_contents_from_file ( sfp , cb = callback , num_cb = - 1 ) self . assertEqual ( self . my_cb_cnt , 11 ) self . assertEqual ( self . my_cb_last , 20 ) self . my_cb_cnt = 0 self . my_cb_last = None s = k . get_contents_as_string ( cb = callback , num_cb = - 1 ) self . assertEqual ( self . my_cb_cnt , 11 ) self . assertEqual ( self . my_cb_last , 20 ) self . assertEqual ( s , content ) sfp . seek ( 0 ) self . my_cb_cnt = 0 self . my_cb_last = None k = self . bucket . new_key ( "k" ) k . BufferSize = 2 k . set_contents_from_file ( sfp , cb = callback , num_cb = 1 ) self . assertTrue ( self . my_cb_cnt <= 2 ) self . assertEqual ( self . my_cb_last , 20 ) self . my_cb_cnt = 0 self . my_cb_last = None s = k . get_contents_as_string ( cb = callback , num_cb = 1 ) self . assertTrue ( self . my_cb_cnt <= 2 ) self . assertEqual ( self . my_cb_last , 20 ) self . assertEqual ( s , content ) sfp . seek ( 0 ) self . my_cb_cnt = 0 self . my_cb_last = None k = self . bucket . new_key ( "k" ) k . BufferSize = 2 k . set_contents_from_file ( sfp , cb = callback , num_cb = 2 ) self . assertTrue ( self . my_cb_cnt <= 2 ) self . assertEqual ( self . my_cb_last , 20 ) self . my_cb_cnt = 0 self . my_cb_last = None s = k . get_contents_as_string ( cb = callback , num_cb = 2 ) self . assertTrue ( self . my_cb_cnt <= 2 ) self . assertEqual ( self . my_cb_last , 20 ) self . assertEqual ( s , content ) sfp . seek ( 0 ) self . my_cb_cnt = 0 self . my_cb_last = None k = self . bucket . new_key ( "k" ) k . BufferSize = 2 k . set_contents_from_file ( sfp , cb = callback , num_cb = 3 ) self . assertTrue ( self . my_cb_cnt <= 3 ) self . assertEqual ( self . my_cb_last , 20 ) self . my_cb_cnt = 0 self . my_cb_last = None s = k . get_contents_as_string ( cb = callback , num_cb = 3 ) self . assertTrue ( self . my_cb_cnt <= 3 ) self . assertEqual ( self . my_cb_last , 20 ) self . assertEqual ( s , content ) sfp . seek ( 0 ) self . my_cb_cnt = 0 self . my_cb_last = None k = self . bucket . new_key ( "k" ) k . BufferSize = 2 k . set_contents_from_file ( sfp , cb = callback , num_cb = 4 ) self . assertTrue ( self . my_cb_cnt <= 4 ) self . assertEqual ( self . my_cb_last , 20 ) self . my_cb_cnt = 0 self . my_cb_last = None s = k . get_contents_as_string ( cb = callback , num_cb = 4 ) self . assertTrue ( self . my_cb_cnt <= 4 ) self . assertEqual ( self . my_cb_last , 20 ) self . assertEqual ( s , content ) sfp . seek ( 0 ) self . my_cb_cnt = 0 self . my_cb_last = None k = self . bucket . new_key ( "k" ) k . BufferSize = 2 k . set_contents_from_file ( sfp , cb = callback , num_cb = 6 ) self . assertTrue ( self . my_cb_cnt <= 6 ) self . assertEqual ( self . my_cb_last , 20 ) self . my_cb_cnt = 0 self . my_cb_last = None s = k . get_contents_as_string ( cb = callback , num_cb = 6 ) self . assertTrue ( self . my_cb_cnt <= 6 ) self . assertEqual ( self . my_cb_last , 20 ) self . assertEqual ( s , content ) sfp . seek ( 0 ) self . my_cb_cnt = 0 self . my_cb_last = None k = self . bucket . new_key ( "k" ) k . BufferSize = 2 k . set_contents_from_file ( sfp , cb = callback , num_cb = 10 ) self . assertTrue ( self . my_cb_cnt <= 10 ) self . assertEqual ( self . my_cb_last , 20 ) self . my_cb_cnt = 0 self . my_cb_last = None s = k . get_contents_as_string ( cb = callback , num_cb = 10 ) self . assertTrue ( self . my_cb_cnt <= 10 ) self . assertEqual ( self . my_cb_last , 20 ) self . assertEqual ( s , content ) sfp . seek ( 0 ) self . my_cb_cnt = 0 self . my_cb_last = None k = self . bucket . new_key ( "k" ) k . BufferSize = 2 k . set_contents_from_file ( sfp , cb = callback , num_cb = 1000 ) self . assertTrue ( self . my_cb_cnt <= 1000 ) self . assertEqual ( self . my_cb_last , 20 ) self . my_cb_cnt = 0 self . my_cb_last = None s = k . get_contents_as_string ( cb = callback , num_cb = 1000 ) self . assertTrue ( self . my_cb_cnt <= 1000 ) self . assertEqual ( self . my_cb_last , 20 ) self . assertEqual ( s , content )
