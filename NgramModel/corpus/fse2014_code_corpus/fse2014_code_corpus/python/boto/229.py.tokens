class Blob ( object ) : def __init__ ( self , value = None , file = None , id = None ) : self . _file = file self . id = id self . value = value @ property def file ( self ) : from StringIO import StringIO if self . _file : f = self . _file else : f = StringIO ( self . value ) return f def __str__ ( self ) : return unicode ( self ) . encode ( 'utf-8' ) def __unicode__ ( self ) : if hasattr ( self . file , "get_contents_as_string" ) : value = self . file . get_contents_as_string ( ) else : value = self . file . getvalue ( ) if isinstance ( value , unicode ) : return value else : return value . decode ( 'utf-8' ) def read ( self ) : if hasattr ( self . file , "get_contents_as_string" ) : return self . file . get_contents_as_string ( ) else : return self . file . read ( ) def readline ( self ) : return self . file . readline ( ) def next ( self ) : return self . file . next ( ) def __iter__ ( self ) : return iter ( self . file ) @ property def size ( self ) : if self . _file : return self . _file . size elif self . value : return len ( self . value ) else : return 0
