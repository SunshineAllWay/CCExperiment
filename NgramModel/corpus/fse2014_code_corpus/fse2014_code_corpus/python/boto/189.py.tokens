from boto . ec2 . ec2object import EC2Object , TaggedEC2Object from boto . ec2 . blockdevicemapping import BlockDeviceMapping class ProductCodes ( list ) : def startElement ( self , name , attrs , connection ) : pass def endElement ( self , name , value , connection ) : if name == 'productCode' : self . append ( value ) class Image ( TaggedEC2Object ) : def __init__ ( self , connection = None ) : TaggedEC2Object . __init__ ( self , connection ) self . id = None self . location = None self . state = None self . ownerId = None self . owner_id = None self . owner_alias = None self . is_public = False self . architecture = None self . platform = None self . type = None self . kernel_id = None self . ramdisk_id = None self . name = None self . description = None self . product_codes = ProductCodes ( ) self . block_device_mapping = None self . root_device_type = None self . root_device_name = None self . virtualization_type = None self . hypervisor = None self . instance_lifecycle = None def __repr__ ( self ) : return 'Image:%s' % self . id def startElement ( self , name , attrs , connection ) : retval = TaggedEC2Object . startElement ( self , name , attrs , connection ) if retval is not None : return retval if name == 'blockDeviceMapping' : self . block_device_mapping = BlockDeviceMapping ( ) return self . block_device_mapping elif name == 'productCodes' : return self . product_codes else : return None def endElement ( self , name , value , connection ) : if name == 'imageId' : self . id = value elif name == 'imageLocation' : self . location = value elif name == 'imageState' : self . state = value elif name == 'imageOwnerId' : self . ownerId = value self . owner_id = value elif name == 'isPublic' : if value == 'false' : self . is_public = False elif value == 'true' : self . is_public = True else : raise Exception ( % ( value , self . id ) ) elif name == 'architecture' : self . architecture = value elif name == 'imageType' : self . type = value elif name == 'kernelId' : self . kernel_id = value elif name == 'ramdiskId' : self . ramdisk_id = value elif name == 'imageOwnerAlias' : self . owner_alias = value elif name == 'platform' : self . platform = value elif name == 'name' : self . name = value elif name == 'description' : self . description = value elif name == 'rootDeviceType' : self . root_device_type = value elif name == 'rootDeviceName' : self . root_device_name = value elif name == 'virtualizationType' : self . virtualization_type = value elif name == 'hypervisor' : self . hypervisor = value elif name == 'instanceLifecycle' : self . instance_lifecycle = value else : setattr ( self , name , value ) def _update ( self , updated ) : self . __dict__ . update ( updated . __dict__ ) def update ( self , validate = False ) : rs = self . connection . get_all_images ( [ self . id ] ) if len ( rs ) > 0 : img = rs [ 0 ] if img . id == self . id : self . _update ( img ) elif validate : raise ValueError ( '%s is not a valid Image ID' % self . id ) return self . state def run ( self , min_count = 1 , max_count = 1 , key_name = None , security_groups = None , user_data = None , addressing_type = None , instance_type = 'm1.small' , placement = None , kernel_id = None , ramdisk_id = None , monitoring_enabled = False , subnet_id = None , block_device_map = None , disable_api_termination = False , instance_initiated_shutdown_behavior = None , private_ip_address = None , placement_group = None , security_group_ids = None ) : return self . connection . run_instances ( self . id , min_count , max_count , key_name , security_groups , user_data , addressing_type , instance_type , placement , kernel_id , ramdisk_id , monitoring_enabled , subnet_id , block_device_map , disable_api_termination , instance_initiated_shutdown_behavior , private_ip_address , placement_group , security_group_ids = security_group_ids ) def deregister ( self , delete_snapshot = False ) : return self . connection . deregister_image ( self . id , delete_snapshot ) def get_launch_permissions ( self ) : img_attrs = self . connection . get_image_attribute ( self . id , ) return img_attrs . attrs def set_launch_permissions ( self , user_ids = None , group_names = None ) : return self . connection . modify_image_attribute ( self . id , , , user_ids , group_names ) def remove_launch_permissions ( self , user_ids = None , group_names = None ) : return self . connection . modify_image_attribute ( self . id , , , user_ids , group_names ) def reset_launch_attributes ( self ) : return self . connection . reset_image_attribute ( self . id , ) def get_kernel ( self ) : img_attrs = self . connection . get_image_attribute ( self . id , 'kernel' ) return img_attrs . kernel def get_ramdisk ( self ) : img_attrs = self . connection . get_image_attribute ( self . id , 'ramdisk' ) return img_attrs . ramdisk class ImageAttribute : def __init__ ( self , parent = None ) : self . name = None self . kernel = None self . ramdisk = None self . attrs = { } def startElement ( self , name , attrs , connection ) : if name == 'blockDeviceMapping' : self . attrs [ 'block_device_mapping' ] = BlockDeviceMapping ( ) return self . attrs [ 'block_device_mapping' ] else : return None def endElement ( self , name , value , connection ) : if name == 'launchPermission' : self . name = 'launch_permission' elif name == 'group' : if self . attrs . has_key ( 'groups' ) : self . attrs [ 'groups' ] . append ( value ) else : self . attrs [ 'groups' ] = [ value ] elif name == 'userId' : if self . attrs . has_key ( 'user_ids' ) : self . attrs [ 'user_ids' ] . append ( value ) else : self . attrs [ 'user_ids' ] = [ value ] elif name == 'productCode' : if self . attrs . has_key ( 'product_codes' ) : self . attrs [ 'product_codes' ] . append ( value ) else : self . attrs [ 'product_codes' ] = [ value ] elif name == 'imageId' : self . image_id = value elif name == 'kernel' : self . kernel = value elif name == 'ramdisk' : self . ramdisk = value else : setattr ( self , name , value )
