import datetime from django . utils . timezone import is_aware , utc from django . utils . translation import ungettext , ugettext def timesince ( d , now = None ) : chunks = ( ( 60 * 60 * 24 * 365 , lambda n : ungettext ( 'year' , 'years' , n ) ) , ( 60 * 60 * 24 * 30 , lambda n : ungettext ( 'month' , 'months' , n ) ) , ( 60 * 60 * 24 * 7 , lambda n : ungettext ( 'week' , 'weeks' , n ) ) , ( 60 * 60 * 24 , lambda n : ungettext ( 'day' , 'days' , n ) ) , ( 60 * 60 , lambda n : ungettext ( 'hour' , 'hours' , n ) ) , ( 60 , lambda n : ungettext ( 'minute' , 'minutes' , n ) ) ) if not isinstance ( d , datetime . datetime ) : d = datetime . datetime ( d . year , d . month , d . day ) if now and not isinstance ( now , datetime . datetime ) : now = datetime . datetime ( now . year , now . month , now . day ) if not now : now = datetime . datetime . now ( utc if is_aware ( d ) else None ) delta = now - d since = delta . days * 24 * 60 * 60 + delta . seconds if since <= 0 : return u'0 ' + ugettext ( 'minutes' ) for i , ( seconds , name ) in enumerate ( chunks ) : count = since // seconds if count != 0 : break s = ugettext ( '%(number)d %(type)s' ) % { 'number' : count , 'type' : name ( count ) } if i + 1 < len ( chunks ) : seconds2 , name2 = chunks [ i + 1 ] count2 = ( since - ( seconds * count ) ) // seconds2 if count2 != 0 : s += ugettext ( ', %(number)d %(type)s' ) % { 'number' : count2 , 'type' : name2 ( count2 ) } return s def timeuntil ( d , now = None ) : if not now : now = datetime . datetime . now ( utc if is_aware ( d ) else None ) return timesince ( now , d )
