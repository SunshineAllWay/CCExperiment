import copy import sys from functools import update_wrapper from itertools import izip import django . db . models . manager from django . conf import settings from django . core . exceptions import ( ObjectDoesNotExist , MultipleObjectsReturned , FieldError , ValidationError , NON_FIELD_ERRORS ) from django . core import validators from django . db . models . fields import AutoField , FieldDoesNotExist from django . db . models . fields . related import ( ManyToOneRel , OneToOneField , add_lazy_relation ) from django . db import ( connections , router , transaction , DatabaseError , DEFAULT_DB_ALIAS ) from django . db . models . query import Q from django . db . models . query_utils import DeferredAttribute from django . db . models . deletion import Collector from django . db . models . options import Options from django . db . models import signals from django . db . models . loading import register_models , get_model from django . utils . translation import ugettext_lazy as _ from django . utils . functional import curry from django . utils . encoding import smart_str , force_unicode from django . utils . text import get_text_list , capfirst class ModelBase ( type ) : def __new__ ( cls , name , bases , attrs ) : super_new = super ( ModelBase , cls ) . __new__ parents = [ b for b in bases if isinstance ( b , ModelBase ) ] if not parents : return super_new ( cls , name , bases , attrs ) module = attrs . pop ( '__module__' ) new_class = super_new ( cls , name , bases , { '__module__' : module } ) attr_meta = attrs . pop ( 'Meta' , None ) abstract = getattr ( attr_meta , 'abstract' , False ) if not attr_meta : meta = getattr ( new_class , 'Meta' , None ) else : meta = attr_meta base_meta = getattr ( new_class , '_meta' , None ) if getattr ( meta , 'app_label' , None ) is None : model_module = sys . modules [ new_class . __module__ ] kwargs = { "app_label" : model_module . __name__ . split ( '.' ) [ - 2 ] } else : kwargs = { } new_class . add_to_class ( '_meta' , Options ( meta , ** kwargs ) ) if not abstract : new_class . add_to_class ( 'DoesNotExist' , subclass_exception ( 'DoesNotExist' , tuple ( x . DoesNotExist for x in parents if hasattr ( x , '_meta' ) and not x . _meta . abstract ) or ( ObjectDoesNotExist , ) , module ) ) new_class . add_to_class ( 'MultipleObjectsReturned' , subclass_exception ( 'MultipleObjectsReturned' , tuple ( x . MultipleObjectsReturned for x in parents if hasattr ( x , '_meta' ) and not x . _meta . abstract ) or ( MultipleObjectsReturned , ) , module ) ) if base_meta and not base_meta . abstract : if not hasattr ( meta , 'ordering' ) : new_class . _meta . ordering = base_meta . ordering if not hasattr ( meta , 'get_latest_by' ) : new_class . _meta . get_latest_by = base_meta . get_latest_by is_proxy = new_class . _meta . proxy if getattr ( new_class , '_default_manager' , None ) : if not is_proxy : new_class . _default_manager = None new_class . _base_manager = None else : new_class . _default_manager = new_class . _default_manager . _copy_to_model ( new_class ) new_class . _base_manager = new_class . _base_manager . _copy_to_model ( new_class ) m = get_model ( new_class . _meta . app_label , name , seed_cache = False , only_installed = False ) if m is not None : return m for obj_name , obj in attrs . items ( ) : new_class . add_to_class ( obj_name , obj ) new_fields = new_class . _meta . local_fields + new_class . _meta . local_many_to_many + new_class . _meta . virtual_fields field_names = set ( [ f . name for f in new_fields ] ) if is_proxy : base = None for parent in [ cls for cls in parents if hasattr ( cls , '_meta' ) ] : if parent . _meta . abstract : if parent . _meta . fields : raise TypeError ( "Abstract base class containing model fields not permitted for proxy model '%s'." % name ) else : continue if base is not None : raise TypeError ( "Proxy model '%s' has more than one non-abstract model base class." % name ) else : base = parent if base is None : raise TypeError ( "Proxy model '%s' has no non-abstract model base class." % name ) if ( new_class . _meta . local_fields or new_class . _meta . local_many_to_many ) : raise FieldError ( "Proxy model '%s' contains model fields." % name ) while base . _meta . proxy : base = base . _meta . proxy_for_model new_class . _meta . setup_proxy ( base ) o2o_map = dict ( [ ( f . rel . to , f ) for f in new_class . _meta . local_fields if isinstance ( f , OneToOneField ) ] ) for base in parents : original_base = base if not hasattr ( base , '_meta' ) : continue parent_fields = base . _meta . local_fields + base . _meta . local_many_to_many for field in parent_fields : if field . name in field_names : raise FieldError ( 'Local field %r in class %r clashes ' % ( field . name , name , base . __name__ ) ) if not base . _meta . abstract : while base . _meta . proxy : base = base . _meta . proxy_for_model if base in o2o_map : field = o2o_map [ base ] elif not is_proxy : attr_name = '%s_ptr' % base . _meta . module_name field = OneToOneField ( base , name = attr_name , auto_created = True , parent_link = True ) new_class . add_to_class ( attr_name , field ) else : field = None new_class . _meta . parents [ base ] = field else : for field in parent_fields : new_class . add_to_class ( field . name , copy . deepcopy ( field ) ) new_class . _meta . parents . update ( base . _meta . parents ) new_class . copy_managers ( base . _meta . abstract_managers ) if is_proxy : new_class . copy_managers ( original_base . _meta . concrete_managers ) for field in base . _meta . virtual_fields : if base . _meta . abstract and field . name in field_names : raise FieldError ( 'Local field %r in class %r clashes ' 'with field of similar name from ' 'abstract base class %r' % ( field . name , name , base . __name__ ) ) new_class . add_to_class ( field . name , copy . deepcopy ( field ) ) if abstract : attr_meta . abstract = False new_class . Meta = attr_meta return new_class new_class . _prepare ( ) register_models ( new_class . _meta . app_label , new_class ) return get_model ( new_class . _meta . app_label , name , seed_cache = False , only_installed = False ) def copy_managers ( cls , base_managers ) : base_managers . sort ( ) for _ , mgr_name , manager in base_managers : val = getattr ( cls , mgr_name , None ) if not val or val is manager : new_manager = manager . _copy_to_model ( cls ) cls . add_to_class ( mgr_name , new_manager ) def add_to_class ( cls , name , value ) : if hasattr ( value , 'contribute_to_class' ) : value . contribute_to_class ( cls , name ) else : setattr ( cls , name , value ) def _prepare ( cls ) : opts = cls . _meta opts . _prepare ( cls ) if opts . order_with_respect_to : cls . get_next_in_order = curry ( cls . _get_next_or_previous_in_order , is_next = True ) cls . get_previous_in_order = curry ( cls . _get_next_or_previous_in_order , is_next = False ) def make_foreign_order_accessors ( field , model , cls ) : setattr ( field . rel . to , % cls . __name__ . lower ( ) , curry ( method_get_order , cls ) ) setattr ( field . rel . to , % cls . __name__ . lower ( ) , curry ( method_set_order , cls ) ) add_lazy_relation ( cls , opts . order_with_respect_to , opts . order_with_respect_to . rel . to , make_foreign_order_accessors ) if cls . __doc__ is None : cls . __doc__ = "%s(%s)" % ( cls . __name__ , ", " . join ( [ f . attname for f in opts . fields ] ) ) if hasattr ( cls , 'get_absolute_url' ) : cls . get_absolute_url = update_wrapper ( curry ( get_absolute_url , opts , cls . get_absolute_url ) , cls . get_absolute_url ) signals . class_prepared . send ( sender = cls ) class ModelState ( object ) : def __init__ ( self , db = None ) : self . db = db self . adding = True class Model ( object ) : __metaclass__ = ModelBase _deferred = False def __init__ ( self , * args , ** kwargs ) : signals . pre_init . send ( sender = self . __class__ , args = args , kwargs = kwargs ) self . _state = ModelState ( ) args_len = len ( args ) if args_len > len ( self . _meta . fields ) : raise IndexError ( "Number of args exceeds number of fields" ) fields_iter = iter ( self . _meta . fields ) if not kwargs : for val , field in izip ( args , fields_iter ) : setattr ( self , field . attname , val ) else : for val , field in izip ( args , fields_iter ) : setattr ( self , field . attname , val ) kwargs . pop ( field . name , None ) if isinstance ( field . rel , ManyToOneRel ) : kwargs . pop ( field . attname , None ) for field in fields_iter : is_related_object = False if ( field . attname not in kwargs and isinstance ( self . __class__ . __dict__ . get ( field . attname ) , DeferredAttribute ) ) : continue if kwargs : if isinstance ( field . rel , ManyToOneRel ) : try : rel_obj = kwargs . pop ( field . name ) is_related_object = True except KeyError : try : val = kwargs . pop ( field . attname ) except KeyError : val = field . get_default ( ) else : if rel_obj is None and field . null : val = None else : try : val = kwargs . pop ( field . attname ) except KeyError : val = field . get_default ( ) else : val = field . get_default ( ) if is_related_object : setattr ( self , field . name , rel_obj ) else : setattr ( self , field . attname , val ) if kwargs : for prop in kwargs . keys ( ) : try : if isinstance ( getattr ( self . __class__ , prop ) , property ) : setattr ( self , prop , kwargs . pop ( prop ) ) except AttributeError : pass if kwargs : raise TypeError ( "'%s' is an invalid keyword argument for this function" % kwargs . keys ( ) [ 0 ] ) super ( Model , self ) . __init__ ( ) signals . post_init . send ( sender = self . __class__ , instance = self ) def __repr__ ( self ) : try : u = unicode ( self ) except ( UnicodeEncodeError , UnicodeDecodeError ) : u = '[Bad Unicode data]' return smart_str ( u'<%s: %s>' % ( self . __class__ . __name__ , u ) ) def __str__ ( self ) : if hasattr ( self , '__unicode__' ) : return force_unicode ( self ) . encode ( 'utf-8' ) return '%s object' % self . __class__ . __name__ def __eq__ ( self , other ) : return isinstance ( other , self . __class__ ) and self . _get_pk_val ( ) == other . _get_pk_val ( ) def __ne__ ( self , other ) : return not self . __eq__ ( other ) def __hash__ ( self ) : return hash ( self . _get_pk_val ( ) ) def __reduce__ ( self ) : data = self . __dict__ model = self . __class__ defers = [ ] pk_val = None if self . _deferred : from django . db . models . query_utils import deferred_class_factory factory = deferred_class_factory for field in self . _meta . fields : if isinstance ( self . __class__ . __dict__ . get ( field . attname ) , DeferredAttribute ) : defers . append ( field . attname ) if pk_val is None : obj = self . __class__ . __dict__ [ field . attname ] model = obj . model_ref ( ) else : factory = simple_class_factory return ( model_unpickle , ( model , defers , factory ) , data ) def _get_pk_val ( self , meta = None ) : if not meta : meta = self . _meta return getattr ( self , meta . pk . attname ) def _set_pk_val ( self , value ) : return setattr ( self , self . _meta . pk . attname , value ) pk = property ( _get_pk_val , _set_pk_val ) def serializable_value ( self , field_name ) : try : field = self . _meta . get_field_by_name ( field_name ) [ 0 ] except FieldDoesNotExist : return getattr ( self , field_name ) return getattr ( self , field . attname ) def save ( self , force_insert = False , force_update = False , using = None ) : if force_insert and force_update : raise ValueError ( "Cannot force both insert and updating in model saving." ) self . save_base ( using = using , force_insert = force_insert , force_update = force_update ) save . alters_data = True def save_base ( self , raw = False , cls = None , origin = None , force_insert = False , force_update = False , using = None ) : using = using or router . db_for_write ( self . __class__ , instance = self ) assert not ( force_insert and force_update ) if cls is None : cls = self . __class__ meta = cls . _meta if not meta . proxy : origin = cls else : meta = cls . _meta if origin and not meta . auto_created : signals . pre_save . send ( sender = origin , instance = self , raw = raw , using = using ) if not raw or meta . proxy : if meta . proxy : org = cls else : org = None for parent , field in meta . parents . items ( ) : if field and getattr ( self , parent . _meta . pk . attname ) is None and getattr ( self , field . attname ) is not None : setattr ( self , parent . _meta . pk . attname , getattr ( self , field . attname ) ) self . save_base ( cls = parent , origin = org , using = using ) if field : setattr ( self , field . attname , self . _get_pk_val ( parent . _meta ) ) if meta . proxy : return if not meta . proxy : non_pks = [ f for f in meta . local_fields if not f . primary_key ] pk_val = self . _get_pk_val ( meta ) pk_set = pk_val is not None record_exists = True manager = cls . _base_manager if pk_set : if ( force_update or ( not force_insert and manager . using ( using ) . filter ( pk = pk_val ) . exists ( ) ) ) : if force_update or non_pks : values = [ ( f , None , ( raw and getattr ( self , f . attname ) or f . pre_save ( self , False ) ) ) for f in non_pks ] if values : rows = manager . using ( using ) . filter ( pk = pk_val ) . _update ( values ) if force_update and not rows : raise DatabaseError ( "Forced update did not affect any rows." ) else : record_exists = False if not pk_set or not record_exists : if meta . order_with_respect_to : field = meta . order_with_respect_to order_value = manager . using ( using ) . filter ( ** { field . name : getattr ( self , field . attname ) } ) . count ( ) self . _order = order_value fields = meta . local_fields if not pk_set : if force_update : raise ValueError ( "Cannot force an update in save() with no primary key." ) fields = [ f for f in fields if not isinstance ( f , AutoField ) ] record_exists = False update_pk = bool ( meta . has_auto_field and not pk_set ) result = manager . _insert ( [ self ] , fields = fields , return_id = update_pk , using = using , raw = raw ) if update_pk : setattr ( self , meta . pk . attname , result ) transaction . commit_unless_managed ( using = using ) self . _state . db = using self . _state . adding = False if origin and not meta . auto_created : signals . post_save . send ( sender = origin , instance = self , created = ( not record_exists ) , raw = raw , using = using ) save_base . alters_data = True def delete ( self , using = None ) : using = using or router . db_for_write ( self . __class__ , instance = self ) assert self . _get_pk_val ( ) is not None , "%s object can't be deleted because its %s attribute is set to None." % ( self . _meta . object_name , self . _meta . pk . attname ) collector = Collector ( using = using ) collector . collect ( [ self ] ) collector . delete ( ) delete . alters_data = True def _get_FIELD_display ( self , field ) : value = getattr ( self , field . attname ) return force_unicode ( dict ( field . flatchoices ) . get ( value , value ) , strings_only = True ) def _get_next_or_previous_by_FIELD ( self , field , is_next , ** kwargs ) : if not self . pk : raise ValueError ( "get_next/get_previous cannot be used on unsaved objects." ) op = is_next and 'gt' or 'lt' order = not is_next and '-' or '' param = smart_str ( getattr ( self , field . attname ) ) q = Q ( ** { '%s__%s' % ( field . name , op ) : param } ) q = q | Q ( ** { field . name : param , 'pk__%s' % op : self . pk } ) qs = self . __class__ . _default_manager . using ( self . _state . db ) . filter ( ** kwargs ) . filter ( q ) . order_by ( '%s%s' % ( order , field . name ) , '%spk' % order ) try : return qs [ 0 ] except IndexError : raise self . DoesNotExist ( "%s matching query does not exist." % self . __class__ . _meta . object_name ) def _get_next_or_previous_in_order ( self , is_next ) : cachename = "__%s_order_cache" % is_next if not hasattr ( self , cachename ) : op = is_next and 'gt' or 'lt' order = not is_next and '-_order' or '_order' order_field = self . _meta . order_with_respect_to obj = self . _default_manager . filter ( ** { order_field . name : getattr ( self , order_field . attname ) } ) . filter ( ** { % op : self . _default_manager . values ( '_order' ) . filter ( ** { self . _meta . pk . name : self . pk } ) } ) . order_by ( order ) [ : 1 ] . get ( ) setattr ( self , cachename , obj ) return getattr ( self , cachename ) def prepare_database_save ( self , unused ) : return self . pk def clean ( self ) : pass def validate_unique ( self , exclude = None ) : unique_checks , date_checks = self . _get_unique_checks ( exclude = exclude ) errors = self . _perform_unique_checks ( unique_checks ) date_errors = self . _perform_date_checks ( date_checks ) for k , v in date_errors . items ( ) : errors . setdefault ( k , [ ] ) . extend ( v ) if errors : raise ValidationError ( errors ) def _get_unique_checks ( self , exclude = None ) : if exclude is None : exclude = [ ] unique_checks = [ ] unique_togethers = [ ( self . __class__ , self . _meta . unique_together ) ] for parent_class in self . _meta . parents . keys ( ) : if parent_class . _meta . unique_together : unique_togethers . append ( ( parent_class , parent_class . _meta . unique_together ) ) for model_class , unique_together in unique_togethers : for check in unique_together : for name in check : if name in exclude : break else : unique_checks . append ( ( model_class , tuple ( check ) ) ) date_checks = [ ] fields_with_class = [ ( self . __class__ , self . _meta . local_fields ) ] for parent_class in self . _meta . parents . keys ( ) : fields_with_class . append ( ( parent_class , parent_class . _meta . local_fields ) ) for model_class , fields in fields_with_class : for f in fields : name = f . name if name in exclude : continue if f . unique : unique_checks . append ( ( model_class , ( name , ) ) ) if f . unique_for_date and f . unique_for_date not in exclude : date_checks . append ( ( model_class , 'date' , name , f . unique_for_date ) ) if f . unique_for_year and f . unique_for_year not in exclude : date_checks . append ( ( model_class , 'year' , name , f . unique_for_year ) ) if f . unique_for_month and f . unique_for_month not in exclude : date_checks . append ( ( model_class , 'month' , name , f . unique_for_month ) ) return unique_checks , date_checks def _perform_unique_checks ( self , unique_checks ) : errors = { } for model_class , unique_check in unique_checks : lookup_kwargs = { } for field_name in unique_check : f = self . _meta . get_field ( field_name ) lookup_value = getattr ( self , f . attname ) if lookup_value is None : continue if f . primary_key and not self . _state . adding : continue lookup_kwargs [ str ( field_name ) ] = lookup_value if len ( unique_check ) != len ( lookup_kwargs . keys ( ) ) : continue qs = model_class . _default_manager . filter ( ** lookup_kwargs ) if not self . _state . adding and self . pk is not None : qs = qs . exclude ( pk = self . pk ) if qs . exists ( ) : if len ( unique_check ) == 1 : key = unique_check [ 0 ] else : key = NON_FIELD_ERRORS errors . setdefault ( key , [ ] ) . append ( self . unique_error_message ( model_class , unique_check ) ) return errors def _perform_date_checks ( self , date_checks ) : errors = { } for model_class , lookup_type , field , unique_for in date_checks : lookup_kwargs = { } date = getattr ( self , unique_for ) if date is None : continue if lookup_type == 'date' : lookup_kwargs [ '%s__day' % unique_for ] = date . day lookup_kwargs [ '%s__month' % unique_for ] = date . month lookup_kwargs [ '%s__year' % unique_for ] = date . year else : lookup_kwargs [ '%s__%s' % ( unique_for , lookup_type ) ] = getattr ( date , lookup_type ) lookup_kwargs [ field ] = getattr ( self , field ) qs = model_class . _default_manager . filter ( ** lookup_kwargs ) if not self . _state . adding and self . pk is not None : qs = qs . exclude ( pk = self . pk ) if qs . exists ( ) : errors . setdefault ( field , [ ] ) . append ( self . date_error_message ( lookup_type , field , unique_for ) ) return errors def date_error_message ( self , lookup_type , field , unique_for ) : opts = self . _meta return _ ( u"%(field_name)s must be unique for %(date_field)s %(lookup)s." ) % { : unicode ( capfirst ( opts . get_field ( field ) . verbose_name ) ) , : unicode ( capfirst ( opts . get_field ( unique_for ) . verbose_name ) ) , : lookup_type , } def unique_error_message ( self , model_class , unique_check ) : opts = model_class . _meta model_name = capfirst ( opts . verbose_name ) if len ( unique_check ) == 1 : field_name = unique_check [ 0 ] field = opts . get_field ( field_name ) field_label = capfirst ( field . verbose_name ) return field . error_messages [ 'unique' ] % { : unicode ( model_name ) , : unicode ( field_label ) } else : field_labels = map ( lambda f : capfirst ( opts . get_field ( f ) . verbose_name ) , unique_check ) field_labels = get_text_list ( field_labels , _ ( 'and' ) ) return _ ( u"%(model_name)s with this %(field_label)s already exists." ) % { : unicode ( model_name ) , : unicode ( field_labels ) } def full_clean ( self , exclude = None ) : errors = { } if exclude is None : exclude = [ ] try : self . clean_fields ( exclude = exclude ) except ValidationError , e : errors = e . update_error_dict ( errors ) try : self . clean ( ) except ValidationError , e : errors = e . update_error_dict ( errors ) for name in errors . keys ( ) : if name != NON_FIELD_ERRORS and name not in exclude : exclude . append ( name ) try : self . validate_unique ( exclude = exclude ) except ValidationError , e : errors = e . update_error_dict ( errors ) if errors : raise ValidationError ( errors ) def clean_fields ( self , exclude = None ) : if exclude is None : exclude = [ ] errors = { } for f in self . _meta . fields : if f . name in exclude : continue raw_value = getattr ( self , f . attname ) if f . blank and raw_value in validators . EMPTY_VALUES : continue try : setattr ( self , f . attname , f . clean ( raw_value , self ) ) except ValidationError , e : errors [ f . name ] = e . messages if errors : raise ValidationError ( errors ) def method_set_order ( ordered_obj , self , id_list , using = None ) : if using is None : using = DEFAULT_DB_ALIAS rel_val = getattr ( self , ordered_obj . _meta . order_with_respect_to . rel . field_name ) order_name = ordered_obj . _meta . order_with_respect_to . name for i , j in enumerate ( id_list ) : ordered_obj . objects . filter ( ** { 'pk' : j , order_name : rel_val } ) . update ( _order = i ) transaction . commit_unless_managed ( using = using ) def method_get_order ( ordered_obj , self ) : rel_val = getattr ( self , ordered_obj . _meta . order_with_respect_to . rel . field_name ) order_name = ordered_obj . _meta . order_with_respect_to . name pk_name = ordered_obj . _meta . pk . name return [ r [ pk_name ] for r in ordered_obj . objects . filter ( ** { order_name : rel_val } ) . values ( pk_name ) ] def get_absolute_url ( opts , func , self , * args , ** kwargs ) : return settings . ABSOLUTE_URL_OVERRIDES . get ( '%s.%s' % ( opts . app_label , opts . module_name ) , func ) ( self , * args , ** kwargs ) class Empty ( object ) : pass def simple_class_factory ( model , attrs ) : return model def model_unpickle ( model , attrs , factory ) : cls = factory ( model , attrs ) return cls . __new__ ( cls ) model_unpickle . __safe_for_unpickle__ = True def subclass_exception ( name , parents , module ) : return type ( name , parents , { '__module__' : module } )
