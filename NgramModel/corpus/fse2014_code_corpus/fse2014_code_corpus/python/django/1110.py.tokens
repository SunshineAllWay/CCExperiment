""" Global Django exception and warning classes. """ class DjangoRuntimeWarning ( RuntimeWarning ) : pass class ObjectDoesNotExist ( Exception ) : silent_variable_failure = True class MultipleObjectsReturned ( Exception ) : pass class SuspiciousOperation ( Exception ) : pass class PermissionDenied ( Exception ) : pass class ViewDoesNotExist ( Exception ) : pass class MiddlewareNotUsed ( Exception ) : pass class ImproperlyConfigured ( Exception ) : pass class FieldError ( Exception ) : pass NON_FIELD_ERRORS = '__all__' class ValidationError ( Exception ) : def __init__ ( self , message , code = None , params = None ) : import operator from django . utils . encoding import force_unicode if isinstance ( message , dict ) : self . message_dict = message message = reduce ( operator . add , message . values ( ) ) if isinstance ( message , list ) : self . messages = [ force_unicode ( msg ) for msg in message ] else : self . code = code self . params = params message = force_unicode ( message ) self . messages = [ message ] def __str__ ( self ) : if hasattr ( self , 'message_dict' ) : return repr ( self . message_dict ) return repr ( self . messages ) def __repr__ ( self ) : if hasattr ( self , 'message_dict' ) : return 'ValidationError(%s)' % repr ( self . message_dict ) return 'ValidationError(%s)' % repr ( self . messages ) def update_error_dict ( self , error_dict ) : if hasattr ( self , 'message_dict' ) : if error_dict : for k , v in self . message_dict . items ( ) : error_dict . setdefault ( k , [ ] ) . extend ( v ) else : error_dict = self . message_dict else : error_dict [ NON_FIELD_ERRORS ] = self . messages return error_dict
