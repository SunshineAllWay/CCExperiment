from django . dispatch . saferef import safeRef from django . utils import unittest class Test1 ( object ) : def x ( self ) : pass def test2 ( obj ) : pass class Test2 ( object ) : def __call__ ( self , obj ) : pass class SaferefTests ( unittest . TestCase ) : def setUp ( self ) : ts = [ ] ss = [ ] for x in xrange ( 5000 ) : t = Test1 ( ) ts . append ( t ) s = safeRef ( t . x , self . _closure ) ss . append ( s ) ts . append ( test2 ) ss . append ( safeRef ( test2 , self . _closure ) ) for x in xrange ( 30 ) : t = Test2 ( ) ts . append ( t ) s = safeRef ( t , self . _closure ) ss . append ( s ) self . ts = ts self . ss = ss self . closureCount = 0 def tearDown ( self ) : del self . ts del self . ss def testIn ( self ) : for t in self . ts [ : 50 ] : self . assertTrue ( safeRef ( t . x ) in self . ss ) def testValid ( self ) : for s in self . ss : self . assertTrue ( s ( ) ) def testShortCircuit ( self ) : sd = { } for s in self . ss : sd [ s ] = 1 for t in self . ts : if hasattr ( t , 'x' ) : self . assertTrue ( sd . has_key ( safeRef ( t . x ) ) ) self . assertTrue ( safeRef ( t . x ) in sd ) else : self . assertTrue ( sd . has_key ( safeRef ( t ) ) ) self . assertTrue ( safeRef ( t ) in sd ) def testRepresentation ( self ) : repr ( self . ss [ - 1 ] ) def _closure ( self , ref ) :
