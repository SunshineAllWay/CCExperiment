from __future__ import absolute_import from django . http import Http404 from django . shortcuts import get_object_or_404 , get_list_or_404 from django . test import TestCase from . models import Author , Article class GetObjectOr404Tests ( TestCase ) : def test_get_object_or_404 ( self ) : a1 = Author . objects . create ( name = "Brave Sir Robin" ) a2 = Author . objects . create ( name = "Patsy" ) self . assertRaises ( Http404 , get_object_or_404 , Article , title = "Foo" ) article = Article . objects . create ( title = "Run away!" ) article . authors = [ a1 , a2 ] self . assertEqual ( get_object_or_404 ( Article , title__contains = "Run" ) , article ) self . assertEqual ( get_object_or_404 ( a1 . article_set , title__contains = "Run" ) , article ) self . assertRaises ( Http404 , get_object_or_404 , a1 . article_set , title__contains = "Camelot" ) self . assertEqual ( get_object_or_404 ( Article . by_a_sir , title = "Run away!" ) , article ) self . assertEqual ( get_object_or_404 ( Article . objects . all ( ) , title__contains = "Run" ) , article ) self . assertRaises ( Author . MultipleObjectsReturned , get_object_or_404 , Author . objects . all ( ) ) self . assertRaises ( Http404 , get_object_or_404 , Article . objects . none ( ) , title__contains = "Run" ) self . assertEqual ( get_list_or_404 ( a1 . article_set , title__icontains = "Run" ) , [ article ] ) self . assertRaises ( Http404 , get_list_or_404 , a1 . article_set , title__icontains = "Shrubbery" ) self . assertEqual ( get_list_or_404 ( Article . by_a_sir , title__icontains = "Run" ) , [ article ] ) self . assertEqual ( get_list_or_404 ( Article . objects . all ( ) , title__icontains = "Run" ) , [ article ] )
