from django . conf import settings from django . contrib . messages . storage . base import BaseStorage , Message from django . http import SimpleCookie from django . utils import simplejson as json from django . utils . crypto import salted_hmac , constant_time_compare class MessageEncoder ( json . JSONEncoder ) : message_key = '__json_message' def default ( self , obj ) : if isinstance ( obj , Message ) : message = [ self . message_key , obj . level , obj . message ] if obj . extra_tags : message . append ( obj . extra_tags ) return message return super ( MessageEncoder , self ) . default ( obj ) class MessageDecoder ( json . JSONDecoder ) : def process_messages ( self , obj ) : if isinstance ( obj , list ) and obj : if obj [ 0 ] == MessageEncoder . message_key : return Message ( * obj [ 1 : ] ) return [ self . process_messages ( item ) for item in obj ] if isinstance ( obj , dict ) : return dict ( [ ( key , self . process_messages ( value ) ) for key , value in obj . iteritems ( ) ] ) return obj def decode ( self , s , ** kwargs ) : decoded = super ( MessageDecoder , self ) . decode ( s , ** kwargs ) return self . process_messages ( decoded ) class CookieStorage ( BaseStorage ) : cookie_name = 'messages' max_cookie_size = 3072 not_finished = '__messagesnotfinished__' def _get ( self , * args , ** kwargs ) : data = self . request . COOKIES . get ( self . cookie_name ) messages = self . _decode ( data ) all_retrieved = not ( messages and messages [ - 1 ] == self . not_finished ) if messages and not all_retrieved : messages . pop ( ) return messages , all_retrieved def _update_cookie ( self , encoded_data , response ) : if encoded_data : response . set_cookie ( self . cookie_name , encoded_data , domain = settings . SESSION_COOKIE_DOMAIN ) else : response . delete_cookie ( self . cookie_name , domain = settings . SESSION_COOKIE_DOMAIN ) def _store ( self , messages , response , remove_oldest = True , * args , ** kwargs ) : unstored_messages = [ ] encoded_data = self . _encode ( messages ) if self . max_cookie_size : cookie = SimpleCookie ( ) def stored_length ( val ) : return len ( cookie . value_encode ( val ) [ 1 ] ) while encoded_data and stored_length ( encoded_data ) > self . max_cookie_size : if remove_oldest : unstored_messages . append ( messages . pop ( 0 ) ) else : unstored_messages . insert ( 0 , messages . pop ( ) ) encoded_data = self . _encode ( messages + [ self . not_finished ] , encode_empty = unstored_messages ) self . _update_cookie ( encoded_data , response ) return unstored_messages def _hash ( self , value ) : key_salt = 'django.contrib.messages' return salted_hmac ( key_salt , value ) . hexdigest ( ) def _encode ( self , messages , encode_empty = False ) : if messages or encode_empty : encoder = MessageEncoder ( separators = ( ',' , ':' ) ) value = encoder . encode ( messages ) return '%s$%s' % ( self . _hash ( value ) , value ) def _decode ( self , data ) : if not data : return None bits = data . split ( '$' , 1 ) if len ( bits ) == 2 : hash , value = bits if constant_time_compare ( hash , self . _hash ( value ) ) : try : return json . loads ( value , cls = MessageDecoder ) except ValueError : pass self . used = True return None
