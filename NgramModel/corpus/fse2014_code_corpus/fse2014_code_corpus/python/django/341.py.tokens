from django . contrib . localflavor . se . forms import ( SECountySelect , SEOrganisationNumberField , SEPersonalIdentityNumberField , SEPostalCodeField ) import datetime from django . test import SimpleTestCase class SELocalFlavorTests ( SimpleTestCase ) : def setUp ( self ) : class MockDate ( datetime . date ) : def today ( cls ) : return datetime . date ( 2008 , 5 , 14 ) today = classmethod ( today ) self . _olddate = datetime . date datetime . date = MockDate def tearDown ( self ) : datetime . date = self . _olddate def test_SECountySelect ( self ) : f = SECountySelect ( ) out = u'''<select name="swedish_county"> <option value="AB">Stockholm</option> <option value="AC">V\xe4sterbotten</option> <option value="BD">Norrbotten</option> <option value="C">Uppsala</option> <option value="D">S\xf6dermanland</option> <option value="E" selected="selected">\xd6sterg\xf6tland</option> <option value="F">J\xf6nk\xf6ping</option> <option value="G">Kronoberg</option> <option value="H">Kalmar</option> <option value="I">Gotland</option> <option value="K">Blekinge</option> <option value="M">Sk\xe5ne</option> <option value="N">Halland</option> <option value="O">V\xe4stra G\xf6taland</option> <option value="S">V\xe4rmland</option> <option value="T">\xd6rebro</option> <option value="U">V\xe4stmanland</option> <option value="W">Dalarna</option> <option value="X">G\xe4vleborg</option> <option value="Y">V\xe4sternorrland</option> <option value="Z">J\xe4mtland</option> </select>''' self . assertHTMLEqual ( f . render ( 'swedish_county' , 'E' ) , out ) def test_SEOrganizationNumberField ( self ) : error_invalid = [ u'Enter a valid Swedish organisation number.' ] valid = { : '198705121989' , : '198705121989' , : '198705122128' , : '190810156315' , : '180810156315' , : '190810156315' , : '5560747569' , : '5560743089' , : '8220015476' , : '8220015476' , : '2120000449' , : '2325185060' , } invalid = { : error_invalid , : error_invalid , : error_invalid , : error_invalid , : error_invalid , : error_invalid , : error_invalid , : error_invalid , : error_invalid , : error_invalid , : error_invalid , } self . assertFieldOutput ( SEOrganisationNumberField , valid , invalid ) def test_SEPersonalIdentityNumberField ( self ) : error_invalid = [ u'Enter a valid Swedish personal identity number.' ] error_coord = [ u'Co-ordination numbers are not allowed.' ] valid = { : '198705121989' , : '198705122128' , : '198705121989' , : '198705121989' , : '190810156315' , : '190810156315' , : '198705141060' , : '180810156315' , : '198705741315' , : '188705741315' , : '198705741315' , } invalid = { : error_invalid , : error_invalid , : error_invalid , : error_invalid , : error_invalid , : error_invalid , : error_invalid , : error_invalid , } self . assertFieldOutput ( SEPersonalIdentityNumberField , valid , invalid ) valid = { } invalid = { : error_coord , : error_coord , : error_coord , : error_invalid , } kwargs = { 'coordination_number' : False , } self . assertFieldOutput ( SEPersonalIdentityNumberField , valid , invalid , field_kwargs = kwargs ) def test_SEPostalCodeField ( self ) : error_format = [ u'Enter a Swedish postal code in the format XXXXX.' ] valid = { : '58937' , : '58937' , } invalid = { : error_format , : error_format , : error_format , } self . assertFieldOutput ( SEPostalCodeField , valid , invalid )
