""" "Safe weakrefs", originally from pyDispatcher. Provides a way to safely weakref any function, including bound methods (which aren't handled by the core weakref module). """ import traceback import weakref def safeRef ( target , onDelete = None ) : if hasattr ( target , 'im_self' ) : if target . im_self is not None : assert hasattr ( target , 'im_func' ) , """safeRef target %r has im_self, but no im_func, don't know how to create reference""" % ( target , ) reference = get_bound_method_weakref ( target = target , onDelete = onDelete ) return reference if callable ( onDelete ) : return weakref . ref ( target , onDelete ) else : return weakref . ref ( target ) class BoundMethodWeakref ( object ) : _allInstances = weakref . WeakValueDictionary ( ) def __new__ ( cls , target , onDelete = None , * arguments , ** named ) : key = cls . calculateKey ( target ) current = cls . _allInstances . get ( key ) if current is not None : current . deletionMethods . append ( onDelete ) return current else : base = super ( BoundMethodWeakref , cls ) . __new__ ( cls ) cls . _allInstances [ key ] = base base . __init__ ( target , onDelete , * arguments , ** named ) return base def __init__ ( self , target , onDelete = None ) : def remove ( weak , self = self ) : methods = self . deletionMethods [ : ] del self . deletionMethods [ : ] try : del self . __class__ . _allInstances [ self . key ] except KeyError : pass for function in methods : try : if callable ( function ) : function ( self ) except Exception , e : try : traceback . print_exc ( ) except AttributeError , err : print '''Exception during saferef %s cleanup function %s: %s''' % ( self , function , e ) self . deletionMethods = [ onDelete ] self . key = self . calculateKey ( target ) self . weakSelf = weakref . ref ( target . im_self , remove ) self . weakFunc = weakref . ref ( target . im_func , remove ) self . selfName = str ( target . im_self ) self . funcName = str ( target . im_func . __name__ ) def calculateKey ( cls , target ) : return ( id ( target . im_self ) , id ( target . im_func ) ) calculateKey = classmethod ( calculateKey ) def __str__ ( self ) : return """%s( %s.%s )""" % ( self . __class__ . __name__ , self . selfName , self . funcName , ) __repr__ = __str__ def __nonzero__ ( self ) : return self ( ) is not None def __cmp__ ( self , other ) : if not isinstance ( other , self . __class__ ) : return cmp ( self . __class__ , type ( other ) ) return cmp ( self . key , other . key ) def __call__ ( self ) : target = self . weakSelf ( ) if target is not None : function = self . weakFunc ( ) if function is not None : return function . __get__ ( target ) return None class BoundNonDescriptorMethodWeakref ( BoundMethodWeakref ) : def __init__ ( self , target , onDelete = None ) : assert getattr ( target . im_self , target . __name__ ) == target , ( "method %s isn't available as the attribute %s of %s" % ( target , target . __name__ , target . im_self ) ) super ( BoundNonDescriptorMethodWeakref , self ) . __init__ ( target , onDelete ) def __call__ ( self ) : target = self . weakSelf ( ) if target is not None : function = self . weakFunc ( ) if function is not None : return getattr ( target , function . __name__ ) return None def get_bound_method_weakref ( target , onDelete ) : if hasattr ( target , '__get__' ) : return BoundMethodWeakref ( target = target , onDelete = onDelete ) else : return BoundNonDescriptorMethodWeakref ( target = target , onDelete = onDelete )
