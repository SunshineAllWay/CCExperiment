from datetime import datetime from django . conf import settings from django . contrib . auth . backends import RemoteUserBackend from django . contrib . auth . models import User from django . test import TestCase from django . utils import timezone class RemoteUserTest ( TestCase ) : urls = 'django.contrib.auth.tests.urls' middleware = 'django.contrib.auth.middleware.RemoteUserMiddleware' backend = 'django.contrib.auth.backends.RemoteUserBackend' known_user = 'knownuser' known_user2 = 'knownuser2' def setUp ( self ) : self . curr_middleware = settings . MIDDLEWARE_CLASSES self . curr_auth = settings . AUTHENTICATION_BACKENDS settings . MIDDLEWARE_CLASSES += ( self . middleware , ) settings . AUTHENTICATION_BACKENDS = ( self . backend , ) def test_no_remote_user ( self ) : num_users = User . objects . count ( ) response = self . client . get ( '/remote_user/' ) self . assertTrue ( response . context [ 'user' ] . is_anonymous ( ) ) self . assertEqual ( User . objects . count ( ) , num_users ) response = self . client . get ( '/remote_user/' , REMOTE_USER = None ) self . assertTrue ( response . context [ 'user' ] . is_anonymous ( ) ) self . assertEqual ( User . objects . count ( ) , num_users ) response = self . client . get ( '/remote_user/' , REMOTE_USER = '' ) self . assertTrue ( response . context [ 'user' ] . is_anonymous ( ) ) self . assertEqual ( User . objects . count ( ) , num_users ) def test_unknown_user ( self ) : num_users = User . objects . count ( ) response = self . client . get ( '/remote_user/' , REMOTE_USER = 'newuser' ) self . assertEqual ( response . context [ 'user' ] . username , 'newuser' ) self . assertEqual ( User . objects . count ( ) , num_users + 1 ) User . objects . get ( username = 'newuser' ) response = self . client . get ( '/remote_user/' , REMOTE_USER = 'newuser' ) self . assertEqual ( User . objects . count ( ) , num_users + 1 ) def test_known_user ( self ) : User . objects . create ( username = 'knownuser' ) User . objects . create ( username = 'knownuser2' ) num_users = User . objects . count ( ) response = self . client . get ( '/remote_user/' , REMOTE_USER = self . known_user ) self . assertEqual ( response . context [ 'user' ] . username , 'knownuser' ) self . assertEqual ( User . objects . count ( ) , num_users ) response = self . client . get ( '/remote_user/' , REMOTE_USER = self . known_user2 ) self . assertEqual ( response . context [ 'user' ] . username , 'knownuser2' ) self . assertEqual ( User . objects . count ( ) , num_users ) def test_last_login ( self ) : user = User . objects . create ( username = 'knownuser' ) default_login = datetime ( 2000 , 1 , 1 ) if settings . USE_TZ : default_login = default_login . replace ( tzinfo = timezone . utc ) user . last_login = default_login user . save ( ) response = self . client . get ( '/remote_user/' , REMOTE_USER = self . known_user ) self . assertNotEqual ( default_login , response . context [ 'user' ] . last_login ) user = User . objects . get ( username = 'knownuser' ) user . last_login = default_login user . save ( ) response = self . client . get ( '/remote_user/' , REMOTE_USER = self . known_user ) self . assertEqual ( default_login , response . context [ 'user' ] . last_login ) def tearDown ( self ) : settings . MIDDLEWARE_CLASSES = self . curr_middleware settings . AUTHENTICATION_BACKENDS = self . curr_auth class RemoteUserNoCreateBackend ( RemoteUserBackend ) : create_unknown_user = False class RemoteUserNoCreateTest ( RemoteUserTest ) : backend = 'django.contrib.auth.tests.remote_user.RemoteUserNoCreateBackend' def test_unknown_user ( self ) : num_users = User . objects . count ( ) response = self . client . get ( '/remote_user/' , REMOTE_USER = 'newuser' ) self . assertTrue ( response . context [ 'user' ] . is_anonymous ( ) ) self . assertEqual ( User . objects . count ( ) , num_users ) class CustomRemoteUserBackend ( RemoteUserBackend ) : def clean_username ( self , username ) : return username . split ( '@' ) [ 0 ] def configure_user ( self , user ) : user . email = 'user@example.com' user . save ( ) return user class RemoteUserCustomTest ( RemoteUserTest ) : backend = 'django.contrib.auth.tests.remote_user.CustomRemoteUserBackend' known_user = 'knownuser@example.com' known_user2 = 'knownuser2@example.com' def test_known_user ( self ) : super ( RemoteUserCustomTest , self ) . test_known_user ( ) self . assertEqual ( User . objects . get ( username = 'knownuser' ) . email , '' ) self . assertEqual ( User . objects . get ( username = 'knownuser2' ) . email , '' ) def test_unknown_user ( self ) : super ( RemoteUserCustomTest , self ) . test_unknown_user ( ) newuser = User . objects . get ( username = 'newuser' ) self . assertEqual ( newuser . email , 'user@example.com' )
