""" FormWizard class -- implements a multi-page form, validating between each step and storing the form's state as HTML hidden fields so that no state is stored on the server side. """ from django . forms import HiddenInput from django . http import Http404 from django . shortcuts import render_to_response from django . template . context import RequestContext from django . utils . crypto import constant_time_compare from django . utils . translation import ugettext_lazy as _ from django . utils . decorators import method_decorator from django . views . decorators . csrf import csrf_protect from django . contrib . formtools . utils import form_hmac class FormWizard ( object ) : step_field_name = "wizard_step" def __init__ ( self , form_list , initial = None ) : self . form_list = form_list [ : ] self . initial = initial or { } self . extra_context = { } self . step = 0 import warnings warnings . warn ( , PendingDeprecationWarning ) def __repr__ ( self ) : return "step: %d\nform_list: %s\ninitial_data: %s" % ( self . step , self . form_list , self . initial ) def get_form ( self , step , data = None ) : if step >= self . num_steps ( ) : raise Http404 ( 'Step %s does not exist' % step ) return self . form_list [ step ] ( data , prefix = self . prefix_for_step ( step ) , initial = self . initial . get ( step , None ) ) def num_steps ( self ) : return len ( self . form_list ) def _check_security_hash ( self , token , request , form ) : expected = self . security_hash ( request , form ) return constant_time_compare ( token , expected ) @ method_decorator ( csrf_protect ) def __call__ ( self , request , * args , ** kwargs ) : if 'extra_context' in kwargs : self . extra_context . update ( kwargs [ 'extra_context' ] ) current_step = self . get_current_or_first_step ( request , * args , ** kwargs ) self . parse_params ( request , * args , ** kwargs ) previous_form_list = [ ] for i in range ( current_step ) : f = self . get_form ( i , request . POST ) if not self . _check_security_hash ( request . POST . get ( "hash_%d" % i , '' ) , request , f ) : return self . render_hash_failure ( request , i ) if not f . is_valid ( ) : return self . render_revalidation_failure ( request , i , f ) else : self . process_step ( request , f , i ) previous_form_list . append ( f ) if request . method == 'POST' : form = self . get_form ( current_step , request . POST ) else : form = self . get_form ( current_step ) if form . is_valid ( ) : self . process_step ( request , form , current_step ) next_step = current_step + 1 if next_step == self . num_steps ( ) : return self . done ( request , previous_form_list + [ form ] ) else : form = self . get_form ( next_step ) self . step = current_step = next_step return self . render ( form , request , current_step ) def render ( self , form , request , step , context = None ) : old_data = request . POST prev_fields = [ ] if old_data : hidden = HiddenInput ( ) for i in range ( step ) : old_form = self . get_form ( i , old_data ) hash_name = 'hash_%s' % i prev_fields . extend ( [ bf . as_hidden ( ) for bf in old_form ] ) prev_fields . append ( hidden . render ( hash_name , old_data . get ( hash_name , self . security_hash ( request , old_form ) ) ) ) return self . render_template ( request , form , '' . join ( prev_fields ) , step , context ) def prefix_for_step ( self , step ) : return str ( step ) def render_hash_failure ( self , request , step ) : return self . render ( self . get_form ( step ) , request , step , context = { 'wizard_error' : _ ( 'We apologize, but your form has expired. Please continue filling out the form from this page.' ) } ) def render_revalidation_failure ( self , request , step , form ) : return self . render ( form , request , step ) def security_hash ( self , request , form ) : return form_hmac ( form ) def get_current_or_first_step ( self , request , * args , ** kwargs ) : if not request . POST : return 0 try : step = int ( request . POST . get ( self . step_field_name , 0 ) ) except ValueError : return 0 return step def parse_params ( self , request , * args , ** kwargs ) : pass def get_template ( self , step ) : return 'forms/wizard.html' def render_template ( self , request , form , previous_fields , step , context = None ) : context = context or { } context . update ( self . extra_context ) return render_to_response ( self . get_template ( step ) , dict ( context , step_field = self . step_field_name , step0 = step , step = step + 1 , step_count = self . num_steps ( ) , form = form , previous_fields = previous_fields ) , context_instance = RequestContext ( request ) ) def process_step ( self , request , form , step ) : pass def done ( self , request , form_list ) : raise NotImplementedError ( "Your %s class has not defined a done() method, which is required." % self . __class__ . __name__ )
