from __future__ import absolute_import from django . core . exceptions import FieldError from django . test import TestCase from . models import Author , Article class CustomColumnsTests ( TestCase ) : def test_db_column ( self ) : a1 = Author . objects . create ( first_name = "John" , last_name = "Smith" ) a2 = Author . objects . create ( first_name = "Peter" , last_name = "Jones" ) art = Article . objects . create ( headline = "Django lets you build Web apps easily" ) art . authors = [ a1 , a2 ] self . assertQuerysetEqual ( Author . objects . all ( ) , [ , "John Smith" , ] , unicode ) self . assertQuerysetEqual ( Author . objects . filter ( first_name__exact = "John" ) , [ , ] , unicode ) self . assertEqual ( Author . objects . get ( first_name__exact = "John" ) , a1 , ) self . assertRaises ( FieldError , lambda : Author . objects . filter ( firstname__exact = "John" ) ) a = Author . objects . get ( last_name__exact = "Smith" ) a . first_name = "John" a . last_name = "Smith" self . assertRaises ( AttributeError , lambda : a . firstname ) self . assertRaises ( AttributeError , lambda : a . last ) self . assertQuerysetEqual ( art . authors . all ( ) , [ , , ] , unicode ) self . assertQuerysetEqual ( a . article_set . all ( ) , [ , ] , lambda a : a . headline ) self . assertQuerysetEqual ( art . authors . filter ( last_name = 'Jones' ) , [ ] , unicode )
