from __future__ import with_statement , absolute_import import gettext from os import path from django . conf import settings from django . test import TestCase from django . utils . translation import override , activate , get_language from django . utils . text import javascript_quote from . . urls import locale_dir class I18NTests ( TestCase ) : def test_setlang ( self ) : for lang_code , lang_name in settings . LANGUAGES : post_data = dict ( language = lang_code , next = '/views/' ) response = self . client . post ( '/views/i18n/setlang/' , data = post_data ) self . assertRedirects ( response , 'http://testserver/views/' ) self . assertEqual ( self . client . session [ 'django_language' ] , lang_code ) def test_jsi18n ( self ) : saved_lang = get_language ( ) for lang_code in [ 'es' , 'fr' , 'ru' ] : activate ( lang_code ) catalog = gettext . translation ( 'djangojs' , locale_dir , [ lang_code ] ) trans_txt = catalog . ugettext ( 'this is to be translated' ) response = self . client . get ( '/views/jsi18n/' ) self . assertContains ( response , javascript_quote ( trans_txt ) , 1 ) if lang_code == 'fr' : self . assertContains ( response , "['month name\x04May'] = 'mai';" , 1 ) activate ( saved_lang ) class JsI18NTests ( TestCase ) : def test_jsi18n_with_missing_en_files ( self ) : with self . settings ( LANGUAGE_CODE = 'es' ) : with override ( 'en-us' ) : response = self . client . get ( '/views/jsi18n/' ) self . assertNotContains ( response , 'esto tiene que ser traducido' ) def test_jsi18n_fallback_language ( self ) : with self . settings ( LANGUAGE_CODE = 'fr' ) : with override ( 'fi' ) : response = self . client . get ( '/views/jsi18n/' ) self . assertContains ( response , 'il faut le traduire' ) def testI18NLanguageNonEnglishDefault ( self ) : with self . settings ( LANGUAGE_CODE = 'fr' ) : with override ( 'en-us' ) : response = self . client . get ( '/views/jsi18n/' ) self . assertNotContains ( response , 'Choisir une heure' ) def test_nonenglish_default_english_userpref ( self ) : extended_apps = list ( settings . INSTALLED_APPS ) + [ 'regressiontests.views.app0' ] with self . settings ( LANGUAGE_CODE = 'fr' , INSTALLED_APPS = extended_apps ) : with override ( 'en-us' ) : response = self . client . get ( '/views/jsi18n_english_translation/' ) self . assertContains ( response , javascript_quote ( 'this app0 string is to be translated' ) ) def testI18NLanguageNonEnglishFallback ( self ) : with self . settings ( LANGUAGE_CODE = 'fr' ) : with override ( 'none' ) : response = self . client . get ( '/views/jsi18n/' ) self . assertContains ( response , 'Choisir une heure' ) class JsI18NTestsMultiPackage ( TestCase ) : def testI18NLanguageEnglishDefault ( self ) : extended_apps = list ( settings . INSTALLED_APPS ) + [ 'regressiontests.views.app1' , 'regressiontests.views.app2' ] with self . settings ( LANGUAGE_CODE = 'en-us' , INSTALLED_APPS = extended_apps ) : with override ( 'fr' ) : response = self . client . get ( '/views/jsi18n_multi_packages1/' ) self . assertContains ( response , javascript_quote ( 'il faut traduire cette chaîne de caractères de app1' ) ) def testI18NDifferentNonEnLangs ( self ) : extended_apps = list ( settings . INSTALLED_APPS ) + [ 'regressiontests.views.app3' , 'regressiontests.views.app4' ] with self . settings ( LANGUAGE_CODE = 'fr' , INSTALLED_APPS = extended_apps ) : with override ( 'es-ar' ) : response = self . client . get ( '/views/jsi18n_multi_packages2/' ) self . assertContains ( response , javascript_quote ( 'este texto de app3 debe ser traducido' ) ) def testI18NWithLocalePaths ( self ) : extended_locale_paths = settings . LOCALE_PATHS + ( path . join ( path . dirname ( path . dirname ( path . abspath ( __file__ ) ) ) , 'app3' , 'locale' ) , ) with self . settings ( LANGUAGE_CODE = 'es-ar' , LOCALE_PATHS = extended_locale_paths ) : with override ( 'es-ar' ) : response = self . client . get ( '/views/jsi18n/' ) self . assertContains ( response , javascript_quote ( 'este texto de app3 debe ser traducido' ) )
