from __future__ import absolute_import from django . db import transaction , IntegrityError , DatabaseError from django . test import TestCase from . models import ( Counter , WithCustomPK , InheritedCounter , ProxyCounter , SubCounter ) class ForceTests ( TestCase ) : def test_force_update ( self ) : c = Counter . objects . create ( name = "one" , value = 1 ) c . value = 2 c . save ( ) c . value = 3 c . save ( force_update = True ) c . value = 4 self . assertRaises ( ValueError , c . save , force_insert = True , force_update = True ) c1 = Counter ( name = "two" , value = 2 ) self . assertRaises ( ValueError , c1 . save , force_update = True ) c1 . save ( force_insert = True ) sid = transaction . savepoint ( ) c . value = 5 self . assertRaises ( IntegrityError , c . save , force_insert = True ) transaction . savepoint_rollback ( sid ) obj = WithCustomPK ( name = 1 , value = 1 ) self . assertRaises ( DatabaseError , obj . save , force_update = True ) class InheritanceTests ( TestCase ) : def test_force_update_on_inherited_model ( self ) : a = InheritedCounter ( name = "count" , value = 1 , tag = "spam" ) a . save ( ) a . save ( force_update = True ) def test_force_update_on_proxy_model ( self ) : a = ProxyCounter ( name = "count" , value = 1 ) a . save ( ) a . save ( force_update = True ) def test_force_update_on_inherited_model_without_fields ( self ) : a = SubCounter ( name = "count" , value = 1 ) a . save ( ) a . value = 2 a . save ( force_update = True )
