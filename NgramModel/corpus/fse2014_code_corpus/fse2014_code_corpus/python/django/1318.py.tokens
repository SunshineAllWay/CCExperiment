""" UY-specific form helpers. """ from __future__ import absolute_import from django . core . validators import EMPTY_VALUES from django . forms . fields import Select , RegexField from django . forms import ValidationError from django . utils . translation import ugettext_lazy as _ from django . contrib . localflavor . uy . util import get_validation_digit class UYDepartamentSelect ( Select ) : def __init__ ( self , attrs = None ) : from django . contrib . localflavor . uy . uy_departaments import DEPARTAMENT_CHOICES super ( UYDepartamentSelect , self ) . __init__ ( attrs , choices = DEPARTAMENT_CHOICES ) class UYCIField ( RegexField ) : default_error_messages = { : _ ( "Enter a valid CI number in X.XXX.XXX-X," ) , : _ ( "Enter a valid CI number." ) , } def __init__ ( self , * args , ** kwargs ) : super ( UYCIField , self ) . __init__ ( r'(?P<num>(\d{6,7}|(\d\.)?\d{3}\.\d{3}))-?(?P<val>\d)' , * args , ** kwargs ) def clean ( self , value ) : value = super ( UYCIField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' match = self . regex . match ( value ) if not match : raise ValidationError ( self . error_messages [ 'invalid' ] ) number = int ( match . group ( 'num' ) . replace ( '.' , '' ) ) validation_digit = int ( match . group ( 'val' ) ) if not validation_digit == get_validation_digit ( number ) : raise ValidationError ( self . error_messages [ 'invalid_validation_digit' ] ) return value
