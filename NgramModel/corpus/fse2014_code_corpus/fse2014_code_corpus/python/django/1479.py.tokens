from django . contrib . sites . models import Site from django . core import urlresolvers , paginator from django . core . exceptions import ImproperlyConfigured import urllib PING_URL = "http://www.google.com/webmasters/tools/ping" class SitemapNotFound ( Exception ) : pass def ping_google ( sitemap_url = None , ping_url = PING_URL ) : if sitemap_url is None : try : sitemap_url = urlresolvers . reverse ( 'django.contrib.sitemaps.views.index' ) except urlresolvers . NoReverseMatch : try : sitemap_url = urlresolvers . reverse ( 'django.contrib.sitemaps.views.sitemap' ) except urlresolvers . NoReverseMatch : pass if sitemap_url is None : raise SitemapNotFound ( "You didn't provide a sitemap_url, and the sitemap URL couldn't be auto-detected." ) from django . contrib . sites . models import Site current_site = Site . objects . get_current ( ) url = "http://%s%s" % ( current_site . domain , sitemap_url ) params = urllib . urlencode ( { 'sitemap' : url } ) urllib . urlopen ( "%s?%s" % ( ping_url , params ) ) class Sitemap ( object ) : limit = 50000 protocol = None def __get ( self , name , obj , default = None ) : try : attr = getattr ( self , name ) except AttributeError : return default if callable ( attr ) : return attr ( obj ) return attr def items ( self ) : return [ ] def location ( self , obj ) : return obj . get_absolute_url ( ) def _get_paginator ( self ) : return paginator . Paginator ( self . items ( ) , self . limit ) paginator = property ( _get_paginator ) def get_urls ( self , page = 1 , site = None , protocol = None ) : if self . protocol is not None : protocol = self . protocol if protocol is None : protocol = 'http' if site is None : if Site . _meta . installed : try : site = Site . objects . get_current ( ) except Site . DoesNotExist : pass if site is None : raise ImproperlyConfigured ( "To use sitemaps, either enable the sites framework or pass a Site/RequestSite object in your view." ) domain = site . domain urls = [ ] for item in self . paginator . page ( page ) . object_list : loc = "%s://%s%s" % ( protocol , domain , self . __get ( 'location' , item ) ) priority = self . __get ( 'priority' , item , None ) url_info = { : item , : loc , : self . __get ( 'lastmod' , item , None ) , : self . __get ( 'changefreq' , item , None ) , : str ( priority is not None and priority or '' ) , } urls . append ( url_info ) return urls class FlatPageSitemap ( Sitemap ) : def items ( self ) : current_site = Site . objects . get_current ( ) return current_site . flatpage_set . filter ( registration_required = False ) class GenericSitemap ( Sitemap ) : priority = None changefreq = None def __init__ ( self , info_dict , priority = None , changefreq = None ) : self . queryset = info_dict [ 'queryset' ] self . date_field = info_dict . get ( 'date_field' , None ) self . priority = priority self . changefreq = changefreq def items ( self ) : return self . queryset . filter ( ) def lastmod ( self , item ) : if self . date_field is not None : return getattr ( item , self . date_field ) return None
