from __future__ import with_statement import copy from django . conf import compat_patch_logging_config from django . core import mail from django . test import TestCase , RequestFactory from django . test . utils import override_settings from django . utils . log import CallbackFilter , RequireDebugFalse , getLogger OLD_LOGGING = { : 1 , : False , : { : { : 'ERROR' , : 'django.utils.log.AdminEmailHandler' } } , : { : { : [ 'mail_admins' ] , : 'ERROR' , : True , } , } } class PatchLoggingConfigTest ( TestCase ) : def test_filter_added ( self ) : config = copy . deepcopy ( OLD_LOGGING ) compat_patch_logging_config ( config ) self . assertEqual ( config [ "handlers" ] [ "mail_admins" ] [ "filters" ] , [ 'require_debug_false' ] ) def test_filter_configuration ( self ) : config = copy . deepcopy ( OLD_LOGGING ) compat_patch_logging_config ( config ) flt = config [ "filters" ] [ "require_debug_false" ] self . assertEqual ( flt [ "()" ] , "django.utils.log.RequireDebugFalse" ) def test_require_debug_false_filter ( self ) : filter_ = RequireDebugFalse ( ) with self . settings ( DEBUG = True ) : self . assertEqual ( filter_ . filter ( "record is not used" ) , False ) with self . settings ( DEBUG = False ) : self . assertEqual ( filter_ . filter ( "record is not used" ) , True ) def test_no_patch_if_filters_key_exists ( self ) : config = copy . deepcopy ( OLD_LOGGING ) config [ "handlers" ] [ "mail_admins" ] [ "filters" ] = [ ] new_config = copy . deepcopy ( config ) compat_patch_logging_config ( new_config ) self . assertEqual ( config , new_config ) def test_no_patch_if_no_mail_admins_handler ( self ) : config = copy . deepcopy ( OLD_LOGGING ) config [ "handlers" ] . pop ( "mail_admins" ) new_config = copy . deepcopy ( config ) compat_patch_logging_config ( new_config ) self . assertEqual ( config , new_config ) class CallbackFilterTest ( TestCase ) : def test_sense ( self ) : f_false = CallbackFilter ( lambda r : False ) f_true = CallbackFilter ( lambda r : True ) self . assertEqual ( f_false . filter ( "record" ) , False ) self . assertEqual ( f_true . filter ( "record" ) , True ) def test_passes_on_record ( self ) : collector = [ ] def _callback ( record ) : collector . append ( record ) return True f = CallbackFilter ( _callback ) f . filter ( "a record" ) self . assertEqual ( collector , [ "a record" ] ) class AdminEmailHandlerTest ( TestCase ) : def get_admin_email_handler ( self , logger ) : admin_email_handler = [ h for h in logger . handlers if h . __class__ . __name__ == "AdminEmailHandler" ] [ 0 ] return admin_email_handler @ override_settings ( ADMINS = ( ( 'whatever admin' , 'admin@example.com' ) , ) , EMAIL_SUBJECT_PREFIX = '-SuperAwesomeSubject-' ) def test_accepts_args ( self ) : message = "Custom message that says '%s' and '%s'" token1 = 'ping' token2 = 'pong' logger = getLogger ( 'django.request' ) admin_email_handler = self . get_admin_email_handler ( logger ) orig_filters = admin_email_handler . filters try : admin_email_handler . filters = [ ] logger . error ( message , token1 , token2 ) self . assertEqual ( len ( mail . outbox ) , 1 ) self . assertEqual ( mail . outbox [ 0 ] . to , [ 'admin@example.com' ] ) self . assertEqual ( mail . outbox [ 0 ] . subject , ) finally : admin_email_handler . filters = orig_filters @ override_settings ( ADMINS = ( ( 'whatever admin' , 'admin@example.com' ) , ) , EMAIL_SUBJECT_PREFIX = '-SuperAwesomeSubject-' , INTERNAL_IPS = ( '127.0.0.1' , ) , ) def test_accepts_args_and_request ( self ) : message = "Custom message that says '%s' and '%s'" token1 = 'ping' token2 = 'pong' logger = getLogger ( 'django.request' ) admin_email_handler = self . get_admin_email_handler ( logger ) orig_filters = admin_email_handler . filters try : admin_email_handler . filters = [ ] rf = RequestFactory ( ) request = rf . get ( '/' ) logger . error ( message , token1 , token2 , extra = { : 403 , : request , } ) self . assertEqual ( len ( mail . outbox ) , 1 ) self . assertEqual ( mail . outbox [ 0 ] . to , [ 'admin@example.com' ] ) self . assertEqual ( mail . outbox [ 0 ] . subject , ) finally : admin_email_handler . filters = orig_filters @ override_settings ( ADMINS = ( ( 'admin' , 'admin@example.com' ) , ) , EMAIL_SUBJECT_PREFIX = '' , DEBUG = False , ) def test_subject_accepts_newlines ( self ) : message = u'Message \r\n with newlines' expected_subject = u'ERROR: Message \\r\\n with newlines' self . assertEqual ( len ( mail . outbox ) , 0 ) logger = getLogger ( 'django.request' ) logger . error ( message ) self . assertEqual ( len ( mail . outbox ) , 1 ) self . assertFalse ( '\n' in mail . outbox [ 0 ] . subject ) self . assertFalse ( '\r' in mail . outbox [ 0 ] . subject ) self . assertEqual ( mail . outbox [ 0 ] . subject , expected_subject ) @ override_settings ( ADMINS = ( ( 'admin' , 'admin@example.com' ) , ) , EMAIL_SUBJECT_PREFIX = '' , DEBUG = False , ) def test_truncate_subject ( self ) : message = 'a' * 1000 expected_subject = 'ERROR: aa' + 'a' * 980 self . assertEqual ( len ( mail . outbox ) , 0 ) logger = getLogger ( 'django.request' ) logger . error ( message ) self . assertEqual ( len ( mail . outbox ) , 1 ) self . assertEqual ( mail . outbox [ 0 ] . subject , expected_subject )
