from django . utils . safestring import mark_safe from django . contrib . gis . geos import fromstr , Point , LineString , LinearRing , Polygon class GEvent ( object ) : def __init__ ( self , event , action ) : self . event = event self . action = action def __unicode__ ( self ) : return mark_safe ( '"%s", %s' % ( self . event , self . action ) ) class GOverlayBase ( object ) : def __init__ ( self ) : self . events = [ ] def latlng_from_coords ( self , coords ) : return '[%s]' % ',' . join ( [ 'new GLatLng(%s,%s)' % ( y , x ) for x , y in coords ] ) def add_event ( self , event ) : self . events . append ( event ) def __unicode__ ( self ) : return mark_safe ( '%s(%s)' % ( self . __class__ . __name__ , self . js_params ) ) class GPolygon ( GOverlayBase ) : def __init__ ( self , poly , stroke_color = '#0000ff' , stroke_weight = 2 , stroke_opacity = 1 , fill_color = '#0000ff' , fill_opacity = 0.4 ) : if isinstance ( poly , basestring ) : poly = fromstr ( poly ) if isinstance ( poly , ( tuple , list ) ) : poly = Polygon ( poly ) if not isinstance ( poly , Polygon ) : raise TypeError ( 'GPolygon may only initialize on GEOS Polygons.' ) self . envelope = poly . envelope self . points = self . latlng_from_coords ( poly . shell . coords ) self . stroke_color , self . stroke_opacity , self . stroke_weight = stroke_color , stroke_opacity , stroke_weight self . fill_color , self . fill_opacity = fill_color , fill_opacity super ( GPolygon , self ) . __init__ ( ) @ property def js_params ( self ) : return '%s, "%s", %s, %s, "%s", %s' % ( self . points , self . stroke_color , self . stroke_weight , self . stroke_opacity , self . fill_color , self . fill_opacity ) class GPolyline ( GOverlayBase ) : def __init__ ( self , geom , color = '#0000ff' , weight = 2 , opacity = 1 ) : if isinstance ( geom , basestring ) : geom = fromstr ( geom ) if isinstance ( geom , ( tuple , list ) ) : geom = Polygon ( geom ) if isinstance ( geom , ( LineString , LinearRing ) ) : self . latlngs = self . latlng_from_coords ( geom . coords ) elif isinstance ( geom , Polygon ) : self . latlngs = self . latlng_from_coords ( geom . shell . coords ) else : raise TypeError ( 'GPolyline may only initialize on GEOS LineString, LinearRing, and/or Polygon geometries.' ) self . envelope = geom . envelope self . color , self . weight , self . opacity = color , weight , opacity super ( GPolyline , self ) . __init__ ( ) @ property def js_params ( self ) : return '%s, "%s", %s, %s' % ( self . latlngs , self . color , self . weight , self . opacity ) class GIcon ( object ) : def __init__ ( self , varname , image = None , iconsize = None , shadow = None , shadowsize = None , iconanchor = None , infowindowanchor = None ) : self . varname = varname self . image = image self . iconsize = iconsize self . shadow = shadow self . shadowsize = shadowsize self . iconanchor = iconanchor self . infowindowanchor = infowindowanchor def __cmp__ ( self , other ) : return cmp ( self . varname , other . varname ) def __hash__ ( self ) : return hash ( self . __class__ ) ^ hash ( self . varname ) class GMarker ( GOverlayBase ) : def __init__ ( self , geom , title = None , draggable = False , icon = None ) : if isinstance ( geom , basestring ) : geom = fromstr ( geom ) if isinstance ( geom , ( tuple , list ) ) : geom = Point ( geom ) if isinstance ( geom , Point ) : self . latlng = self . latlng_from_coords ( geom . coords ) else : raise TypeError ( 'GMarker may only initialize on GEOS Point geometry.' ) self . envelope = geom . envelope self . title = title self . draggable = draggable self . icon = icon super ( GMarker , self ) . __init__ ( ) def latlng_from_coords ( self , coords ) : return 'new GLatLng(%s,%s)' % ( coords [ 1 ] , coords [ 0 ] ) def options ( self ) : result = [ ] if self . title : result . append ( 'title: "%s"' % self . title ) if self . icon : result . append ( 'icon: %s' % self . icon . varname ) if self . draggable : result . append ( 'draggable: true' ) return '{%s}' % ',' . join ( result ) @ property def js_params ( self ) : return '%s, %s' % ( self . latlng , self . options ( ) )
