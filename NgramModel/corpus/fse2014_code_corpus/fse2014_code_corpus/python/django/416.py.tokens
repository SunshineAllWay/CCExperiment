from __future__ import absolute_import import datetime from operator import attrgetter from django . core . exceptions import ValidationError from django . test import TestCase , skipUnlessDBFeature from django . utils import tzinfo from . models import ( Worker , Article , Party , Event , Department , BrokenUnicodeMethod , NonAutoPK ) class ModelTests ( TestCase ) : def test_related_gte_lookup ( self ) : Worker . objects . filter ( department__gte = 0 ) def test_related_lte_lookup ( self ) : Worker . objects . filter ( department__lte = 0 ) def test_empty_choice ( self ) : a = Article . objects . create ( headline = "Look at me!" , pub_date = datetime . datetime . now ( ) ) self . assertIs ( a . get_status_display ( ) , None ) a = Article . objects . get ( pk = a . pk ) self . assertEqual ( a . misc_data , u'' ) self . assertIs ( type ( a . misc_data ) , unicode ) def test_long_textfield ( self ) : a = Article . objects . create ( headline = "Really, really big" , pub_date = datetime . datetime . now ( ) , article_text = "ABCDE" * 1000 ) a = Article . objects . get ( pk = a . pk ) self . assertEqual ( len ( a . article_text ) , 5000 ) def test_date_lookup ( self ) : Party . objects . create ( when = datetime . datetime ( 1999 , 12 , 31 ) ) Party . objects . create ( when = datetime . datetime ( 1998 , 12 , 31 ) ) Party . objects . create ( when = datetime . datetime ( 1999 , 1 , 1 ) ) self . assertQuerysetEqual ( Party . objects . filter ( when__month = 2 ) , [ ] ) self . assertQuerysetEqual ( Party . objects . filter ( when__month = 1 ) , [ datetime . date ( 1999 , 1 , 1 ) ] , attrgetter ( "when" ) ) self . assertQuerysetEqual ( Party . objects . filter ( when__month = 12 ) , [ datetime . date ( 1999 , 12 , 31 ) , datetime . date ( 1998 , 12 , 31 ) , ] , attrgetter ( "when" ) ) self . assertQuerysetEqual ( Party . objects . filter ( when__year = 1998 ) , [ datetime . date ( 1998 , 12 , 31 ) , ] , attrgetter ( "when" ) ) self . assertQuerysetEqual ( Party . objects . filter ( when__day = "31" ) , [ datetime . date ( 1999 , 12 , 31 ) , datetime . date ( 1998 , 12 , 31 ) , ] , attrgetter ( "when" ) ) self . assertQuerysetEqual ( Party . objects . filter ( when__month = "12" ) , [ datetime . date ( 1999 , 12 , 31 ) , datetime . date ( 1998 , 12 , 31 ) , ] , attrgetter ( "when" ) ) self . assertQuerysetEqual ( Party . objects . filter ( when__year = "1998" ) , [ datetime . date ( 1998 , 12 , 31 ) , ] , attrgetter ( "when" ) ) def test_date_filter_null ( self ) : Party . objects . create ( when = datetime . datetime ( 1999 , 1 , 1 ) ) Party . objects . create ( ) p = Party . objects . filter ( when__month = 1 ) [ 0 ] self . assertEqual ( p . when , datetime . date ( 1999 , 1 , 1 ) ) self . assertQuerysetEqual ( Party . objects . filter ( pk = p . pk ) . dates ( "when" , "month" ) , [ 1 ] , attrgetter ( "month" ) ) def test_get_next_prev_by_field ( self ) : Event . objects . create ( when = datetime . datetime ( 2000 , 1 , 1 , 16 , 0 , 0 ) ) Event . objects . create ( when = datetime . datetime ( 2000 , 1 , 1 , 6 , 1 , 1 ) ) Event . objects . create ( when = datetime . datetime ( 2000 , 1 , 1 , 13 , 1 , 1 ) ) e = Event . objects . create ( when = datetime . datetime ( 2000 , 1 , 1 , 12 , 0 , 20 , 24 ) ) self . assertEqual ( e . get_next_by_when ( ) . when , datetime . datetime ( 2000 , 1 , 1 , 13 , 1 , 1 ) ) self . assertEqual ( e . get_previous_by_when ( ) . when , datetime . datetime ( 2000 , 1 , 1 , 6 , 1 , 1 ) ) def test_primary_key_foreign_key_types ( self ) : d = Department . objects . create ( id = 10 , name = "IT" ) w = Worker . objects . create ( department = d , name = "Full-time" ) self . assertEqual ( unicode ( w ) , "Full-time" ) def test_broken_unicode ( self ) : b = BrokenUnicodeMethod . objects . create ( name = "Jerry" ) self . assertEqual ( repr ( b ) , "<BrokenUnicodeMethod: [Bad Unicode data]>" ) @ skipUnlessDBFeature ( "supports_timezones" ) def test_timezones ( self ) : dt1 = datetime . datetime ( 2008 , 8 , 31 , 16 , 20 , tzinfo = tzinfo . FixedOffset ( 600 ) ) dt2 = datetime . datetime ( 2008 , 8 , 31 , 17 , 20 , tzinfo = tzinfo . FixedOffset ( 600 ) ) obj = Article . objects . create ( headline = "A headline" , pub_date = dt1 , article_text = "foo" ) obj . pub_date = dt2 obj . save ( ) self . assertEqual ( Article . objects . filter ( headline = "A headline" ) . update ( pub_date = dt1 ) , 1 ) class ModelValidationTest ( TestCase ) : def test_pk_validation ( self ) : one = NonAutoPK . objects . create ( name = "one" ) again = NonAutoPK ( name = "one" ) self . assertRaises ( ValidationError , again . validate_unique ) class EvaluateMethodTest ( TestCase ) : def test_model_with_evaluate_method ( self ) : dept = Department . objects . create ( pk = 1 , name = 'abc' ) dept . evaluate = 'abc' Worker . objects . filter ( department = dept )
