""" Mexican-specific form helpers. """ import re from django . forms import ValidationError from django . forms . fields import Select , RegexField from django . utils . translation import ugettext_lazy as _ from django . core . validators import EMPTY_VALUES from django . contrib . localflavor . mx . mx_states import STATE_CHOICES DATE_RE = r'\d{2}((01|03|05|07|08|10|12)(0[1-9]|[12]\d|3[01])|02(0[1-9]|[12]\d)|(04|06|09|11)(0[1-9]|[12]\d|30))' RFC_INCONVENIENT_WORDS = [ , u'BUEY' , u'CACA' , u'CACO' , u'CAGA' , u'CAGO' , u'CAKA' , u'CAKO' , , u'COJA' , u'COJE' , u'COJI' , u'COJO' , u'CULO' , u'FETO' , u'GUEY' , , u'KACA' , u'KACO' , u'KAGA' , u'KAGO' , u'KOGE' , u'KOJO' , u'KAKA' , , u'MAME' , u'MAMO' , u'MEAR' , u'MEAS' , u'MEON' , u'MION' , u'MOCO' , , u'PEDA' , u'PEDO' , u'PENE' , u'PUTA' , u'PUTO' , u'QULO' , u'RATA' , , ] CURP_INCONVENIENT_WORDS = [ , u'BAKA' , u'BUEI' , u'BUEY' , u'CACA' , u'CACO' , u'CAGA' , u'CAGO' , , u'CAKO' , u'COGE' , u'COGI' , u'COJA' , u'COJE' , u'COJI' , u'COJO' , , u'CULO' , u'FALO' , u'FETO' , u'GETA' , u'GUEI' , u'GUEY' , u'JETA' , , u'KACA' , u'KACO' , u'KAGA' , u'KAGO' , u'KAKA' , u'KAKO' , u'KOGE' , , u'KOJA' , u'KOJE' , u'KOJI' , u'KOJO' , u'KOLA' , u'KULO' , u'LILO' , , u'LOCO' , u'LOKA' , u'LOKO' , u'MAME' , u'MAMO' , u'MEAR' , u'MEAS' , , u'MIAR' , u'MION' , u'MOCO' , u'MOKO' , u'MULA' , u'MULO' , u'NACA' , , u'PEDA' , u'PEDO' , u'PENE' , u'PIPI' , u'PITO' , u'POPO' , u'PUTA' , , u'QULO' , u'RATA' , u'ROBA' , u'ROBE' , u'ROBO' , u'RUIN' , u'SENO' , , u'VACA' , u'VAGA' , u'VAGO' , u'VAKA' , u'VUEI' , u'VUEY' , u'WUEI' , , ] class MXStateSelect ( Select ) : def __init__ ( self , attrs = None ) : super ( MXStateSelect , self ) . __init__ ( attrs , choices = STATE_CHOICES ) class MXZipCodeField ( RegexField ) : default_error_messages = { : _ ( u'Enter a valid zip code in the format XXXXX.' ) , } def __init__ ( self , * args , ** kwargs ) : zip_code_re = ur'^(0[1-9]|[1][0-6]|[2-9]\d)(\d{3})$' super ( MXZipCodeField , self ) . __init__ ( zip_code_re , * args , ** kwargs ) class MXRFCField ( RegexField ) : default_error_messages = { : _ ( 'Enter a valid RFC.' ) , : _ ( 'Invalid checksum for RFC.' ) , } def __init__ ( self , min_length = 9 , max_length = 13 , * args , ** kwargs ) : rfc_re = re . compile ( ur'^([A-Z&Ññ]{3}|[A-Z][AEIOU][A-Z]{2})%s([A-Z0-9]{2}[0-9A])?$' % DATE_RE , re . IGNORECASE ) super ( MXRFCField , self ) . __init__ ( rfc_re , min_length = min_length , max_length = max_length , * args , ** kwargs ) def clean ( self , value ) : value = super ( MXRFCField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' value = value . upper ( ) if self . _has_homoclave ( value ) : if not value [ - 1 ] == self . _checksum ( value [ : - 1 ] ) : raise ValidationError ( self . default_error_messages [ 'invalid_checksum' ] ) if self . _has_inconvenient_word ( value ) : raise ValidationError ( self . default_error_messages [ 'invalid' ] ) return value def _has_homoclave ( self , rfc ) : rfc_without_homoclave_re = re . compile ( ur'^[A-Z&Ññ]{3,4}%s$' % DATE_RE , re . IGNORECASE ) return not rfc_without_homoclave_re . match ( rfc ) def _checksum ( self , rfc ) : chars = u'0123456789ABCDEFGHIJKLMN&OPQRSTUVWXYZ-Ñ' if len ( rfc ) == 11 : rfc = '-' + rfc sum_ = sum ( i * chars . index ( c ) for i , c in zip ( reversed ( xrange ( 14 ) ) , rfc ) ) checksum = 11 - sum_ % 11 if checksum == 10 : return u'A' elif checksum == 11 : return u'0' return unicode ( checksum ) def _has_inconvenient_word ( self , rfc ) : first_four = rfc [ : 4 ] return first_four in RFC_INCONVENIENT_WORDS class MXCURPField ( RegexField ) : default_error_messages = { : _ ( 'Enter a valid CURP.' ) , : _ ( u'Invalid checksum for CURP.' ) , } def __init__ ( self , min_length = 18 , max_length = 18 , * args , ** kwargs ) : states_re = r'(AS|BC|BS|CC|CL|CM|CS|CH|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)' consonants_re = r'[B-DF-HJ-NP-TV-Z]' curp_re = ( ur'^[A-Z][AEIOU][A-Z]{2}%s[HM]%s%s{3}[0-9A-Z]\d$' % ( DATE_RE , states_re , consonants_re ) ) curp_re = re . compile ( curp_re , re . IGNORECASE ) super ( MXCURPField , self ) . __init__ ( curp_re , min_length = min_length , max_length = max_length , * args , ** kwargs ) def clean ( self , value ) : value = super ( MXCURPField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' value = value . upper ( ) if value [ - 1 ] != self . _checksum ( value [ : - 1 ] ) : raise ValidationError ( self . default_error_messages [ 'invalid_checksum' ] ) if self . _has_inconvenient_word ( value ) : raise ValidationError ( self . default_error_messages [ 'invalid' ] ) return value def _checksum ( self , value ) : chars = u'0123456789ABCDEFGHIJKLMN&OPQRSTUVWXYZ' s = sum ( i * chars . index ( c ) for i , c in zip ( reversed ( xrange ( 19 ) ) , value ) ) checksum = 10 - s % 10 if checksum == 10 : return u'0' return unicode ( checksum ) def _has_inconvenient_word ( self , curp ) : first_four = curp [ : 4 ] return first_four in CURP_INCONVENIENT_WORDS
