import unittest as real_unittest from django . conf import settings from django . core . exceptions import ImproperlyConfigured from django . db . models import get_app , get_apps from django . test import _doctest as doctest from django . test . utils import setup_test_environment , teardown_test_environment from django . test . testcases import OutputChecker , DocTestRunner , TestCase from django . utils import unittest from django . utils . importlib import import_module from django . utils . module_loading import module_has_submodule __all__ = ( 'DjangoTestRunner' , 'DjangoTestSuiteRunner' ) TEST_MODULE = 'tests' doctestOutputChecker = OutputChecker ( ) class DjangoTestRunner ( unittest . TextTestRunner ) : def __init__ ( self , * args , ** kwargs ) : import warnings warnings . warn ( , DeprecationWarning ) super ( DjangoTestRunner , self ) . __init__ ( * args , ** kwargs ) def get_tests ( app_module ) : parts = app_module . __name__ . split ( '.' ) prefix , last = parts [ : - 1 ] , parts [ - 1 ] try : test_module = import_module ( '.' . join ( prefix + [ TEST_MODULE ] ) ) except ImportError : if last == 'models' : app_root = import_module ( '.' . join ( prefix ) ) else : app_root = app_module if not module_has_submodule ( app_root , TEST_MODULE ) : test_module = None else : raise return test_module def build_suite ( app_module ) : suite = unittest . TestSuite ( ) if hasattr ( app_module , 'suite' ) : suite . addTest ( app_module . suite ( ) ) else : suite . addTest ( unittest . defaultTestLoader . loadTestsFromModule ( app_module ) ) try : suite . addTest ( doctest . DocTestSuite ( app_module , checker = doctestOutputChecker , runner = DocTestRunner ) ) except ValueError : pass test_module = get_tests ( app_module ) if test_module : if hasattr ( test_module , 'suite' ) : suite . addTest ( test_module . suite ( ) ) else : suite . addTest ( unittest . defaultTestLoader . loadTestsFromModule ( test_module ) ) try : suite . addTest ( doctest . DocTestSuite ( test_module , checker = doctestOutputChecker , runner = DocTestRunner ) ) except ValueError : pass return suite def build_test ( label ) : parts = label . split ( '.' ) if len ( parts ) < 2 or len ( parts ) > 3 : raise ValueError ( "Test label '%s' should be of the form app.TestCase " % label ) app_module = get_app ( parts [ 0 ] ) test_module = get_tests ( app_module ) TestClass = getattr ( app_module , parts [ 1 ] , None ) if TestClass is None : if test_module : TestClass = getattr ( test_module , parts [ 1 ] , None ) try : if issubclass ( TestClass , ( unittest . TestCase , real_unittest . TestCase ) ) : if len ( parts ) == 2 : try : return unittest . TestLoader ( ) . loadTestsFromTestCase ( TestClass ) except TypeError : raise ValueError ( % label ) else : return TestClass ( parts [ 2 ] ) except TypeError : pass tests = [ ] for module in app_module , test_module : try : doctests = doctest . DocTestSuite ( module , checker = doctestOutputChecker , runner = DocTestRunner ) for test in doctests : if test . _dt_test . name in ( % ( module . __name__ , '.' . join ( parts [ 1 : ] ) ) , % ( module . __name__ , '.' . join ( parts [ 1 : ] ) ) ) : tests . append ( test ) except ValueError : pass if not tests : raise ValueError ( "Test label '%s' does not refer to a test" % label ) return unittest . TestSuite ( tests ) def partition_suite ( suite , classes , bins ) : for test in suite : if isinstance ( test , unittest . TestSuite ) : partition_suite ( test , classes , bins ) else : for i in range ( len ( classes ) ) : if isinstance ( test , classes [ i ] ) : bins [ i ] . addTest ( test ) break else : bins [ - 1 ] . addTest ( test ) def reorder_suite ( suite , classes ) : class_count = len ( classes ) bins = [ unittest . TestSuite ( ) for i in range ( class_count + 1 ) ] partition_suite ( suite , classes , bins ) for i in range ( class_count ) : bins [ 0 ] . addTests ( bins [ i + 1 ] ) return bins [ 0 ] def dependency_ordered ( test_databases , dependencies ) : ordered_test_databases = [ ] resolved_databases = set ( ) while test_databases : changed = False deferred = [ ] while test_databases : signature , ( db_name , aliases ) = test_databases . pop ( ) dependencies_satisfied = True for alias in aliases : if alias in dependencies : if all ( a in resolved_databases for a in dependencies [ alias ] ) : dependencies . pop ( alias ) resolved_databases . add ( alias ) else : dependencies_satisfied = False else : resolved_databases . add ( alias ) if dependencies_satisfied : ordered_test_databases . append ( ( signature , ( db_name , aliases ) ) ) changed = True else : deferred . append ( ( signature , ( db_name , aliases ) ) ) if not changed : raise ImproperlyConfigured ( ) test_databases = deferred return ordered_test_databases class DjangoTestSuiteRunner ( object ) : def __init__ ( self , verbosity = 1 , interactive = True , failfast = True , ** kwargs ) : self . verbosity = verbosity self . interactive = interactive self . failfast = failfast def setup_test_environment ( self , ** kwargs ) : setup_test_environment ( ) settings . DEBUG = False unittest . installHandler ( ) def build_suite ( self , test_labels , extra_tests = None , ** kwargs ) : suite = unittest . TestSuite ( ) if test_labels : for label in test_labels : if '.' in label : suite . addTest ( build_test ( label ) ) else : app = get_app ( label ) suite . addTest ( build_suite ( app ) ) else : for app in get_apps ( ) : suite . addTest ( build_suite ( app ) ) if extra_tests : for test in extra_tests : suite . addTest ( test ) return reorder_suite ( suite , ( TestCase , ) ) def setup_databases ( self , ** kwargs ) : from django . db import connections , DEFAULT_DB_ALIAS mirrored_aliases = { } test_databases = { } dependencies = { } for alias in connections : connection = connections [ alias ] if connection . settings_dict [ 'TEST_MIRROR' ] : mirrored_aliases [ alias ] = ( connection . settings_dict [ 'TEST_MIRROR' ] ) else : item = test_databases . setdefault ( connection . creation . test_db_signature ( ) , ( connection . settings_dict [ 'NAME' ] , [ ] ) ) item [ 1 ] . append ( alias ) if 'TEST_DEPENDENCIES' in connection . settings_dict : dependencies [ alias ] = ( connection . settings_dict [ 'TEST_DEPENDENCIES' ] ) else : if alias != DEFAULT_DB_ALIAS : dependencies [ alias ] = connection . settings_dict . get ( , [ DEFAULT_DB_ALIAS ] ) old_names = [ ] mirrors = [ ] for signature , ( db_name , aliases ) in dependency_ordered ( test_databases . items ( ) , dependencies ) : connection = connections [ aliases [ 0 ] ] old_names . append ( ( connection , db_name , True ) ) test_db_name = connection . creation . create_test_db ( self . verbosity , autoclobber = not self . interactive ) for alias in aliases [ 1 : ] : connection = connections [ alias ] if db_name : old_names . append ( ( connection , db_name , False ) ) connection . settings_dict [ 'NAME' ] = test_db_name else : old_names . append ( ( connection , db_name , True ) ) connection . creation . create_test_db ( self . verbosity , autoclobber = not self . interactive ) for alias , mirror_alias in mirrored_aliases . items ( ) : mirrors . append ( ( alias , connections [ alias ] . settings_dict [ 'NAME' ] ) ) connections [ alias ] . settings_dict [ 'NAME' ] = ( connections [ mirror_alias ] . settings_dict [ 'NAME' ] ) connections [ alias ] . features = connections [ mirror_alias ] . features return old_names , mirrors def run_suite ( self , suite , ** kwargs ) : return unittest . TextTestRunner ( verbosity = self . verbosity , failfast = self . failfast ) . run ( suite ) def teardown_databases ( self , old_config , ** kwargs ) : old_names , mirrors = old_config for connection , old_name , destroy in old_names : if destroy : connection . creation . destroy_test_db ( old_name , self . verbosity ) def teardown_test_environment ( self , ** kwargs ) : unittest . removeHandler ( ) teardown_test_environment ( ) def suite_result ( self , suite , result , ** kwargs ) : return len ( result . failures ) + len ( result . errors ) def run_tests ( self , test_labels , extra_tests = None , ** kwargs ) : self . setup_test_environment ( ) suite = self . build_suite ( test_labels , extra_tests ) old_config = self . setup_databases ( ) result = self . run_suite ( suite ) self . teardown_databases ( old_config ) self . teardown_test_environment ( ) return self . suite_result ( suite , result )
