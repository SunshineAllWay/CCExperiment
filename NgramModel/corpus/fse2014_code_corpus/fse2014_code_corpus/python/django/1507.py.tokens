from django . contrib . auth . models import User , Permission class ModelBackend ( object ) : supports_inactive_user = True def authenticate ( self , username = None , password = None ) : try : user = User . objects . get ( username = username ) if user . check_password ( password ) : return user except User . DoesNotExist : return None def get_group_permissions ( self , user_obj , obj = None ) : if user_obj . is_anonymous ( ) or obj is not None : return set ( ) if not hasattr ( user_obj , '_group_perm_cache' ) : if user_obj . is_superuser : perms = Permission . objects . all ( ) else : perms = Permission . objects . filter ( group__user = user_obj ) perms = perms . values_list ( 'content_type__app_label' , 'codename' ) . order_by ( ) user_obj . _group_perm_cache = set ( [ "%s.%s" % ( ct , name ) for ct , name in perms ] ) return user_obj . _group_perm_cache def get_all_permissions ( self , user_obj , obj = None ) : if user_obj . is_anonymous ( ) or obj is not None : return set ( ) if not hasattr ( user_obj , '_perm_cache' ) : user_obj . _perm_cache = set ( [ u"%s.%s" % ( p . content_type . app_label , p . codename ) for p in user_obj . user_permissions . select_related ( ) ] ) user_obj . _perm_cache . update ( self . get_group_permissions ( user_obj ) ) return user_obj . _perm_cache def has_perm ( self , user_obj , perm , obj = None ) : if not user_obj . is_active : return False return perm in self . get_all_permissions ( user_obj , obj ) def has_module_perms ( self , user_obj , app_label ) : if not user_obj . is_active : return False for perm in self . get_all_permissions ( user_obj ) : if perm [ : perm . index ( '.' ) ] == app_label : return True return False def get_user ( self , user_id ) : try : return User . objects . get ( pk = user_id ) except User . DoesNotExist : return None class RemoteUserBackend ( ModelBackend ) : create_unknown_user = True def authenticate ( self , remote_user ) : if not remote_user : return user = None username = self . clean_username ( remote_user ) if self . create_unknown_user : user , created = User . objects . get_or_create ( username = username ) if created : user = self . configure_user ( user ) else : try : user = User . objects . get ( username = username ) except User . DoesNotExist : pass return user def clean_username ( self , username ) : return username def configure_user ( self , user ) : return user
