from __future__ import absolute_import from datetime import datetime from django . core . exceptions import ObjectDoesNotExist from django . db . models . fields import FieldDoesNotExist from django . test import TestCase , skipIfDBFeature , skipUnlessDBFeature from . models import Article class ModelTest ( TestCase ) : def test_lookup ( self ) : self . assertQuerysetEqual ( Article . objects . all ( ) , [ ] ) a = Article ( id = None , headline = 'Area man programs in Python' , pub_date = datetime ( 2005 , 7 , 28 ) , ) a . save ( ) self . assertTrue ( a . id != None ) self . assertEqual ( a . pk , a . id ) self . assertEqual ( a . headline , 'Area man programs in Python' ) self . assertEqual ( a . pub_date , datetime ( 2005 , 7 , 28 , 0 , 0 ) ) a . headline = 'Area woman programs in Python' a . save ( ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ '<Article: Area woman programs in Python>' ] ) self . assertEqual ( Article . objects . get ( id__exact = a . id ) , a ) self . assertEqual ( Article . objects . get ( headline__startswith = 'Area woman' ) , a ) self . assertEqual ( Article . objects . get ( pub_date__year = 2005 ) , a ) self . assertEqual ( Article . objects . get ( pub_date__year = 2005 , pub_date__month = 7 ) , a ) self . assertEqual ( Article . objects . get ( pub_date__year = 2005 , pub_date__month = 7 , pub_date__day = 28 ) , a ) self . assertEqual ( Article . objects . get ( pub_date__week_day = 5 ) , a ) self . assertEqual ( Article . objects . get ( id = a . id ) , a ) self . assertEqual ( Article . objects . get ( headline = 'Area woman programs in Python' ) , a ) self . assertQuerysetEqual ( Article . objects . filter ( pub_date__year = 2005 ) , [ '<Article: Area woman programs in Python>' ] , ) self . assertQuerysetEqual ( Article . objects . filter ( pub_date__year = 2004 ) , [ ] , ) self . assertQuerysetEqual ( Article . objects . filter ( pub_date__year = 2005 , pub_date__month = 7 ) , [ '<Article: Area woman programs in Python>' ] , ) self . assertQuerysetEqual ( Article . objects . filter ( pub_date__week_day = 5 ) , [ '<Article: Area woman programs in Python>' ] , ) self . assertQuerysetEqual ( Article . objects . filter ( pub_date__week_day = 6 ) , [ ] , ) self . assertRaisesRegexp ( ObjectDoesNotExist , , Article . objects . get , id__exact = 2000 , ) self . assertRaisesRegexp ( ObjectDoesNotExist , , Article . objects . get , pub_date__year = 2005 , pub_date__month = 8 , ) self . assertRaisesRegexp ( ObjectDoesNotExist , , Article . objects . get , pub_date__week_day = 6 , ) self . assertEqual ( Article . objects . get ( pk = a . id ) , a ) self . assertQuerysetEqual ( Article . objects . filter ( pk__in = [ a . id ] ) , [ "<Article: Area woman programs in Python>" ] ) a = Article . objects . get ( pk = a . id ) b = Article . objects . get ( pk = a . id ) self . assertEqual ( a , b ) def test_object_creation ( self ) : a = Article ( id = None , headline = 'Area man programs in Python' , pub_date = datetime ( 2005 , 7 , 28 ) , ) a . save ( ) a2 = Article ( None , 'Second article' , datetime ( 2005 , 7 , 29 ) ) a2 . save ( ) self . assertNotEqual ( a2 . id , a . id ) self . assertEqual ( a2 . headline , 'Second article' ) self . assertEqual ( a2 . pub_date , datetime ( 2005 , 7 , 29 , 0 , 0 ) ) a3 = Article ( id = None , headline = 'Third article' , pub_date = datetime ( 2005 , 7 , 30 ) , ) a3 . save ( ) self . assertNotEqual ( a3 . id , a . id ) self . assertNotEqual ( a3 . id , a2 . id ) self . assertEqual ( a3 . headline , 'Third article' ) self . assertEqual ( a3 . pub_date , datetime ( 2005 , 7 , 30 , 0 , 0 ) ) a4 = Article ( None , 'Fourth article' , pub_date = datetime ( 2005 , 7 , 31 ) ) a4 . save ( ) self . assertEqual ( a4 . headline , 'Fourth article' ) self . assertRaisesRegexp ( TypeError , , Article , id = None , headline = 'Invalid' , pub_date = datetime ( 2005 , 7 , 31 ) , foo = 'bar' , ) a5 = Article ( headline = 'Article 6' , pub_date = datetime ( 2005 , 7 , 31 ) ) a5 . save ( ) self . assertEqual ( a5 . headline , 'Article 6' ) a6 = Article ( pub_date = datetime ( 2005 , 7 , 31 ) ) a6 . save ( ) self . assertEqual ( a6 . headline , u'Default headline' ) a7 = Article ( headline = 'Article 7' , pub_date = datetime ( 2005 , 7 , 31 , 12 , 30 ) , ) a7 . save ( ) self . assertEqual ( Article . objects . get ( id__exact = a7 . id ) . pub_date , datetime ( 2005 , 7 , 31 , 12 , 30 ) ) a8 = Article ( headline = 'Article 8' , pub_date = datetime ( 2005 , 7 , 31 , 12 , 30 , 45 ) , ) a8 . save ( ) self . assertEqual ( Article . objects . get ( id__exact = a8 . id ) . pub_date , datetime ( 2005 , 7 , 31 , 12 , 30 , 45 ) ) current_id = a8 . id a8 . save ( ) self . assertEqual ( a8 . id , current_id ) a8 . headline = 'Updated article 8' a8 . save ( ) self . assertEqual ( a8 . id , current_id ) self . assertTrue ( a7 != a8 ) self . assertFalse ( a7 == a8 ) self . assertEqual ( a8 , Article . objects . get ( id__exact = a8 . id ) ) self . assertTrue ( Article . objects . get ( id__exact = a8 . id ) != Article . objects . get ( id__exact = a7 . id ) ) self . assertFalse ( Article . objects . get ( id__exact = a8 . id ) == Article . objects . get ( id__exact = a7 . id ) ) self . assertTrue ( a8 in Article . objects . all ( ) ) self . assertTrue ( Article . objects . filter ( id = a8 . id ) . exists ( ) ) self . assertQuerysetEqual ( Article . objects . dates ( 'pub_date' , 'year' ) , [ "datetime.datetime(2005, 1, 1, 0, 0)" ] ) self . assertQuerysetEqual ( Article . objects . dates ( 'pub_date' , 'month' ) , [ "datetime.datetime(2005, 7, 1, 0, 0)" ] ) self . assertQuerysetEqual ( Article . objects . dates ( 'pub_date' , 'day' ) , [ "datetime.datetime(2005, 7, 28, 0, 0)" , , , ] ) self . assertQuerysetEqual ( Article . objects . dates ( 'pub_date' , 'day' , order = 'ASC' ) , [ "datetime.datetime(2005, 7, 28, 0, 0)" , , , ] ) self . assertQuerysetEqual ( Article . objects . dates ( 'pub_date' , 'day' , order = 'DESC' ) , [ "datetime.datetime(2005, 7, 31, 0, 0)" , , , ] ) self . assertRaisesRegexp ( TypeError , , Article . objects . dates , ) self . assertRaisesRegexp ( FieldDoesNotExist , , Article . objects . dates , , , ) self . assertRaisesRegexp ( AssertionError , , Article . objects . dates , , , ) self . assertRaisesRegexp ( AssertionError , , Article . objects . dates , , , order = "bad order" , ) dates = [ ] for article in Article . objects . dates ( 'pub_date' , 'day' , order = 'DESC' ) . iterator ( ) : dates . append ( article ) self . assertEqual ( dates , [ datetime ( 2005 , 7 , 31 , 0 , 0 ) , datetime ( 2005 , 7 , 30 , 0 , 0 ) , datetime ( 2005 , 7 , 29 , 0 , 0 ) , datetime ( 2005 , 7 , 28 , 0 , 0 ) ] ) s1 = Article . objects . filter ( id__exact = a . id ) s2 = Article . objects . filter ( id__exact = a2 . id ) self . assertQuerysetEqual ( s1 | s2 , [ "<Article: Area man programs in Python>" , ] ) self . assertQuerysetEqual ( s1 & s2 , [ ] ) self . assertEqual ( len ( Article . objects . filter ( id__exact = a . id ) ) , 1 ) self . assertEqual ( Article . objects . all ( ) [ 0 ] , a ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 1 : 3 ] , [ "<Article: Second article>" , "<Article: Third article>" ] ) s3 = Article . objects . filter ( id__exact = a3 . id ) self . assertQuerysetEqual ( ( s1 | s2 | s3 ) [ : : 2 ] , [ "<Article: Area man programs in Python>" , ] ) self . assertEqual ( Article . objects . all ( ) [ 0L ] , a ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 1L : 3L ] , [ "<Article: Second article>" , "<Article: Third article>" ] ) self . assertQuerysetEqual ( ( s1 | s2 | s3 ) [ : : 2L ] , [ "<Article: Area man programs in Python>" , ] ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 1 : 3L ] , [ "<Article: Second article>" , "<Article: Third article>" ] ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 0 : 5 ] . filter ( ) , [ "<Article: Area man programs in Python>" , , , , ] ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 0 : 5 ] [ 0 : 2 ] , [ "<Article: Area man programs in Python>" , ] ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 0 : 5 ] [ : 2 ] , [ "<Article: Area man programs in Python>" , ] ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 0 : 5 ] [ 4 : ] , [ "<Article: Default headline>" ] ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 0 : 5 ] [ 5 : ] , [ ] ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 2 : ] [ 0 : 2 ] , [ "<Article: Third article>" , "<Article: Article 6>" ] ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 2 : ] [ : 2 ] , [ "<Article: Third article>" , "<Article: Article 6>" ] ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 2 : ] [ 2 : 3 ] , [ "<Article: Default headline>" ] ) self . assertQuerysetEqual ( Article . objects . all ( ) [ 5 : ] , [ "<Article: Fourth article>" , , ] ) self . assertRaisesRegexp ( AssertionError , , Article . objects . all ( ) [ 0 : 5 ] . filter , id = a . id , ) self . assertRaisesRegexp ( AssertionError , , Article . objects . all ( ) [ 0 : 5 ] . order_by , , ) try : Article . objects . all ( ) [ 0 : 1 ] & Article . objects . all ( ) [ 4 : 5 ] self . fail ( 'Should raise an AssertionError' ) except AssertionError , e : self . assertEqual ( str ( e ) , "Cannot combine queries once a slice has been taken." ) except Exception , e : self . fail ( 'Should raise an AssertionError, not %s' % e ) try : Article . objects . all ( ) [ - 1 ] self . fail ( 'Should raise an AssertionError' ) except AssertionError , e : self . assertEqual ( str ( e ) , "Negative indexing is not supported." ) except Exception , e : self . fail ( 'Should raise an AssertionError, not %s' % e ) error = None try : Article . objects . all ( ) [ 0 : - 5 ] except Exception , e : error = e self . assertTrue ( isinstance ( error , AssertionError ) ) self . assertEqual ( str ( error ) , "Negative indexing is not supported." ) self . assertRaisesRegexp ( AttributeError , , getattr , a7 , , ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ "<Article: Area man programs in Python>" , , , , , , , ] ) Article . objects . filter ( id__lte = a4 . id ) . delete ( ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ "<Article: Article 6>" , , , ] ) @ skipUnlessDBFeature ( 'supports_microsecond_precision' ) def test_microsecond_precision ( self ) : a9 = Article ( headline = 'Article 9' , pub_date = datetime ( 2005 , 7 , 31 , 12 , 30 , 45 , 180 ) , ) a9 . save ( ) self . assertEqual ( Article . objects . get ( pk = a9 . pk ) . pub_date , datetime ( 2005 , 7 , 31 , 12 , 30 , 45 , 180 ) ) @ skipIfDBFeature ( 'supports_microsecond_precision' ) def test_microsecond_precision_not_supported ( self ) : a9 = Article ( headline = 'Article 9' , pub_date = datetime ( 2005 , 7 , 31 , 12 , 30 , 45 , 180 ) , ) a9 . save ( ) self . assertEqual ( Article . objects . get ( id__exact = a9 . id ) . pub_date , datetime ( 2005 , 7 , 31 , 12 , 30 , 45 ) ) def test_manually_specify_primary_key ( self ) : a101 = Article ( id = 101 , headline = 'Article 101' , pub_date = datetime ( 2005 , 7 , 31 , 12 , 30 , 45 ) , ) a101 . save ( ) a101 = Article . objects . get ( pk = 101 ) self . assertEqual ( a101 . headline , u'Article 101' ) def test_create_method ( self ) : a10 = Article . objects . create ( headline = "Article 10" , pub_date = datetime ( 2005 , 7 , 31 , 12 , 30 , 45 ) , ) self . assertEqual ( Article . objects . get ( headline = "Article 10" ) , a10 ) def test_year_lookup_edge_case ( self ) : a11 = Article . objects . create ( headline = 'Article 11' , pub_date = datetime ( 2008 , 1 , 1 ) , ) a12 = Article . objects . create ( headline = 'Article 12' , pub_date = datetime ( 2008 , 12 , 31 , 23 , 59 , 59 , 999999 ) , ) self . assertQuerysetEqual ( Article . objects . filter ( pub_date__year = 2008 ) , [ "<Article: Article 11>" , "<Article: Article 12>" ] ) def test_unicode_data ( self ) : a = Article ( headline = u'\u6797\u539f \u3081\u3050\u307f' , pub_date = datetime ( 2005 , 7 , 28 ) , ) a . save ( ) self . assertEqual ( Article . objects . get ( pk = a . id ) . headline , ) def test_hash_function ( self ) : a10 = Article . objects . create ( headline = "Article 10" , pub_date = datetime ( 2005 , 7 , 31 , 12 , 30 , 45 ) , ) a11 = Article . objects . create ( headline = 'Article 11' , pub_date = datetime ( 2008 , 1 , 1 ) , ) a12 = Article . objects . create ( headline = 'Article 12' , pub_date = datetime ( 2008 , 12 , 31 , 23 , 59 , 59 , 999999 ) , ) s = set ( [ a10 , a11 , a12 ] ) self . assertTrue ( Article . objects . get ( headline = 'Article 11' ) in s ) def test_extra_method_select_argument_with_dashes_and_values ( self ) : a10 = Article . objects . create ( headline = "Article 10" , pub_date = datetime ( 2005 , 7 , 31 , 12 , 30 , 45 ) , ) a11 = Article . objects . create ( headline = 'Article 11' , pub_date = datetime ( 2008 , 1 , 1 ) , ) a12 = Article . objects . create ( headline = 'Article 12' , pub_date = datetime ( 2008 , 12 , 31 , 23 , 59 , 59 , 999999 ) , ) dicts = Article . objects . filter ( pub_date__year = 2008 ) . extra ( select = { 'dashed-value' : '1' } ) . values ( 'headline' , 'dashed-value' ) self . assertEqual ( [ sorted ( d . items ( ) ) for d in dicts ] , [ [ ( 'dashed-value' , 1 ) , ( 'headline' , u'Article 11' ) ] , [ ( 'dashed-value' , 1 ) , ( 'headline' , u'Article 12' ) ] ] ) def test_extra_method_select_argument_with_dashes ( self ) : a10 = Article . objects . create ( headline = "Article 10" , pub_date = datetime ( 2005 , 7 , 31 , 12 , 30 , 45 ) , ) a11 = Article . objects . create ( headline = 'Article 11' , pub_date = datetime ( 2008 , 1 , 1 ) , ) a12 = Article . objects . create ( headline = 'Article 12' , pub_date = datetime ( 2008 , 12 , 31 , 23 , 59 , 59 , 999999 ) , ) articles = Article . objects . filter ( pub_date__year = 2008 ) . extra ( select = { 'dashed-value' : '1' , 'undashedvalue' : '2' } ) self . assertEqual ( articles [ 0 ] . undashedvalue , 2 )
