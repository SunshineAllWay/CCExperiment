from django . forms . widgets import Textarea from django . template import loader , Context from django . templatetags . static import static from django . utils import translation from django . contrib . gis . gdal import OGRException from django . contrib . gis . geos import GEOSGeometry , GEOSException geo_context = Context ( { 'ADMIN_MEDIA_PREFIX' : static ( 'admin/' ) , : translation . get_language_bidi ( ) } ) class OpenLayersWidget ( Textarea ) : def render ( self , name , value , attrs = None ) : if attrs : self . params . update ( attrs ) self . params [ 'wkt' ] = '' if isinstance ( value , basestring ) : try : value = GEOSGeometry ( value ) except ( GEOSException , ValueError ) : value = None if value and value . geom_type . upper ( ) != self . geom_type : value = None self . params [ 'map_options' ] = self . map_options ( ) self . params [ 'name' ] = name js_safe_name = self . params [ 'name' ] . replace ( '-' , '_' ) self . params [ 'module' ] = 'geodjango_%s' % js_safe_name if value : srid = self . params [ 'srid' ] if value . srid != srid : try : ogr = value . ogr ogr . transform ( srid ) wkt = ogr . wkt except OGRException : wkt = '' else : wkt = value . wkt self . params [ 'wkt' ] = wkt return loader . render_to_string ( self . template , self . params , context_instance = geo_context ) def map_options ( self ) : def ol_bounds ( extent ) : return 'new OpenLayers.Bounds(%s)' % str ( extent ) def ol_projection ( srid ) : return 'new OpenLayers.Projection("EPSG:%s")' % srid map_types = [ ( 'srid' , 'projection' , 'srid' ) , ( 'display_srid' , 'displayProjection' , 'srid' ) , ( 'units' , 'units' , str ) , ( 'max_resolution' , 'maxResolution' , float ) , ( 'max_extent' , 'maxExtent' , 'bounds' ) , ( 'num_zoom' , 'numZoomLevels' , int ) , ( 'max_zoom' , 'maxZoomLevels' , int ) , ( 'min_zoom' , 'minZoomLevel' , int ) , ] map_options = { } for param_name , js_name , option_type in map_types : if self . params . get ( param_name , False ) : if option_type == 'srid' : value = ol_projection ( self . params [ param_name ] ) elif option_type == 'bounds' : value = ol_bounds ( self . params [ param_name ] ) elif option_type in ( float , int ) : value = self . params [ param_name ] elif option_type in ( str , ) : value = '"%s"' % self . params [ param_name ] else : raise TypeError map_options [ js_name ] = value return map_options
