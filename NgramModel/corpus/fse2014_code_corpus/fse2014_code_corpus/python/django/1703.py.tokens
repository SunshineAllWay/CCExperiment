""" The Spatial Reference class, represensents OGR Spatial Reference objects. Example: >>> from django.contrib.gis.gdal import SpatialReference >>> srs = SpatialReference('WGS84') >>> print srs GEOGCS["WGS 84", DATUM["WGS_1984", SPHEROID["WGS 84",6378137,298.257223563, AUTHORITY["EPSG","7030"]], TOWGS84[0,0,0,0,0,0,0], AUTHORITY["EPSG","6326"]], PRIMEM["Greenwich",0, AUTHORITY["EPSG","8901"]], UNIT["degree",0.01745329251994328, AUTHORITY["EPSG","9122"]], AUTHORITY["EPSG","4326"]] >>> print srs.proj +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs >>> print srs.ellipsoid (6378137.0, 6356752.3142451793, 298.25722356300003) >>> print srs.projected, srs.geographic False True >>> srs.import_epsg(32140) >>> print srs.name NAD83 / Texas South Central """ from ctypes import byref , c_char_p , c_int from django . contrib . gis . gdal . base import GDALBase from django . contrib . gis . gdal . error import SRSException from django . contrib . gis . gdal . prototypes import srs as capi class SpatialReference ( GDALBase ) : def __init__ ( self , srs_input = '' ) : buf = c_char_p ( '' ) srs_type = 'user' if isinstance ( srs_input , basestring ) : if isinstance ( srs_input , unicode ) : srs_input = srs_input . encode ( 'ascii' ) try : srid = int ( srs_input ) srs_input = 'EPSG:%d' % srid except ValueError : pass elif isinstance ( srs_input , ( int , long ) ) : srs_type = 'epsg' elif isinstance ( srs_input , self . ptr_type ) : srs = srs_input srs_type = 'ogr' else : raise TypeError ( 'Invalid SRS type "%s"' % srs_type ) if srs_type == 'ogr' : srs = srs_input else : srs = capi . new_srs ( buf ) if not srs : raise SRSException ( 'Could not create spatial reference from: %s' % srs_input ) else : self . ptr = srs if srs_type == 'user' : self . import_user_input ( srs_input ) elif srs_type == 'epsg' : self . import_epsg ( srs_input ) def __del__ ( self ) : if self . _ptr : capi . release_srs ( self . _ptr ) def __getitem__ ( self , target ) : if isinstance ( target , tuple ) : return self . attr_value ( * target ) else : return self . attr_value ( target ) def __str__ ( self ) : return self . pretty_wkt def attr_value ( self , target , index = 0 ) : if not isinstance ( target , basestring ) or not isinstance ( index , int ) : raise TypeError return capi . get_attr_value ( self . ptr , target , index ) def auth_name ( self , target ) : return capi . get_auth_name ( self . ptr , target ) def auth_code ( self , target ) : return capi . get_auth_code ( self . ptr , target ) def clone ( self ) : return SpatialReference ( capi . clone_srs ( self . ptr ) ) def from_esri ( self ) : capi . morph_from_esri ( self . ptr ) def identify_epsg ( self ) : capi . identify_epsg ( self . ptr ) def to_esri ( self ) : capi . morph_to_esri ( self . ptr ) def validate ( self ) : capi . srs_validate ( self . ptr ) @ property def name ( self ) : if self . projected : return self . attr_value ( 'PROJCS' ) elif self . geographic : return self . attr_value ( 'GEOGCS' ) elif self . local : return self . attr_value ( 'LOCAL_CS' ) else : return None @ property def srid ( self ) : try : return int ( self . attr_value ( 'AUTHORITY' , 1 ) ) except ( TypeError , ValueError ) : return None @ property def linear_name ( self ) : units , name = capi . linear_units ( self . ptr , byref ( c_char_p ( ) ) ) return name @ property def linear_units ( self ) : units , name = capi . linear_units ( self . ptr , byref ( c_char_p ( ) ) ) return units @ property def angular_name ( self ) : units , name = capi . angular_units ( self . ptr , byref ( c_char_p ( ) ) ) return name @ property def angular_units ( self ) : units , name = capi . angular_units ( self . ptr , byref ( c_char_p ( ) ) ) return units @ property def units ( self ) : if self . projected or self . local : return capi . linear_units ( self . ptr , byref ( c_char_p ( ) ) ) elif self . geographic : return capi . angular_units ( self . ptr , byref ( c_char_p ( ) ) ) else : return ( None , None ) @ property def ellipsoid ( self ) : return ( self . semi_major , self . semi_minor , self . inverse_flattening ) @ property def semi_major ( self ) : return capi . semi_major ( self . ptr , byref ( c_int ( ) ) ) @ property def semi_minor ( self ) : return capi . semi_minor ( self . ptr , byref ( c_int ( ) ) ) @ property def inverse_flattening ( self ) : return capi . invflattening ( self . ptr , byref ( c_int ( ) ) ) @ property def geographic ( self ) : return bool ( capi . isgeographic ( self . ptr ) ) @ property def local ( self ) : return bool ( capi . islocal ( self . ptr ) ) @ property def projected ( self ) : return bool ( capi . isprojected ( self . ptr ) ) def import_epsg ( self , epsg ) : capi . from_epsg ( self . ptr , epsg ) def import_proj ( self , proj ) : capi . from_proj ( self . ptr , proj ) def import_user_input ( self , user_input ) : capi . from_user_input ( self . ptr , user_input ) def import_wkt ( self , wkt ) : capi . from_wkt ( self . ptr , byref ( c_char_p ( wkt ) ) ) def import_xml ( self , xml ) : capi . from_xml ( self . ptr , xml ) @ property def wkt ( self ) : return capi . to_wkt ( self . ptr , byref ( c_char_p ( ) ) ) @ property def pretty_wkt ( self , simplify = 0 ) : return capi . to_pretty_wkt ( self . ptr , byref ( c_char_p ( ) ) , simplify ) @ property def proj ( self ) : return capi . to_proj ( self . ptr , byref ( c_char_p ( ) ) ) @ property def proj4 ( self ) : return self . proj @ property def xml ( self , dialect = '' ) : return capi . to_xml ( self . ptr , byref ( c_char_p ( ) ) , dialect ) class CoordTransform ( GDALBase ) : def __init__ ( self , source , target ) : if not isinstance ( source , SpatialReference ) or not isinstance ( target , SpatialReference ) : raise TypeError ( 'source and target must be of type SpatialReference' ) self . ptr = capi . new_ct ( source . _ptr , target . _ptr ) self . _srs1_name = source . name self . _srs2_name = target . name def __del__ ( self ) : if self . _ptr : capi . destroy_ct ( self . _ptr ) def __str__ ( self ) : return 'Transform from "%s" to "%s"' % ( self . _srs1_name , self . _srs2_name )
