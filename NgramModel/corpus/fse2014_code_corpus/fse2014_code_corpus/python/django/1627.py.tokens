from django . conf import settings from django . test . simple import build_suite , DjangoTestSuiteRunner from django . utils import unittest def run_tests ( * args , ** kwargs ) : from django . test . simple import run_tests as base_run_tests return base_run_tests ( * args , ** kwargs ) def geo_apps ( namespace = True , runtests = False ) : from django . db import connection from django . contrib . gis . geos import GEOS_PREPARE from django . contrib . gis . gdal import HAS_GDAL apps = [ 'geoapp' , 'relatedapp' ] if not connection . ops . mysql : apps . append ( 'distapp' ) if connection . ops . postgis and connection . ops . geography : apps . append ( 'geogapp' ) if HAS_GDAL : apps . extend ( [ 'geoadmin' , 'layermap' , 'inspectapp' ] ) if connection . ops . postgis and GEOS_PREPARE : apps . append ( 'geo3d' ) if runtests : return [ ( 'django.contrib.gis.tests' , app ) for app in apps ] elif namespace : return [ 'django.contrib.gis.tests.%s' % app for app in apps ] else : return apps def geodjango_suite ( apps = True ) : import sys from django . db . models import get_app suite = unittest . TestSuite ( ) from django . contrib . gis . geos import tests as geos_tests suite . addTest ( geos_tests . suite ( ) ) from django . contrib . gis . tests import test_measure suite . addTest ( test_measure . suite ( ) ) from django . contrib . gis . gdal import HAS_GDAL if HAS_GDAL : from django . contrib . gis . gdal import tests as gdal_tests suite . addTest ( gdal_tests . suite ( ) ) from django . contrib . gis . tests import test_spatialrefsys , test_geoforms suite . addTest ( test_spatialrefsys . suite ( ) ) suite . addTest ( test_geoforms . suite ( ) ) else : sys . stderr . write ( 'GDAL not available - no tests requiring GDAL will be run.\n' ) from django . contrib . gis . geoip import HAS_GEOIP if HAS_GEOIP and hasattr ( settings , 'GEOIP_PATH' ) : from django . contrib . gis . geoip import tests as geoip_tests suite . addTest ( geoip_tests . suite ( ) ) if apps : for app_name in geo_apps ( namespace = False ) : suite . addTest ( build_suite ( get_app ( app_name ) ) ) return suite class GeoDjangoTestSuiteRunner ( DjangoTestSuiteRunner ) : def setup_test_environment ( self , ** kwargs ) : super ( GeoDjangoTestSuiteRunner , self ) . setup_test_environment ( ** kwargs ) self . old_installed = getattr ( settings , 'INSTALLED_APPS' , None ) self . old_root_urlconf = getattr ( settings , 'ROOT_URLCONF' , '' ) self . old_site_id = getattr ( settings , 'SITE_ID' , None ) new_installed = [ , , , ] new_installed . extend ( geo_apps ( ) ) settings . INSTALLED_APPS = list ( self . old_installed ) + new_installed settings . SITE_ID = 1 settings . ROOT_URLCONF = '' def teardown_test_environment ( self , ** kwargs ) : super ( GeoDjangoTestSuiteRunner , self ) . teardown_test_environment ( ** kwargs ) settings . INSTALLED_APPS = self . old_installed settings . ROOT_URLCONF = self . old_root_urlconf settings . SITE_ID = self . old_site_id def build_suite ( self , test_labels , extra_tests = None , ** kwargs ) : return geodjango_suite ( )
