from __future__ import absolute_import import datetime from django . conf import settings from django . db import backend , transaction , DEFAULT_DB_ALIAS from django . test import TestCase , TransactionTestCase , skipUnlessDBFeature from . models import ( Book , Award , AwardNote , Person , Child , Toy , PlayedWith , PlayedWithNote , Email , Researcher , Food , Eaten , Policy , Version , Location , Item ) class DeleteLockingTest ( TransactionTestCase ) : def setUp ( self ) : conn_settings = settings . DATABASES [ DEFAULT_DB_ALIAS ] self . conn2 = backend . DatabaseWrapper ( { : conn_settings [ 'HOST' ] , : conn_settings [ 'NAME' ] , : conn_settings [ 'OPTIONS' ] , : conn_settings [ 'PASSWORD' ] , : conn_settings [ 'PORT' ] , : conn_settings [ 'USER' ] , : settings . TIME_ZONE , } ) transaction . enter_transaction_management ( ) transaction . managed ( True ) self . conn2 . _enter_transaction_management ( True ) def tearDown ( self ) : transaction . leave_transaction_management ( ) self . conn2 . close ( ) @ skipUnlessDBFeature ( 'test_db_allows_multiple_connections' ) def test_concurrent_delete ( self ) : b1 = Book ( id = 1 , pagecount = 100 ) b2 = Book ( id = 2 , pagecount = 200 ) b3 = Book ( id = 3 , pagecount = 300 ) b1 . save ( ) b2 . save ( ) b3 . save ( ) transaction . commit ( ) self . assertEqual ( 3 , Book . objects . count ( ) ) cursor2 = self . conn2 . cursor ( ) cursor2 . execute ( 'DELETE from delete_regress_book WHERE id=1' ) self . conn2 . _commit ( ) Book . objects . filter ( pagecount__lt = 250 ) . delete ( ) transaction . commit ( ) self . assertEqual ( 1 , Book . objects . count ( ) ) transaction . commit ( ) class DeleteCascadeTests ( TestCase ) : def test_generic_relation_cascade ( self ) : person = Person . objects . create ( name = 'Nelson Mandela' ) award = Award . objects . create ( name = 'Nobel' , content_object = person ) note = AwardNote . objects . create ( note = 'a peace prize' , award = award ) self . assertEqual ( AwardNote . objects . count ( ) , 1 ) person . delete ( ) self . assertEqual ( Award . objects . count ( ) , 0 ) self . assertEqual ( AwardNote . objects . count ( ) , 0 ) def test_fk_to_m2m_through ( self ) : juan = Child . objects . create ( name = 'Juan' ) paints = Toy . objects . create ( name = 'Paints' ) played = PlayedWith . objects . create ( child = juan , toy = paints , date = datetime . date . today ( ) ) note = PlayedWithNote . objects . create ( played = played , note = 'the next Jackson Pollock' ) self . assertEqual ( PlayedWithNote . objects . count ( ) , 1 ) paints . delete ( ) self . assertEqual ( PlayedWith . objects . count ( ) , 0 ) self . assertEqual ( PlayedWithNote . objects . count ( ) , 0 ) def test_15776 ( self ) : policy = Policy . objects . create ( pk = 1 , policy_number = "1234" ) version = Version . objects . create ( policy = policy ) location = Location . objects . create ( version = version ) item = Item . objects . create ( version = version , location = location ) policy . delete ( ) class DeleteCascadeTransactionTests ( TransactionTestCase ) : def test_inheritance ( self ) : r = Researcher . objects . create ( ) email = Email . objects . create ( label = "office-email" , email_address = "carl@science.edu" ) r . contacts . add ( email ) email . delete ( ) def test_to_field ( self ) : apple = Food . objects . create ( name = "apple" ) eaten = Eaten . objects . create ( food = apple , meal = "lunch" ) apple . delete ( ) class LargeDeleteTests ( TestCase ) : def test_large_deletes ( self ) : for x in range ( 300 ) : track = Book . objects . create ( pagecount = x + 100 ) Book . objects . all ( ) . delete ( ) self . assertEqual ( Book . objects . count ( ) , 0 )
