from __future__ import absolute_import from xml . dom import minidom from django . contrib . syndication import views from django . core . exceptions import ImproperlyConfigured from django . test import TestCase from django . utils import tzinfo from django . utils . feedgenerator import rfc2822_date , rfc3339_date from . models import Entry class FeedTestCase ( TestCase ) : fixtures = [ 'feeddata.json' ] def assertChildNodes ( self , elem , expected ) : actual = set ( [ n . nodeName for n in elem . childNodes ] ) expected = set ( expected ) self . assertEqual ( actual , expected ) def assertChildNodeContent ( self , elem , expected ) : for k , v in expected . items ( ) : self . assertEqual ( elem . getElementsByTagName ( k ) [ 0 ] . firstChild . wholeText , v ) def assertCategories ( self , elem , expected ) : self . assertEqual ( set ( i . firstChild . wholeText for i in elem . childNodes if i . nodeName == 'category' ) , set ( expected ) ) class SyndicationFeedTest ( FeedTestCase ) : urls = 'regressiontests.syndication.urls' def test_rss2_feed ( self ) : response = self . client . get ( '/syndication/rss2/' ) doc = minidom . parseString ( response . content ) feed_elem = doc . getElementsByTagName ( 'rss' ) self . assertEqual ( len ( feed_elem ) , 1 ) feed = feed_elem [ 0 ] self . assertEqual ( feed . getAttribute ( 'version' ) , '2.0' ) chan_elem = feed . getElementsByTagName ( 'channel' ) self . assertEqual ( len ( chan_elem ) , 1 ) chan = chan_elem [ 0 ] d = Entry . objects . latest ( 'date' ) . date ltz = tzinfo . LocalTimezone ( d ) last_build_date = rfc2822_date ( d . replace ( tzinfo = ltz ) ) self . assertChildNodes ( chan , [ 'title' , 'link' , 'description' , 'language' , 'lastBuildDate' , 'item' , 'atom:link' , 'ttl' , 'copyright' , 'category' ] ) self . assertChildNodeContent ( chan , { : 'My blog' , : 'A more thorough description of my blog.' , : 'http://example.com/blog/' , : 'en' , : last_build_date , : '600' , : 'Copyright (c) 2007, Sally Smith' , } ) self . assertCategories ( chan , [ 'python' , 'django' ] ) self . assertChildNodeContent ( chan , { : 'My blog' , : 'http://example.com/blog/' , } ) self . assertEqual ( chan . getElementsByTagName ( 'atom:link' ) [ 0 ] . getAttribute ( 'href' ) , ) d = Entry . objects . get ( pk = 1 ) . date ltz = tzinfo . LocalTimezone ( d ) pub_date = rfc2822_date ( d . replace ( tzinfo = ltz ) ) items = chan . getElementsByTagName ( 'item' ) self . assertEqual ( len ( items ) , Entry . objects . count ( ) ) self . assertChildNodeContent ( items [ 0 ] , { : 'My first entry' , : 'Overridden description: My first entry' , : 'http://example.com/blog/1/' , : 'http://example.com/blog/1/' , : pub_date , : 'test@example.com (Sally Smith)' , } ) self . assertCategories ( items [ 0 ] , [ 'python' , 'testing' ] ) for item in items : self . assertChildNodes ( item , [ 'title' , 'link' , 'description' , 'guid' , 'category' , 'pubDate' , 'author' ] ) def test_rss091_feed ( self ) : response = self . client . get ( '/syndication/rss091/' ) doc = minidom . parseString ( response . content ) feed_elem = doc . getElementsByTagName ( 'rss' ) self . assertEqual ( len ( feed_elem ) , 1 ) feed = feed_elem [ 0 ] self . assertEqual ( feed . getAttribute ( 'version' ) , '0.91' ) chan_elem = feed . getElementsByTagName ( 'channel' ) self . assertEqual ( len ( chan_elem ) , 1 ) chan = chan_elem [ 0 ] self . assertChildNodes ( chan , [ 'title' , 'link' , 'description' , 'language' , 'lastBuildDate' , 'item' , 'atom:link' , 'ttl' , 'copyright' , 'category' ] ) self . assertChildNodeContent ( chan , { : 'My blog' , : 'http://example.com/blog/' , } ) self . assertCategories ( chan , [ 'python' , 'django' ] ) self . assertEqual ( chan . getElementsByTagName ( 'atom:link' ) [ 0 ] . getAttribute ( 'href' ) , ) items = chan . getElementsByTagName ( 'item' ) self . assertEqual ( len ( items ) , Entry . objects . count ( ) ) self . assertChildNodeContent ( items [ 0 ] , { : 'My first entry' , : 'Overridden description: My first entry' , : 'http://example.com/blog/1/' , } ) for item in items : self . assertChildNodes ( item , [ 'title' , 'link' , 'description' ] ) self . assertCategories ( item , [ ] ) def test_atom_feed ( self ) : response = self . client . get ( '/syndication/atom/' ) feed = minidom . parseString ( response . content ) . firstChild self . assertEqual ( feed . nodeName , 'feed' ) self . assertEqual ( feed . getAttribute ( 'xmlns' ) , 'http://www.w3.org/2005/Atom' ) self . assertChildNodes ( feed , [ 'title' , 'subtitle' , 'link' , 'id' , 'updated' , 'entry' , 'rights' , 'category' , 'author' ] ) for link in feed . getElementsByTagName ( 'link' ) : if link . getAttribute ( 'rel' ) == 'self' : self . assertEqual ( link . getAttribute ( 'href' ) , 'http://example.com/syndication/atom/' ) entries = feed . getElementsByTagName ( 'entry' ) self . assertEqual ( len ( entries ) , Entry . objects . count ( ) ) for entry in entries : self . assertChildNodes ( entry , [ 'title' , 'link' , 'id' , 'summary' , 'category' , 'updated' , 'rights' , 'author' ] ) summary = entry . getElementsByTagName ( 'summary' ) [ 0 ] self . assertEqual ( summary . getAttribute ( 'type' ) , 'html' ) def test_custom_feed_generator ( self ) : response = self . client . get ( '/syndication/custom/' ) feed = minidom . parseString ( response . content ) . firstChild self . assertEqual ( feed . nodeName , 'feed' ) self . assertEqual ( feed . getAttribute ( 'django' ) , 'rocks' ) self . assertChildNodes ( feed , [ 'title' , 'subtitle' , 'link' , 'id' , 'updated' , 'entry' , 'spam' , 'rights' , 'category' , 'author' ] ) entries = feed . getElementsByTagName ( 'entry' ) self . assertEqual ( len ( entries ) , Entry . objects . count ( ) ) for entry in entries : self . assertEqual ( entry . getAttribute ( 'bacon' ) , 'yum' ) self . assertChildNodes ( entry , [ 'title' , 'link' , 'id' , 'summary' , 'ministry' , 'rights' , 'author' , 'updated' , 'category' ] ) summary = entry . getElementsByTagName ( 'summary' ) [ 0 ] self . assertEqual ( summary . getAttribute ( 'type' ) , 'html' ) def test_title_escaping ( self ) : response = self . client . get ( '/syndication/rss2/' ) doc = minidom . parseString ( response . content ) for item in doc . getElementsByTagName ( 'item' ) : link = item . getElementsByTagName ( 'link' ) [ 0 ] if link . firstChild . wholeText == 'http://example.com/blog/4/' : title = item . getElementsByTagName ( 'title' ) [ 0 ] self . assertEqual ( title . firstChild . wholeText , u'A &amp; B &lt; C &gt; D' ) def test_naive_datetime_conversion ( self ) : response = self . client . get ( '/syndication/naive-dates/' ) doc = minidom . parseString ( response . content ) updated = doc . getElementsByTagName ( 'updated' ) [ 0 ] . firstChild . wholeText d = Entry . objects . latest ( 'date' ) . date ltz = tzinfo . LocalTimezone ( d ) latest = rfc3339_date ( d . replace ( tzinfo = ltz ) ) self . assertEqual ( updated , latest ) def test_aware_datetime_conversion ( self ) : response = self . client . get ( '/syndication/aware-dates/' ) doc = minidom . parseString ( response . content ) updated = doc . getElementsByTagName ( 'updated' ) [ 0 ] . firstChild . wholeText self . assertEqual ( updated [ - 6 : ] , '+00:42' ) def test_feed_url ( self ) : response = self . client . get ( '/syndication/feedurl/' ) doc = minidom . parseString ( response . content ) for link in doc . getElementsByTagName ( 'link' ) : if link . getAttribute ( 'rel' ) == 'self' : self . assertEqual ( link . getAttribute ( 'href' ) , 'http://example.com/customfeedurl/' ) def test_secure_urls ( self ) : response = self . client . get ( '/syndication/rss2/' , ** { : 'https' , } ) doc = minidom . parseString ( response . content ) chan = doc . getElementsByTagName ( 'channel' ) [ 0 ] self . assertEqual ( chan . getElementsByTagName ( 'link' ) [ 0 ] . firstChild . wholeText [ 0 : 5 ] , ) atom_link = chan . getElementsByTagName ( 'atom:link' ) [ 0 ] self . assertEqual ( atom_link . getAttribute ( 'href' ) [ 0 : 5 ] , 'https' ) for link in doc . getElementsByTagName ( 'link' ) : if link . getAttribute ( 'rel' ) == 'self' : self . assertEqual ( link . getAttribute ( 'href' ) [ 0 : 5 ] , 'https' ) def test_item_link_error ( self ) : self . assertRaises ( ImproperlyConfigured , self . client . get , ) def test_template_feed ( self ) : response = self . client . get ( '/syndication/template/' ) doc = minidom . parseString ( response . content ) feed = doc . getElementsByTagName ( 'rss' ) [ 0 ] chan = feed . getElementsByTagName ( 'channel' ) [ 0 ] items = chan . getElementsByTagName ( 'item' ) self . assertChildNodeContent ( items [ 0 ] , { : 'Title in your templates: My first entry' , : 'Description in your templates: My first entry' , : 'http://example.com/blog/1/' , } ) def test_add_domain ( self ) : self . assertEqual ( views . add_domain ( 'example.com' , '/foo/?arg=value' ) , ) self . assertEqual ( views . add_domain ( 'example.com' , '/foo/?arg=value' , True ) , ) self . assertEqual ( views . add_domain ( 'example.com' , 'http://djangoproject.com/doc/' ) , ) self . assertEqual ( views . add_domain ( 'example.com' , 'https://djangoproject.com/doc/' ) , ) self . assertEqual ( views . add_domain ( 'example.com' , 'mailto:uhoh@djangoproject.com' ) , ) self . assertEqual ( views . add_domain ( 'example.com' , '//example.com/foo/?arg=value' ) , )
