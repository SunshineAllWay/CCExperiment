from __future__ import absolute_import from django . test import TestCase from django . contrib . contenttypes . models import ContentType from . . models import Author , Article , UrlArticle class DefaultsTests ( TestCase ) : fixtures = [ 'testdata.json' ] non_existing_urls = [ '/views/non_existing_url/' , ] def test_shortcut_with_absolute_url ( self ) : for obj in Author . objects . all ( ) : short_url = '/views/shortcut/%s/%s/' % ( ContentType . objects . get_for_model ( Author ) . id , obj . pk ) response = self . client . get ( short_url ) self . assertRedirects ( response , 'http://testserver%s' % obj . get_absolute_url ( ) , status_code = 302 , target_status_code = 404 ) def test_shortcut_no_absolute_url ( self ) : for obj in Article . objects . all ( ) : short_url = '/views/shortcut/%s/%s/' % ( ContentType . objects . get_for_model ( Article ) . id , obj . pk ) response = self . client . get ( short_url ) self . assertEqual ( response . status_code , 404 ) def test_wrong_type_pk ( self ) : short_url = '/views/shortcut/%s/%s/' % ( ContentType . objects . get_for_model ( Author ) . id , 'nobody/expects' ) response = self . client . get ( short_url ) self . assertEqual ( response . status_code , 404 ) def test_shortcut_bad_pk ( self ) : short_url = '/views/shortcut/%s/%s/' % ( ContentType . objects . get_for_model ( Author ) . id , '42424242' ) response = self . client . get ( short_url ) self . assertEqual ( response . status_code , 404 ) def test_nonint_content_type ( self ) : an_author = Author . objects . all ( ) [ 0 ] short_url = '/views/shortcut/%s/%s/' % ( 'spam' , an_author . pk ) response = self . client . get ( short_url ) self . assertEqual ( response . status_code , 404 ) def test_bad_content_type ( self ) : an_author = Author . objects . all ( ) [ 0 ] short_url = '/views/shortcut/%s/%s/' % ( 42424242 , an_author . pk ) response = self . client . get ( short_url ) self . assertEqual ( response . status_code , 404 ) def test_page_not_found ( self ) : for url in self . non_existing_urls : response = self . client . get ( url ) self . assertEqual ( response . status_code , 404 ) def test_csrf_token_in_404 ( self ) : for url in self . non_existing_urls : response = self . client . get ( url ) csrf_token = response . context [ 'csrf_token' ] self . assertNotEqual ( str ( csrf_token ) , 'NOTPROVIDED' ) self . assertNotEqual ( str ( csrf_token ) , '' ) def test_server_error ( self ) : response = self . client . get ( '/views/server_error/' ) self . assertEqual ( response . status_code , 500 ) def test_get_absolute_url_attributes ( self ) : self . assertTrue ( getattr ( UrlArticle . get_absolute_url , 'purge' , False ) , ) article = UrlArticle . objects . get ( pk = 1 ) self . assertTrue ( getattr ( article . get_absolute_url , 'purge' , False ) , )
