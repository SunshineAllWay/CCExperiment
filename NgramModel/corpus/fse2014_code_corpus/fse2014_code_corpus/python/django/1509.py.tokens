from django . test import TestCase from django . utils . unittest import skipUnless from django . contrib . auth . models import User , AnonymousUser from django . core . management import call_command from StringIO import StringIO try : import crypt as crypt_module except ImportError : crypt_module = None class BasicTestCase ( TestCase ) : def test_user ( self ) : u = User . objects . create_user ( 'testuser' , 'test@example.com' , 'testpw' ) self . assertTrue ( u . has_usable_password ( ) ) self . assertFalse ( u . check_password ( 'bad' ) ) self . assertTrue ( u . check_password ( 'testpw' ) ) u . set_unusable_password ( ) u . save ( ) self . assertFalse ( u . check_password ( 'testpw' ) ) self . assertFalse ( u . has_usable_password ( ) ) u . set_password ( 'testpw' ) self . assertTrue ( u . check_password ( 'testpw' ) ) u . set_password ( None ) self . assertFalse ( u . has_usable_password ( ) ) self . assertTrue ( u . is_authenticated ( ) ) self . assertFalse ( u . is_staff ) self . assertTrue ( u . is_active ) self . assertFalse ( u . is_superuser ) u2 = User . objects . create_user ( 'testuser2' , 'test2@example.com' ) self . assertFalse ( u . has_usable_password ( ) ) def test_user_no_email ( self ) : u = User . objects . create_user ( 'testuser1' ) self . assertEqual ( u . email , '' ) u2 = User . objects . create_user ( 'testuser2' , email = '' ) self . assertEqual ( u2 . email , '' ) u3 = User . objects . create_user ( 'testuser3' , email = None ) self . assertEqual ( u3 . email , '' ) def test_anonymous_user ( self ) : a = AnonymousUser ( ) self . assertFalse ( a . is_authenticated ( ) ) self . assertFalse ( a . is_staff ) self . assertFalse ( a . is_active ) self . assertFalse ( a . is_superuser ) self . assertEqual ( a . groups . all ( ) . count ( ) , 0 ) self . assertEqual ( a . user_permissions . all ( ) . count ( ) , 0 ) def test_superuser ( self ) : super = User . objects . create_superuser ( 'super' , 'super@example.com' , 'super' ) self . assertTrue ( super . is_superuser ) self . assertTrue ( super . is_active ) self . assertTrue ( super . is_staff ) def test_createsuperuser_management_command ( self ) : new_io = StringIO ( ) call_command ( "createsuperuser" , interactive = False , username = "joe" , email = "joe@somewhere.org" , stdout = new_io ) command_output = new_io . getvalue ( ) . strip ( ) self . assertEqual ( command_output , 'Superuser created successfully.' ) u = User . objects . get ( username = "joe" ) self . assertEqual ( u . email , 'joe@somewhere.org' ) self . assertFalse ( u . has_usable_password ( ) ) new_io = StringIO ( ) call_command ( "createsuperuser" , interactive = False , username = "joe2" , email = "joe2@somewhere.org" , verbosity = 0 , stdout = new_io ) command_output = new_io . getvalue ( ) . strip ( ) self . assertEqual ( command_output , '' ) u = User . objects . get ( username = "joe2" ) self . assertEqual ( u . email , 'joe2@somewhere.org' ) self . assertFalse ( u . has_usable_password ( ) ) new_io = StringIO ( ) call_command ( "createsuperuser" , interactive = False , username = "joe+admin@somewhere.org" , email = "joe@somewhere.org" , stdout = new_io ) u = User . objects . get ( username = "joe+admin@somewhere.org" ) self . assertEqual ( u . email , 'joe@somewhere.org' ) self . assertFalse ( u . has_usable_password ( ) )
