from __future__ import absolute_import from django import forms from django . contrib . contenttypes . generic import generic_inlineformset_factory from django . contrib . contenttypes . models import ContentType from django . test import TestCase from . models import ( TaggedItem , ValuableTaggedItem , Comparison , Animal , Vegetable , Mineral , Gecko ) class GenericRelationsTests ( TestCase ) : def test_generic_relations ( self ) : lion = Animal . objects . create ( common_name = "Lion" , latin_name = "Panthera leo" ) platypus = Animal . objects . create ( common_name = "Platypus" , latin_name = "Ornithorhynchus anatinus" ) eggplant = Vegetable . objects . create ( name = "Eggplant" , is_yucky = True ) bacon = Vegetable . objects . create ( name = "Bacon" , is_yucky = False ) quartz = Mineral . objects . create ( name = "Quartz" , hardness = 7 ) bacon . tags . create ( tag = "fatty" ) bacon . tags . create ( tag = "salty" ) lion . tags . create ( tag = "yellow" ) lion . tags . create ( tag = "hairy" ) platypus . tags . create ( tag = "fatty" ) self . assertQuerysetEqual ( lion . tags . all ( ) , [ , ] ) self . assertQuerysetEqual ( bacon . tags . all ( ) , [ , ] ) t = TaggedItem . objects . get ( tag = "salty" ) self . assertEqual ( t . content_object , bacon ) tag1 = TaggedItem . objects . create ( content_object = quartz , tag = "shiny" ) tag2 = TaggedItem . objects . create ( content_object = quartz , tag = "clearish" ) ctype = ContentType . objects . get_for_model ( quartz ) q = TaggedItem . objects . filter ( content_type__pk = ctype . id , object_id = quartz . id ) self . assertQuerysetEqual ( q , [ , ] ) tag1 . content_object = platypus tag1 . save ( ) self . assertQuerysetEqual ( platypus . tags . all ( ) , [ , ] ) q = TaggedItem . objects . filter ( content_type__pk = ctype . id , object_id = quartz . id ) self . assertQuerysetEqual ( q , [ "<TaggedItem: clearish>" ] ) self . assertQuerysetEqual ( Animal . objects . order_by ( 'common_name' ) , [ , ] ) self . assertQuerysetEqual ( Animal . objects . filter ( tags__tag = 'fatty' ) , [ ] ) self . assertQuerysetEqual ( Animal . objects . exclude ( tags__tag = 'fatty' ) , [ ] ) comp_func = lambda obj : ( obj . tag , obj . content_type . model_class ( ) , obj . object_id ) self . assertQuerysetEqual ( TaggedItem . objects . all ( ) , [ ( u'clearish' , Mineral , quartz . pk ) , ( u'fatty' , Animal , platypus . pk ) , ( u'fatty' , Vegetable , bacon . pk ) , ( u'hairy' , Animal , lion . pk ) , ( u'salty' , Vegetable , bacon . pk ) , ( u'shiny' , Animal , platypus . pk ) , ( u'yellow' , Animal , lion . pk ) ] , comp_func ) lion . delete ( ) self . assertQuerysetEqual ( TaggedItem . objects . all ( ) , [ ( u'clearish' , Mineral , quartz . pk ) , ( u'fatty' , Animal , platypus . pk ) , ( u'fatty' , Vegetable , bacon . pk ) , ( u'salty' , Vegetable , bacon . pk ) , ( u'shiny' , Animal , platypus . pk ) ] , comp_func ) quartz_pk = quartz . pk quartz . delete ( ) self . assertQuerysetEqual ( TaggedItem . objects . all ( ) , [ ( u'clearish' , Mineral , quartz_pk ) , ( u'fatty' , Animal , platypus . pk ) , ( u'fatty' , Vegetable , bacon . pk ) , ( u'salty' , Vegetable , bacon . pk ) , ( u'shiny' , Animal , platypus . pk ) ] , comp_func ) tag = TaggedItem . objects . order_by ( "id" ) [ 0 ] tag . delete ( ) self . assertQuerysetEqual ( bacon . tags . all ( ) , [ "<TaggedItem: salty>" ] ) self . assertQuerysetEqual ( TaggedItem . objects . all ( ) , [ ( u'clearish' , Mineral , quartz_pk ) , ( u'fatty' , Animal , platypus . pk ) , ( u'salty' , Vegetable , bacon . pk ) , ( u'shiny' , Animal , platypus . pk ) ] , comp_func ) TaggedItem . objects . filter ( tag = 'fatty' ) . delete ( ) ctype = ContentType . objects . get_for_model ( lion ) self . assertQuerysetEqual ( Animal . objects . filter ( tags__content_type = ctype ) , [ ] ) def test_multiple_gfk ( self ) : tiger = Animal . objects . create ( common_name = "tiger" ) cheetah = Animal . objects . create ( common_name = "cheetah" ) bear = Animal . objects . create ( common_name = "bear" ) Comparison . objects . create ( first_obj = cheetah , other_obj = tiger , comparative = "faster" ) Comparison . objects . create ( first_obj = tiger , other_obj = cheetah , comparative = "cooler" ) tiger . comparisons . create ( other_obj = bear , comparative = "cooler" ) tiger . comparisons . create ( other_obj = cheetah , comparative = "stronger" ) self . assertQuerysetEqual ( cheetah . comparisons . all ( ) , [ ] ) self . assertQuerysetEqual ( tiger . comparisons . filter ( comparative = "cooler" ) , [ , ] ) subjective = [ "cooler" ] tiger . comparisons . filter ( comparative__in = subjective ) . delete ( ) self . assertQuerysetEqual ( Comparison . objects . all ( ) , [ , ] ) cheetah . delete ( ) self . assertQuerysetEqual ( Comparison . objects . all ( ) , [ ] ) def test_gfk_subclasses ( self ) : quartz = Mineral . objects . create ( name = "Quartz" , hardness = 7 ) valuedtag = ValuableTaggedItem . objects . create ( content_object = quartz , tag = "shiny" , value = 10 ) self . assertEqual ( valuedtag . content_object , quartz ) def test_generic_inline_formsets ( self ) : GenericFormSet = generic_inlineformset_factory ( TaggedItem , extra = 1 ) formset = GenericFormSet ( ) self . assertHTMLEqual ( u'' . join ( form . as_p ( ) for form in formset . forms ) , u"""<p><label for="id_generic_relations-taggeditem-content_type-object_id-0-tag">Tag:</label> <input id="id_generic_relations-taggeditem-content_type-object_id-0-tag" type="text" name="generic_relations-taggeditem-content_type-object_id-0-tag" maxlength="50" /></p> <p><label for="id_generic_relations-taggeditem-content_type-object_id-0-DELETE">Delete:</label> <input type="checkbox" name="generic_relations-taggeditem-content_type-object_id-0-DELETE" id="id_generic_relations-taggeditem-content_type-object_id-0-DELETE" /><input type="hidden" name="generic_relations-taggeditem-content_type-object_id-0-id" id="id_generic_relations-taggeditem-content_type-object_id-0-id" /></p>""" ) formset = GenericFormSet ( instance = Animal ( ) ) self . assertHTMLEqual ( u'' . join ( form . as_p ( ) for form in formset . forms ) , u"""<p><label for="id_generic_relations-taggeditem-content_type-object_id-0-tag">Tag:</label> <input id="id_generic_relations-taggeditem-content_type-object_id-0-tag" type="text" name="generic_relations-taggeditem-content_type-object_id-0-tag" maxlength="50" /></p> <p><label for="id_generic_relations-taggeditem-content_type-object_id-0-DELETE">Delete:</label> <input type="checkbox" name="generic_relations-taggeditem-content_type-object_id-0-DELETE" id="id_generic_relations-taggeditem-content_type-object_id-0-DELETE" /><input type="hidden" name="generic_relations-taggeditem-content_type-object_id-0-id" id="id_generic_relations-taggeditem-content_type-object_id-0-id" /></p>""" ) platypus = Animal . objects . create ( common_name = "Platypus" , latin_name = "Ornithorhynchus anatinus" ) platypus . tags . create ( tag = "shiny" ) GenericFormSet = generic_inlineformset_factory ( TaggedItem , extra = 1 ) formset = GenericFormSet ( instance = platypus ) tagged_item_id = TaggedItem . objects . get ( tag = 'shiny' , object_id = platypus . id ) . id self . assertHTMLEqual ( u'' . join ( form . as_p ( ) for form in formset . forms ) , u"""<p><label for="id_generic_relations-taggeditem-content_type-object_id-0-tag">Tag:</label> <input id="id_generic_relations-taggeditem-content_type-object_id-0-tag" type="text" name="generic_relations-taggeditem-content_type-object_id-0-tag" value="shiny" maxlength="50" /></p> <p><label for="id_generic_relations-taggeditem-content_type-object_id-0-DELETE">Delete:</label> <input type="checkbox" name="generic_relations-taggeditem-content_type-object_id-0-DELETE" id="id_generic_relations-taggeditem-content_type-object_id-0-DELETE" /><input type="hidden" name="generic_relations-taggeditem-content_type-object_id-0-id" value="%s" id="id_generic_relations-taggeditem-content_type-object_id-0-id" /></p><p><label for="id_generic_relations-taggeditem-content_type-object_id-1-tag">Tag:</label> <input id="id_generic_relations-taggeditem-content_type-object_id-1-tag" type="text" name="generic_relations-taggeditem-content_type-object_id-1-tag" maxlength="50" /></p> <p><label for="id_generic_relations-taggeditem-content_type-object_id-1-DELETE">Delete:</label> <input type="checkbox" name="generic_relations-taggeditem-content_type-object_id-1-DELETE" id="id_generic_relations-taggeditem-content_type-object_id-1-DELETE" /><input type="hidden" name="generic_relations-taggeditem-content_type-object_id-1-id" id="id_generic_relations-taggeditem-content_type-object_id-1-id" /></p>""" % tagged_item_id ) lion = Animal . objects . create ( common_name = "Lion" , latin_name = "Panthera leo" ) formset = GenericFormSet ( instance = lion , prefix = 'x' ) self . assertHTMLEqual ( u'' . join ( form . as_p ( ) for form in formset . forms ) , u"""<p><label for="id_x-0-tag">Tag:</label> <input id="id_x-0-tag" type="text" name="x-0-tag" maxlength="50" /></p> <p><label for="id_x-0-DELETE">Delete:</label> <input type="checkbox" name="x-0-DELETE" id="id_x-0-DELETE" /><input type="hidden" name="x-0-id" id="id_x-0-id" /></p>""" ) def test_gfk_manager ( self ) : tailless = Gecko . objects . create ( has_tail = False ) tag = TaggedItem . objects . create ( content_object = tailless , tag = "lizard" ) self . assertEqual ( tag . content_object , tailless ) class CustomWidget ( forms . CharField ) : pass class TaggedItemForm ( forms . ModelForm ) : class Meta : model = TaggedItem widgets = { 'tag' : CustomWidget } class GenericInlineFormsetTest ( TestCase ) : def test_generic_inlineformset_factory ( self ) : Formset = generic_inlineformset_factory ( TaggedItem , TaggedItemForm ) form = Formset ( ) . forms [ 0 ] self . assertTrue ( isinstance ( form [ 'tag' ] . field . widget , CustomWidget ) )
