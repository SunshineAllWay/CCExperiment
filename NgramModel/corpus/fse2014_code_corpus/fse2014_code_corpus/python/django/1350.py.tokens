""" GB-specific Form helpers """ from __future__ import absolute_import import re from django . contrib . localflavor . gb . gb_regions import GB_NATIONS_CHOICES , GB_REGION_CHOICES from django . forms . fields import CharField , Select from django . forms import ValidationError from django . utils . translation import ugettext_lazy as _ class GBPostcodeField ( CharField ) : default_error_messages = { : _ ( u'Enter a valid postcode.' ) , } outcode_pattern = '[A-PR-UWYZ]([0-9]{1,2}|([A-HIK-Y][0-9](|[0-9]|[ABEHMNPRVWXY]))|[0-9][A-HJKSTUW])' incode_pattern = '[0-9][ABD-HJLNP-UW-Z]{2}' postcode_regex = re . compile ( r'^(GIR 0AA|%s %s)$' % ( outcode_pattern , incode_pattern ) ) space_regex = re . compile ( r' *(%s)$' % incode_pattern ) def clean ( self , value ) : value = super ( GBPostcodeField , self ) . clean ( value ) if value == u'' : return value postcode = value . upper ( ) . strip ( ) postcode = self . space_regex . sub ( r' \1' , postcode ) if not self . postcode_regex . search ( postcode ) : raise ValidationError ( self . error_messages [ 'invalid' ] ) return postcode class GBCountySelect ( Select ) : def __init__ ( self , attrs = None ) : super ( GBCountySelect , self ) . __init__ ( attrs , choices = GB_REGION_CHOICES ) class GBNationSelect ( Select ) : def __init__ ( self , attrs = None ) : super ( GBNationSelect , self ) . __init__ ( attrs , choices = GB_NATIONS_CHOICES )
