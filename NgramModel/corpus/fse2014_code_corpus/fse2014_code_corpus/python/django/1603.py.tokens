from django . contrib . flatpages . models import FlatPage from django . template import loader , RequestContext from django . shortcuts import get_object_or_404 from django . http import Http404 , HttpResponse , HttpResponsePermanentRedirect from django . conf import settings from django . core . xheaders import populate_xheaders from django . utils . safestring import mark_safe from django . views . decorators . csrf import csrf_protect DEFAULT_TEMPLATE = 'flatpages/default.html' def flatpage ( request , url ) : if not url . startswith ( '/' ) : url = '/' + url try : f = get_object_or_404 ( FlatPage , url__exact = url , sites__id__exact = settings . SITE_ID ) except Http404 : if not url . endswith ( '/' ) and settings . APPEND_SLASH : url += '/' f = get_object_or_404 ( FlatPage , url__exact = url , sites__id__exact = settings . SITE_ID ) return HttpResponsePermanentRedirect ( '%s/' % request . path ) else : raise return render_flatpage ( request , f ) @ csrf_protect def render_flatpage ( request , f ) : if f . registration_required and not request . user . is_authenticated ( ) : from django . contrib . auth . views import redirect_to_login return redirect_to_login ( request . path ) if f . template_name : t = loader . select_template ( ( f . template_name , DEFAULT_TEMPLATE ) ) else : t = loader . get_template ( DEFAULT_TEMPLATE ) f . title = mark_safe ( f . title ) f . content = mark_safe ( f . content ) c = RequestContext ( request , { : f , } ) response = HttpResponse ( t . render ( c ) ) populate_xheaders ( request , response , FlatPage , f . id ) return response
