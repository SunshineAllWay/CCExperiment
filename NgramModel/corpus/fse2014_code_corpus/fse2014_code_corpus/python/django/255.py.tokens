from datetime import time , date , datetime from django import forms from django . conf import settings from django . utils . translation import activate , deactivate from django . utils . unittest import TestCase class LocalizedTimeTests ( TestCase ) : def setUp ( self ) : self . old_TIME_INPUT_FORMATS = settings . TIME_INPUT_FORMATS self . old_USE_L10N = settings . USE_L10N settings . TIME_INPUT_FORMATS = [ "%I:%M:%S %p" , "%I:%M %p" ] settings . USE_L10N = True activate ( 'de' ) def tearDown ( self ) : settings . TIME_INPUT_FORMATS = self . old_TIME_INPUT_FORMATS settings . USE_L10N = self . old_USE_L10N deactivate ( ) def test_timeField ( self ) : f = forms . TimeField ( ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM' ) result = f . clean ( '13:30:05' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '13:30:05' ) result = f . clean ( '13:30' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:00" ) def test_localized_timeField ( self ) : f = forms . TimeField ( localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM' ) result = f . clean ( '13:30:05' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '13:30:05' ) result = f . clean ( '13:30' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:00" ) def test_timeField_with_inputformat ( self ) : f = forms . TimeField ( input_formats = [ "%H.%M.%S" , "%H.%M" ] ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM' ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05' ) result = f . clean ( '13.30.05' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:05" ) result = f . clean ( '13.30' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:00" ) def test_localized_timeField_with_inputformat ( self ) : f = forms . TimeField ( input_formats = [ "%H.%M.%S" , "%H.%M" ] , localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM' ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05' ) result = f . clean ( '13.30.05' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:05" ) result = f . clean ( '13.30' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:00" ) class CustomTimeInputFormatsTests ( TestCase ) : def setUp ( self ) : self . old_TIME_INPUT_FORMATS = settings . TIME_INPUT_FORMATS settings . TIME_INPUT_FORMATS = [ "%I:%M:%S %p" , "%I:%M %p" ] def tearDown ( self ) : settings . TIME_INPUT_FORMATS = self . old_TIME_INPUT_FORMATS def test_timeField ( self ) : f = forms . TimeField ( ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05' ) result = f . clean ( '1:30:05 PM' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '01:30:05 PM' ) result = f . clean ( '1:30 PM' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:00 PM" ) def test_localized_timeField ( self ) : f = forms . TimeField ( localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05' ) result = f . clean ( '1:30:05 PM' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '01:30:05 PM' ) result = f . clean ( '01:30 PM' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:00 PM" ) def test_timeField_with_inputformat ( self ) : f = forms . TimeField ( input_formats = [ "%H.%M.%S" , "%H.%M" ] ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM' ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05' ) result = f . clean ( '13.30.05' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:05 PM" ) result = f . clean ( '13.30' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:00 PM" ) def test_localized_timeField_with_inputformat ( self ) : f = forms . TimeField ( input_formats = [ "%H.%M.%S" , "%H.%M" ] , localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM' ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05' ) result = f . clean ( '13.30.05' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:05 PM" ) result = f . clean ( '13.30' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:00 PM" ) class SimpleTimeFormatTests ( TestCase ) : def test_timeField ( self ) : f = forms . TimeField ( ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM' ) result = f . clean ( '13:30:05' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:05" ) result = f . clean ( '13:30' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:00" ) def test_localized_timeField ( self ) : f = forms . TimeField ( ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM' ) result = f . clean ( '13:30:05' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:05" ) result = f . clean ( '13:30' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:00" ) def test_timeField_with_inputformat ( self ) : f = forms . TimeField ( input_formats = [ "%I:%M:%S %p" , "%I:%M %p" ] ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05' ) result = f . clean ( '1:30:05 PM' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:05" ) result = f . clean ( '1:30 PM' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:00" ) def test_localized_timeField_with_inputformat ( self ) : f = forms . TimeField ( input_formats = [ "%I:%M:%S %p" , "%I:%M %p" ] , localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05' ) result = f . clean ( '1:30:05 PM' ) self . assertEqual ( result , time ( 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:05" ) result = f . clean ( '1:30 PM' ) self . assertEqual ( result , time ( 13 , 30 , 0 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "13:30:00" ) class LocalizedDateTests ( TestCase ) : def setUp ( self ) : self . old_DATE_INPUT_FORMATS = settings . DATE_INPUT_FORMATS self . old_USE_L10N = settings . USE_L10N settings . DATE_INPUT_FORMATS = [ "%d/%m/%Y" , "%d-%m-%Y" ] settings . USE_L10N = True activate ( 'de' ) def tearDown ( self ) : settings . DATE_INPUT_FORMATS = self . old_DATE_INPUT_FORMATS settings . USE_L10N = self . old_USE_L10N deactivate ( ) def test_dateField ( self ) : f = forms . DateField ( ) self . assertRaises ( forms . ValidationError , f . clean , '21/12/2010' ) result = f . clean ( '21.12.2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '21.12.2010' ) result = f . clean ( '21.12.10' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) def test_localized_dateField ( self ) : f = forms . DateField ( localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '21/12/2010' ) result = f . clean ( '21.12.2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '21.12.2010' ) result = f . clean ( '21.12.10' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) def test_dateField_with_inputformat ( self ) : f = forms . DateField ( input_formats = [ "%m.%d.%Y" , "%m-%d-%Y" ] ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21' ) self . assertRaises ( forms . ValidationError , f . clean , '21/12/2010' ) self . assertRaises ( forms . ValidationError , f . clean , '21.12.2010' ) result = f . clean ( '12.21.2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) result = f . clean ( '12-21-2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) def test_localized_dateField_with_inputformat ( self ) : f = forms . DateField ( input_formats = [ "%m.%d.%Y" , "%m-%d-%Y" ] , localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21' ) self . assertRaises ( forms . ValidationError , f . clean , '21/12/2010' ) self . assertRaises ( forms . ValidationError , f . clean , '21.12.2010' ) result = f . clean ( '12.21.2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) result = f . clean ( '12-21-2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) class CustomDateInputFormatsTests ( TestCase ) : def setUp ( self ) : self . old_DATE_INPUT_FORMATS = settings . DATE_INPUT_FORMATS settings . DATE_INPUT_FORMATS = [ "%d.%m.%Y" , "%d-%m-%Y" ] def tearDown ( self ) : settings . DATE_INPUT_FORMATS = self . old_DATE_INPUT_FORMATS def test_dateField ( self ) : f = forms . DateField ( ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21' ) result = f . clean ( '21.12.2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '21.12.2010' ) result = f . clean ( '21-12-2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) def test_localized_dateField ( self ) : f = forms . DateField ( localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21' ) result = f . clean ( '21.12.2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '21.12.2010' ) result = f . clean ( '21-12-2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) def test_dateField_with_inputformat ( self ) : f = forms . DateField ( input_formats = [ "%m.%d.%Y" , "%m-%d-%Y" ] ) self . assertRaises ( forms . ValidationError , f . clean , '21.12.2010' ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21' ) result = f . clean ( '12.21.2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) result = f . clean ( '12-21-2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) def test_localized_dateField_with_inputformat ( self ) : f = forms . DateField ( input_formats = [ "%m.%d.%Y" , "%m-%d-%Y" ] , localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '21.12.2010' ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21' ) result = f . clean ( '12.21.2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) result = f . clean ( '12-21-2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010" ) class SimpleDateFormatTests ( TestCase ) : def test_dateField ( self ) : f = forms . DateField ( ) self . assertRaises ( forms . ValidationError , f . clean , '21.12.2010' ) result = f . clean ( '2010-12-21' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21" ) result = f . clean ( '12/21/2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21" ) def test_localized_dateField ( self ) : f = forms . DateField ( ) self . assertRaises ( forms . ValidationError , f . clean , '21.12.2010' ) result = f . clean ( '2010-12-21' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21" ) result = f . clean ( '12/21/2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21" ) def test_dateField_with_inputformat ( self ) : f = forms . DateField ( input_formats = [ "%d.%m.%Y" , "%d-%m-%Y" ] ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21' ) result = f . clean ( '21.12.2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21" ) result = f . clean ( '21-12-2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21" ) def test_localized_dateField_with_inputformat ( self ) : f = forms . DateField ( input_formats = [ "%d.%m.%Y" , "%d-%m-%Y" ] , localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21' ) result = f . clean ( '21.12.2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21" ) result = f . clean ( '21-12-2010' ) self . assertEqual ( result , date ( 2010 , 12 , 21 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21" ) class LocalizedDateTimeTests ( TestCase ) : def setUp ( self ) : self . old_DATETIME_INPUT_FORMATS = settings . DATETIME_INPUT_FORMATS self . old_USE_L10N = settings . USE_L10N settings . DATETIME_INPUT_FORMATS = [ "%I:%M:%S %p %d/%m/%Y" , "%I:%M %p %d-%m-%Y" ] settings . USE_L10N = True activate ( 'de' ) def tearDown ( self ) : settings . DATETIME_INPUT_FORMATS = self . old_DATETIME_INPUT_FORMATS settings . USE_L10N = self . old_USE_L10N deactivate ( ) def test_dateTimeField ( self ) : f = forms . DateTimeField ( ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM 21/12/2010' ) result = f . clean ( '21.12.2010 13:30:05' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '21.12.2010 13:30:05' ) result = f . clean ( '21.12.2010 13:30' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010 13:30:00" ) def test_localized_dateTimeField ( self ) : f = forms . DateTimeField ( localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM 21/12/2010' ) result = f . clean ( '21.12.2010 13:30:05' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '21.12.2010 13:30:05' ) result = f . clean ( '21.12.2010 13:30' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010 13:30:00" ) def test_dateTimeField_with_inputformat ( self ) : f = forms . DateTimeField ( input_formats = [ "%H.%M.%S %m.%d.%Y" , "%H.%M %m-%d-%Y" ] ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21 13:30:05 13:30:05' ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM 21/12/2010' ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05 21.12.2010' ) result = f . clean ( '13.30.05 12.21.2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010 13:30:05" ) result = f . clean ( '13.30 12-21-2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010 13:30:00" ) def test_localized_dateTimeField_with_inputformat ( self ) : f = forms . DateTimeField ( input_formats = [ "%H.%M.%S %m.%d.%Y" , "%H.%M %m-%d-%Y" ] , localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21 13:30:05' ) self . assertRaises ( forms . ValidationError , f . clean , '1:30:05 PM 21/12/2010' ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05 21.12.2010' ) result = f . clean ( '13.30.05 12.21.2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010 13:30:05" ) result = f . clean ( '13.30 12-21-2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "21.12.2010 13:30:00" ) class CustomDateTimeInputFormatsTests ( TestCase ) : def setUp ( self ) : self . old_DATETIME_INPUT_FORMATS = settings . DATETIME_INPUT_FORMATS settings . DATETIME_INPUT_FORMATS = [ "%I:%M:%S %p %d/%m/%Y" , "%I:%M %p %d-%m-%Y" ] def tearDown ( self ) : settings . DATETIME_INPUT_FORMATS = self . old_DATETIME_INPUT_FORMATS def test_dateTimeField ( self ) : f = forms . DateTimeField ( ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21 13:30:05' ) result = f . clean ( '1:30:05 PM 21/12/2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '01:30:05 PM 21/12/2010' ) result = f . clean ( '1:30 PM 21-12-2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:00 PM 21/12/2010" ) def test_localized_dateTimeField ( self ) : f = forms . DateTimeField ( localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21 13:30:05' ) result = f . clean ( '1:30:05 PM 21/12/2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , '01:30:05 PM 21/12/2010' ) result = f . clean ( '1:30 PM 21-12-2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:00 PM 21/12/2010" ) def test_dateTimeField_with_inputformat ( self ) : f = forms . DateTimeField ( input_formats = [ "%m.%d.%Y %H:%M:%S" , "%m-%d-%Y %H:%M" ] ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05 21.12.2010' ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21 13:30:05' ) result = f . clean ( '12.21.2010 13:30:05' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:05 PM 21/12/2010" ) result = f . clean ( '12-21-2010 13:30' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:00 PM 21/12/2010" ) def test_localized_dateTimeField_with_inputformat ( self ) : f = forms . DateTimeField ( input_formats = [ "%m.%d.%Y %H:%M:%S" , "%m-%d-%Y %H:%M" ] , localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05 21.12.2010' ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21 13:30:05' ) result = f . clean ( '12.21.2010 13:30:05' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:05 PM 21/12/2010" ) result = f . clean ( '12-21-2010 13:30' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "01:30:00 PM 21/12/2010" ) class SimpleDateTimeFormatTests ( TestCase ) : def test_dateTimeField ( self ) : f = forms . DateTimeField ( ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05 21.12.2010' ) result = f . clean ( '2010-12-21 13:30:05' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21 13:30:05" ) result = f . clean ( '12/21/2010 13:30:05' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21 13:30:05" ) def test_localized_dateTimeField ( self ) : f = forms . DateTimeField ( ) self . assertRaises ( forms . ValidationError , f . clean , '13:30:05 21.12.2010' ) result = f . clean ( '2010-12-21 13:30:05' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21 13:30:05" ) result = f . clean ( '12/21/2010 13:30:05' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21 13:30:05" ) def test_dateTimeField_with_inputformat ( self ) : f = forms . DateTimeField ( input_formats = [ "%I:%M:%S %p %d.%m.%Y" , "%I:%M %p %d-%m-%Y" ] ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21 13:30:05' ) result = f . clean ( '1:30:05 PM 21.12.2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21 13:30:05" ) result = f . clean ( '1:30 PM 21-12-2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21 13:30:00" ) def test_localized_dateTimeField_with_inputformat ( self ) : f = forms . DateTimeField ( input_formats = [ "%I:%M:%S %p %d.%m.%Y" , "%I:%M %p %d-%m-%Y" ] , localize = True ) self . assertRaises ( forms . ValidationError , f . clean , '2010-12-21 13:30:05' ) result = f . clean ( '1:30:05 PM 21.12.2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 , 5 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21 13:30:05" ) result = f . clean ( '1:30 PM 21-12-2010' ) self . assertEqual ( result , datetime ( 2010 , 12 , 21 , 13 , 30 ) ) text = f . widget . _format_value ( result ) self . assertEqual ( text , "2010-12-21 13:30:00" )
