""" Set of "markup" template filters for Django. These filters transform plain text markup syntaxes to HTML; currently there is support for: * Textile, which requires the PyTextile library available at http://loopcore.com/python-textile/ * Markdown, which requires the Python-markdown library from http://www.freewisdom.org/projects/python-markdown * reStructuredText, which requires docutils from http://docutils.sf.net/ """ from django import template from django . conf import settings from django . utils . encoding import smart_str , force_unicode from django . utils . safestring import mark_safe register = template . Library ( ) @ register . filter ( is_safe = True ) def textile ( value ) : try : import textile except ImportError : if settings . DEBUG : raise template . TemplateSyntaxError ( "Error in {% textile %} filter: The Python textile library isn't installed." ) return force_unicode ( value ) else : return mark_safe ( force_unicode ( textile . textile ( smart_str ( value ) , encoding = 'utf-8' , output = 'utf-8' ) ) ) @ register . filter ( is_safe = True ) def markdown ( value , arg = '' ) : try : import markdown except ImportError : if settings . DEBUG : raise template . TemplateSyntaxError ( "Error in {% markdown %} filter: The Python markdown library isn't installed." ) return force_unicode ( value ) else : if hasattr ( markdown , 'version' ) : extensions = [ e for e in arg . split ( "," ) if e ] if len ( extensions ) > 0 and extensions [ 0 ] == "safe" : extensions = extensions [ 1 : ] safe_mode = True else : safe_mode = False if getattr ( markdown , "version_info" , None ) < ( 1 , 7 ) : return mark_safe ( force_unicode ( markdown . markdown ( smart_str ( value ) , extensions , safe_mode = safe_mode ) ) ) else : return mark_safe ( markdown . markdown ( force_unicode ( value ) , extensions , safe_mode = safe_mode ) ) else : return mark_safe ( force_unicode ( markdown . markdown ( smart_str ( value ) ) ) ) @ register . filter ( is_safe = True ) def restructuredtext ( value ) : try : from docutils . core import publish_parts except ImportError : if settings . DEBUG : raise template . TemplateSyntaxError ( "Error in {% restructuredtext %} filter: The Python docutils library isn't installed." ) return force_unicode ( value ) else : docutils_settings = getattr ( settings , "RESTRUCTUREDTEXT_FILTER_SETTINGS" , { } ) parts = publish_parts ( source = smart_str ( value ) , writer_name = "html4css1" , settings_overrides = docutils_settings ) return mark_safe ( force_unicode ( parts [ "fragment" ] ) )
