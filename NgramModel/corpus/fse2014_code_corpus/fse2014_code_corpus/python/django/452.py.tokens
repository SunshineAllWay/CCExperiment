from __future__ import absolute_import import mimetypes from os import path from django . conf import settings from django . conf . urls . static import static from django . test import TestCase from django . http import HttpResponseNotModified from . . import urls from . . urls import media_dir class StaticTests ( TestCase ) : def setUp ( self ) : self . prefix = 'site_media' self . old_debug = settings . DEBUG settings . DEBUG = True def tearDown ( self ) : settings . DEBUG = self . old_debug def test_serve ( self ) : media_files = [ 'file.txt' , 'file.txt.gz' ] for filename in media_files : response = self . client . get ( '/views/%s/%s' % ( self . prefix , filename ) ) file_path = path . join ( media_dir , filename ) self . assertEqual ( open ( file_path ) . read ( ) , response . content ) self . assertEqual ( len ( response . content ) , int ( response [ 'Content-Length' ] ) ) self . assertEqual ( mimetypes . guess_type ( file_path ) [ 1 ] , response . get ( 'Content-Encoding' , None ) ) def test_unknown_mime_type ( self ) : response = self . client . get ( '/views/%s/file.unknown' % self . prefix ) self . assertEqual ( 'application/octet-stream' , response [ 'Content-Type' ] ) def test_copes_with_empty_path_component ( self ) : file_name = 'file.txt' response = self . client . get ( '/views/%s//%s' % ( self . prefix , file_name ) ) file = open ( path . join ( media_dir , file_name ) ) self . assertEqual ( file . read ( ) , response . content ) def test_is_modified_since ( self ) : file_name = 'file.txt' response = self . client . get ( '/views/%s/%s' % ( self . prefix , file_name ) , HTTP_IF_MODIFIED_SINCE = 'Thu, 1 Jan 1970 00:00:00 GMT' ) file = open ( path . join ( media_dir , file_name ) ) self . assertEqual ( file . read ( ) , response . content ) def test_not_modified_since ( self ) : file_name = 'file.txt' response = self . client . get ( % ( self . prefix , file_name ) , HTTP_IF_MODIFIED_SINCE = 'Mon, 18 Jan 2038 05:14:07 GMT' ) self . assertTrue ( isinstance ( response , HttpResponseNotModified ) ) def test_invalid_if_modified_since ( self ) : file_name = 'file.txt' invalid_date = 'Mon, 28 May 999999999999 28:25:26 GMT' response = self . client . get ( '/views/%s/%s' % ( self . prefix , file_name ) , HTTP_IF_MODIFIED_SINCE = invalid_date ) file = open ( path . join ( media_dir , file_name ) ) self . assertEqual ( file . read ( ) , response . content ) self . assertEqual ( len ( response . content ) , int ( response [ 'Content-Length' ] ) ) def test_invalid_if_modified_since2 ( self ) : file_name = 'file.txt' invalid_date = ': 1291108438, Wed, 20 Oct 2010 14:05:00 GMT' response = self . client . get ( '/views/%s/%s' % ( self . prefix , file_name ) , HTTP_IF_MODIFIED_SINCE = invalid_date ) file = open ( path . join ( media_dir , file_name ) ) self . assertEqual ( file . read ( ) , response . content ) self . assertEqual ( len ( response . content ) , int ( response [ 'Content-Length' ] ) ) class StaticHelperTest ( StaticTests ) : def setUp ( self ) : super ( StaticHelperTest , self ) . setUp ( ) self . prefix = 'media' self . _old_views_urlpatterns = urls . urlpatterns [ : ] urls . urlpatterns += static ( '/media/' , document_root = media_dir ) def tearDown ( self ) : super ( StaticHelperTest , self ) . tearDown ( ) urls . urlpatterns = self . _old_views_urlpatterns
