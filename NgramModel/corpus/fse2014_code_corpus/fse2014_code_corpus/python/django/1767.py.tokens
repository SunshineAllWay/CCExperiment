from django . contrib . gis . db . models . sql . compiler import GeoSQLCompiler as BaseGeoSQLCompiler from django . db . backends . oracle import compiler SQLCompiler = compiler . SQLCompiler class GeoSQLCompiler ( BaseGeoSQLCompiler , SQLCompiler ) : pass class SQLInsertCompiler ( compiler . SQLInsertCompiler , GeoSQLCompiler ) : def placeholder ( self , field , val ) : if field is None : return val elif hasattr ( field , 'get_placeholder' ) : ph = field . get_placeholder ( val , self . connection ) if ph == 'NULL' : param_idx = self . query . columns . index ( field . column ) params = list ( self . query . params ) params . pop ( param_idx ) self . query . params = tuple ( params ) return ph else : return '%s' class SQLDeleteCompiler ( compiler . SQLDeleteCompiler , GeoSQLCompiler ) : pass class SQLUpdateCompiler ( compiler . SQLUpdateCompiler , GeoSQLCompiler ) : pass class SQLAggregateCompiler ( compiler . SQLAggregateCompiler , GeoSQLCompiler ) : pass class SQLDateCompiler ( compiler . SQLDateCompiler , GeoSQLCompiler ) : pass
