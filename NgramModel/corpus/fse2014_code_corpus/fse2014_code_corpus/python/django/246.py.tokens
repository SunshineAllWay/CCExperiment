from __future__ import absolute_import import os import shutil from django . core . files import File from django . core . files . images import ImageFile from django . test import TestCase from . models import ( Image , Person , PersonWithHeight , PersonWithHeightAndWidth , PersonDimensionsFirst , PersonTwoImages , TestImageFieldFile ) if Image : from . models import temp_storage_dir class ImageFieldTestMixin ( object ) : PersonModel = PersonWithHeightAndWidth File = ImageFile def setUp ( self ) : if os . path . exists ( temp_storage_dir ) : shutil . rmtree ( temp_storage_dir ) os . mkdir ( temp_storage_dir ) file_path1 = os . path . join ( os . path . dirname ( __file__ ) , "4x8.png" ) self . file1 = self . File ( open ( file_path1 , 'rb' ) ) file_path2 = os . path . join ( os . path . dirname ( __file__ ) , "8x4.png" ) self . file2 = self . File ( open ( file_path2 , 'rb' ) ) def tearDown ( self ) : shutil . rmtree ( temp_storage_dir ) def check_dimensions ( self , instance , width , height , field_name = 'mugshot' ) : field = getattr ( instance , field_name ) if width is None and height is None : self . assertRaises ( ValueError , getattr , field , 'width' ) self . assertRaises ( ValueError , getattr , field , 'height' ) else : self . assertEqual ( field . width , width ) self . assertEqual ( field . height , height ) width_field_name = field_name + '_width' if hasattr ( instance , width_field_name ) : self . assertEqual ( getattr ( instance , width_field_name ) , width ) height_field_name = field_name + '_height' if hasattr ( instance , height_field_name ) : self . assertEqual ( getattr ( instance , height_field_name ) , height ) class ImageFieldTests ( ImageFieldTestMixin , TestCase ) : def test_equal_notequal_hash ( self ) : p1 = self . PersonModel ( name = "Joe" ) p1 . mugshot . save ( "mug" , self . file1 ) p2 = self . PersonModel ( name = "Bob" ) p2 . mugshot . save ( "mug" , self . file2 ) self . assertEqual ( p1 . mugshot == p2 . mugshot , False ) self . assertEqual ( p1 . mugshot != p2 . mugshot , True ) p1_db = self . PersonModel . objects . get ( name = "Joe" ) self . assertEqual ( p1_db . mugshot == p2 . mugshot , False ) self . assertEqual ( p1_db . mugshot != p2 . mugshot , True ) self . assertEqual ( p1_db . mugshot == p1 . mugshot , True ) self . assertEqual ( hash ( p1_db . mugshot ) , hash ( p1 . mugshot ) ) self . assertEqual ( p1_db . mugshot != p1 . mugshot , False ) def test_instantiate_missing ( self ) : p = self . PersonModel ( name = "Joan" ) p . mugshot . save ( "shot" , self . file1 ) p = self . PersonModel . objects . get ( name = "Joan" ) path = p . mugshot . path shutil . move ( path , path + '.moved' ) p2 = self . PersonModel . objects . get ( name = "Joan" ) def test_delete_when_missing ( self ) : p = self . PersonModel ( name = "Fred" ) p . mugshot . save ( "shot" , self . file1 ) os . remove ( p . mugshot . path ) p . delete ( ) def test_size_method ( self ) : p = self . PersonModel ( name = "Joan" ) p . mugshot . save ( "shot" , self . file1 ) p = self . PersonModel . objects . get ( name = "Joan" ) self . assertEqual ( p . mugshot . closed , True ) _ = p . mugshot . size self . assertEqual ( p . mugshot . closed , True ) def test_pickle ( self ) : import pickle p = Person ( name = "Joe" ) p . mugshot . save ( "mug" , self . file1 ) dump = pickle . dumps ( p ) p2 = Person ( name = "Bob" ) p2 . mugshot = self . file1 loaded_p = pickle . loads ( dump ) self . assertEqual ( p . mugshot , loaded_p . mugshot ) class ImageFieldTwoDimensionsTests ( ImageFieldTestMixin , TestCase ) : def test_constructor ( self ) : p = self . PersonModel ( name = 'Joe' , mugshot = self . file1 ) self . check_dimensions ( p , 4 , 8 ) p . save ( ) self . check_dimensions ( p , 4 , 8 ) def test_image_after_constructor ( self ) : p = self . PersonModel ( name = 'Joe' ) self . assertEqual ( isinstance ( p . mugshot , TestImageFieldFile ) , True ) self . assertEqual ( bool ( p . mugshot ) , False ) p = self . PersonModel ( name = 'Joe' ) p . mugshot = self . file1 self . check_dimensions ( p , 4 , 8 ) def test_create ( self ) : p = self . PersonModel . objects . create ( name = 'Joe' , mugshot = self . file1 ) self . check_dimensions ( p , 4 , 8 ) def test_default_value ( self ) : p = self . PersonModel ( ) self . assertEqual ( isinstance ( p . mugshot , TestImageFieldFile ) , True ) self . assertEqual ( bool ( p . mugshot ) , False ) def test_assignment_to_None ( self ) : p = self . PersonModel ( name = 'Joe' , mugshot = self . file1 ) self . check_dimensions ( p , 4 , 8 ) p . mugshot = None self . check_dimensions ( p , None , None ) p . mugshot = self . file2 self . check_dimensions ( p , 8 , 4 ) def test_field_save_and_delete_methods ( self ) : p = self . PersonModel ( name = 'Joe' ) p . mugshot . save ( "mug" , self . file1 ) self . check_dimensions ( p , 4 , 8 ) p . mugshot . save ( "mug" , self . file2 ) self . check_dimensions ( p , 8 , 4 ) p . mugshot . delete ( save = False ) self . assertEqual ( p . mugshot , None ) self . check_dimensions ( p , None , None ) def test_dimensions ( self ) : p = self . PersonModel ( name = 'Joe' ) p . mugshot . save ( "mug" , self . file1 ) self . check_dimensions ( p , 4 , 8 ) p = self . PersonModel . objects . get ( name = 'Joe' ) self . assertEqual ( p . mugshot . was_opened , False ) self . check_dimensions ( p , 4 , 8 ) self . assertEqual ( p . mugshot . was_opened , True ) p . mugshot . was_opened = False self . check_dimensions ( p , 4 , 8 ) self . assertEqual ( p . mugshot . was_opened , False ) p . mugshot = self . file2 self . check_dimensions ( p , 8 , 4 ) self . assertEqual ( p . mugshot . was_opened , True ) class ImageFieldNoDimensionsTests ( ImageFieldTwoDimensionsTests ) : PersonModel = Person class ImageFieldOneDimensionTests ( ImageFieldTwoDimensionsTests ) : PersonModel = PersonWithHeight class ImageFieldDimensionsFirstTests ( ImageFieldTwoDimensionsTests ) : PersonModel = PersonDimensionsFirst class ImageFieldUsingFileTests ( ImageFieldTwoDimensionsTests ) : PersonModel = PersonDimensionsFirst File = File class TwoImageFieldTests ( ImageFieldTestMixin , TestCase ) : PersonModel = PersonTwoImages def test_constructor ( self ) : p = self . PersonModel ( mugshot = self . file1 , headshot = self . file2 ) self . check_dimensions ( p , 4 , 8 , 'mugshot' ) self . check_dimensions ( p , 8 , 4 , 'headshot' ) p . save ( ) self . check_dimensions ( p , 4 , 8 , 'mugshot' ) self . check_dimensions ( p , 8 , 4 , 'headshot' ) def test_create ( self ) : p = self . PersonModel . objects . create ( mugshot = self . file1 , headshot = self . file2 ) self . check_dimensions ( p , 4 , 8 ) self . check_dimensions ( p , 8 , 4 , 'headshot' ) def test_assignment ( self ) : p = self . PersonModel ( ) self . check_dimensions ( p , None , None , 'mugshot' ) self . check_dimensions ( p , None , None , 'headshot' ) p . mugshot = self . file1 self . check_dimensions ( p , 4 , 8 , 'mugshot' ) self . check_dimensions ( p , None , None , 'headshot' ) p . headshot = self . file2 self . check_dimensions ( p , 4 , 8 , 'mugshot' ) self . check_dimensions ( p , 8 , 4 , 'headshot' ) p . mugshot = None self . check_dimensions ( p , None , None , 'mugshot' ) self . check_dimensions ( p , 8 , 4 , 'headshot' ) p . headshot = None self . check_dimensions ( p , None , None , 'mugshot' ) self . check_dimensions ( p , None , None , 'headshot' ) def test_field_save_and_delete_methods ( self ) : p = self . PersonModel ( name = 'Joe' ) p . mugshot . save ( "mug" , self . file1 ) self . check_dimensions ( p , 4 , 8 , 'mugshot' ) self . check_dimensions ( p , None , None , 'headshot' ) p . headshot . save ( "head" , self . file2 ) self . check_dimensions ( p , 4 , 8 , 'mugshot' ) self . check_dimensions ( p , 8 , 4 , 'headshot' ) p . headshot . delete ( save = True ) self . check_dimensions ( p , 4 , 8 , 'mugshot' ) self . check_dimensions ( p , None , None , 'headshot' ) p . mugshot . delete ( save = False ) self . check_dimensions ( p , None , None , 'mugshot' ) self . check_dimensions ( p , None , None , 'headshot' ) def test_dimensions ( self ) : p = self . PersonModel ( name = 'Joe' ) p . mugshot . save ( "mug" , self . file1 ) p . headshot . save ( "head" , self . file2 ) self . check_dimensions ( p , 4 , 8 , 'mugshot' ) self . check_dimensions ( p , 8 , 4 , 'headshot' ) p = self . PersonModel . objects . get ( name = 'Joe' ) self . assertEqual ( p . mugshot . was_opened , False ) self . assertEqual ( p . headshot . was_opened , False ) self . check_dimensions ( p , 4 , 8 , 'mugshot' ) self . check_dimensions ( p , 8 , 4 , 'headshot' ) self . assertEqual ( p . mugshot . was_opened , True ) self . assertEqual ( p . headshot . was_opened , True ) p . mugshot . was_opened = False p . headshot . was_opened = False self . check_dimensions ( p , 4 , 8 , 'mugshot' ) self . check_dimensions ( p , 8 , 4 , 'headshot' ) self . assertEqual ( p . mugshot . was_opened , False ) self . assertEqual ( p . headshot . was_opened , False ) p . mugshot = self . file2 p . headshot = self . file1 self . check_dimensions ( p , 8 , 4 , 'mugshot' ) self . check_dimensions ( p , 4 , 8 , 'headshot' ) self . assertEqual ( p . mugshot . was_opened , True ) self . assertEqual ( p . headshot . was_opened , True )
