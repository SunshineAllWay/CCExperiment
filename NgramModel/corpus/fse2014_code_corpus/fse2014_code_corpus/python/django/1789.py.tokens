from django . conf import settings from django . template . loader import render_to_string from django . utils . safestring import mark_safe from django . contrib . gis . maps . google . overlays import GPolygon , GPolyline , GMarker class GoogleMapException ( Exception ) : pass GOOGLE_MAPS_URL = 'http://maps.google.com/maps?file=api&amp;v=%s&amp;key=' class GoogleMap ( object ) : onunload = mark_safe ( 'onunload="GUnload()"' ) vml_css = mark_safe ( 'v\:* {behavior:url(#default#VML);}' ) xmlns = mark_safe ( 'xmlns:v="urn:schemas-microsoft-com:vml"' ) def __init__ ( self , key = None , api_url = None , version = None , center = None , zoom = None , dom_id = 'map' , kml_urls = [ ] , polylines = None , polygons = None , markers = None , template = 'gis/google/google-map.js' , js_module = 'geodjango' , extra_context = { } ) : if not key : try : self . key = settings . GOOGLE_MAPS_API_KEY except AttributeError : raise GoogleMapException ( 'Google Maps API Key not found (try adding GOOGLE_MAPS_API_KEY to your settings).' ) else : self . key = key if not version : self . version = getattr ( settings , 'GOOGLE_MAPS_API_VERSION' , '2.x' ) else : self . version = version if not api_url : self . api_url = mark_safe ( getattr ( settings , 'GOOGLE_MAPS_URL' , GOOGLE_MAPS_URL ) % self . version ) else : self . api_url = api_url self . dom_id = dom_id self . extra_context = extra_context self . js_module = js_module self . template = template self . kml_urls = kml_urls overlay_info = [ [ GMarker , markers , 'markers' ] , [ GPolygon , polygons , 'polygons' ] , [ GPolyline , polylines , 'polylines' ] ] for overlay_class , overlay_list , varname in overlay_info : setattr ( self , varname , [ ] ) if overlay_list : for overlay in overlay_list : if isinstance ( overlay , overlay_class ) : getattr ( self , varname ) . append ( overlay ) else : getattr ( self , varname ) . append ( overlay_class ( overlay ) ) self . calc_zoom = False if self . polygons or self . polylines or self . markers : if center is None or zoom is None : self . calc_zoom = True if zoom is None : zoom = 4 self . zoom = zoom if center is None : center = ( 0 , 0 ) self . center = center def render ( self ) : params = { 'calc_zoom' : self . calc_zoom , : self . center , : self . dom_id , : self . js_module , : self . kml_urls , : self . zoom , : self . polygons , : self . polylines , : self . icons , : self . markers , } params . update ( self . extra_context ) return render_to_string ( self . template , params ) @ property def body ( self ) : return mark_safe ( '<body %s %s>' % ( self . onload , self . onunload ) ) @ property def onload ( self ) : return mark_safe ( 'onload="%s.%s_load()"' % ( self . js_module , self . dom_id ) ) @ property def api_script ( self ) : return mark_safe ( '<script src="%s%s" type="text/javascript"></script>' % ( self . api_url , self . key ) ) @ property def js ( self ) : return self . render ( ) @ property def scripts ( self ) : return mark_safe ( '%s\n <script type="text/javascript">\n//<![CDATA[\n%s//]]>\n </script>' % ( self . api_script , self . js ) ) @ property def style ( self ) : return mark_safe ( '<style type="text/css">%s</style>' % self . vml_css ) @ property def xhtml ( self ) : return mark_safe ( '<html xmlns="http://www.w3.org/1999/xhtml" %s>' % self . xmlns ) @ property def icons ( self ) : return set ( [ marker . icon for marker in self . markers if marker . icon ] ) class GoogleMapSet ( GoogleMap ) : def __init__ ( self , * args , ** kwargs ) : template = kwargs . pop ( 'template' , 'gis/google/google-multi.js' ) self . map_template = kwargs . pop ( 'map_template' , 'gis/google/google-single.js' ) super ( GoogleMapSet , self ) . __init__ ( ** kwargs ) self . template = template if isinstance ( args [ 0 ] , ( tuple , list ) ) : self . maps = args [ 0 ] else : self . maps = args self . dom_ids = [ 'map%d' % i for i in xrange ( len ( self . maps ) ) ] def load_map_js ( self ) : result = [ ] for dom_id , gmap in zip ( self . dom_ids , self . maps ) : tmp = ( gmap . template , gmap . dom_id ) gmap . template = self . map_template gmap . dom_id = dom_id result . append ( gmap . js ) gmap . template , gmap . dom_id = tmp return mark_safe ( '' . join ( result ) ) def render ( self ) : params = { 'js_module' : self . js_module , : self . dom_ids , : self . load_map_js ( ) , : self . icons , } params . update ( self . extra_context ) return render_to_string ( self . template , params ) @ property def onload ( self ) : return mark_safe ( 'onload="%s.load()"' % self . js_module ) @ property def icons ( self ) : icons = set ( ) for map in self . maps : icons |= map . icons return icons
