from django . core . urlresolvers import ( RegexURLPattern , RegexURLResolver , LocaleRegexURLResolver ) from django . core . exceptions import ImproperlyConfigured from django . utils . importlib import import_module __all__ = [ 'handler403' , 'handler404' , 'handler500' , 'include' , 'patterns' , 'url' ] handler403 = 'django.views.defaults.permission_denied' handler404 = 'django.views.defaults.page_not_found' handler500 = 'django.views.defaults.server_error' def include ( arg , namespace = None , app_name = None ) : if isinstance ( arg , tuple ) : if namespace : raise ImproperlyConfigured ( 'Cannot override the namespace for a dynamic module that provides a namespace' ) urlconf_module , app_name , namespace = arg else : urlconf_module = arg if isinstance ( urlconf_module , basestring ) : urlconf_module = import_module ( urlconf_module ) patterns = getattr ( urlconf_module , 'urlpatterns' , urlconf_module ) if isinstance ( patterns , ( list , tuple ) ) : for url_pattern in patterns : if isinstance ( url_pattern , LocaleRegexURLResolver ) : raise ImproperlyConfigured ( ) return ( urlconf_module , app_name , namespace ) def patterns ( prefix , * args ) : pattern_list = [ ] for t in args : if isinstance ( t , ( list , tuple ) ) : t = url ( prefix = prefix , * t ) elif isinstance ( t , RegexURLPattern ) : t . add_prefix ( prefix ) pattern_list . append ( t ) return pattern_list def url ( regex , view , kwargs = None , name = None , prefix = '' ) : if isinstance ( view , ( list , tuple ) ) : urlconf_module , app_name , namespace = view return RegexURLResolver ( regex , urlconf_module , kwargs , app_name = app_name , namespace = namespace ) else : if isinstance ( view , basestring ) : if not view : raise ImproperlyConfigured ( 'Empty URL pattern view name not permitted (for pattern %r)' % regex ) if prefix : view = prefix + '.' + view return RegexURLPattern ( regex , view , kwargs , name )
