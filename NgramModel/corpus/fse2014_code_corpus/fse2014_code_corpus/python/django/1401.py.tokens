from django import http from django . contrib . contenttypes . models import ContentType from django . contrib . sites . models import Site , get_current_site from django . core . exceptions import ObjectDoesNotExist from django . utils . translation import ugettext as _ def shortcut ( request , content_type_id , object_id ) : try : content_type = ContentType . objects . get ( pk = content_type_id ) if not content_type . model_class ( ) : raise http . Http404 ( _ ( u"Content type %(ct_id)s object has no associated model" ) % { 'ct_id' : content_type_id } ) obj = content_type . get_object_for_this_type ( pk = object_id ) except ( ObjectDoesNotExist , ValueError ) : raise http . Http404 ( _ ( u"Content type %(ct_id)s object %(obj_id)s doesn't exist" ) % { 'ct_id' : content_type_id , 'obj_id' : object_id } ) try : get_absolute_url = obj . get_absolute_url except AttributeError : raise http . Http404 ( _ ( "%(ct_name)s objects don't have a get_absolute_url() method" ) % { 'ct_name' : content_type . name } ) absurl = get_absolute_url ( ) if absurl . startswith ( 'http://' ) or absurl . startswith ( 'https://' ) : return http . HttpResponseRedirect ( absurl ) object_domain = None if Site . _meta . installed : opts = obj . _meta for field in opts . many_to_many : if field . rel . to is Site : try : object_domain = getattr ( obj , field . name ) . all ( ) [ 0 ] . domain except IndexError : pass if object_domain is not None : break if object_domain is None : for field in obj . _meta . fields : if field . rel and field . rel . to is Site : try : object_domain = getattr ( obj , field . name ) . domain except Site . DoesNotExist : pass if object_domain is not None : break if object_domain is None : try : object_domain = get_current_site ( request ) . domain except Site . DoesNotExist : pass if object_domain is not None : protocol = request . is_secure ( ) and 'https' or 'http' return http . HttpResponseRedirect ( '%s://%s%s' % ( protocol , object_domain , absurl ) ) else : return http . HttpResponseRedirect ( absurl )
