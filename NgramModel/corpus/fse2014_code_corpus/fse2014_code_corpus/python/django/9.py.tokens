from __future__ import absolute_import , with_statement from django . test import TestCase from . models import Article , Publication class ManyToManyTests ( TestCase ) : def setUp ( self ) : self . p1 = Publication . objects . create ( id = None , title = 'The Python Journal' ) self . p2 = Publication . objects . create ( id = None , title = 'Science News' ) self . p3 = Publication . objects . create ( id = None , title = 'Science Weekly' ) self . p4 = Publication . objects . create ( title = 'Highlights for Children' ) self . a1 = Article . objects . create ( id = None , headline = 'Django lets you build Web apps easily' ) self . a1 . publications . add ( self . p1 ) self . a2 = Article . objects . create ( id = None , headline = 'NASA uses Python' ) self . a2 . publications . add ( self . p1 , self . p2 , self . p3 , self . p4 ) self . a3 = Article . objects . create ( headline = 'NASA finds intelligent life on Earth' ) self . a3 . publications . add ( self . p2 ) self . a4 = Article . objects . create ( headline = 'Oxygen-free diet works wonders' ) self . a4 . publications . add ( self . p2 ) def test_add ( self ) : a5 = Article ( id = None , headline = 'Django lets you reate Web apps easily' ) self . assertRaises ( ValueError , getattr , a5 , 'publications' ) a5 . save ( ) a5 . publications . add ( self . p1 ) self . assertQuerysetEqual ( a5 . publications . all ( ) , [ '<Publication: The Python Journal>' ] ) a6 = Article ( id = None , headline = 'ESA uses Python' ) a6 . save ( ) a6 . publications . add ( self . p1 , self . p2 ) a6 . publications . add ( self . p3 ) a6 . publications . add ( self . p3 ) self . assertQuerysetEqual ( a6 . publications . all ( ) , [ , , , ] ) with self . assertRaisesRegexp ( TypeError , "'Publication' instance expected, got <Article.*" ) : a6 . publications . add ( a5 ) p4 = a6 . publications . create ( title = 'Highlights for Adults' ) self . assertQuerysetEqual ( a6 . publications . all ( ) , [ , , , , ] ) def test_reverse_add ( self ) : a5 = Article ( headline = 'NASA finds intelligent life on Mars' ) a5 . save ( ) self . p2 . article_set . add ( a5 ) self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ , , , , ] ) self . assertQuerysetEqual ( a5 . publications . all ( ) , [ '<Publication: Science News>' ] ) new_article = self . p2 . article_set . create ( headline = 'Carbon-free diet works wonders' ) self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ , , , , , ] ) a6 = self . p2 . article_set . all ( ) [ 3 ] self . assertQuerysetEqual ( a6 . publications . all ( ) , [ , , , , ] ) def test_related_sets ( self ) : self . assertQuerysetEqual ( self . a1 . publications . all ( ) , [ '<Publication: The Python Journal>' ] ) self . assertQuerysetEqual ( self . a2 . publications . all ( ) , [ , , , , ] ) self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ , , , ] ) self . assertQuerysetEqual ( self . p1 . article_set . all ( ) , [ , , ] ) self . assertQuerysetEqual ( Publication . objects . get ( id = self . p4 . id ) . article_set . all ( ) , [ '<Article: NASA uses Python>' ] ) def test_selects ( self ) : self . assertQuerysetEqual ( Article . objects . filter ( publications__id__exact = self . p1 . id ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( publications__pk = self . p1 . id ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( publications = self . p1 . id ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( publications = self . p1 ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( publications__title__startswith = "Science" ) , [ , , , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( publications__title__startswith = "Science" ) . distinct ( ) , [ , , , ] ) self . assertEqual ( Article . objects . filter ( publications__title__startswith = "Science" ) . count ( ) , 4 ) self . assertEqual ( Article . objects . filter ( publications__title__startswith = "Science" ) . distinct ( ) . count ( ) , 3 ) self . assertQuerysetEqual ( Article . objects . filter ( publications__in = [ self . p1 . id , self . p2 . id ] ) . distinct ( ) , [ , , , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( publications__in = [ self . p1 . id , self . p2 ] ) . distinct ( ) , [ , , , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( publications__in = [ self . p1 , self . p2 ] ) . distinct ( ) , [ , , , , ] ) self . assertQuerysetEqual ( Article . objects . exclude ( publications = self . p2 ) , [ '<Article: Django lets you build Web apps easily>' ] ) def test_reverse_selects ( self ) : self . assertQuerysetEqual ( Publication . objects . filter ( id__exact = self . p1 . id ) , [ '<Publication: The Python Journal>' ] ) self . assertQuerysetEqual ( Publication . objects . filter ( pk = self . p1 . id ) , [ '<Publication: The Python Journal>' ] ) self . assertQuerysetEqual ( Publication . objects . filter ( article__headline__startswith = "NASA" ) , [ , , , , , ] ) self . assertQuerysetEqual ( Publication . objects . filter ( article__id__exact = self . a1 . id ) , [ '<Publication: The Python Journal>' ] ) self . assertQuerysetEqual ( Publication . objects . filter ( article__pk = self . a1 . id ) , [ '<Publication: The Python Journal>' ] ) self . assertQuerysetEqual ( Publication . objects . filter ( article = self . a1 . id ) , [ '<Publication: The Python Journal>' ] ) self . assertQuerysetEqual ( Publication . objects . filter ( article = self . a1 ) , [ '<Publication: The Python Journal>' ] ) self . assertQuerysetEqual ( Publication . objects . filter ( article__in = [ self . a1 . id , self . a2 . id ] ) . distinct ( ) , [ , , , , ] ) self . assertQuerysetEqual ( Publication . objects . filter ( article__in = [ self . a1 . id , self . a2 ] ) . distinct ( ) , [ , , , , ] ) self . assertQuerysetEqual ( Publication . objects . filter ( article__in = [ self . a1 , self . a2 ] ) . distinct ( ) , [ , , , , ] ) def test_delete ( self ) : self . p1 . delete ( ) self . assertQuerysetEqual ( Publication . objects . all ( ) , [ , , , ] ) self . assertQuerysetEqual ( self . a1 . publications . all ( ) , [ ] ) self . a2 . delete ( ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , , ] ) self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ , , ] ) def test_bulk_delete ( self ) : Publication . objects . filter ( title__startswith = 'Science' ) . delete ( ) self . assertQuerysetEqual ( Publication . objects . all ( ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , , , ] ) self . assertQuerysetEqual ( self . a2 . publications . all ( ) , [ , , ] ) q = Article . objects . filter ( headline__startswith = 'Django' ) self . assertQuerysetEqual ( q , [ '<Article: Django lets you build Web apps easily>' ] ) q . delete ( ) self . assertQuerysetEqual ( q , [ ] ) self . assertQuerysetEqual ( self . p1 . article_set . all ( ) , [ '<Article: NASA uses Python>' ] ) def test_remove ( self ) : self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ , , , ] ) self . a4 . publications . remove ( self . p2 ) self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ , , ] ) self . assertQuerysetEqual ( self . a4 . publications . all ( ) , [ ] ) self . p2 . article_set . remove ( self . a3 ) self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ , ] ) self . assertQuerysetEqual ( self . a3 . publications . all ( ) , [ ] ) def test_assign ( self ) : self . p2 . article_set = [ self . a4 , self . a3 ] self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ , , ] ) self . assertQuerysetEqual ( self . a4 . publications . all ( ) , [ '<Publication: Science News>' ] ) self . a4 . publications = [ self . p3 . id ] self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ '<Article: NASA finds intelligent life on Earth>' ] ) self . assertQuerysetEqual ( self . a4 . publications . all ( ) , [ '<Publication: Science Weekly>' ] ) self . p2 . article_set = [ ] self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ ] ) self . a4 . publications = [ ] self . assertQuerysetEqual ( self . a4 . publications . all ( ) , [ ] ) def test_assign_ids ( self ) : self . p2 . article_set = [ self . a4 . id , self . a3 . id ] self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ , , ] ) self . assertQuerysetEqual ( self . a4 . publications . all ( ) , [ '<Publication: Science News>' ] ) self . a4 . publications = [ self . p3 . id ] self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ '<Article: NASA finds intelligent life on Earth>' ] ) self . assertQuerysetEqual ( self . a4 . publications . all ( ) , [ '<Publication: Science Weekly>' ] ) def test_clear ( self ) : self . p2 . article_set . clear ( ) self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ ] ) self . assertQuerysetEqual ( self . a4 . publications . all ( ) , [ ] ) self . p2 . article_set . add ( self . a3 , self . a4 ) self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ , , ] ) self . assertQuerysetEqual ( self . a4 . publications . all ( ) , [ , ] ) self . a4 . publications . clear ( ) self . assertQuerysetEqual ( self . a4 . publications . all ( ) , [ ] ) self . assertQuerysetEqual ( self . p2 . article_set . all ( ) , [ '<Article: NASA finds intelligent life on Earth>' ] )
