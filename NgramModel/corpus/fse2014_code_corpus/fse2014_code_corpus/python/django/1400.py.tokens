from __future__ import with_statement import urllib from django . db import models from django . contrib . contenttypes . models import ContentType from django . contrib . contenttypes . views import shortcut from django . contrib . sites . models import Site from django . http import HttpRequest , Http404 from django . test import TestCase from django . utils . encoding import smart_str class FooWithoutUrl ( models . Model ) : name = models . CharField ( max_length = 30 , unique = True ) def __unicode__ ( self ) : return self . name class FooWithUrl ( FooWithoutUrl ) : def get_absolute_url ( self ) : return "/users/%s/" % urllib . quote ( smart_str ( self . name ) ) class FooWithBrokenAbsoluteUrl ( FooWithoutUrl ) : def get_absolute_url ( self ) : return "/users/%s/" % self . unknown_field class ContentTypesTests ( TestCase ) : def setUp ( self ) : self . old_Site_meta_installed = Site . _meta . installed ContentType . objects . clear_cache ( ) def tearDown ( self ) : Site . _meta . installed = self . old_Site_meta_installed ContentType . objects . clear_cache ( ) def test_lookup_cache ( self ) : with self . assertNumQueries ( 1 ) : ContentType . objects . get_for_model ( ContentType ) with self . assertNumQueries ( 0 ) : ct = ContentType . objects . get_for_model ( ContentType ) with self . assertNumQueries ( 0 ) : ContentType . objects . get_for_id ( ct . id ) with self . assertNumQueries ( 0 ) : ContentType . objects . get_by_natural_key ( 'contenttypes' , ) ContentType . objects . clear_cache ( ) with self . assertNumQueries ( 1 ) : ContentType . objects . get_for_model ( ContentType ) ContentType . objects . clear_cache ( ) with self . assertNumQueries ( 1 ) : ContentType . objects . get_by_natural_key ( 'contenttypes' , ) with self . assertNumQueries ( 0 ) : ContentType . objects . get_by_natural_key ( 'contenttypes' , ) def test_get_for_models_empty_cache ( self ) : with self . assertNumQueries ( 1 ) : cts = ContentType . objects . get_for_models ( ContentType , FooWithUrl ) self . assertEqual ( cts , { ContentType : ContentType . objects . get_for_model ( ContentType ) , FooWithUrl : ContentType . objects . get_for_model ( FooWithUrl ) , } ) def test_get_for_models_partial_cache ( self ) : ContentType . objects . get_for_model ( ContentType ) with self . assertNumQueries ( 1 ) : cts = ContentType . objects . get_for_models ( ContentType , FooWithUrl ) self . assertEqual ( cts , { ContentType : ContentType . objects . get_for_model ( ContentType ) , FooWithUrl : ContentType . objects . get_for_model ( FooWithUrl ) , } ) def test_get_for_models_full_cache ( self ) : ContentType . objects . get_for_model ( ContentType ) ContentType . objects . get_for_model ( FooWithUrl ) with self . assertNumQueries ( 0 ) : cts = ContentType . objects . get_for_models ( ContentType , FooWithUrl ) self . assertEqual ( cts , { ContentType : ContentType . objects . get_for_model ( ContentType ) , FooWithUrl : ContentType . objects . get_for_model ( FooWithUrl ) , } ) def test_shortcut_view ( self ) : request = HttpRequest ( ) request . META = { : "Example.com" , : "80" , } user_ct = ContentType . objects . get_for_model ( FooWithUrl ) obj = FooWithUrl . objects . create ( name = "john" ) if Site . _meta . installed : current_site = Site . objects . get_current ( ) response = shortcut ( request , user_ct . id , obj . id ) self . assertEqual ( "http://%s/users/john/" % current_site . domain , response . _headers . get ( "location" ) [ 1 ] ) Site . _meta . installed = False response = shortcut ( request , user_ct . id , obj . id ) self . assertEqual ( "http://Example.com/users/john/" , response . _headers . get ( "location" ) [ 1 ] ) def test_shortcut_view_without_get_absolute_url ( self ) : request = HttpRequest ( ) request . META = { : "Example.com" , : "80" , } user_ct = ContentType . objects . get_for_model ( FooWithoutUrl ) obj = FooWithoutUrl . objects . create ( name = "john" ) self . assertRaises ( Http404 , shortcut , request , user_ct . id , obj . id ) def test_shortcut_view_with_broken_get_absolute_url ( self ) : request = HttpRequest ( ) request . META = { : "Example.com" , : "80" , } user_ct = ContentType . objects . get_for_model ( FooWithBrokenAbsoluteUrl ) obj = FooWithBrokenAbsoluteUrl . objects . create ( name = "john" ) self . assertRaises ( AttributeError , shortcut , request , user_ct . id , obj . id ) def test_missing_model ( self ) : ct = ContentType . objects . create ( name = 'Old model' , app_label = 'contenttypes' , model = 'OldModel' , ) self . assertEqual ( unicode ( ct ) , u'Old model' )
