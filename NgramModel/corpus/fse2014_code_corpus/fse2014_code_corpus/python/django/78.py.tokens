from __future__ import absolute_import from django . db import transaction , IntegrityError from django . test import TestCase , skipIfDBFeature from . models import Employee , Business , Bar , Foo class CustomPKTests ( TestCase ) : def test_custom_pk ( self ) : dan = Employee . objects . create ( employee_code = 123 , first_name = "Dan" , last_name = "Jones" ) self . assertQuerysetEqual ( Employee . objects . all ( ) , [ , ] , unicode ) fran = Employee . objects . create ( employee_code = 456 , first_name = "Fran" , last_name = "Bones" ) self . assertQuerysetEqual ( Employee . objects . all ( ) , [ , , ] , unicode ) self . assertEqual ( Employee . objects . get ( pk = 123 ) , dan ) self . assertEqual ( Employee . objects . get ( pk = 456 ) , fran ) self . assertRaises ( Employee . DoesNotExist , lambda : Employee . objects . get ( pk = 42 ) ) self . assertEqual ( Employee . objects . get ( employee_code = 123 ) , dan ) self . assertQuerysetEqual ( Employee . objects . filter ( pk__in = [ 123 , 456 ] ) , [ , , ] , unicode ) e = Employee . objects . get ( pk = 123 ) self . assertEqual ( e . pk , 123 ) self . assertEqual ( e . employee_code , 123 ) fran = Employee . objects . get ( pk = 456 ) fran . last_name = "Jones" fran . save ( ) self . assertQuerysetEqual ( Employee . objects . filter ( last_name = "Jones" ) , [ , , ] , unicode ) emps = Employee . objects . in_bulk ( [ 123 , 456 ] ) self . assertEqual ( emps [ 123 ] , dan ) b = Business . objects . create ( name = "Sears" ) b . employees . add ( dan , fran ) self . assertQuerysetEqual ( b . employees . all ( ) , [ , , ] , unicode ) self . assertQuerysetEqual ( fran . business_set . all ( ) , [ , ] , lambda b : b . name ) self . assertEqual ( Business . objects . in_bulk ( [ "Sears" ] ) , { : b , } ) self . assertQuerysetEqual ( Business . objects . filter ( name = "Sears" ) , [ ] , lambda b : b . name ) self . assertQuerysetEqual ( Business . objects . filter ( pk = "Sears" ) , [ , ] , lambda b : b . name ) self . assertQuerysetEqual ( Employee . objects . filter ( business__name = "Sears" ) , [ , , ] , unicode , ) self . assertQuerysetEqual ( Employee . objects . filter ( business__pk = "Sears" ) , [ , , ] , unicode , ) self . assertQuerysetEqual ( Business . objects . filter ( employees__employee_code = 123 ) , [ , ] , lambda b : b . name ) self . assertQuerysetEqual ( Business . objects . filter ( employees__pk = 123 ) , [ , ] , lambda b : b . name , ) self . assertQuerysetEqual ( Business . objects . filter ( employees__first_name__startswith = "Fran" ) , [ , ] , lambda b : b . name ) def test_unicode_pk ( self ) : bus = Business . objects . create ( name = u'jaźń' ) def test_unique_pk ( self ) : e = Employee . objects . create ( employee_code = 123 , first_name = "Frank" , last_name = "Jones" ) sid = transaction . savepoint ( ) self . assertRaises ( IntegrityError , Employee . objects . create , employee_code = 123 , first_name = "Fred" , last_name = "Jones" ) transaction . savepoint_rollback ( sid ) def test_custom_field_pk ( self ) : new_bar = Bar . objects . create ( ) new_foo = Foo . objects . create ( bar = new_bar ) f = Foo . objects . get ( bar = new_bar . pk ) self . assertEqual ( f , new_foo ) self . assertEqual ( f . bar , new_bar ) f = Foo . objects . get ( bar = new_bar ) self . assertEqual ( f , new_foo ) , self . assertEqual ( f . bar , new_bar ) @ skipIfDBFeature ( 'supports_unspecified_pk' ) def test_required_pk ( self ) : sid = transaction . savepoint ( ) self . assertRaises ( IntegrityError , Employee . objects . create , first_name = "Tom" , last_name = "Smith" ) transaction . savepoint_rollback ( sid )
