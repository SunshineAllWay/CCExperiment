from __future__ import with_statement import os from django . core import mail from django . forms . fields import Field , EmailField from django . contrib . auth . models import User from django . contrib . auth . forms import UserCreationForm , AuthenticationForm , PasswordChangeForm , SetPasswordForm , UserChangeForm , PasswordResetForm from django . test import TestCase from django . utils . encoding import force_unicode from django . utils import translation class UserCreationFormTest ( TestCase ) : fixtures = [ 'authtestdata.json' ] def test_user_already_exists ( self ) : data = { : 'testclient' , : 'test123' , : 'test123' , } form = UserCreationForm ( data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form [ "username" ] . errors , [ force_unicode ( form . error_messages [ 'duplicate_username' ] ) ] ) def test_invalid_data ( self ) : data = { : 'jsmith!' , : 'test123' , : 'test123' , } form = UserCreationForm ( data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form [ "username" ] . errors , [ force_unicode ( form . fields [ 'username' ] . error_messages [ 'invalid' ] ) ] ) def test_password_verification ( self ) : data = { : 'jsmith' , : 'test123' , : 'test' , } form = UserCreationForm ( data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form [ "password2" ] . errors , [ force_unicode ( form . error_messages [ 'password_mismatch' ] ) ] ) def test_both_passwords ( self ) : data = { 'username' : 'jsmith' } form = UserCreationForm ( data ) required_error = [ force_unicode ( Field . default_error_messages [ 'required' ] ) ] self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form [ 'password1' ] . errors , required_error ) self . assertEqual ( form [ 'password2' ] . errors , required_error ) data [ 'password2' ] = 'test123' form = UserCreationForm ( data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form [ 'password1' ] . errors , required_error ) def test_success ( self ) : data = { : 'jsmith@example.com' , : 'test123' , : 'test123' , } form = UserCreationForm ( data ) self . assertTrue ( form . is_valid ( ) ) u = form . save ( ) self . assertEqual ( repr ( u ) , '<User: jsmith@example.com>' ) class AuthenticationFormTest ( TestCase ) : fixtures = [ 'authtestdata.json' ] def test_invalid_username ( self ) : data = { : 'jsmith_does_not_exist' , : 'test123' , } form = AuthenticationForm ( None , data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form . non_field_errors ( ) , [ force_unicode ( form . error_messages [ 'invalid_login' ] ) ] ) def test_inactive_user ( self ) : data = { : 'inactive' , : 'password' , } form = AuthenticationForm ( None , data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form . non_field_errors ( ) , [ force_unicode ( form . error_messages [ 'inactive' ] ) ] ) def test_inactive_user_i18n ( self ) : with self . settings ( USE_I18N = True ) : with translation . override ( 'pt-br' , deactivate = True ) : data = { : 'inactive' , : 'password' , } form = AuthenticationForm ( None , data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form . non_field_errors ( ) , [ force_unicode ( form . error_messages [ 'inactive' ] ) ] ) def test_success ( self ) : data = { : 'testclient' , : 'password' , } form = AuthenticationForm ( None , data ) self . assertTrue ( form . is_valid ( ) ) self . assertEqual ( form . non_field_errors ( ) , [ ] ) class SetPasswordFormTest ( TestCase ) : fixtures = [ 'authtestdata.json' ] def test_password_verification ( self ) : user = User . objects . get ( username = 'testclient' ) data = { : 'abc123' , : 'abc' , } form = SetPasswordForm ( user , data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form [ "new_password2" ] . errors , [ force_unicode ( form . error_messages [ 'password_mismatch' ] ) ] ) def test_success ( self ) : user = User . objects . get ( username = 'testclient' ) data = { : 'abc123' , : 'abc123' , } form = SetPasswordForm ( user , data ) self . assertTrue ( form . is_valid ( ) ) class PasswordChangeFormTest ( TestCase ) : fixtures = [ 'authtestdata.json' ] def test_incorrect_password ( self ) : user = User . objects . get ( username = 'testclient' ) data = { : 'test' , : 'abc123' , : 'abc123' , } form = PasswordChangeForm ( user , data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form [ "old_password" ] . errors , [ force_unicode ( form . error_messages [ 'password_incorrect' ] ) ] ) def test_password_verification ( self ) : user = User . objects . get ( username = 'testclient' ) data = { : 'password' , : 'abc123' , : 'abc' , } form = PasswordChangeForm ( user , data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form [ "new_password2" ] . errors , [ force_unicode ( form . error_messages [ 'password_mismatch' ] ) ] ) def test_success ( self ) : user = User . objects . get ( username = 'testclient' ) data = { : 'password' , : 'abc123' , : 'abc123' , } form = PasswordChangeForm ( user , data ) self . assertTrue ( form . is_valid ( ) ) def test_field_order ( self ) : user = User . objects . get ( username = 'testclient' ) self . assertEqual ( PasswordChangeForm ( user , { } ) . fields . keys ( ) , [ 'old_password' , 'new_password1' , 'new_password2' ] ) class UserChangeFormTest ( TestCase ) : fixtures = [ 'authtestdata.json' ] def test_username_validity ( self ) : user = User . objects . get ( username = 'testclient' ) data = { 'username' : 'not valid' } form = UserChangeForm ( data , instance = user ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form [ 'username' ] . errors , [ force_unicode ( form . fields [ 'username' ] . error_messages [ 'invalid' ] ) ] ) def test_bug_14242 ( self ) : class MyUserForm ( UserChangeForm ) : def __init__ ( self , * args , ** kwargs ) : super ( MyUserForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ 'groups' ] . help_text = 'These groups give users different permissions' class Meta ( UserChangeForm . Meta ) : fields = ( 'groups' , ) form = MyUserForm ( { } ) class PasswordResetFormTest ( TestCase ) : fixtures = [ 'authtestdata.json' ] def create_dummy_user ( self ) : username = 'jsmith' email = 'jsmith@example.com' user = User . objects . create_user ( username , email , 'test123' ) return ( user , username , email ) def test_invalid_email ( self ) : data = { 'email' : 'not valid' } form = PasswordResetForm ( data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form [ 'email' ] . errors , [ force_unicode ( EmailField . default_error_messages [ 'invalid' ] ) ] ) def test_nonexistant_email ( self ) : data = { 'email' : 'foo@bar.com' } form = PasswordResetForm ( data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form . errors , { 'email' : [ force_unicode ( form . error_messages [ 'unknown' ] ) ] } ) def test_cleaned_data ( self ) : ( user , username , email ) = self . create_dummy_user ( ) data = { 'email' : email } form = PasswordResetForm ( data ) self . assertTrue ( form . is_valid ( ) ) self . assertEqual ( form . cleaned_data [ 'email' ] , email ) def test_custom_email_subject ( self ) : template_path = os . path . join ( os . path . dirname ( __file__ ) , 'templates' ) with self . settings ( TEMPLATE_DIRS = ( template_path , ) ) : data = { 'email' : 'testclient@example.com' } form = PasswordResetForm ( data ) self . assertTrue ( form . is_valid ( ) ) form . save ( domain_override = 'example.com' ) self . assertEqual ( len ( mail . outbox ) , 1 ) self . assertEqual ( mail . outbox [ 0 ] . subject , u'Custom password reset on example.com' ) def test_bug_5605 ( self ) : user = User . objects . create_user ( 'forms_test2' , 'tesT@EXAMple.com' , 'test' ) self . assertEqual ( user . email , 'tesT@example.com' ) user = User . objects . create_user ( 'forms_test3' , 'tesT' , 'test' ) self . assertEqual ( user . email , 'tesT' ) def test_inactive_user ( self ) : ( user , username , email ) = self . create_dummy_user ( ) user . is_active = False user . save ( ) form = PasswordResetForm ( { 'email' : email } ) self . assertFalse ( form . is_valid ( ) ) def test_unusable_password ( self ) : user = User . objects . create_user ( 'testuser' , 'test@example.com' , 'test' ) data = { "email" : "test@example.com" } form = PasswordResetForm ( data ) self . assertTrue ( form . is_valid ( ) ) user . set_unusable_password ( ) user . save ( ) form = PasswordResetForm ( data ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form [ "email" ] . errors , [ u"The user account associated with this e-mail address cannot reset the password." ] )
