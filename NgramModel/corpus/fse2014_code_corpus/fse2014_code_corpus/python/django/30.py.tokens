from __future__ import absolute_import from operator import attrgetter from django . core . exceptions import FieldError from django . test import TestCase from . models import ( Chef , CommonInfo , ItalianRestaurant , ParkingLot , Place , Post , Restaurant , Student , StudentWorker , Supplier , Worker , MixinModel ) class ModelInheritanceTests ( TestCase ) : def test_abstract ( self ) : w1 = Worker . objects . create ( name = "Fred" , age = 35 , job = "Quarry worker" ) w2 = Worker . objects . create ( name = "Barney" , age = 34 , job = "Quarry worker" ) s = Student . objects . create ( name = "Pebbles" , age = 5 , school_class = "1B" ) self . assertEqual ( unicode ( w1 ) , "Worker Fred" ) self . assertEqual ( unicode ( s ) , "Student Pebbles" ) self . assertQuerysetEqual ( Worker . objects . values ( "name" ) , [ { "name" : "Barney" } , { "name" : "Fred" } , ] , lambda o : o ) self . assertEqual ( Student . _meta . ordering , [ ] ) self . assertRaises ( AttributeError , lambda : CommonInfo . objects . all ( ) ) self . assertRaises ( Student . DoesNotExist , StudentWorker . objects . get , pk = 12321321 ) self . assertRaises ( Worker . DoesNotExist , StudentWorker . objects . get , pk = 12321321 ) sw1 = StudentWorker ( ) sw1 . name = "Wilma" sw1 . age = 35 sw1 . save ( ) sw2 = StudentWorker ( ) sw2 . name = "Betty" sw2 . age = 24 sw2 . save ( ) self . assertRaises ( Student . MultipleObjectsReturned , StudentWorker . objects . get , pk__lt = sw2 . pk + 100 ) self . assertRaises ( Worker . MultipleObjectsReturned , StudentWorker . objects . get , pk__lt = sw2 . pk + 100 ) def test_multiple_table ( self ) : post = Post . objects . create ( title = "Lorem Ipsum" ) post . attached_comment_set . create ( content = "Save $ on V1agr@" , is_spam = True ) post . attached_link_set . create ( content = "The Web framework for perfections with deadlines." , url = "http://www.djangoproject.com/" ) self . assertRaises ( AttributeError , getattr , post , "attached_%(class)s_set" ) p1 = Place . objects . create ( name = "Master Shakes" , address = "666 W. Jersey" ) p2 = Place . objects . create ( name = "Ace Harware" , address = "1013 N. Ashland" ) r = Restaurant . objects . create ( name = "Demon Dogs" , address = "944 W. Fullerton" , serves_hot_dogs = True , serves_pizza = False , rating = 2 ) c = Chef . objects . create ( name = "Albert" ) ir = ItalianRestaurant . objects . create ( name = "Ristorante Miron" , address = "1234 W. Ash" , serves_hot_dogs = False , serves_pizza = False , serves_gnocchi = True , rating = 4 , chef = c ) self . assertQuerysetEqual ( ItalianRestaurant . objects . filter ( address = "1234 W. Ash" ) , [ , ] , attrgetter ( "name" ) ) ir . address = "1234 W. Elm" ir . save ( ) self . assertQuerysetEqual ( ItalianRestaurant . objects . filter ( address = "1234 W. Elm" ) , [ , ] , attrgetter ( "name" ) ) self . assertEqual ( [ f . name for f in Restaurant . _meta . fields ] , [ "id" , "name" , "address" , "place_ptr" , "rating" , "serves_hot_dogs" , "serves_pizza" , "chef" ] ) self . assertEqual ( [ f . name for f in ItalianRestaurant . _meta . fields ] , [ "id" , "name" , "address" , "place_ptr" , "rating" , "serves_hot_dogs" , "serves_pizza" , "chef" , "restaurant_ptr" , "serves_gnocchi" ] , ) self . assertEqual ( Restaurant . _meta . ordering , [ "-rating" ] ) self . assertQuerysetEqual ( Place . objects . filter ( supplier__name = "foo" ) , [ ] ) self . assertRaises ( FieldError , Restaurant . objects . filter , supplier__name = "foo" ) self . assertQuerysetEqual ( Restaurant . objects . filter ( name = "Demon Dogs" ) , [ , ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( ItalianRestaurant . objects . filter ( address = "1234 W. Elm" ) , [ , ] , attrgetter ( "name" ) ) p = Place . objects . get ( name = "Demon Dogs" ) self . assertIs ( type ( p ) , Place ) self . assertEqual ( p . restaurant , Restaurant . objects . get ( name = "Demon Dogs" ) ) self . assertEqual ( Place . objects . get ( name = "Ristorante Miron" ) . restaurant . italianrestaurant , ItalianRestaurant . objects . get ( name = "Ristorante Miron" ) ) self . assertEqual ( Restaurant . objects . get ( name = "Ristorante Miron" ) . italianrestaurant , ItalianRestaurant . objects . get ( name = "Ristorante Miron" ) ) self . assertRaises ( ItalianRestaurant . DoesNotExist , lambda : p . restaurant . italianrestaurant ) self . assertRaises ( Place . DoesNotExist , ItalianRestaurant . objects . get , name = "The Noodle Void" ) self . assertRaises ( Place . MultipleObjectsReturned , Restaurant . objects . get , id__lt = 12321 ) s1 = Supplier . objects . create ( name = "Joe's Chickens" , address = "123 Sesame St" ) s1 . customers = [ r , ir ] s2 = Supplier . objects . create ( name = "Luigi's Pasta" , address = "456 Sesame St" ) s2 . customers = [ ir ] p = Place . objects . get ( name = "Joe's Chickens" ) self . assertRaises ( Restaurant . DoesNotExist , lambda : p . restaurant ) self . assertEqual ( p . supplier , s1 ) self . assertQuerysetEqual ( ir . provider . order_by ( "-name" ) , [ , ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( Restaurant . objects . filter ( provider__name__contains = "Chickens" ) , [ , , ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( ItalianRestaurant . objects . filter ( provider__name__contains = "Chickens" ) , [ , ] , attrgetter ( "name" ) , ) park1 = ParkingLot . objects . create ( name = "Main St" , address = "111 Main St" , main_site = s1 ) park2 = ParkingLot . objects . create ( name = "Well Lit" , address = "124 Sesame St" , main_site = ir ) self . assertEqual ( Restaurant . objects . get ( lot__name = "Well Lit" ) . name , ) rows = Restaurant . objects . filter ( serves_hot_dogs = True , name__contains = "D" ) . update ( name = "Demon Puppies" , serves_hot_dogs = False ) self . assertEqual ( rows , 1 ) r1 = Restaurant . objects . get ( pk = r . pk ) self . assertFalse ( r1 . serves_hot_dogs ) self . assertEqual ( r1 . name , "Demon Puppies" ) self . assertQuerysetEqual ( ItalianRestaurant . objects . values ( "name" , "rating" ) , [ { "rating" : 4 , "name" : "Ristorante Miron" } ] , lambda o : o ) self . assertNumQueries ( 2 , lambda : ItalianRestaurant . objects . all ( ) [ 0 ] . chef ) self . assertNumQueries ( 1 , lambda : ItalianRestaurant . objects . select_related ( "chef" ) [ 0 ] . chef ) def test_mixin_init ( self ) : m = MixinModel ( ) self . assertEqual ( m . other_attr , 1 )
