from __future__ import absolute_import , with_statement from django import forms from django . forms . formsets import BaseFormSet , DELETION_FIELD_NAME from django . forms . util import ErrorDict , ErrorList from django . forms . models import modelform_factory , inlineformset_factory , modelformset_factory , BaseModelFormSet from django . test import TestCase from . models import User , UserSite , Restaurant , Manager , Network , Host class InlineFormsetTests ( TestCase ) : def test_formset_over_to_field ( self ) : Form = modelform_factory ( User ) FormSet = inlineformset_factory ( User , UserSite ) form = Form ( ) form_set = FormSet ( instance = User ( ) ) data = { : u'1' , : u'apollo13' , : u'1' , : u'0' , : u'0' , : u'10' , : u'apollo13' } user = User ( ) form = Form ( data ) if form . is_valid ( ) : user = form . save ( ) else : self . fail ( 'Errors found on form:%s' % form_set ) form_set = FormSet ( data , instance = user ) if form_set . is_valid ( ) : form_set . save ( ) usersite = UserSite . objects . all ( ) . values ( ) self . assertEqual ( usersite [ 0 ] [ 'data' ] , 10 ) self . assertEqual ( usersite [ 0 ] [ 'user_id' ] , u'apollo13' ) else : self . fail ( 'Errors found on formset:%s' % form_set . errors ) data = { : u'1' , : u'1' , : u'0' , : unicode ( usersite [ 0 ] [ 'id' ] ) , : u'11' , : u'apollo13' } form_set = FormSet ( data , instance = user ) if form_set . is_valid ( ) : form_set . save ( ) usersite = UserSite . objects . all ( ) . values ( ) self . assertEqual ( usersite [ 0 ] [ 'data' ] , 11 ) self . assertEqual ( usersite [ 0 ] [ 'user_id' ] , u'apollo13' ) else : self . fail ( 'Errors found on formset:%s' % form_set . errors ) data = { : u'2' , : u'1' , : u'0' , : unicode ( usersite [ 0 ] [ 'id' ] ) , : u'11' , : u'apollo13' , : u'42' , : u'apollo13' } form_set = FormSet ( data , instance = user ) if form_set . is_valid ( ) : form_set . save ( ) usersite = UserSite . objects . all ( ) . values ( ) . order_by ( 'data' ) self . assertEqual ( usersite [ 0 ] [ 'data' ] , 11 ) self . assertEqual ( usersite [ 0 ] [ 'user_id' ] , u'apollo13' ) self . assertEqual ( usersite [ 1 ] [ 'data' ] , 42 ) self . assertEqual ( usersite [ 1 ] [ 'user_id' ] , u'apollo13' ) else : self . fail ( 'Errors found on formset:%s' % form_set . errors ) def test_formset_over_inherited_model ( self ) : Form = modelform_factory ( Restaurant ) FormSet = inlineformset_factory ( Restaurant , Manager ) form = Form ( ) form_set = FormSet ( instance = Restaurant ( ) ) data = { : u"Guido's House of Pasta" , : u'1' , : u'0' , : u'0' , : u'Guido Van Rossum' } restaurant = User ( ) form = Form ( data ) if form . is_valid ( ) : restaurant = form . save ( ) else : self . fail ( 'Errors found on form:%s' % form_set ) form_set = FormSet ( data , instance = restaurant ) if form_set . is_valid ( ) : form_set . save ( ) manager = Manager . objects . all ( ) . values ( ) self . assertEqual ( manager [ 0 ] [ 'name' ] , 'Guido Van Rossum' ) else : self . fail ( 'Errors found on formset:%s' % form_set . errors ) data = { : u'1' , : u'1' , : u'0' , : unicode ( manager [ 0 ] [ 'id' ] ) , : u'Terry Gilliam' } form_set = FormSet ( data , instance = restaurant ) if form_set . is_valid ( ) : form_set . save ( ) manager = Manager . objects . all ( ) . values ( ) self . assertEqual ( manager [ 0 ] [ 'name' ] , 'Terry Gilliam' ) else : self . fail ( 'Errors found on formset:%s' % form_set . errors ) data = { : u'2' , : u'1' , : u'0' , : unicode ( manager [ 0 ] [ 'id' ] ) , : u'Terry Gilliam' , : u'John Cleese' } form_set = FormSet ( data , instance = restaurant ) if form_set . is_valid ( ) : form_set . save ( ) manager = Manager . objects . all ( ) . values ( ) . order_by ( 'name' ) self . assertEqual ( manager [ 0 ] [ 'name' ] , 'John Cleese' ) self . assertEqual ( manager [ 1 ] [ 'name' ] , 'Terry Gilliam' ) else : self . fail ( 'Errors found on formset:%s' % form_set . errors ) def test_formset_with_none_instance ( self ) : Form = modelform_factory ( User ) FormSet = inlineformset_factory ( User , UserSite ) form = Form ( instance = None ) formset = FormSet ( instance = None ) def test_empty_fields_on_modelformset ( self ) : UserFormSet = modelformset_factory ( User , fields = ( ) ) formset = UserFormSet ( ) for form in formset . forms : self . assertTrue ( 'id' in form . fields ) self . assertEqual ( len ( form . fields ) , 1 ) def test_save_as_new_with_new_inlines ( self ) : efnet = Network . objects . create ( name = "EFNet" ) host1 = Host . objects . create ( hostname = "irc.he.net" , network = efnet ) HostFormSet = inlineformset_factory ( Network , Host ) data = { : u'2' , : u'1' , : u'0' , : unicode ( host1 . id ) , : u'tranquility.hub.dal.net' , : u'matrix.de.eu.dal.net' } dalnet = Network . objects . create ( name = "DALnet" ) formset = HostFormSet ( data , instance = dalnet , save_as_new = True ) self . assertTrue ( formset . is_valid ( ) ) formset . save ( ) self . assertQuerysetEqual ( dalnet . host_set . order_by ( "hostname" ) , [ "<Host: matrix.de.eu.dal.net>" , "<Host: tranquility.hub.dal.net>" ] ) def test_initial_data ( self ) : user = User . objects . create ( username = "bibi" , serial = 1 ) UserSite . objects . create ( user = user , data = 7 ) FormSet = inlineformset_factory ( User , UserSite , extra = 2 ) formset = FormSet ( instance = user , initial = [ { 'data' : 41 } , { 'data' : 42 } ] ) self . assertEqual ( formset . forms [ 0 ] . initial [ 'data' ] , 7 ) self . assertEqual ( formset . extra_forms [ 0 ] . initial [ 'data' ] , 41 ) self . assertTrue ( u'value="42"' in formset . extra_forms [ 1 ] . as_p ( ) ) class FormsetTests ( TestCase ) : def test_error_class ( self ) : Formset = modelformset_factory ( User ) data = { : u'2' , : u'0' , : u'0' , : '' , : u'apollo13' , : u'1' , : '' , : u'apollo13' , : u'2' , } formset = Formset ( data ) self . assertTrue ( isinstance ( formset . errors , list ) ) self . assertTrue ( isinstance ( formset . non_form_errors ( ) , ErrorList ) ) for form in formset . forms : self . assertTrue ( isinstance ( form . errors , ErrorDict ) ) self . assertTrue ( isinstance ( form . non_field_errors ( ) , ErrorList ) ) def test_initial_data ( self ) : User . objects . create ( username = "bibi" , serial = 1 ) Formset = modelformset_factory ( User , extra = 2 ) formset = Formset ( initial = [ { 'username' : u'apollo11' } , { 'username' : u'apollo12' } ] ) self . assertEqual ( formset . forms [ 0 ] . initial [ 'username' ] , "bibi" ) self . assertEqual ( formset . extra_forms [ 0 ] . initial [ 'username' ] , "apollo11" ) self . assertTrue ( u'value="apollo12"' in formset . extra_forms [ 1 ] . as_p ( ) ) def test_extraneous_query_is_not_run ( self ) : Formset = modelformset_factory ( Network ) data = { u'test-TOTAL_FORMS' : u'1' , : u'0' , : u'' , : u'Random Place' , } with self . assertNumQueries ( 1 ) : formset = Formset ( data , prefix = "test" ) formset . save ( ) class CustomWidget ( forms . CharField ) : pass class UserSiteForm ( forms . ModelForm ) : class Meta : model = UserSite widgets = { 'data' : CustomWidget } class Callback ( object ) : def __init__ ( self ) : self . log = [ ] def __call__ ( self , db_field , ** kwargs ) : self . log . append ( ( db_field , kwargs ) ) return db_field . formfield ( ** kwargs ) class FormfieldCallbackTests ( TestCase ) : def test_inlineformset_factory_default ( self ) : Formset = inlineformset_factory ( User , UserSite , form = UserSiteForm ) form = Formset ( ) . forms [ 0 ] self . assertTrue ( isinstance ( form [ 'data' ] . field . widget , CustomWidget ) ) def test_modelformset_factory_default ( self ) : Formset = modelformset_factory ( UserSite , form = UserSiteForm ) form = Formset ( ) . forms [ 0 ] self . assertTrue ( isinstance ( form [ 'data' ] . field . widget , CustomWidget ) ) def assertCallbackCalled ( self , callback ) : id_field , user_field , data_field = UserSite . _meta . fields expected_log = [ ( id_field , { } ) , ( user_field , { } ) , ( data_field , { 'widget' : CustomWidget } ) , ] self . assertEqual ( callback . log , expected_log ) def test_inlineformset_custom_callback ( self ) : callback = Callback ( ) inlineformset_factory ( User , UserSite , form = UserSiteForm , formfield_callback = callback ) self . assertCallbackCalled ( callback ) def test_modelformset_custom_callback ( self ) : callback = Callback ( ) modelformset_factory ( UserSite , form = UserSiteForm , formfield_callback = callback ) self . assertCallbackCalled ( callback ) class BaseCustomDeleteFormSet ( BaseFormSet ) : def add_fields ( self , form , index ) : super ( BaseCustomDeleteFormSet , self ) . add_fields ( form , index ) self . can_delete = True if DELETION_FIELD_NAME in form . fields : del form . fields [ DELETION_FIELD_NAME ] def _should_delete_form ( self , form ) : return hasattr ( form , 'should_delete' ) and form . should_delete ( ) class FormfieldShouldDeleteFormTests ( TestCase ) : class BaseCustomDeleteModelFormSet ( BaseModelFormSet , BaseCustomDeleteFormSet ) : class CustomDeleteUserForm ( forms . ModelForm ) : class Meta : model = User def should_delete ( self ) : return self . instance . id % 2 != 0 NormalFormset = modelformset_factory ( User , form = CustomDeleteUserForm , can_delete = True ) DeleteFormset = modelformset_factory ( User , form = CustomDeleteUserForm , formset = BaseCustomDeleteModelFormSet ) data = { : '4' , : '0' , : '4' , : 'John' , : '1' , : 'Paul' , : '2' , : 'George' , : '3' , : 'Ringo' , : '5' , } delete_all_ids = { : '1' , : '1' , : '1' , : '1' , } def test_init_database ( self ) : formset = self . NormalFormset ( self . data ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( len ( formset . save ( ) ) , 4 ) def test_no_delete ( self ) : self . test_init_database ( ) data = dict ( self . data ) data [ 'form-INITIAL_FORMS' ] = 4 data . update ( dict ( ( 'form-%d-id' % i , user . id ) for i , user in enumerate ( User . objects . all ( ) ) ) ) formset = self . NormalFormset ( data , queryset = User . objects . all ( ) ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( len ( formset . save ( ) ) , 0 ) self . assertEqual ( len ( User . objects . all ( ) ) , 4 ) def test_all_delete ( self ) : self . test_init_database ( ) data = dict ( self . data ) data [ 'form-INITIAL_FORMS' ] = 4 data . update ( dict ( ( 'form-%d-id' % i , user . id ) for i , user in enumerate ( User . objects . all ( ) ) ) ) data . update ( self . delete_all_ids ) formset = self . NormalFormset ( data , queryset = User . objects . all ( ) ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( len ( formset . save ( ) ) , 0 ) self . assertEqual ( len ( User . objects . all ( ) ) , 0 ) def test_custom_delete ( self ) : self . test_init_database ( ) data = dict ( self . data ) data [ 'form-INITIAL_FORMS' ] = 4 data . update ( dict ( ( 'form-%d-id' % i , user . id ) for i , user in enumerate ( User . objects . all ( ) ) ) ) data . update ( self . delete_all_ids ) formset = self . DeleteFormset ( data , queryset = User . objects . all ( ) ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( len ( formset . save ( ) ) , 0 ) self . assertEqual ( len ( User . objects . all ( ) ) , 2 ) odd_ids = [ user . id for user in User . objects . all ( ) if user . id % 2 ] self . assertEqual ( len ( odd_ids ) , 0 )
