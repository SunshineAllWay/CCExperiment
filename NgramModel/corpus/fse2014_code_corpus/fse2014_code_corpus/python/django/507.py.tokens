from __future__ import absolute_import from django . test import TestCase from . models import Place , Restaurant , Bar , Favorites , Target , UndergroundBar class OneToOneRegressionTests ( TestCase ) : def setUp ( self ) : self . p1 = Place ( name = 'Demon Dogs' , address = '944 W. Fullerton' ) self . p1 . save ( ) self . r1 = Restaurant ( place = self . p1 , serves_hot_dogs = True , serves_pizza = False ) self . r1 . save ( ) self . b1 = Bar ( place = self . p1 , serves_cocktails = False ) self . b1 . save ( ) def test_reverse_relationship_cache_cascade ( self ) : bar = UndergroundBar . objects . create ( place = self . p1 , serves_cocktails = False ) self . p1 . undergroundbar bar . place . name = 'foo' bar . place = None bar . save ( ) self . p1 . delete ( ) self . assertEqual ( Place . objects . all ( ) . count ( ) , 0 ) self . assertEqual ( UndergroundBar . objects . all ( ) . count ( ) , 1 ) def test_create_models_m2m ( self ) : f = Favorites ( name = 'Fred' ) f . save ( ) f . restaurants = [ self . r1 ] self . assertQuerysetEqual ( f . restaurants . all ( ) , [ '<Restaurant: Demon Dogs the restaurant>' ] ) def test_reverse_object_cache ( self ) : self . assertEqual ( self . p1 . restaurant , self . r1 ) self . assertEqual ( self . p1 . bar , self . b1 ) def test_related_object_cache ( self ) : p = Place . objects . get ( name = "Demon Dogs" ) r = p . restaurant self . assertTrue ( p . restaurant is r ) del p . _restaurant_cache self . assertFalse ( p . restaurant is r ) r2 = Restaurant . objects . get ( pk = r . pk ) p . restaurant = r2 self . assertTrue ( p . restaurant is r2 ) ug_bar = UndergroundBar . objects . create ( place = p , serves_cocktails = False ) ug_bar . place = None self . assertTrue ( ug_bar . place is None ) self . assertRaises ( ValueError , setattr , p , 'restaurant' , None ) self . assertRaises ( ValueError , setattr , p , 'restaurant' , p ) p = Place . objects . get ( name = "Demon Dogs" ) r = Restaurant ( place = p ) self . assertTrue ( r . place is p ) p = Place ( ) r = Restaurant ( place = p ) self . assertTrue ( r . place is p ) p = Place . objects . get ( name = "Demon Dogs" ) r = Restaurant ( place_id = p . id ) self . assertFalse ( r . place is p ) self . assertEqual ( r . place , p ) def test_filter_one_to_one_relations ( self ) : t = Target . objects . create ( ) self . assertQuerysetEqual ( Target . objects . filter ( pointer = None ) , [ '<Target: Target object>' ] ) self . assertQuerysetEqual ( Target . objects . exclude ( pointer = None ) , [ ] ) self . assertQuerysetEqual ( Target . objects . filter ( pointer2 = None ) , [ '<Target: Target object>' ] ) self . assertQuerysetEqual ( Target . objects . exclude ( pointer2 = None ) , [ ] )
