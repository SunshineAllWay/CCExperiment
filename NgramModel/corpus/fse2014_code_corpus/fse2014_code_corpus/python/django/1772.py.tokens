from ctypes . util import find_library from django . conf import settings from django . core . exceptions import ImproperlyConfigured from django . db . backends . sqlite3 . base import ( _sqlite_extract , _sqlite_date_trunc , _sqlite_regexp , _sqlite_format_dtdelta , connection_created , Database , DatabaseWrapper as SQLiteDatabaseWrapper , SQLiteCursorWrapper ) from django . contrib . gis . db . backends . spatialite . client import SpatiaLiteClient from django . contrib . gis . db . backends . spatialite . creation import SpatiaLiteCreation from django . contrib . gis . db . backends . spatialite . introspection import SpatiaLiteIntrospection from django . contrib . gis . db . backends . spatialite . operations import SpatiaLiteOperations class DatabaseWrapper ( SQLiteDatabaseWrapper ) : def __init__ ( self , * args , ** kwargs ) : if Database . version_info < ( 2 , 5 , 0 ) : raise ImproperlyConfigured ( 'Only versions of pysqlite 2.5+ are ' ) self . spatialite_lib = getattr ( settings , 'SPATIALITE_LIBRARY_PATH' , find_library ( 'spatialite' ) ) if not self . spatialite_lib : raise ImproperlyConfigured ( 'Unable to locate the SpatiaLite library. ' ) super ( DatabaseWrapper , self ) . __init__ ( * args , ** kwargs ) self . ops = SpatiaLiteOperations ( self ) self . client = SpatiaLiteClient ( self ) self . creation = SpatiaLiteCreation ( self ) self . introspection = SpatiaLiteIntrospection ( self ) def _cursor ( self ) : if self . connection is None : self . _sqlite_create_connection ( ) try : self . connection . enable_load_extension ( True ) except AttributeError : raise ImproperlyConfigured ( 'The pysqlite library does not support C extension loading. ' ) cur = self . connection . cursor ( factory = SQLiteCursorWrapper ) try : cur . execute ( "SELECT load_extension(%s)" , ( self . spatialite_lib , ) ) except Exception , msg : raise ImproperlyConfigured ( 'Unable to load the SpatiaLite library extension ' % ( self . spatialite_lib , msg ) ) return cur else : return self . connection . cursor ( factory = SQLiteCursorWrapper )
