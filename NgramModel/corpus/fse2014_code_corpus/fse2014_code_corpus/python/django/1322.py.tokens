""" Swedish specific Form helpers """ from __future__ import absolute_import import re from django import forms from django . utils . translation import ugettext_lazy as _ from django . core . validators import EMPTY_VALUES from django . contrib . localflavor . se . se_counties import COUNTY_CHOICES from django . contrib . localflavor . se . utils import ( id_number_checksum , validate_id_birthday , format_personal_id_number , valid_organisation , format_organisation_number ) __all__ = ( 'SECountySelect' , 'SEOrganisationNumberField' , , 'SEPostalCodeField' ) SWEDISH_ID_NUMBER = re . compile ( r'^(?P<century>\d{2})?(?P<year>\d{2})(?P<month>\d{2})(?P<day>\d{2})(?P<sign>[\-+])?(?P<serial>\d{3})(?P<checksum>\d)$' ) SE_POSTAL_CODE = re . compile ( r'^[1-9]\d{2} ?\d{2}$' ) class SECountySelect ( forms . Select ) : def __init__ ( self , attrs = None ) : super ( SECountySelect , self ) . __init__ ( attrs = attrs , choices = COUNTY_CHOICES ) class SEOrganisationNumberField ( forms . CharField ) : default_error_messages = { : _ ( 'Enter a valid Swedish organisation number.' ) , } def clean ( self , value ) : value = super ( SEOrganisationNumberField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' match = SWEDISH_ID_NUMBER . match ( value ) if not match : raise forms . ValidationError ( self . error_messages [ 'invalid' ] ) gd = match . groupdict ( ) if id_number_checksum ( gd ) != int ( gd [ 'checksum' ] ) : raise forms . ValidationError ( self . error_messages [ 'invalid' ] ) if valid_organisation ( gd ) : return format_organisation_number ( gd ) try : birth_day = validate_id_birthday ( gd , False ) return format_personal_id_number ( birth_day , gd ) except ValueError : raise forms . ValidationError ( self . error_messages [ 'invalid' ] ) class SEPersonalIdentityNumberField ( forms . CharField ) : def __init__ ( self , coordination_number = True , * args , ** kwargs ) : self . coordination_number = coordination_number super ( SEPersonalIdentityNumberField , self ) . __init__ ( * args , ** kwargs ) default_error_messages = { : _ ( 'Enter a valid Swedish personal identity number.' ) , : _ ( 'Co-ordination numbers are not allowed.' ) , } def clean ( self , value ) : value = super ( SEPersonalIdentityNumberField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' match = SWEDISH_ID_NUMBER . match ( value ) if match is None : raise forms . ValidationError ( self . error_messages [ 'invalid' ] ) gd = match . groupdict ( ) if id_number_checksum ( gd ) != int ( gd [ 'checksum' ] ) : raise forms . ValidationError ( self . error_messages [ 'invalid' ] ) try : birth_day = validate_id_birthday ( gd ) except ValueError : raise forms . ValidationError ( self . error_messages [ 'invalid' ] ) if not self . coordination_number and int ( gd [ 'day' ] ) > 60 : raise forms . ValidationError ( self . error_messages [ 'coordination_number' ] ) return format_personal_id_number ( birth_day , gd ) class SEPostalCodeField ( forms . RegexField ) : default_error_messages = { : _ ( 'Enter a Swedish postal code in the format XXXXX.' ) , } def __init__ ( self , * args , ** kwargs ) : super ( SEPostalCodeField , self ) . __init__ ( SE_POSTAL_CODE , * args , ** kwargs ) def clean ( self , value ) : return super ( SEPostalCodeField , self ) . clean ( value ) . replace ( ' ' , '' )
