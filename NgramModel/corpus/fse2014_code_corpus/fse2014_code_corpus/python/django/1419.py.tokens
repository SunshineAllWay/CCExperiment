from django . db import models from django . utils . translation import ugettext_lazy as _ SITE_CACHE = { } class SiteManager ( models . Manager ) : def get_current ( self ) : from django . conf import settings try : sid = settings . SITE_ID except AttributeError : from django . core . exceptions import ImproperlyConfigured raise ImproperlyConfigured ( "You're using the Django \"sites framework\" without having set the SITE_ID setting. Create a site in your database and set the SITE_ID setting to fix this error." ) try : current_site = SITE_CACHE [ sid ] except KeyError : current_site = self . get ( pk = sid ) SITE_CACHE [ sid ] = current_site return current_site def clear_cache ( self ) : global SITE_CACHE SITE_CACHE = { } class Site ( models . Model ) : domain = models . CharField ( _ ( 'domain name' ) , max_length = 100 ) name = models . CharField ( _ ( 'display name' ) , max_length = 50 ) objects = SiteManager ( ) class Meta : db_table = 'django_site' verbose_name = _ ( 'site' ) verbose_name_plural = _ ( 'sites' ) ordering = ( 'domain' , ) def __unicode__ ( self ) : return self . domain def save ( self , * args , ** kwargs ) : super ( Site , self ) . save ( * args , ** kwargs ) if self . id in SITE_CACHE : del SITE_CACHE [ self . id ] def delete ( self ) : pk = self . pk super ( Site , self ) . delete ( ) try : del SITE_CACHE [ pk ] except KeyError : pass class RequestSite ( object ) : def __init__ ( self , request ) : self . domain = self . name = request . get_host ( ) def __unicode__ ( self ) : return self . domain def save ( self , force_insert = False , force_update = False ) : raise NotImplementedError ( 'RequestSite cannot be saved.' ) def delete ( self ) : raise NotImplementedError ( 'RequestSite cannot be deleted.' ) def get_current_site ( request ) : if Site . _meta . installed : current_site = Site . objects . get_current ( ) else : current_site = RequestSite ( request ) return current_site
