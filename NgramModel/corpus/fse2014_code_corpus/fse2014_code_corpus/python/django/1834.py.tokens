""" Classes to represent the default SQL aggregate functions """ class AggregateField ( object ) : def __init__ ( self , internal_type ) : self . internal_type = internal_type def get_internal_type ( self ) : return self . internal_type ordinal_aggregate_field = AggregateField ( 'IntegerField' ) computed_aggregate_field = AggregateField ( 'FloatField' ) class Aggregate ( object ) : is_ordinal = False is_computed = False sql_template = '%(function)s(%(field)s)' def __init__ ( self , col , source = None , is_summary = False , ** extra ) : self . col = col self . source = source self . is_summary = is_summary self . extra = extra tmp = self while tmp and isinstance ( tmp , Aggregate ) : if getattr ( tmp , 'is_ordinal' , False ) : tmp = ordinal_aggregate_field elif getattr ( tmp , 'is_computed' , False ) : tmp = computed_aggregate_field else : tmp = tmp . source self . field = tmp def relabel_aliases ( self , change_map ) : if isinstance ( self . col , ( list , tuple ) ) : self . col = ( change_map . get ( self . col [ 0 ] , self . col [ 0 ] ) , self . col [ 1 ] ) def as_sql ( self , qn , connection ) : if hasattr ( self . col , 'as_sql' ) : field_name = self . col . as_sql ( qn , connection ) elif isinstance ( self . col , ( list , tuple ) ) : field_name = '.' . join ( [ qn ( c ) for c in self . col ] ) else : field_name = self . col params = { : self . sql_function , : field_name } params . update ( self . extra ) return self . sql_template % params class Avg ( Aggregate ) : is_computed = True sql_function = 'AVG' class Count ( Aggregate ) : is_ordinal = True sql_function = 'COUNT' sql_template = '%(function)s(%(distinct)s%(field)s)' def __init__ ( self , col , distinct = False , ** extra ) : super ( Count , self ) . __init__ ( col , distinct = distinct and 'DISTINCT ' or '' , ** extra ) class Max ( Aggregate ) : sql_function = 'MAX' class Min ( Aggregate ) : sql_function = 'MIN' class StdDev ( Aggregate ) : is_computed = True def __init__ ( self , col , sample = False , ** extra ) : super ( StdDev , self ) . __init__ ( col , ** extra ) self . sql_function = sample and 'STDDEV_SAMP' or 'STDDEV_POP' class Sum ( Aggregate ) : sql_function = 'SUM' class Variance ( Aggregate ) : is_computed = True def __init__ ( self , col , sample = False , ** extra ) : super ( Variance , self ) . __init__ ( col , ** extra ) self . sql_function = sample and 'VAR_SAMP' or 'VAR_POP'
