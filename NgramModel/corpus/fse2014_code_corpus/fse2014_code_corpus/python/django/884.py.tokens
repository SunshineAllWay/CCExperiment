from __future__ import absolute_import from django . core . exceptions import ValidationError from django . forms import Form from django . forms . fields import IntegerField , BooleanField from django . forms . util import ErrorList from django . forms . widgets import Media , HiddenInput from django . utils . encoding import StrAndUnicode from django . utils . safestring import mark_safe from django . utils . translation import ugettext as _ __all__ = ( 'BaseFormSet' , 'all_valid' ) TOTAL_FORM_COUNT = 'TOTAL_FORMS' INITIAL_FORM_COUNT = 'INITIAL_FORMS' MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS' ORDERING_FIELD_NAME = 'ORDER' DELETION_FIELD_NAME = 'DELETE' class ManagementForm ( Form ) : def __init__ ( self , * args , ** kwargs ) : self . base_fields [ TOTAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput ) self . base_fields [ INITIAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput ) self . base_fields [ MAX_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput ) super ( ManagementForm , self ) . __init__ ( * args , ** kwargs ) class BaseFormSet ( StrAndUnicode ) : def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None , initial = None , error_class = ErrorList ) : self . is_bound = data is not None or files is not None self . prefix = prefix or self . get_default_prefix ( ) self . auto_id = auto_id self . data = data or { } self . files = files or { } self . initial = initial self . error_class = error_class self . _errors = None self . _non_form_errors = None self . _construct_forms ( ) def __unicode__ ( self ) : return self . as_table ( ) def __iter__ ( self ) : return iter ( self . forms ) def __getitem__ ( self , index ) : return self . forms [ index ] def __len__ ( self ) : return len ( self . forms ) def __nonzero__ ( self ) : return True def _management_form ( self ) : if self . is_bound : form = ManagementForm ( self . data , auto_id = self . auto_id , prefix = self . prefix ) if not form . is_valid ( ) : raise ValidationError ( 'ManagementForm data is missing or has been tampered with' ) else : form = ManagementForm ( auto_id = self . auto_id , prefix = self . prefix , initial = { TOTAL_FORM_COUNT : self . total_form_count ( ) , INITIAL_FORM_COUNT : self . initial_form_count ( ) , MAX_NUM_FORM_COUNT : self . max_num } ) return form management_form = property ( _management_form ) def total_form_count ( self ) : if self . is_bound : return self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] else : initial_forms = self . initial_form_count ( ) total_forms = initial_forms + self . extra if initial_forms > self . max_num >= 0 : total_forms = initial_forms elif total_forms > self . max_num >= 0 : total_forms = self . max_num return total_forms def initial_form_count ( self ) : if self . is_bound : return self . management_form . cleaned_data [ INITIAL_FORM_COUNT ] else : initial_forms = self . initial and len ( self . initial ) or 0 if initial_forms > self . max_num >= 0 : initial_forms = self . max_num return initial_forms def _construct_forms ( self ) : self . forms = [ ] for i in xrange ( self . total_form_count ( ) ) : self . forms . append ( self . _construct_form ( i ) ) def _construct_form ( self , i , ** kwargs ) : defaults = { 'auto_id' : self . auto_id , 'prefix' : self . add_prefix ( i ) } if self . is_bound : defaults [ 'data' ] = self . data defaults [ 'files' ] = self . files if self . initial and not 'initial' in kwargs : try : defaults [ 'initial' ] = self . initial [ i ] except IndexError : pass if i >= self . initial_form_count ( ) : defaults [ 'empty_permitted' ] = True defaults . update ( kwargs ) form = self . form ( ** defaults ) self . add_fields ( form , i ) return form def _get_initial_forms ( self ) : return self . forms [ : self . initial_form_count ( ) ] initial_forms = property ( _get_initial_forms ) def _get_extra_forms ( self ) : return self . forms [ self . initial_form_count ( ) : ] extra_forms = property ( _get_extra_forms ) def _get_empty_form ( self , ** kwargs ) : defaults = { : self . auto_id , : self . add_prefix ( '__prefix__' ) , : True , } defaults . update ( kwargs ) form = self . form ( ** defaults ) self . add_fields ( form , None ) return form empty_form = property ( _get_empty_form ) def _get_cleaned_data ( self ) : if not self . is_valid ( ) : raise AttributeError ( "'%s' object has no attribute 'cleaned_data'" % self . __class__ . __name__ ) return [ form . cleaned_data for form in self . forms ] cleaned_data = property ( _get_cleaned_data ) def _get_deleted_forms ( self ) : if not self . is_valid ( ) or not self . can_delete : raise AttributeError ( "'%s' object has no attribute 'deleted_forms'" % self . __class__ . __name__ ) if not hasattr ( self , '_deleted_form_indexes' ) : self . _deleted_form_indexes = [ ] for i in range ( 0 , self . total_form_count ( ) ) : form = self . forms [ i ] if i >= self . initial_form_count ( ) and not form . has_changed ( ) : continue if self . _should_delete_form ( form ) : self . _deleted_form_indexes . append ( i ) return [ self . forms [ i ] for i in self . _deleted_form_indexes ] deleted_forms = property ( _get_deleted_forms ) def _get_ordered_forms ( self ) : if not self . is_valid ( ) or not self . can_order : raise AttributeError ( "'%s' object has no attribute 'ordered_forms'" % self . __class__ . __name__ ) if not hasattr ( self , '_ordering' ) : self . _ordering = [ ] for i in range ( 0 , self . total_form_count ( ) ) : form = self . forms [ i ] if i >= self . initial_form_count ( ) and not form . has_changed ( ) : continue if self . can_delete and self . _should_delete_form ( form ) : continue self . _ordering . append ( ( i , form . cleaned_data [ ORDERING_FIELD_NAME ] ) ) def compare_ordering_key ( k ) : if k [ 1 ] is None : return ( 1 , 0 ) return ( 0 , k [ 1 ] ) self . _ordering . sort ( key = compare_ordering_key ) return [ self . forms [ i [ 0 ] ] for i in self . _ordering ] ordered_forms = property ( _get_ordered_forms ) @ classmethod def get_default_prefix ( cls ) : return 'form' def non_form_errors ( self ) : if self . _non_form_errors is not None : return self . _non_form_errors return self . error_class ( ) def _get_errors ( self ) : if self . _errors is None : self . full_clean ( ) return self . _errors errors = property ( _get_errors ) def _should_delete_form ( self , form ) : field = form . fields [ DELETION_FIELD_NAME ] raw_value = form . _raw_value ( DELETION_FIELD_NAME ) should_delete = field . clean ( raw_value ) return should_delete def is_valid ( self ) : if not self . is_bound : return False forms_valid = True err = self . errors for i in range ( 0 , self . total_form_count ( ) ) : form = self . forms [ i ] if self . can_delete : if self . _should_delete_form ( form ) : continue if bool ( self . errors [ i ] ) : forms_valid = False return forms_valid and not bool ( self . non_form_errors ( ) ) def full_clean ( self ) : self . _errors = [ ] if not self . is_bound : return for i in range ( 0 , self . total_form_count ( ) ) : form = self . forms [ i ] self . _errors . append ( form . errors ) try : self . clean ( ) except ValidationError , e : self . _non_form_errors = self . error_class ( e . messages ) def clean ( self ) : pass def has_changed ( self ) : return any ( form . has_changed ( ) for form in self ) def add_fields ( self , form , index ) : if self . can_order : if index is not None and index < self . initial_form_count ( ) : form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( u'Order' ) , initial = index + 1 , required = False ) else : form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( u'Order' ) , required = False ) if self . can_delete : form . fields [ DELETION_FIELD_NAME ] = BooleanField ( label = _ ( u'Delete' ) , required = False ) def add_prefix ( self , index ) : return '%s-%s' % ( self . prefix , index ) def is_multipart ( self ) : return self . forms and self . forms [ 0 ] . is_multipart ( ) def _get_media ( self ) : if self . forms : return self . forms [ 0 ] . media else : return Media ( ) media = property ( _get_media ) def as_table ( self ) : forms = u' ' . join ( [ form . as_table ( ) for form in self ] ) return mark_safe ( u'\n' . join ( [ unicode ( self . management_form ) , forms ] ) ) def as_p ( self ) : forms = u' ' . join ( [ form . as_p ( ) for form in self ] ) return mark_safe ( u'\n' . join ( [ unicode ( self . management_form ) , forms ] ) ) def as_ul ( self ) : forms = u' ' . join ( [ form . as_ul ( ) for form in self ] ) return mark_safe ( u'\n' . join ( [ unicode ( self . management_form ) , forms ] ) ) def formset_factory ( form , formset = BaseFormSet , extra = 1 , can_order = False , can_delete = False , max_num = None ) : attrs = { 'form' : form , 'extra' : extra , : can_order , 'can_delete' : can_delete , : max_num } return type ( form . __name__ + 'FormSet' , ( formset , ) , attrs ) def all_valid ( formsets ) : valid = True for formset in formsets : if not formset . is_valid ( ) : valid = False return valid
