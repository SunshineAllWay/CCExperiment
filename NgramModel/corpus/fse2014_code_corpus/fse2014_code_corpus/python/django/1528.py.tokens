import os from django . conf import settings from django . core . exceptions import ImproperlyConfigured from django . core . files . storage import default_storage , Storage , FileSystemStorage from django . utils . datastructures import SortedDict from django . utils . functional import empty , memoize , LazyObject from django . utils . importlib import import_module from django . utils . _os import safe_join from django . contrib . staticfiles import utils from django . contrib . staticfiles . storage import AppStaticStorage _finders = SortedDict ( ) class BaseFinder ( object ) : def find ( self , path , all = False ) : raise NotImplementedError ( ) def list ( self , ignore_patterns ) : raise NotImplementedError ( ) class FileSystemFinder ( BaseFinder ) : def __init__ ( self , apps = None , * args , ** kwargs ) : self . locations = [ ] self . storages = SortedDict ( ) if not isinstance ( settings . STATICFILES_DIRS , ( list , tuple ) ) : raise ImproperlyConfigured ( ) for root in settings . STATICFILES_DIRS : if isinstance ( root , ( list , tuple ) ) : prefix , root = root else : prefix = '' if os . path . abspath ( settings . STATIC_ROOT ) == os . path . abspath ( root ) : raise ImproperlyConfigured ( ) if ( prefix , root ) not in self . locations : self . locations . append ( ( prefix , root ) ) for prefix , root in self . locations : filesystem_storage = FileSystemStorage ( location = root ) filesystem_storage . prefix = prefix self . storages [ root ] = filesystem_storage super ( FileSystemFinder , self ) . __init__ ( * args , ** kwargs ) def find ( self , path , all = False ) : matches = [ ] for prefix , root in self . locations : matched_path = self . find_location ( root , path , prefix ) if matched_path : if not all : return matched_path matches . append ( matched_path ) return matches def find_location ( self , root , path , prefix = None ) : if prefix : prefix = '%s%s' % ( prefix , os . sep ) if not path . startswith ( prefix ) : return None path = path [ len ( prefix ) : ] path = safe_join ( root , path ) if os . path . exists ( path ) : return path def list ( self , ignore_patterns ) : for prefix , root in self . locations : storage = self . storages [ root ] for path in utils . get_files ( storage , ignore_patterns ) : yield path , storage class AppDirectoriesFinder ( BaseFinder ) : storage_class = AppStaticStorage def __init__ ( self , apps = None , * args , ** kwargs ) : self . apps = [ ] self . storages = SortedDict ( ) if apps is None : apps = settings . INSTALLED_APPS for app in apps : app_storage = self . storage_class ( app ) if os . path . isdir ( app_storage . location ) : self . storages [ app ] = app_storage if app not in self . apps : self . apps . append ( app ) super ( AppDirectoriesFinder , self ) . __init__ ( * args , ** kwargs ) def list ( self , ignore_patterns ) : for storage in self . storages . itervalues ( ) : if storage . exists ( '' ) : for path in utils . get_files ( storage , ignore_patterns ) : yield path , storage def find ( self , path , all = False ) : matches = [ ] for app in self . apps : match = self . find_in_app ( app , path ) if match : if not all : return match matches . append ( match ) return matches def find_in_app ( self , app , path ) : storage = self . storages . get ( app , None ) if storage : if storage . prefix : prefix = '%s%s' % ( storage . prefix , os . sep ) if not path . startswith ( prefix ) : return None path = path [ len ( prefix ) : ] if storage . exists ( path ) : matched_path = storage . path ( path ) if matched_path : return matched_path class BaseStorageFinder ( BaseFinder ) : storage = None def __init__ ( self , storage = None , * args , ** kwargs ) : if storage is not None : self . storage = storage if self . storage is None : raise ImproperlyConfigured ( "The staticfiles storage finder %r " % self . __class__ ) if not isinstance ( self . storage , ( Storage , LazyObject ) ) : self . storage = self . storage ( ) super ( BaseStorageFinder , self ) . __init__ ( * args , ** kwargs ) def find ( self , path , all = False ) : try : self . storage . path ( '' ) except NotImplementedError : pass else : if self . storage . exists ( path ) : match = self . storage . path ( path ) if all : match = [ match ] return match return [ ] def list ( self , ignore_patterns ) : for path in utils . get_files ( self . storage , ignore_patterns ) : yield path , self . storage class DefaultStorageFinder ( BaseStorageFinder ) : storage = default_storage def __init__ ( self , * args , ** kwargs ) : super ( DefaultStorageFinder , self ) . __init__ ( * args , ** kwargs ) base_location = getattr ( self . storage , 'base_location' , empty ) if not base_location : raise ImproperlyConfigured ( "The storage backend of the " % self . __class__ ) def find ( path , all = False ) : matches = [ ] for finder in get_finders ( ) : result = finder . find ( path , all = all ) if not all and result : return result if not isinstance ( result , ( list , tuple ) ) : result = [ result ] matches . extend ( result ) if matches : return matches return all and [ ] or None def get_finders ( ) : for finder_path in settings . STATICFILES_FINDERS : yield get_finder ( finder_path ) def _get_finder ( import_path ) : module , attr = import_path . rsplit ( '.' , 1 ) try : mod = import_module ( module ) except ImportError , e : raise ImproperlyConfigured ( 'Error importing module %s: "%s"' % ( module , e ) ) try : Finder = getattr ( mod , attr ) except AttributeError : raise ImproperlyConfigured ( 'Module "%s" does not define a "%s" ' % ( module , attr ) ) if not issubclass ( Finder , BaseFinder ) : raise ImproperlyConfigured ( 'Finder "%s" is not a subclass of "%s"' % ( Finder , BaseFinder ) ) return Finder ( ) get_finder = memoize ( _get_finder , _finders , 1 )
