from django . core . exceptions import ImproperlyConfigured from django . template . base import Origin , Template , Context , TemplateDoesNotExist , add_to_builtins from django . utils . importlib import import_module from django . conf import settings template_source_loaders = None class BaseLoader ( object ) : is_usable = False def __init__ ( self , * args , ** kwargs ) : pass def __call__ ( self , template_name , template_dirs = None ) : return self . load_template ( template_name , template_dirs ) def load_template ( self , template_name , template_dirs = None ) : source , display_name = self . load_template_source ( template_name , template_dirs ) origin = make_origin ( display_name , self . load_template_source , template_name , template_dirs ) try : template = get_template_from_string ( source , origin , template_name ) return template , None except TemplateDoesNotExist : return source , display_name def load_template_source ( self , template_name , template_dirs = None ) : raise NotImplementedError def reset ( self ) : pass class LoaderOrigin ( Origin ) : def __init__ ( self , display_name , loader , name , dirs ) : super ( LoaderOrigin , self ) . __init__ ( display_name ) self . loader , self . loadname , self . dirs = loader , name , dirs def reload ( self ) : return self . loader ( self . loadname , self . dirs ) [ 0 ] def make_origin ( display_name , loader , name , dirs ) : if settings . TEMPLATE_DEBUG and display_name : return LoaderOrigin ( display_name , loader , name , dirs ) else : return None def find_template_loader ( loader ) : if isinstance ( loader , ( tuple , list ) ) : loader , args = loader [ 0 ] , loader [ 1 : ] else : args = [ ] if isinstance ( loader , basestring ) : module , attr = loader . rsplit ( '.' , 1 ) try : mod = import_module ( module ) except ImportError , e : raise ImproperlyConfigured ( 'Error importing template source loader %s: "%s"' % ( loader , e ) ) try : TemplateLoader = getattr ( mod , attr ) except AttributeError , e : raise ImproperlyConfigured ( 'Error importing template source loader %s: "%s"' % ( loader , e ) ) if hasattr ( TemplateLoader , 'load_template_source' ) : func = TemplateLoader ( * args ) else : if args : raise ImproperlyConfigured ( "Error importing template source loader %s - can't pass arguments to function-based loader." % loader ) func = TemplateLoader if not func . is_usable : import warnings warnings . warn ( "Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS." % loader ) return None else : return func else : raise ImproperlyConfigured ( 'Loader does not define a "load_template" callable template source loader' ) def find_template ( name , dirs = None ) : global template_source_loaders if template_source_loaders is None : loaders = [ ] for loader_name in settings . TEMPLATE_LOADERS : loader = find_template_loader ( loader_name ) if loader is not None : loaders . append ( loader ) template_source_loaders = tuple ( loaders ) for loader in template_source_loaders : try : source , display_name = loader ( name , dirs ) return ( source , make_origin ( display_name , loader , name , dirs ) ) except TemplateDoesNotExist : pass raise TemplateDoesNotExist ( name ) def get_template ( template_name ) : template , origin = find_template ( template_name ) if not hasattr ( template , 'render' ) : template = get_template_from_string ( template , origin , template_name ) return template def get_template_from_string ( source , origin = None , name = None ) : return Template ( source , origin , name ) def render_to_string ( template_name , dictionary = None , context_instance = None ) : dictionary = dictionary or { } if isinstance ( template_name , ( list , tuple ) ) : t = select_template ( template_name ) else : t = get_template ( template_name ) if not context_instance : return t . render ( Context ( dictionary ) ) context_instance . update ( dictionary ) try : return t . render ( context_instance ) finally : context_instance . pop ( ) def select_template ( template_name_list ) : if not template_name_list : raise TemplateDoesNotExist ( "No template names provided" ) not_found = [ ] for template_name in template_name_list : try : return get_template ( template_name ) except TemplateDoesNotExist , e : if e . args [ 0 ] not in not_found : not_found . append ( e . args [ 0 ] ) continue raise TemplateDoesNotExist ( ', ' . join ( not_found ) ) add_to_builtins ( 'django.template.loader_tags' )
