from django . core import urlresolvers from django . contrib . sitemaps import Sitemap from django . contrib . gis . db . models . fields import GeometryField from django . db import models class KMLSitemap ( Sitemap ) : geo_format = 'kml' def __init__ ( self , locations = None ) : self . locations = self . _build_kml_sources ( locations ) def _build_kml_sources ( self , sources ) : kml_sources = [ ] if sources is None : sources = models . get_models ( ) for source in sources : if isinstance ( source , models . base . ModelBase ) : for field in source . _meta . fields : if isinstance ( field , GeometryField ) : kml_sources . append ( ( source . _meta . app_label , source . _meta . module_name , field . name ) ) elif isinstance ( source , ( list , tuple ) ) : if len ( source ) != 3 : raise ValueError ( 'Must specify a 3-tuple of (app_label, module_name, field_name).' ) kml_sources . append ( source ) else : raise TypeError ( 'KML Sources must be a model or a 3-tuple.' ) return kml_sources def get_urls ( self , page = 1 , site = None ) : urls = Sitemap . get_urls ( self , page = page , site = site ) for url in urls : url [ 'geo_format' ] = self . geo_format return urls def items ( self ) : return self . locations def location ( self , obj ) : return urlresolvers . reverse ( 'django.contrib.gis.sitemaps.views.%s' % self . geo_format , kwargs = { 'label' : obj [ 0 ] , : obj [ 1 ] , : obj [ 2 ] , } ) class KMZSitemap ( KMLSitemap ) : geo_format = 'kmz'
