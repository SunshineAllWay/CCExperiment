from __future__ import absolute_import import os import re from django . utils . unittest import TestCase from django . contrib . gis . db . models import Union , Extent3D from django . contrib . gis . geos import GEOSGeometry , Point , Polygon from django . contrib . gis . utils import LayerMapping , LayerMapError from . models import ( City3D , Interstate2D , Interstate3D , InterstateProj2D , InterstateProj3D , Point2D , Point3D , MultiPoint3D , Polygon2D , Polygon3D ) data_path = os . path . realpath ( os . path . join ( os . path . dirname ( __file__ ) , '..' , 'data' ) ) city_file = os . path . join ( data_path , 'cities' , 'cities.shp' ) vrt_file = os . path . join ( data_path , 'test_vrt' , 'test_vrt.vrt' ) city_data = ( ( 'Houston' , ( - 95.363151 , 29.763374 , 18 ) ) , ( 'Dallas' , ( - 96.801611 , 32.782057 , 147 ) ) , ( 'Oklahoma City' , ( - 97.521157 , 34.464642 , 380 ) ) , ( 'Wellington' , ( 174.783117 , - 41.315268 , 14 ) ) , ( 'Pueblo' , ( - 104.609252 , 38.255001 , 1433 ) ) , ( 'Lawrence' , ( - 95.235060 , 38.971823 , 251 ) ) , ( 'Chicago' , ( - 87.650175 , 41.850385 , 181 ) ) , ( 'Victoria' , ( - 123.305196 , 48.462611 , 15 ) ) , ) city_dict = dict ( ( name , coords ) for name , coords in city_data ) interstate_data = ( ( 'I-45' , , ( 11.339 , 4.536 , 9.762 , 12.448 , 10.457 , 9.418 , 14.858 , 15.386 , 13.168 , 15.104 , 16.516 , 13.923 , 14.385 , 15.16 , 15.544 , 14.975 , 15.688 , 16.099 , 15.197 , 17.268 , 19.857 , 15.435 ) , ) , ) bbox_wkt = 'POLYGON((941527.97 4225693.20,962596.48 4226349.75,963152.57 4209023.95,942051.75 4208366.38,941527.97 4225693.20))' bbox_z = ( 21.71 , 13.21 , 9.12 , 16.40 , 21.71 ) def gen_bbox ( ) : bbox_2d = GEOSGeometry ( bbox_wkt , srid = 32140 ) bbox_3d = Polygon ( tuple ( ( x , y , z ) for ( x , y ) , z in zip ( bbox_2d [ 0 ] . coords , bbox_z ) ) , srid = 32140 ) return bbox_2d , bbox_3d class Geo3DTest ( TestCase ) : def test01_3d ( self ) : for name , pnt_data in city_data : x , y , z = pnt_data pnt = Point ( x , y , z , srid = 4326 ) City3D . objects . create ( name = name , point = pnt ) city = City3D . objects . get ( name = name ) self . assertTrue ( city . point . hasz ) self . assertEqual ( z , city . point . z ) for name , line , exp_z in interstate_data : line_3d = GEOSGeometry ( line , srid = 4269 ) line_2d = GEOSGeometry ( line_3d . hex , srid = 4269 ) Interstate3D . objects . create ( name = name , line = line_3d ) InterstateProj3D . objects . create ( name = name , line = line_3d ) Interstate2D . objects . create ( name = name , line = line_2d ) InterstateProj2D . objects . create ( name = name , line = line_2d ) interstate = Interstate3D . objects . get ( name = name ) interstate_proj = InterstateProj3D . objects . get ( name = name ) for i in [ interstate , interstate_proj ] : self . assertTrue ( i . line . hasz ) self . assertEqual ( exp_z , tuple ( i . line . z ) ) bbox2d , bbox3d = gen_bbox ( ) Polygon2D . objects . create ( name = '2D BBox' , poly = bbox2d ) Polygon3D . objects . create ( name = '3D BBox' , poly = bbox3d ) p3d = Polygon3D . objects . get ( name = '3D BBox' ) self . assertTrue ( p3d . poly . hasz ) self . assertEqual ( bbox3d , p3d . poly ) def test01a_3d_layermapping ( self ) : from . models import Point2D , Point3D point_mapping = { 'point' : 'POINT' } mpoint_mapping = { 'mpoint' : 'MULTIPOINT' } lm = LayerMapping ( Point2D , vrt_file , point_mapping , transform = False ) lm . save ( ) self . assertEqual ( 3 , Point2D . objects . count ( ) ) self . assertRaises ( LayerMapError , LayerMapping , Point3D , city_file , point_mapping , transform = False ) lm = LayerMapping ( Point3D , vrt_file , point_mapping , transform = False ) lm . save ( ) self . assertEqual ( 3 , Point3D . objects . count ( ) ) lm = LayerMapping ( MultiPoint3D , vrt_file , mpoint_mapping , transform = False ) lm . save ( ) self . assertEqual ( 3 , MultiPoint3D . objects . count ( ) ) def test02a_kml ( self ) : h = City3D . objects . kml ( precision = 6 ) . get ( name = 'Houston' ) ref_kml_regex = re . compile ( r'^<Point><coordinates>-95.363\d+,29.763\d+,18</coordinates></Point>$' ) self . assertTrue ( ref_kml_regex . match ( h . kml ) ) def test02b_geojson ( self ) : h = City3D . objects . geojson ( precision = 6 ) . get ( name = 'Houston' ) ref_json_regex = re . compile ( r'^{"type":"Point","coordinates":\[-95.363151,29.763374,18(\.0+)?\]}$' ) self . assertTrue ( ref_json_regex . match ( h . geojson ) ) def test03a_union ( self ) : ref_ewkt = 'SRID=4326;MULTIPOINT(-123.305196 48.462611 15,-104.609252 38.255001 1433,-97.521157 34.464642 380,-96.801611 32.782057 147,-95.363151 29.763374 18,-95.23506 38.971823 251,-87.650175 41.850385 181,174.783117 -41.315268 14)' ref_union = GEOSGeometry ( ref_ewkt ) union = City3D . objects . aggregate ( Union ( 'point' ) ) [ 'point__union' ] self . assertTrue ( union . hasz ) self . assertEqual ( ref_union , union ) def test03b_extent ( self ) : ref_extent3d = ( - 123.305196 , - 41.315268 , 14 , 174.783117 , 48.462611 , 1433 ) extent1 = City3D . objects . aggregate ( Extent3D ( 'point' ) ) [ 'point__extent3d' ] extent2 = City3D . objects . extent3d ( ) def check_extent3d ( extent3d , tol = 6 ) : for ref_val , ext_val in zip ( ref_extent3d , extent3d ) : self . assertAlmostEqual ( ref_val , ext_val , tol ) for e3d in [ extent1 , extent2 ] : check_extent3d ( e3d ) def test04_perimeter ( self ) : ref_perim_3d = 76859.2620451 ref_perim_2d = 76859.2577803 tol = 6 self . assertAlmostEqual ( ref_perim_2d , Polygon2D . objects . perimeter ( ) . get ( name = '2D BBox' ) . perimeter . m , tol ) self . assertAlmostEqual ( ref_perim_3d , Polygon3D . objects . perimeter ( ) . get ( name = '3D BBox' ) . perimeter . m , tol ) def test05_length ( self ) : tol = 3 ref_length_2d = 4368.1721949481 ref_length_3d = 4368.62547052088 self . assertAlmostEqual ( ref_length_2d , Interstate2D . objects . length ( ) . get ( name = 'I-45' ) . length . m , tol ) self . assertAlmostEqual ( ref_length_3d , Interstate3D . objects . length ( ) . get ( name = 'I-45' ) . length . m , tol ) ref_length_2d = 4367.71564892392 ref_length_3d = 4368.16897234101 self . assertAlmostEqual ( ref_length_2d , InterstateProj2D . objects . length ( ) . get ( name = 'I-45' ) . length . m , tol ) self . assertAlmostEqual ( ref_length_3d , InterstateProj3D . objects . length ( ) . get ( name = 'I-45' ) . length . m , tol ) def test06_scale ( self ) : zscales = ( - 3 , 4 , 23 ) for zscale in zscales : for city in City3D . objects . scale ( 1.0 , 1.0 , zscale ) : self . assertEqual ( city_dict [ city . name ] [ 2 ] * zscale , city . scale . z ) def test07_translate ( self ) : ztranslations = ( 5.23 , 23 , - 17 ) for ztrans in ztranslations : for city in City3D . objects . translate ( 0 , 0 , ztrans ) : self . assertEqual ( city_dict [ city . name ] [ 2 ] + ztrans , city . translate . z )
