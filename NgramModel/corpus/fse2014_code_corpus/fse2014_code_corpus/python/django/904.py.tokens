from django . forms import models as model_forms from django . core . exceptions import ImproperlyConfigured from django . http import HttpResponseRedirect from django . views . generic . base import TemplateResponseMixin , View from django . views . generic . detail import ( SingleObjectMixin , SingleObjectTemplateResponseMixin , BaseDetailView ) class FormMixin ( object ) : initial = { } form_class = None success_url = None def get_initial ( self ) : return self . initial def get_form_class ( self ) : return self . form_class def get_form ( self , form_class ) : return form_class ( ** self . get_form_kwargs ( ) ) def get_form_kwargs ( self ) : kwargs = { 'initial' : self . get_initial ( ) } if self . request . method in ( 'POST' , 'PUT' ) : kwargs . update ( { : self . request . POST , : self . request . FILES , } ) return kwargs def get_context_data ( self , ** kwargs ) : return kwargs def get_success_url ( self ) : if self . success_url : url = self . success_url else : raise ImproperlyConfigured ( ) return url def form_valid ( self , form ) : return HttpResponseRedirect ( self . get_success_url ( ) ) def form_invalid ( self , form ) : return self . render_to_response ( self . get_context_data ( form = form ) ) class ModelFormMixin ( FormMixin , SingleObjectMixin ) : def get_form_class ( self ) : if self . form_class : return self . form_class else : if self . model is not None : model = self . model elif hasattr ( self , 'object' ) and self . object is not None : model = self . object . __class__ else : model = self . get_queryset ( ) . model return model_forms . modelform_factory ( model ) def get_form_kwargs ( self ) : kwargs = super ( ModelFormMixin , self ) . get_form_kwargs ( ) kwargs . update ( { 'instance' : self . object } ) return kwargs def get_success_url ( self ) : if self . success_url : url = self . success_url % self . object . __dict__ else : try : url = self . object . get_absolute_url ( ) except AttributeError : raise ImproperlyConfigured ( ) return url def form_valid ( self , form ) : self . object = form . save ( ) return super ( ModelFormMixin , self ) . form_valid ( form ) def get_context_data ( self , ** kwargs ) : context = kwargs if self . object : context [ 'object' ] = self . object context_object_name = self . get_context_object_name ( self . object ) if context_object_name : context [ context_object_name ] = self . object return context class ProcessFormView ( View ) : def get ( self , request , * args , ** kwargs ) : form_class = self . get_form_class ( ) form = self . get_form ( form_class ) return self . render_to_response ( self . get_context_data ( form = form ) ) def post ( self , request , * args , ** kwargs ) : form_class = self . get_form_class ( ) form = self . get_form ( form_class ) if form . is_valid ( ) : return self . form_valid ( form ) else : return self . form_invalid ( form ) def put ( self , * args , ** kwargs ) : return self . post ( * args , ** kwargs ) class BaseFormView ( FormMixin , ProcessFormView ) : class FormView ( TemplateResponseMixin , BaseFormView ) : class BaseCreateView ( ModelFormMixin , ProcessFormView ) : def get ( self , request , * args , ** kwargs ) : self . object = None return super ( BaseCreateView , self ) . get ( request , * args , ** kwargs ) def post ( self , request , * args , ** kwargs ) : self . object = None return super ( BaseCreateView , self ) . post ( request , * args , ** kwargs ) class CreateView ( SingleObjectTemplateResponseMixin , BaseCreateView ) : template_name_suffix = '_form' class BaseUpdateView ( ModelFormMixin , ProcessFormView ) : def get ( self , request , * args , ** kwargs ) : self . object = self . get_object ( ) return super ( BaseUpdateView , self ) . get ( request , * args , ** kwargs ) def post ( self , request , * args , ** kwargs ) : self . object = self . get_object ( ) return super ( BaseUpdateView , self ) . post ( request , * args , ** kwargs ) class UpdateView ( SingleObjectTemplateResponseMixin , BaseUpdateView ) : template_name_suffix = '_form' class DeletionMixin ( object ) : success_url = None def delete ( self , request , * args , ** kwargs ) : self . object = self . get_object ( ) self . object . delete ( ) return HttpResponseRedirect ( self . get_success_url ( ) ) def post ( self , * args , ** kwargs ) : return self . delete ( * args , ** kwargs ) def get_success_url ( self ) : if self . success_url : return self . success_url else : raise ImproperlyConfigured ( ) class BaseDeleteView ( DeletionMixin , BaseDetailView ) : class DeleteView ( SingleObjectTemplateResponseMixin , BaseDeleteView ) : template_name_suffix = '_confirm_delete'
