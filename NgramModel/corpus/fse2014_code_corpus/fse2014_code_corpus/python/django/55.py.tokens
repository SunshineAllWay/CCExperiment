from __future__ import absolute_import from datetime import datetime from operator import attrgetter from django . test import TestCase from . models import ( Person , Group , Membership , CustomMembership , PersonSelfRefM2M , Friendship ) class M2mThroughTests ( TestCase ) : def setUp ( self ) : self . bob = Person . objects . create ( name = 'Bob' ) self . jim = Person . objects . create ( name = 'Jim' ) self . jane = Person . objects . create ( name = 'Jane' ) self . rock = Group . objects . create ( name = 'Rock' ) self . roll = Group . objects . create ( name = 'Roll' ) def test_m2m_through ( self ) : self . assertQuerysetEqual ( self . rock . members . all ( ) , [ ] ) m1 = Membership . objects . create ( person = self . jim , group = self . rock ) m2 = Membership . objects . create ( person = self . jane , group = self . rock ) self . assertQuerysetEqual ( self . rock . members . all ( ) , [ , ] , attrgetter ( "name" ) ) m3 = Membership . objects . create ( person = self . bob , group = self . roll ) m4 = Membership . objects . create ( person = self . jim , group = self . roll ) m5 = Membership . objects . create ( person = self . jane , group = self . roll ) self . assertQuerysetEqual ( self . jim . group_set . all ( ) , [ , ] , attrgetter ( "name" ) ) self . assertEqual ( repr ( Membership . objects . get ( person = self . jane , group = self . rock ) ) , ) self . assertQuerysetEqual ( Membership . objects . filter ( person = self . jim ) , [ , ] ) self . rock . members . clear ( ) self . assertQuerysetEqual ( self . rock . members . all ( ) , [ ] ) def test_forward_descriptors ( self ) : self . assertRaises ( AttributeError , lambda : self . rock . members . add ( self . bob ) ) self . assertRaises ( AttributeError , lambda : self . rock . members . create ( name = 'Anne' ) ) self . assertRaises ( AttributeError , lambda : self . rock . members . remove ( self . jim ) ) m1 = Membership . objects . create ( person = self . jim , group = self . rock ) m2 = Membership . objects . create ( person = self . jane , group = self . rock ) backup = list ( self . rock . members . all ( ) ) self . assertEqual ( [ p . name for p in backup ] , [ 'Jane' , 'Jim' ] ) self . rock . members . clear ( ) self . assertQuerysetEqual ( self . rock . members . all ( ) , [ ] ) self . assertRaises ( AttributeError , setattr , self . rock , "members" , backup ) m1 . save ( ) m2 . save ( ) self . assertQuerysetEqual ( self . rock . members . all ( ) , [ , ] , attrgetter ( "name" ) ) def test_reverse_descriptors ( self ) : self . assertRaises ( AttributeError , lambda : self . bob . group_set . add ( self . rock ) ) self . assertRaises ( AttributeError , lambda : self . bob . group_set . create ( name = "funk" ) ) self . assertRaises ( AttributeError , lambda : self . jim . group_set . remove ( self . rock ) ) m1 = Membership . objects . create ( person = self . jim , group = self . rock ) m2 = Membership . objects . create ( person = self . jim , group = self . roll ) backup = list ( self . jim . group_set . all ( ) ) self . assertEqual ( [ g . name for g in backup ] , [ 'Rock' , 'Roll' ] ) self . jim . group_set . clear ( ) self . assertQuerysetEqual ( self . jim . group_set . all ( ) , [ ] ) self . assertRaises ( AttributeError , setattr , self . jim , "group_set" , backup ) m1 . save ( ) m2 . save ( ) self . assertQuerysetEqual ( self . jim . group_set . all ( ) , [ , ] , attrgetter ( "name" ) ) def test_custom_tests ( self ) : self . assertQuerysetEqual ( self . rock . custom_members . all ( ) , [ ] ) self . assertQuerysetEqual ( self . bob . custom . all ( ) , [ ] ) cm1 = CustomMembership . objects . create ( person = self . bob , group = self . rock ) cm2 = CustomMembership . objects . create ( person = self . jim , group = self . rock ) self . assertQuerysetEqual ( self . rock . custom_members . all ( ) , [ , ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( self . bob . custom . all ( ) , [ ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( self . bob . custom_person_related_name . all ( ) , [ ] ) def test_self_referential_tests ( self ) : tony = PersonSelfRefM2M . objects . create ( name = "Tony" ) self . assertQuerysetEqual ( tony . friends . all ( ) , [ ] ) chris = PersonSelfRefM2M . objects . create ( name = "Chris" ) f = Friendship . objects . create ( first = tony , second = chris , date_friended = datetime . now ( ) ) self . assertQuerysetEqual ( tony . friends . all ( ) , [ ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( chris . friends . all ( ) , [ ] ) f2 = Friendship . objects . create ( first = chris , second = tony , date_friended = datetime . now ( ) ) self . assertQuerysetEqual ( chris . friends . all ( ) , [ ] , attrgetter ( "name" ) ) chris . friends . clear ( ) self . assertQuerysetEqual ( chris . friends . all ( ) , [ ] ) self . assertQuerysetEqual ( tony . friends . all ( ) , [ ] , attrgetter ( "name" ) ) def test_query_tests ( self ) : m1 = Membership . objects . create ( person = self . jim , group = self . rock ) m2 = Membership . objects . create ( person = self . jane , group = self . rock ) m3 = Membership . objects . create ( person = self . bob , group = self . roll ) m4 = Membership . objects . create ( person = self . jim , group = self . roll ) m5 = Membership . objects . create ( person = self . jane , group = self . roll ) m2 . invite_reason = "She was just awesome." m2 . date_joined = datetime ( 2006 , 1 , 1 ) m2 . save ( ) m3 . date_joined = datetime ( 2004 , 1 , 1 ) m3 . save ( ) m5 . date_joined = datetime ( 2004 , 1 , 1 ) m5 . save ( ) self . assertQuerysetEqual ( Group . objects . filter ( members__name = 'Bob' ) , [ ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( Group . objects . filter ( membership__invite_reason = "She was just awesome." ) , [ ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( Person . objects . filter ( group__name = "Rock" ) , [ , ] , attrgetter ( "name" ) ) cm1 = CustomMembership . objects . create ( person = self . bob , group = self . rock ) cm2 = CustomMembership . objects . create ( person = self . jim , group = self . rock ) self . assertQuerysetEqual ( Person . objects . filter ( custom__name = "Rock" ) , [ , ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( Person . objects . filter ( membership__invite_reason = "She was just awesome." ) , [ ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( Group . objects . filter ( membership__date_joined__gt = datetime ( 2005 , 1 , 1 ) , membership__person = self . jane ) , [ ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( Person . objects . filter ( membership__date_joined__gt = datetime ( 2005 , 1 , 1 ) , membership__group = self . rock ) , [ , ] , attrgetter ( "name" ) ) self . assertQuerysetEqual ( Person . objects . filter ( membership__date_joined__gt = datetime ( 2004 , 1 , 1 ) ) , [ , , ] , attrgetter ( "name" ) ) self . assertEqual ( [ ( m . person . name , m . group . name ) for m in Membership . objects . filter ( date_joined__gt = datetime ( 2004 , 1 , 1 ) ) ] , [ ( u'Jane' , u'Rock' ) , ( u'Jim' , u'Rock' ) , ( u'Jim' , u'Roll' ) ] ) self . assertQuerysetEqual ( Person . objects . filter ( membership__date_joined__gt = datetime ( 2004 , 1 , 1 ) ) . distinct ( ) , [ , ] , attrgetter ( "name" ) )
