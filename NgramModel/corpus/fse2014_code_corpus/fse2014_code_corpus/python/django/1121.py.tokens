""" Base file upload handler classes, and the built-in concrete subclasses """ try : from cStringIO import StringIO except ImportError : from StringIO import StringIO from django . conf import settings from django . core . exceptions import ImproperlyConfigured from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile from django . utils import importlib __all__ = [ 'UploadFileException' , 'StopUpload' , 'SkipFile' , 'FileUploadHandler' , , 'MemoryFileUploadHandler' , , 'StopFutureHandlers' ] class UploadFileException ( Exception ) : pass class StopUpload ( UploadFileException ) : def __init__ ( self , connection_reset = False ) : self . connection_reset = connection_reset def __unicode__ ( self ) : if self . connection_reset : return u'StopUpload: Halt current upload.' else : return u'StopUpload: Consume request data, then halt.' class SkipFile ( UploadFileException ) : pass class StopFutureHandlers ( UploadFileException ) : pass class FileUploadHandler ( object ) : chunk_size = 64 * 2 ** 10 def __init__ ( self , request = None ) : self . file_name = None self . content_type = None self . content_length = None self . charset = None self . request = request def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) : pass def new_file ( self , field_name , file_name , content_type , content_length , charset = None ) : self . field_name = field_name self . file_name = file_name self . content_type = content_type self . content_length = content_length self . charset = charset def receive_data_chunk ( self , raw_data , start ) : raise NotImplementedError ( ) def file_complete ( self , file_size ) : raise NotImplementedError ( ) def upload_complete ( self ) : pass class TemporaryFileUploadHandler ( FileUploadHandler ) : def __init__ ( self , * args , ** kwargs ) : super ( TemporaryFileUploadHandler , self ) . __init__ ( * args , ** kwargs ) def new_file ( self , file_name , * args , ** kwargs ) : super ( TemporaryFileUploadHandler , self ) . new_file ( file_name , * args , ** kwargs ) self . file = TemporaryUploadedFile ( self . file_name , self . content_type , 0 , self . charset ) def receive_data_chunk ( self , raw_data , start ) : self . file . write ( raw_data ) def file_complete ( self , file_size ) : self . file . seek ( 0 ) self . file . size = file_size return self . file class MemoryFileUploadHandler ( FileUploadHandler ) : def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) : if content_length > settings . FILE_UPLOAD_MAX_MEMORY_SIZE : self . activated = False else : self . activated = True def new_file ( self , * args , ** kwargs ) : super ( MemoryFileUploadHandler , self ) . new_file ( * args , ** kwargs ) if self . activated : self . file = StringIO ( ) raise StopFutureHandlers ( ) def receive_data_chunk ( self , raw_data , start ) : if self . activated : self . file . write ( raw_data ) else : return raw_data def file_complete ( self , file_size ) : if not self . activated : return self . file . seek ( 0 ) return InMemoryUploadedFile ( file = self . file , field_name = self . field_name , name = self . file_name , content_type = self . content_type , size = file_size , charset = self . charset ) def load_handler ( path , * args , ** kwargs ) : i = path . rfind ( '.' ) module , attr = path [ : i ] , path [ i + 1 : ] try : mod = importlib . import_module ( module ) except ImportError , e : raise ImproperlyConfigured ( 'Error importing upload handler module %s: "%s"' % ( module , e ) ) except ValueError , e : raise ImproperlyConfigured ( 'Error importing upload handler module. Is FILE_UPLOAD_HANDLERS a correctly defined list or tuple?' ) try : cls = getattr ( mod , attr ) except AttributeError : raise ImproperlyConfigured ( 'Module "%s" does not define a "%s" upload handler backend' % ( module , attr ) ) return cls ( * args , ** kwargs )
