from ctypes import byref , c_int from datetime import date , datetime , time from django . contrib . gis . gdal . base import GDALBase from django . contrib . gis . gdal . error import OGRException from django . contrib . gis . gdal . prototypes import ds as capi class Field ( GDALBase ) : def __init__ ( self , feat , index ) : self . _feat = feat self . _index = index fld_ptr = capi . get_feat_field_defn ( feat , index ) if not fld_ptr : raise OGRException ( 'Cannot create OGR Field, invalid pointer given.' ) self . ptr = fld_ptr self . __class__ = OGRFieldTypes [ self . type ] if isinstance ( self , OFTReal ) and self . precision == 0 : self . __class__ = OFTInteger self . _double = True def __str__ ( self ) : return str ( self . value ) . strip ( ) def as_double ( self ) : return capi . get_field_as_double ( self . _feat , self . _index ) def as_int ( self ) : return capi . get_field_as_integer ( self . _feat , self . _index ) def as_string ( self ) : return capi . get_field_as_string ( self . _feat , self . _index ) def as_datetime ( self ) : yy , mm , dd , hh , mn , ss , tz = [ c_int ( ) for i in range ( 7 ) ] status = capi . get_field_as_datetime ( self . _feat , self . _index , byref ( yy ) , byref ( mm ) , byref ( dd ) , byref ( hh ) , byref ( mn ) , byref ( ss ) , byref ( tz ) ) if status : return ( yy , mm , dd , hh , mn , ss , tz ) else : raise OGRException ( 'Unable to retrieve date & time information from the field.' ) @ property def name ( self ) : return capi . get_field_name ( self . ptr ) @ property def precision ( self ) : return capi . get_field_precision ( self . ptr ) @ property def type ( self ) : return capi . get_field_type ( self . ptr ) @ property def type_name ( self ) : return capi . get_field_type_name ( self . type ) @ property def value ( self ) : return self . as_string ( ) @ property def width ( self ) : return capi . get_field_width ( self . ptr ) class OFTInteger ( Field ) : _double = False @ property def value ( self ) : if self . _double : return int ( self . as_double ( ) ) else : return self . as_int ( ) @ property def type ( self ) : return 0 class OFTReal ( Field ) : @ property def value ( self ) : return self . as_double ( ) class OFTString ( Field ) : pass class OFTWideString ( Field ) : pass class OFTBinary ( Field ) : pass class OFTDate ( Field ) : @ property def value ( self ) : try : yy , mm , dd , hh , mn , ss , tz = self . as_datetime ( ) return date ( yy . value , mm . value , dd . value ) except ( ValueError , OGRException ) : return None class OFTDateTime ( Field ) : @ property def value ( self ) : try : yy , mm , dd , hh , mn , ss , tz = self . as_datetime ( ) return datetime ( yy . value , mm . value , dd . value , hh . value , mn . value , ss . value ) except ( ValueError , OGRException ) : return None class OFTTime ( Field ) : @ property def value ( self ) : try : yy , mm , dd , hh , mn , ss , tz = self . as_datetime ( ) return time ( hh . value , mn . value , ss . value ) except ( ValueError , OGRException ) : return None class OFTIntegerList ( Field ) : pass class OFTRealList ( Field ) : pass class OFTStringList ( Field ) : pass class OFTWideStringList ( Field ) : pass OGRFieldTypes = { 0 : OFTInteger , 1 : OFTIntegerList , 2 : OFTReal , 3 : OFTRealList , 4 : OFTString , 5 : OFTStringList , 6 : OFTWideString , 7 : OFTWideStringList , 8 : OFTBinary , 9 : OFTDate , 10 : OFTTime , 11 : OFTDateTime , } ROGRFieldTypes = dict ( [ ( cls , num ) for num , cls in OGRFieldTypes . items ( ) ] )
