""" PE-specific Form helpers. """ from __future__ import absolute_import from django . contrib . localflavor . pe . pe_region import REGION_CHOICES from django . core . validators import EMPTY_VALUES from django . forms import ValidationError from django . forms . fields import RegexField , CharField , Select from django . utils . translation import ugettext_lazy as _ class PERegionSelect ( Select ) : def __init__ ( self , attrs = None ) : super ( PERegionSelect , self ) . __init__ ( attrs , choices = REGION_CHOICES ) class PEDNIField ( CharField ) : default_error_messages = { : _ ( "This field requires only numbers." ) , : _ ( "This field requires 8 digits." ) , } def __init__ ( self , max_length = 8 , min_length = 8 , * args , ** kwargs ) : super ( PEDNIField , self ) . __init__ ( max_length , min_length , * args , ** kwargs ) def clean ( self , value ) : value = super ( PEDNIField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' if not value . isdigit ( ) : raise ValidationError ( self . error_messages [ 'invalid' ] ) if len ( value ) != 8 : raise ValidationError ( self . error_messages [ 'max_digits' ] ) return value class PERUCField ( RegexField ) : default_error_messages = { : _ ( "This field requires only numbers." ) , : _ ( "This field requires 11 digits." ) , } def __init__ ( self , max_length = 11 , min_length = 11 , * args , ** kwargs ) : super ( PERUCField , self ) . __init__ ( max_length , min_length , * args , ** kwargs ) def clean ( self , value ) : value = super ( PERUCField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' if not value . isdigit ( ) : raise ValidationError ( self . error_messages [ 'invalid' ] ) if len ( value ) != 11 : raise ValidationError ( self . error_messages [ 'max_digits' ] ) return value
