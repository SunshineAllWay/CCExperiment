from functools import update_wrapper from django import http from django . core . exceptions import ImproperlyConfigured from django . template . response import TemplateResponse from django . utils . log import getLogger from django . utils . decorators import classonlymethod logger = getLogger ( 'django.request' ) class View ( object ) : http_method_names = [ 'get' , 'post' , 'put' , 'delete' , 'head' , 'options' , 'trace' ] def __init__ ( self , ** kwargs ) : for key , value in kwargs . iteritems ( ) : setattr ( self , key , value ) @ classonlymethod def as_view ( cls , ** initkwargs ) : for key in initkwargs : if key in cls . http_method_names : raise TypeError ( u"You tried to pass in the %s method name as a " % ( key , cls . __name__ ) ) if not hasattr ( cls , key ) : raise TypeError ( u"%s() received an invalid keyword %r" % ( cls . __name__ , key ) ) def view ( request , * args , ** kwargs ) : self = cls ( ** initkwargs ) if hasattr ( self , 'get' ) and not hasattr ( self , 'head' ) : self . head = self . get return self . dispatch ( request , * args , ** kwargs ) update_wrapper ( view , cls , updated = ( ) ) update_wrapper ( view , cls . dispatch , assigned = ( ) ) return view def dispatch ( self , request , * args , ** kwargs ) : if request . method . lower ( ) in self . http_method_names : handler = getattr ( self , request . method . lower ( ) , self . http_method_not_allowed ) else : handler = self . http_method_not_allowed self . request = request self . args = args self . kwargs = kwargs return handler ( request , * args , ** kwargs ) def http_method_not_allowed ( self , request , * args , ** kwargs ) : allowed_methods = [ m for m in self . http_method_names if hasattr ( self , m ) ] logger . warning ( 'Method Not Allowed (%s): %s' , request . method , request . path , extra = { : 405 , : self . request } ) return http . HttpResponseNotAllowed ( allowed_methods ) class TemplateResponseMixin ( object ) : template_name = None response_class = TemplateResponse def render_to_response ( self , context , ** response_kwargs ) : return self . response_class ( request = self . request , template = self . get_template_names ( ) , context = context , ** response_kwargs ) def get_template_names ( self ) : if self . template_name is None : raise ImproperlyConfigured ( ) else : return [ self . template_name ] class TemplateView ( TemplateResponseMixin , View ) : def get_context_data ( self , ** kwargs ) : return { : kwargs } def get ( self , request , * args , ** kwargs ) : context = self . get_context_data ( ** kwargs ) return self . render_to_response ( context ) class RedirectView ( View ) : permanent = True url = None query_string = False def get_redirect_url ( self , ** kwargs ) : if self . url : args = self . request . META . get ( 'QUERY_STRING' , '' ) if args and self . query_string : url = "%s?%s" % ( self . url , args ) else : url = self . url return url % kwargs else : return None def get ( self , request , * args , ** kwargs ) : url = self . get_redirect_url ( ** kwargs ) if url : if self . permanent : return http . HttpResponsePermanentRedirect ( url ) else : return http . HttpResponseRedirect ( url ) else : logger . warning ( 'Gone: %s' , self . request . path , extra = { : 410 , : self . request } ) return http . HttpResponseGone ( ) def head ( self , request , * args , ** kwargs ) : return self . get ( request , * args , ** kwargs ) def post ( self , request , * args , ** kwargs ) : return self . get ( request , * args , ** kwargs ) def options ( self , request , * args , ** kwargs ) : return self . get ( request , * args , ** kwargs ) def delete ( self , request , * args , ** kwargs ) : return self . get ( request , * args , ** kwargs ) def put ( self , request , * args , ** kwargs ) : return self . get ( request , * args , ** kwargs )
