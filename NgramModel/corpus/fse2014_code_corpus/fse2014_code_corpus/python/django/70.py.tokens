from __future__ import absolute_import from datetime import date import traceback from django . db import IntegrityError from django . test import TestCase from . models import Person , ManualPrimaryKeyTest class GetOrCreateTests ( TestCase ) : def test_get_or_create ( self ) : p = Person . objects . create ( first_name = 'John' , last_name = 'Lennon' , birthday = date ( 1940 , 10 , 9 ) ) p , created = Person . objects . get_or_create ( first_name = "John" , last_name = "Lennon" , defaults = { : date ( 1940 , 10 , 9 ) } ) self . assertFalse ( created ) self . assertEqual ( Person . objects . count ( ) , 1 ) p , created = Person . objects . get_or_create ( first_name = 'George' , last_name = 'Harrison' , defaults = { : date ( 1943 , 2 , 25 ) } ) self . assertTrue ( created ) self . assertEqual ( Person . objects . count ( ) , 2 ) p , created = Person . objects . get_or_create ( first_name = 'George' , last_name = 'Harrison' , defaults = { : date ( 1943 , 2 , 25 ) } ) self . assertFalse ( created ) self . assertEqual ( Person . objects . count ( ) , 2 ) self . assertRaises ( IntegrityError , Person . objects . get_or_create , first_name = "Tom" , last_name = "Smith" ) m = ManualPrimaryKeyTest . objects . create ( id = 1 , data = "Original" ) self . assertRaises ( IntegrityError , ManualPrimaryKeyTest . objects . get_or_create , id = 1 , data = "Different" ) self . assertEqual ( ManualPrimaryKeyTest . objects . get ( id = 1 ) . data , "Original" ) try : ManualPrimaryKeyTest . objects . get_or_create ( id = 1 , data = "Different" ) except IntegrityError , e : formatted_traceback = traceback . format_exc ( ) self . assertIn ( 'obj.save' , formatted_traceback )
