""" Belgium-specific Form helpers """ from __future__ import absolute_import from django . contrib . localflavor . be . be_provinces import PROVINCE_CHOICES from django . contrib . localflavor . be . be_regions import REGION_CHOICES from django . forms . fields import RegexField , Select from django . utils . translation import ugettext_lazy as _ class BEPostalCodeField ( RegexField ) : default_error_messages = { : _ ( ) , } def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) : super ( BEPostalCodeField , self ) . __init__ ( r'^[1-9]\d{3}$' , max_length , min_length , * args , ** kwargs ) class BEPhoneNumberField ( RegexField ) : default_error_messages = { : _ ( 'Enter a valid phone number in one of the formats ' ) , } def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) : super ( BEPhoneNumberField , self ) . __init__ ( r'^[0]\d{1}[/. ]?\d{3}[. ]\d{2}[. ]?\d{2}$|^[0]\d{2}[/. ]?\d{2}[. ]?\d{2}[. ]?\d{2}$|^[0][4]\d{2}[/. ]?\d{2}[. ]?\d{2}[. ]?\d{2}$' , max_length , min_length , * args , ** kwargs ) class BERegionSelect ( Select ) : def __init__ ( self , attrs = None ) : super ( BERegionSelect , self ) . __init__ ( attrs , choices = REGION_CHOICES ) class BEProvinceSelect ( Select ) : def __init__ ( self , attrs = None ) : super ( BEProvinceSelect , self ) . __init__ ( attrs , choices = PROVINCE_CHOICES )
