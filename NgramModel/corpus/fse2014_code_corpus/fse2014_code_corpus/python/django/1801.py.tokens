import errno import os import tempfile from django . conf import settings from django . contrib . sessions . backends . base import SessionBase , CreateError from django . core . exceptions import SuspiciousOperation , ImproperlyConfigured class SessionStore ( SessionBase ) : def __init__ ( self , session_key = None ) : self . storage_path = getattr ( settings , "SESSION_FILE_PATH" , None ) if not self . storage_path : self . storage_path = tempfile . gettempdir ( ) if not os . path . isdir ( self . storage_path ) : raise ImproperlyConfigured ( % self . storage_path ) self . file_prefix = settings . SESSION_COOKIE_NAME super ( SessionStore , self ) . __init__ ( session_key ) VALID_KEY_CHARS = set ( "abcdef0123456789" ) def _key_to_file ( self , session_key = None ) : if session_key is None : session_key = self . _get_or_create_session_key ( ) if not set ( session_key ) . issubset ( self . VALID_KEY_CHARS ) : raise SuspiciousOperation ( ) return os . path . join ( self . storage_path , self . file_prefix + session_key ) def load ( self ) : session_data = { } try : session_file = open ( self . _key_to_file ( ) , "rb" ) try : file_data = session_file . read ( ) if file_data : try : session_data = self . decode ( file_data ) except ( EOFError , SuspiciousOperation ) : self . create ( ) finally : session_file . close ( ) except IOError : self . create ( ) return session_data def create ( self ) : while True : self . _session_key = self . _get_new_session_key ( ) try : self . save ( must_create = True ) except CreateError : continue self . modified = True self . _session_cache = { } return def save ( self , must_create = False ) : session_data = self . _get_session ( no_load = must_create ) session_file_name = self . _key_to_file ( ) try : flags = os . O_WRONLY | os . O_CREAT | getattr ( os , 'O_BINARY' , 0 ) if must_create : flags |= os . O_EXCL fd = os . open ( session_file_name , flags ) os . close ( fd ) except OSError , e : if must_create and e . errno == errno . EEXIST : raise CreateError raise dir , prefix = os . path . split ( session_file_name ) try : output_file_fd , output_file_name = tempfile . mkstemp ( dir = dir , prefix = prefix + '_out_' ) renamed = False try : try : os . write ( output_file_fd , self . encode ( session_data ) ) finally : os . close ( output_file_fd ) os . rename ( output_file_name , session_file_name ) renamed = True finally : if not renamed : os . unlink ( output_file_name ) except ( OSError , IOError , EOFError ) : pass def exists ( self , session_key ) : return os . path . exists ( self . _key_to_file ( session_key ) ) def delete ( self , session_key = None ) : if session_key is None : if self . session_key is None : return session_key = self . session_key try : os . unlink ( self . _key_to_file ( session_key ) ) except OSError : pass def clean ( self ) : pass
