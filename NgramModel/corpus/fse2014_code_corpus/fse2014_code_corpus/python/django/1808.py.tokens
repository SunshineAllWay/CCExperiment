""" This module implements a transaction manager that can be used to define transaction handling in a request or view function. It is used by transaction control middleware and decorators. The transaction manager can be in managed or in auto state. Auto state means the system is using a commit-on-save strategy (actually it's more like commit-on-change). As soon as the .save() or .delete() (or related) methods are called, a commit is made. Managed transactions don't do those commits, but will need some kind of manual or implicit commits or rollbacks. """ from __future__ import with_statement from functools import wraps from django . db import connections , DEFAULT_DB_ALIAS class TransactionManagementError ( Exception ) : pass def enter_transaction_management ( managed = True , using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . enter_transaction_management ( managed ) def leave_transaction_management ( using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . leave_transaction_management ( ) def is_dirty ( using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] return connection . is_dirty ( ) def set_dirty ( using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . set_dirty ( ) def set_clean ( using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . set_clean ( ) def clean_savepoints ( using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . clean_savepoints ( ) def is_managed ( using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] return connection . is_managed ( ) def managed ( flag = True , using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . managed ( flag ) def commit_unless_managed ( using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . commit_unless_managed ( ) def rollback_unless_managed ( using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . rollback_unless_managed ( ) def commit ( using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . commit ( ) def rollback ( using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . rollback ( ) def savepoint ( using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] return connection . savepoint ( ) def savepoint_rollback ( sid , using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . savepoint_rollback ( sid ) def savepoint_commit ( sid , using = None ) : if using is None : using = DEFAULT_DB_ALIAS connection = connections [ using ] connection . savepoint_commit ( sid ) class Transaction ( object ) : def __init__ ( self , entering , exiting , using ) : self . entering = entering self . exiting = exiting self . using = using def __enter__ ( self ) : self . entering ( self . using ) def __exit__ ( self , exc_type , exc_value , traceback ) : self . exiting ( exc_value , self . using ) def __call__ ( self , func ) : @ wraps ( func ) def inner ( * args , ** kwargs ) : with self : return func ( * args , ** kwargs ) return inner def _transaction_func ( entering , exiting , using ) : if using is None : using = DEFAULT_DB_ALIAS if callable ( using ) : return Transaction ( entering , exiting , DEFAULT_DB_ALIAS ) ( using ) return Transaction ( entering , exiting , using ) def autocommit ( using = None ) : def entering ( using ) : enter_transaction_management ( managed = False , using = using ) managed ( False , using = using ) def exiting ( exc_value , using ) : leave_transaction_management ( using = using ) return _transaction_func ( entering , exiting , using ) def commit_on_success ( using = None ) : def entering ( using ) : enter_transaction_management ( using = using ) managed ( True , using = using ) def exiting ( exc_value , using ) : try : if exc_value is not None : if is_dirty ( using = using ) : rollback ( using = using ) else : if is_dirty ( using = using ) : try : commit ( using = using ) except : rollback ( using = using ) raise finally : leave_transaction_management ( using = using ) return _transaction_func ( entering , exiting , using ) def commit_manually ( using = None ) : def entering ( using ) : enter_transaction_management ( using = using ) managed ( True , using = using ) def exiting ( exc_value , using ) : leave_transaction_management ( using = using ) return _transaction_func ( entering , exiting , using )
