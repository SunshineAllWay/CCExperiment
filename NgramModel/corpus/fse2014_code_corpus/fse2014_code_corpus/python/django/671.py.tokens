from __future__ import absolute_import from django . forms . models import inlineformset_factory from django . test import TestCase from . models import Poet , Poem , School , Parent , Child class DeletionTests ( TestCase ) : def test_deletion ( self ) : PoemFormSet = inlineformset_factory ( Poet , Poem , can_delete = True ) poet = Poet . objects . create ( name = 'test' ) poem = poet . poem_set . create ( name = 'test poem' ) data = { : u'1' , : u'1' , : u'0' , : str ( poem . pk ) , : str ( poet . pk ) , : u'test' , : u'on' , } formset = PoemFormSet ( data , instance = poet ) formset . save ( ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( Poem . objects . count ( ) , 0 ) def test_add_form_deletion_when_invalid ( self ) : PoemFormSet = inlineformset_factory ( Poet , Poem , can_delete = True ) poet = Poet . objects . create ( name = 'test' ) data = { : u'1' , : u'0' , : u'0' , : u'' , : u'1' , : u'x' * 1000 , } formset = PoemFormSet ( data , instance = poet ) self . assertEqual ( formset . is_valid ( ) , False ) self . assertEqual ( Poem . objects . count ( ) , 0 ) data [ 'poem_set-0-DELETE' ] = 'on' formset = PoemFormSet ( data , instance = poet ) self . assertEqual ( formset . is_valid ( ) , True ) formset . save ( ) self . assertEqual ( Poem . objects . count ( ) , 0 ) def test_change_form_deletion_when_invalid ( self ) : PoemFormSet = inlineformset_factory ( Poet , Poem , can_delete = True ) poet = Poet . objects . create ( name = 'test' ) poem = poet . poem_set . create ( name = 'test poem' ) data = { : u'1' , : u'1' , : u'0' , : unicode ( poem . id ) , : unicode ( poem . id ) , : u'x' * 1000 , } formset = PoemFormSet ( data , instance = poet ) self . assertEqual ( formset . is_valid ( ) , False ) self . assertEqual ( Poem . objects . count ( ) , 1 ) data [ 'poem_set-0-DELETE' ] = 'on' formset = PoemFormSet ( data , instance = poet ) self . assertEqual ( formset . is_valid ( ) , True ) formset . save ( ) self . assertEqual ( Poem . objects . count ( ) , 0 ) def test_save_new ( self ) : ChildFormSet = inlineformset_factory ( School , Child , exclude = [ 'father' , 'mother' ] ) school = School . objects . create ( name = u'test' ) mother = Parent . objects . create ( name = u'mother' ) father = Parent . objects . create ( name = u'father' ) data = { : u'1' , : u'0' , : u'0' , : u'child' , } formset = ChildFormSet ( data , instance = school ) self . assertEqual ( formset . is_valid ( ) , True ) objects = formset . save ( commit = False ) for obj in objects : obj . mother = mother obj . father = father obj . save ( ) self . assertEqual ( school . child_set . count ( ) , 1 ) class InlineFormsetFactoryTest ( TestCase ) : def test_inline_formset_factory ( self ) : inlineformset_factory ( Parent , Child , fk_name = 'mother' ) inlineformset_factory ( Parent , Child , fk_name = 'father' ) def test_exception_on_unspecified_foreign_key ( self ) : self . assertRaisesRegexp ( Exception , , inlineformset_factory , Parent , Child ) def test_fk_name_not_foreign_key_field_from_child ( self ) : self . assertRaises ( Exception , , inlineformset_factory , Parent , Child , fk_name = 'school' ) def test_non_foreign_key_field ( self ) : self . assertRaisesRegexp ( Exception , , inlineformset_factory , Parent , Child , fk_name = 'test' ) def test_any_iterable_allowed_as_argument_to_exclude ( self ) : inlineformset_factory ( Parent , Child , exclude = [ 'school' ] , fk_name = 'mother' ) inlineformset_factory ( Parent , Child , exclude = ( 'school' , ) , fk_name = 'mother' )
