import sys import time from django . db . backends . creation import BaseDatabaseCreation TEST_DATABASE_PREFIX = 'test_' PASSWORD = 'Im_a_lumberjack' class DatabaseCreation ( BaseDatabaseCreation ) : data_types = { : 'NUMBER(11)' , : 'NUMBER(1) CHECK (%(qn_column)s IN (0,1))' , : 'NVARCHAR2(%(max_length)s)' , : 'VARCHAR2(%(max_length)s)' , : 'DATE' , : 'TIMESTAMP' , : 'NUMBER(%(max_digits)s, %(decimal_places)s)' , : 'NVARCHAR2(%(max_length)s)' , : 'NVARCHAR2(%(max_length)s)' , : 'DOUBLE PRECISION' , : 'NUMBER(11)' , : 'NUMBER(19)' , : 'VARCHAR2(15)' , : 'VARCHAR2(39)' , : 'NUMBER(1) CHECK ((%(qn_column)s IN (0,1)) OR (%(qn_column)s IS NULL))' , : 'NUMBER(11)' , : 'NUMBER(11) CHECK (%(qn_column)s >= 0)' , : 'NUMBER(11) CHECK (%(qn_column)s >= 0)' , : 'NVARCHAR2(%(max_length)s)' , : 'NUMBER(11)' , : 'NCLOB' , : 'TIMESTAMP' , : 'VARCHAR2(%(max_length)s)' , } def __init__ ( self , connection ) : self . remember = { } super ( DatabaseCreation , self ) . __init__ ( connection ) def _create_test_db ( self , verbosity = 1 , autoclobber = False ) : TEST_NAME = self . _test_database_name ( ) TEST_USER = self . _test_database_user ( ) TEST_PASSWD = self . _test_database_passwd ( ) TEST_TBLSPACE = self . _test_database_tblspace ( ) TEST_TBLSPACE_TMP = self . _test_database_tblspace_tmp ( ) parameters = { : TEST_NAME , : TEST_USER , : TEST_PASSWD , : TEST_TBLSPACE , : TEST_TBLSPACE_TMP , } self . remember [ 'user' ] = self . connection . settings_dict [ 'USER' ] self . remember [ 'passwd' ] = self . connection . settings_dict [ 'PASSWORD' ] cursor = self . connection . cursor ( ) if self . _test_database_create ( ) : try : self . _execute_test_db_creation ( cursor , parameters , verbosity ) except Exception , e : sys . stderr . write ( "Got an error creating the test database: %s\n" % e ) if not autoclobber : confirm = raw_input ( "It appears the test database, %s, already exists. Type 'yes' to delete it, or 'no' to cancel: " % TEST_NAME ) if autoclobber or confirm == 'yes' : try : if verbosity >= 1 : print "Destroying old test database '%s'..." % self . connection . alias self . _execute_test_db_destruction ( cursor , parameters , verbosity ) self . _execute_test_db_creation ( cursor , parameters , verbosity ) except Exception , e : sys . stderr . write ( "Got an error recreating the test database: %s\n" % e ) sys . exit ( 2 ) else : print "Tests cancelled." sys . exit ( 1 ) if self . _test_user_create ( ) : if verbosity >= 1 : print "Creating test user..." try : self . _create_test_user ( cursor , parameters , verbosity ) except Exception , e : sys . stderr . write ( "Got an error creating the test user: %s\n" % e ) if not autoclobber : confirm = raw_input ( "It appears the test user, %s, already exists. Type 'yes' to delete it, or 'no' to cancel: " % TEST_USER ) if autoclobber or confirm == 'yes' : try : if verbosity >= 1 : print "Destroying old test user..." self . _destroy_test_user ( cursor , parameters , verbosity ) if verbosity >= 1 : print "Creating test user..." self . _create_test_user ( cursor , parameters , verbosity ) except Exception , e : sys . stderr . write ( "Got an error recreating the test user: %s\n" % e ) sys . exit ( 2 ) else : print "Tests cancelled." sys . exit ( 1 ) self . connection . settings_dict [ 'TEST_USER' ] = self . connection . settings_dict [ "USER" ] = TEST_USER self . connection . settings_dict [ "PASSWORD" ] = TEST_PASSWD return self . connection . settings_dict [ 'NAME' ] def _destroy_test_db ( self , test_database_name , verbosity = 1 ) : TEST_NAME = self . _test_database_name ( ) TEST_USER = self . _test_database_user ( ) TEST_PASSWD = self . _test_database_passwd ( ) TEST_TBLSPACE = self . _test_database_tblspace ( ) TEST_TBLSPACE_TMP = self . _test_database_tblspace_tmp ( ) self . connection . settings_dict [ "USER" ] = self . remember [ 'user' ] self . connection . settings_dict [ "PASSWORD" ] = self . remember [ 'passwd' ] parameters = { : TEST_NAME , : TEST_USER , : TEST_PASSWD , : TEST_TBLSPACE , : TEST_TBLSPACE_TMP , } cursor = self . connection . cursor ( ) time . sleep ( 1 ) if self . _test_user_create ( ) : if verbosity >= 1 : print 'Destroying test user...' self . _destroy_test_user ( cursor , parameters , verbosity ) if self . _test_database_create ( ) : if verbosity >= 1 : print 'Destroying test database tables...' self . _execute_test_db_destruction ( cursor , parameters , verbosity ) self . connection . close ( ) def _execute_test_db_creation ( self , cursor , parameters , verbosity ) : if verbosity >= 2 : print "_create_test_db(): dbname = %s" % parameters [ 'dbname' ] statements = [ , , ] self . _execute_statements ( cursor , statements , parameters , verbosity ) def _create_test_user ( self , cursor , parameters , verbosity ) : if verbosity >= 2 : print "_create_test_user(): username = %s" % parameters [ 'user' ] statements = [ , , ] self . _execute_statements ( cursor , statements , parameters , verbosity ) def _execute_test_db_destruction ( self , cursor , parameters , verbosity ) : if verbosity >= 2 : print "_execute_test_db_destruction(): dbname=%s" % parameters [ 'dbname' ] statements = [ , , ] self . _execute_statements ( cursor , statements , parameters , verbosity ) def _destroy_test_user ( self , cursor , parameters , verbosity ) : if verbosity >= 2 : print "_destroy_test_user(): user=%s" % parameters [ 'user' ] print "Be patient. This can take some time..." statements = [ , ] self . _execute_statements ( cursor , statements , parameters , verbosity ) def _execute_statements ( self , cursor , statements , parameters , verbosity ) : for template in statements : stmt = template % parameters if verbosity >= 2 : print stmt try : cursor . execute ( stmt ) except Exception , err : sys . stderr . write ( "Failed (%s)\n" % ( err ) ) raise def _test_database_name ( self ) : name = TEST_DATABASE_PREFIX + self . connection . settings_dict [ 'NAME' ] try : if self . connection . settings_dict [ 'TEST_NAME' ] : name = self . connection . settings_dict [ 'TEST_NAME' ] except AttributeError : pass return name def _test_database_create ( self ) : return self . connection . settings_dict . get ( 'TEST_CREATE' , True ) def _test_user_create ( self ) : return self . connection . settings_dict . get ( 'TEST_USER_CREATE' , True ) def _test_database_user ( self ) : name = TEST_DATABASE_PREFIX + self . connection . settings_dict [ 'USER' ] try : if self . connection . settings_dict [ 'TEST_USER' ] : name = self . connection . settings_dict [ 'TEST_USER' ] except KeyError : pass return name def _test_database_passwd ( self ) : name = PASSWORD try : if self . connection . settings_dict [ 'TEST_PASSWD' ] : name = self . connection . settings_dict [ 'TEST_PASSWD' ] except KeyError : pass return name def _test_database_tblspace ( self ) : name = TEST_DATABASE_PREFIX + self . connection . settings_dict [ 'NAME' ] try : if self . connection . settings_dict [ 'TEST_TBLSPACE' ] : name = self . connection . settings_dict [ 'TEST_TBLSPACE' ] except KeyError : pass return name def _test_database_tblspace_tmp ( self ) : name = TEST_DATABASE_PREFIX + self . connection . settings_dict [ 'NAME' ] + '_temp' try : if self . connection . settings_dict [ 'TEST_TBLSPACE_TMP' ] : name = self . connection . settings_dict [ 'TEST_TBLSPACE_TMP' ] except KeyError : pass return name def _get_test_db_name ( self ) : return self . connection . settings_dict [ 'NAME' ] def test_db_signature ( self ) : settings_dict = self . connection . settings_dict return ( settings_dict [ 'HOST' ] , settings_dict [ 'PORT' ] , settings_dict [ 'ENGINE' ] , settings_dict [ 'NAME' ] , self . _test_database_user ( ) , ) def set_autocommit ( self ) : self . connection . connection . autocommit = True
