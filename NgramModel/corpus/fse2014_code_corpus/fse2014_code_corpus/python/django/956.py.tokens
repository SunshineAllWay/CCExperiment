""" Settings and configuration for Django. Values will be read from the module specified by the DJANGO_SETTINGS_MODULE environment variable, and then from django.conf.global_settings; see the global settings file for a list of all possible variables. """ import os import re import time import warnings from django . conf import global_settings from django . utils . functional import LazyObject , empty from django . utils import importlib ENVIRONMENT_VARIABLE = "DJANGO_SETTINGS_MODULE" class LazySettings ( LazyObject ) : def _setup ( self ) : try : settings_module = os . environ [ ENVIRONMENT_VARIABLE ] if not settings_module : raise KeyError except KeyError : raise ImportError ( "Settings cannot be imported, because environment variable %s is undefined." % ENVIRONMENT_VARIABLE ) self . _wrapped = Settings ( settings_module ) def configure ( self , default_settings = global_settings , ** options ) : if self . _wrapped is not empty : raise RuntimeError ( 'Settings already configured.' ) holder = UserSettingsHolder ( default_settings ) for name , value in options . items ( ) : setattr ( holder , name , value ) self . _wrapped = holder @ property def configured ( self ) : return self . _wrapped is not empty class BaseSettings ( object ) : def __setattr__ ( self , name , value ) : if name in ( "MEDIA_URL" , "STATIC_URL" ) and value and not value . endswith ( '/' ) : warnings . warn ( "If set, %s must end with a slash" % name , DeprecationWarning ) elif name == "ADMIN_MEDIA_PREFIX" : warnings . warn ( "The ADMIN_MEDIA_PREFIX setting has been removed; " , DeprecationWarning ) object . __setattr__ ( self , name , value ) class Settings ( BaseSettings ) : def __init__ ( self , settings_module ) : for setting in dir ( global_settings ) : if setting == setting . upper ( ) : setattr ( self , setting , getattr ( global_settings , setting ) ) self . SETTINGS_MODULE = settings_module try : mod = importlib . import_module ( self . SETTINGS_MODULE ) except ImportError , e : raise ImportError ( "Could not import settings '%s' (Is it on sys.path?): %s" % ( self . SETTINGS_MODULE , e ) ) tuple_settings = ( "INSTALLED_APPS" , "TEMPLATE_DIRS" ) for setting in dir ( mod ) : if setting == setting . upper ( ) : setting_value = getattr ( mod , setting ) if setting in tuple_settings and type ( setting_value ) == str : setting_value = ( setting_value , ) setattr ( self , setting , setting_value ) if hasattr ( time , 'tzset' ) and self . TIME_ZONE : zoneinfo_root = '/usr/share/zoneinfo' if ( os . path . exists ( zoneinfo_root ) and not os . path . exists ( os . path . join ( zoneinfo_root , * ( self . TIME_ZONE . split ( '/' ) ) ) ) ) : raise ValueError ( "Incorrect timezone setting: %s" % self . TIME_ZONE ) os . environ [ 'TZ' ] = self . TIME_ZONE time . tzset ( ) if self . LOGGING_CONFIG : logging_config_path , logging_config_func_name = self . LOGGING_CONFIG . rsplit ( '.' , 1 ) logging_config_module = importlib . import_module ( logging_config_path ) logging_config_func = getattr ( logging_config_module , logging_config_func_name ) compat_patch_logging_config ( self . LOGGING ) logging_config_func ( self . LOGGING ) class UserSettingsHolder ( BaseSettings ) : SETTINGS_MODULE = None def __init__ ( self , default_settings ) : self . default_settings = default_settings def __getattr__ ( self , name ) : return getattr ( self . default_settings , name ) def __dir__ ( self ) : return self . __dict__ . keys ( ) + dir ( self . default_settings ) __members__ = property ( lambda self : self . __dir__ ( ) ) settings = LazySettings ( ) def compat_patch_logging_config ( logging_config ) : if "filters" not in logging_config . get ( , { } ) . get ( , { "filters" : [ ] } ) : warnings . warn ( , PendingDeprecationWarning ) filter_name = "require_debug_false" filters = logging_config . setdefault ( "filters" , { } ) while filter_name in filters : filter_name = filter_name + "_" filters [ filter_name ] = { : "django.utils.log.RequireDebugFalse" , } logging_config [ "handlers" ] [ "mail_admins" ] [ "filters" ] = [ filter_name ]
