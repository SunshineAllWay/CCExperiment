""" PHP date() style date formatting See http://www.php.net/date for format strings Usage: >>> import datetime >>> d = datetime.datetime.now() >>> df = DateFormat(d) >>> print df.format('jS F Y H:i') 7th October 2003 11:39 >>> """ import re import time import calendar import datetime from django . utils . dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS , WEEKDAYS_ABBR from django . utils . tzinfo import LocalTimezone from django . utils . translation import ugettext as _ from django . utils . encoding import force_unicode from django . utils . timezone import is_aware , is_naive re_formatchars = re . compile ( r'(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])' ) re_escaped = re . compile ( r'\\(.)' ) class Formatter ( object ) : def format ( self , formatstr ) : pieces = [ ] for i , piece in enumerate ( re_formatchars . split ( force_unicode ( formatstr ) ) ) : if i % 2 : pieces . append ( force_unicode ( getattr ( self , piece ) ( ) ) ) elif piece : pieces . append ( re_escaped . sub ( r'\1' , piece ) ) return u'' . join ( pieces ) class TimeFormat ( Formatter ) : def __init__ ( self , t ) : self . data = t def a ( self ) : if self . data . hour > 11 : return _ ( 'p.m.' ) return _ ( 'a.m.' ) def A ( self ) : if self . data . hour > 11 : return _ ( 'PM' ) return _ ( 'AM' ) def B ( self ) : raise NotImplementedError def f ( self ) : if self . data . minute == 0 : return self . g ( ) return u'%s:%s' % ( self . g ( ) , self . i ( ) ) def g ( self ) : if self . data . hour == 0 : return 12 if self . data . hour > 12 : return self . data . hour - 12 return self . data . hour def G ( self ) : return self . data . hour def h ( self ) : return u'%02d' % self . g ( ) def H ( self ) : return u'%02d' % self . G ( ) def i ( self ) : return u'%02d' % self . data . minute def P ( self ) : if self . data . minute == 0 and self . data . hour == 0 : return _ ( 'midnight' ) if self . data . minute == 0 and self . data . hour == 12 : return _ ( 'noon' ) return u'%s %s' % ( self . f ( ) , self . a ( ) ) def s ( self ) : return u'%02d' % self . data . second def u ( self ) : return self . data . microsecond class DateFormat ( TimeFormat ) : year_days = [ None , 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 ] def __init__ ( self , dt ) : self . data = dt self . timezone = None if isinstance ( dt , datetime . datetime ) : if is_naive ( dt ) : self . timezone = LocalTimezone ( dt ) else : self . timezone = dt . tzinfo def b ( self ) : return MONTHS_3 [ self . data . month ] def c ( self ) : return self . data . isoformat ( ) def d ( self ) : return u'%02d' % self . data . day def D ( self ) : return WEEKDAYS_ABBR [ self . data . weekday ( ) ] def e ( self ) : try : if hasattr ( self . data , 'tzinfo' ) and self . data . tzinfo : return self . data . tzinfo . tzname ( self . data ) or "" except NotImplementedError : pass return "" def E ( self ) : return MONTHS_ALT [ self . data . month ] def F ( self ) : return MONTHS [ self . data . month ] def I ( self ) : if self . timezone and self . timezone . dst ( self . data ) : return u'1' else : return u'0' def j ( self ) : return self . data . day def l ( self ) : return WEEKDAYS [ self . data . weekday ( ) ] def L ( self ) : return calendar . isleap ( self . data . year ) def m ( self ) : return u'%02d' % self . data . month def M ( self ) : return MONTHS_3 [ self . data . month ] . title ( ) def n ( self ) : return self . data . month def N ( self ) : return MONTHS_AP [ self . data . month ] def o ( self ) : return self . data . isocalendar ( ) [ 0 ] def O ( self ) : seconds = self . Z ( ) sign = '-' if seconds < 0 else '+' seconds = abs ( seconds ) return u"%s%02d%02d" % ( sign , seconds // 3600 , ( seconds // 60 ) % 60 ) def r ( self ) : return self . format ( 'D, j M Y H:i:s O' ) def S ( self ) : if self . data . day in ( 11 , 12 , 13 ) : return u'th' last = self . data . day % 10 if last == 1 : return u'st' if last == 2 : return u'nd' if last == 3 : return u'rd' return u'th' def t ( self ) : return u'%02d' % calendar . monthrange ( self . data . year , self . data . month ) [ 1 ] def T ( self ) : name = self . timezone and self . timezone . tzname ( self . data ) or None if name is None : name = self . format ( 'O' ) return unicode ( name ) def U ( self ) : if isinstance ( self . data , datetime . datetime ) and is_aware ( self . data ) : return int ( calendar . timegm ( self . data . utctimetuple ( ) ) ) else : return int ( time . mktime ( self . data . timetuple ( ) ) ) def w ( self ) : return ( self . data . weekday ( ) + 1 ) % 7 def W ( self ) : week_number = None jan1_weekday = self . data . replace ( month = 1 , day = 1 ) . weekday ( ) + 1 weekday = self . data . weekday ( ) + 1 day_of_year = self . z ( ) if day_of_year <= ( 8 - jan1_weekday ) and jan1_weekday > 4 : if jan1_weekday == 5 or ( jan1_weekday == 6 and calendar . isleap ( self . data . year - 1 ) ) : week_number = 53 else : week_number = 52 else : if calendar . isleap ( self . data . year ) : i = 366 else : i = 365 if ( i - day_of_year ) < ( 4 - weekday ) : week_number = 1 else : j = day_of_year + ( 7 - weekday ) + ( jan1_weekday - 1 ) week_number = j // 7 if jan1_weekday > 4 : week_number -= 1 return week_number def y ( self ) : return unicode ( self . data . year ) [ 2 : ] def Y ( self ) : return self . data . year def z ( self ) : doy = self . year_days [ self . data . month ] + self . data . day if self . L ( ) and self . data . month > 2 : doy += 1 return doy def Z ( self ) : if not self . timezone : return 0 offset = self . timezone . utcoffset ( self . data ) return offset . days * 86400 + offset . seconds def format ( value , format_string ) : df = DateFormat ( value ) return df . format ( format_string ) def time_format ( value , format_string ) : tf = TimeFormat ( value ) return tf . format ( format_string )
