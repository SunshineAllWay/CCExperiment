from __future__ import with_statement , absolute_import from django . test import TestCase from . models import Domain , Kingdom , Phylum , Klass , Order , Family , Genus , Species class SelectRelatedTests ( TestCase ) : def create_tree ( self , stringtree ) : names = stringtree . split ( ) models = [ Domain , Kingdom , Phylum , Klass , Order , Family , Genus , Species ] assert len ( names ) == len ( models ) , ( names , models ) parent = None for name , model in zip ( names , models ) : try : obj = model . objects . get ( name = name ) except model . DoesNotExist : obj = model ( name = name ) if parent : setattr ( obj , parent . __class__ . __name__ . lower ( ) , parent ) obj . save ( ) parent = obj def create_base_data ( self ) : self . create_tree ( "Eukaryota Animalia Anthropoda Insecta Diptera Drosophilidae Drosophila melanogaster" ) self . create_tree ( "Eukaryota Animalia Chordata Mammalia Primates Hominidae Homo sapiens" ) self . create_tree ( "Eukaryota Plantae Magnoliophyta Magnoliopsida Fabales Fabaceae Pisum sativum" ) self . create_tree ( "Eukaryota Fungi Basidiomycota Homobasidiomycatae Agaricales Amanitacae Amanita muscaria" ) def setUp ( self ) : self . create_base_data ( ) def test_access_fks_without_select_related ( self ) : with self . assertNumQueries ( 8 ) : fly = Species . objects . get ( name = "melanogaster" ) domain = fly . genus . family . order . klass . phylum . kingdom . domain self . assertEqual ( domain . name , 'Eukaryota' ) def test_access_fks_with_select_related ( self ) : with self . assertNumQueries ( 1 ) : person = Species . objects . select_related ( depth = 10 ) . get ( name = "sapiens" ) domain = person . genus . family . order . klass . phylum . kingdom . domain self . assertEqual ( domain . name , 'Eukaryota' ) def test_list_without_select_related ( self ) : with self . assertNumQueries ( 9 ) : world = Species . objects . all ( ) families = [ o . genus . family . name for o in world ] self . assertEqual ( sorted ( families ) , [ , , , , ] ) def test_list_with_select_related ( self ) : with self . assertNumQueries ( 1 ) : world = Species . objects . all ( ) . select_related ( ) families = [ o . genus . family . name for o in world ] self . assertEqual ( sorted ( families ) , [ , , , , ] ) def test_depth ( self , depth = 1 , expected = 7 ) : with self . assertNumQueries ( expected ) : pea = Species . objects . select_related ( depth = depth ) . get ( name = "sativum" ) self . assertEqual ( pea . genus . family . order . klass . phylum . kingdom . domain . name , ) def test_larger_depth ( self ) : self . test_depth ( depth = 5 , expected = 3 ) def test_list_with_depth ( self ) : with self . assertNumQueries ( 5 ) : world = Species . objects . all ( ) . select_related ( depth = 2 ) orders = [ o . genus . family . order . name for o in world ] self . assertEqual ( sorted ( orders ) , [ 'Agaricales' , 'Diptera' , 'Fabales' , 'Primates' ] ) def test_select_related_with_extra ( self ) : s = Species . objects . all ( ) . select_related ( depth = 1 ) . extra ( select = { 'a' : 'select_related_species.id + 10' } ) [ 0 ] self . assertEqual ( s . id + 10 , s . a ) def test_certain_fields ( self ) : with self . assertNumQueries ( 1 ) : world = Species . objects . select_related ( 'genus__family' ) families = [ o . genus . family . name for o in world ] self . assertEqual ( sorted ( families ) , [ 'Amanitacae' , 'Drosophilidae' , 'Fabaceae' , 'Hominidae' ] ) def test_more_certain_fields ( self ) : with self . assertNumQueries ( 2 ) : world = Species . objects . filter ( genus__name = 'Amanita' ) . select_related ( 'genus__family' ) orders = [ o . genus . family . order . name for o in world ] self . assertEqual ( orders , [ u'Agaricales' ] ) def test_field_traversal ( self ) : with self . assertNumQueries ( 1 ) : s = Species . objects . all ( ) . select_related ( 'genus__family__order' ) . order_by ( 'id' ) [ 0 : 1 ] . get ( ) . genus . family . order . name self . assertEqual ( s , u'Diptera' ) def test_depth_fields_fails ( self ) : self . assertRaises ( TypeError , Species . objects . select_related , , depth = 4 )
