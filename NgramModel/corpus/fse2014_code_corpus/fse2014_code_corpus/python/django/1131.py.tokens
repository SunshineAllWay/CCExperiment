""" Tools for sending email. """ from django . conf import settings from django . core . exceptions import ImproperlyConfigured from django . utils . importlib import import_module from django . core . mail . utils import CachedDnsName , DNS_NAME from django . core . mail . message import ( EmailMessage , EmailMultiAlternatives , SafeMIMEText , SafeMIMEMultipart , DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid , BadHeaderError , forbid_multi_line_headers ) def get_connection ( backend = None , fail_silently = False , ** kwds ) : path = backend or settings . EMAIL_BACKEND try : mod_name , klass_name = path . rsplit ( '.' , 1 ) mod = import_module ( mod_name ) except ImportError , e : raise ImproperlyConfigured ( ( 'Error importing email backend module %s: "%s"' % ( mod_name , e ) ) ) try : klass = getattr ( mod , klass_name ) except AttributeError : raise ImproperlyConfigured ( ( 'Module "%s" does not define a ' % ( mod_name , klass_name ) ) ) return klass ( fail_silently = fail_silently , ** kwds ) def send_mail ( subject , message , from_email , recipient_list , fail_silently = False , auth_user = None , auth_password = None , connection = None ) : connection = connection or get_connection ( username = auth_user , password = auth_password , fail_silently = fail_silently ) return EmailMessage ( subject , message , from_email , recipient_list , connection = connection ) . send ( ) def send_mass_mail ( datatuple , fail_silently = False , auth_user = None , auth_password = None , connection = None ) : connection = connection or get_connection ( username = auth_user , password = auth_password , fail_silently = fail_silently ) messages = [ EmailMessage ( subject , message , sender , recipient ) for subject , message , sender , recipient in datatuple ] return connection . send_messages ( messages ) def mail_admins ( subject , message , fail_silently = False , connection = None , html_message = None ) : if not settings . ADMINS : return mail = EmailMultiAlternatives ( u'%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) , message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . ADMINS ] , connection = connection ) if html_message : mail . attach_alternative ( html_message , 'text/html' ) mail . send ( fail_silently = fail_silently ) def mail_managers ( subject , message , fail_silently = False , connection = None , html_message = None ) : if not settings . MANAGERS : return mail = EmailMultiAlternatives ( u'%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) , message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . MANAGERS ] , connection = connection ) if html_message : mail . attach_alternative ( html_message , 'text/html' ) mail . send ( fail_silently = fail_silently )
