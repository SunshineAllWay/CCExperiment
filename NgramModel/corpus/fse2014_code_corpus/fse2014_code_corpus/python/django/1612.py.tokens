import os from django . conf import settings from django . contrib . auth . models import AnonymousUser , User from django . template import Template , Context , TemplateSyntaxError from django . test import TestCase class FlatpageTemplateTagTests ( TestCase ) : fixtures = [ 'sample_flatpages' ] urls = 'django.contrib.flatpages.tests.urls' def setUp ( self ) : self . old_MIDDLEWARE_CLASSES = settings . MIDDLEWARE_CLASSES flatpage_middleware_class = 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware' if flatpage_middleware_class not in settings . MIDDLEWARE_CLASSES : settings . MIDDLEWARE_CLASSES += ( flatpage_middleware_class , ) self . old_TEMPLATE_DIRS = settings . TEMPLATE_DIRS settings . TEMPLATE_DIRS = ( os . path . join ( os . path . dirname ( __file__ ) , ) , ) self . me = User . objects . create_user ( 'testuser' , 'test@example.com' , 's3krit' ) def tearDown ( self ) : settings . MIDDLEWARE_CLASSES = self . old_MIDDLEWARE_CLASSES settings . TEMPLATE_DIRS = self . old_TEMPLATE_DIRS def test_get_flatpages_tag ( self ) : out = Template ( ) . render ( Context ( ) ) self . assertEqual ( out , "A Flatpage,A Nested Flatpage," ) def test_get_flatpages_tag_for_anon_user ( self ) : out = Template ( ) . render ( Context ( { : AnonymousUser ( ) } ) ) self . assertEqual ( out , "A Flatpage,A Nested Flatpage," ) def test_get_flatpages_tag_for_user ( self ) : out = Template ( ) . render ( Context ( { : self . me } ) ) self . assertEqual ( out , "A Flatpage,A Nested Flatpage,Sekrit Nested Flatpage,Sekrit Flatpage," ) def test_get_flatpages_with_prefix ( self ) : out = Template ( ) . render ( Context ( ) ) self . assertEqual ( out , "A Nested Flatpage," ) def test_get_flatpages_with_prefix_for_anon_user ( self ) : out = Template ( ) . render ( Context ( { : AnonymousUser ( ) } ) ) self . assertEqual ( out , "A Nested Flatpage," ) def test_get_flatpages_with_prefix_for_user ( self ) : out = Template ( ) . render ( Context ( { : self . me } ) ) self . assertEqual ( out , "A Nested Flatpage,Sekrit Nested Flatpage," ) def test_get_flatpages_with_variable_prefix ( self ) : out = Template ( ) . render ( Context ( { : '/location/' } ) ) self . assertEqual ( out , "A Nested Flatpage," ) def test_parsing_errors ( self ) : render = lambda t : Template ( t ) . render ( Context ( ) ) self . assertRaises ( TemplateSyntaxError , render , ) self . assertRaises ( TemplateSyntaxError , render , ) self . assertRaises ( TemplateSyntaxError , render , ) self . assertRaises ( TemplateSyntaxError , render , ) self . assertRaises ( TemplateSyntaxError , render , ) self . assertRaises ( TemplateSyntaxError , render , ) self . assertRaises ( TemplateSyntaxError , render , )
