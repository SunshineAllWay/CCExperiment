""" Management utility to create superusers. """ import getpass import re import sys from optparse import make_option from django . contrib . auth . models import User from django . contrib . auth . management import get_default_username from django . core import exceptions from django . core . management . base import BaseCommand , CommandError from django . utils . translation import ugettext as _ RE_VALID_USERNAME = re . compile ( '[\w.@+-]+$' ) EMAIL_RE = re . compile ( , re . IGNORECASE ) def is_valid_email ( value ) : if not EMAIL_RE . search ( value ) : raise exceptions . ValidationError ( _ ( 'Enter a valid e-mail address.' ) ) class Command ( BaseCommand ) : option_list = BaseCommand . option_list + ( make_option ( '--username' , dest = 'username' , default = None , help = 'Specifies the username for the superuser.' ) , make_option ( '--email' , dest = 'email' , default = None , help = 'Specifies the email address for the superuser.' ) , make_option ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True , help = ( 'Tells Django to NOT prompt the user for input of any kind. ' ) ) , ) help = 'Used to create a superuser.' def handle ( self , * args , ** options ) : username = options . get ( 'username' , None ) email = options . get ( 'email' , None ) interactive = options . get ( 'interactive' ) verbosity = int ( options . get ( 'verbosity' , 1 ) ) if not interactive : if not username or not email : raise CommandError ( "You must use --username and --email with --noinput." ) if not RE_VALID_USERNAME . match ( username ) : raise CommandError ( "Invalid username. Use only letters, digits, and underscores" ) try : is_valid_email ( email ) except exceptions . ValidationError : raise CommandError ( "Invalid email address." ) password = None if interactive : default_username = get_default_username ( ) try : while 1 : if not username : input_msg = 'Username' if default_username : input_msg += ' (leave blank to use %r)' % default_username username = raw_input ( input_msg + ': ' ) if default_username and username == '' : username = default_username if not RE_VALID_USERNAME . match ( username ) : sys . stderr . write ( "Error: That username is invalid. Use only letters, digits and underscores.\n" ) username = None continue try : User . objects . get ( username = username ) except User . DoesNotExist : break else : sys . stderr . write ( "Error: That username is already taken.\n" ) username = None while 1 : if not email : email = raw_input ( 'E-mail address: ' ) try : is_valid_email ( email ) except exceptions . ValidationError : sys . stderr . write ( "Error: That e-mail address is invalid.\n" ) email = None else : break while 1 : if not password : password = getpass . getpass ( ) password2 = getpass . getpass ( 'Password (again): ' ) if password != password2 : sys . stderr . write ( "Error: Your passwords didn't match.\n" ) password = None continue if password . strip ( ) == '' : sys . stderr . write ( "Error: Blank passwords aren't allowed.\n" ) password = None continue break except KeyboardInterrupt : sys . stderr . write ( "\nOperation cancelled.\n" ) sys . exit ( 1 ) User . objects . create_superuser ( username , email , password ) if verbosity >= 1 : self . stdout . write ( "Superuser created successfully.\n" )
