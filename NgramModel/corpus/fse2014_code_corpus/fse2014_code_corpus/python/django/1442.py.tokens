import os import re import warnings from django import http from django . conf import settings from django . contrib . formtools import preview , utils from django . contrib . formtools . wizard import FormWizard from django . test import TestCase from django . test . utils import get_warnings_state , restore_warnings_state from django . utils import unittest from django . contrib . formtools . tests . wizard import * from django . contrib . formtools . tests . forms import * warnings . filterwarnings ( 'ignore' , category = PendingDeprecationWarning , module = 'django.contrib.formtools.wizard' ) success_string = "Done was called!" class TestFormPreview ( preview . FormPreview ) : def get_context ( self , request , form ) : context = super ( TestFormPreview , self ) . get_context ( request , form ) context . update ( { 'custom_context' : True } ) return context def get_initial ( self , request ) : return { 'field1' : 'Works!' } def done ( self , request , cleaned_data ) : return http . HttpResponse ( success_string ) class FormToolsTestCase ( TestCase ) : def setUp ( self ) : self . old_TEMPLATE_DIRS = settings . TEMPLATE_DIRS settings . TEMPLATE_DIRS = list ( settings . TEMPLATE_DIRS ) + [ os . path . join ( os . path . dirname ( __file__ ) , 'templates' ) ] def tearDown ( self ) : settings . TEMPLATE_DIRS = self . old_TEMPLATE_DIRS class PreviewTests ( FormToolsTestCase ) : urls = 'django.contrib.formtools.tests.urls' def setUp ( self ) : super ( PreviewTests , self ) . setUp ( ) self . save_warnings_state ( ) warnings . filterwarnings ( 'ignore' , category = DeprecationWarning , module = 'django.contrib.formtools.utils' ) self . preview = preview . FormPreview ( TestForm ) input_template = '<input type="hidden" name="%s" value="%s" />' self . input = input_template % ( self . preview . unused_name ( 'stage' ) , "%d" ) self . test_data = { 'field1' : u'foo' , 'field1_' : u'asdf' } def tearDown ( self ) : super ( PreviewTests , self ) . tearDown ( ) self . restore_warnings_state ( ) def test_unused_name ( self ) : self . assertEqual ( self . preview . unused_name ( 'field1' ) , 'field1__' ) def test_form_get ( self ) : response = self . client . get ( '/preview/' ) stage = self . input % 1 self . assertContains ( response , stage , 1 ) self . assertEqual ( response . context [ 'custom_context' ] , True ) self . assertEqual ( response . context [ 'form' ] . initial , { 'field1' : 'Works!' } ) def test_form_preview ( self ) : self . test_data . update ( { 'stage' : 1 } ) response = self . client . post ( '/preview/' , self . test_data ) stage = self . input % 2 self . assertContains ( response , stage , 1 ) def test_form_submit ( self ) : self . test_data . update ( { 'stage' : 2 } ) response = self . client . post ( '/preview/' , self . test_data ) self . assertNotEqual ( response . content , success_string ) hash = self . preview . security_hash ( None , TestForm ( self . test_data ) ) self . test_data . update ( { 'hash' : hash } ) response = self . client . post ( '/preview/' , self . test_data ) self . assertEqual ( response . content , success_string ) def test_bool_submit ( self ) : self . test_data . update ( { 'stage' : 2 } ) hash = self . preview . security_hash ( None , TestForm ( self . test_data ) ) self . test_data . update ( { 'hash' : hash , 'bool1' : u'False' } ) response = self . client . post ( '/preview/' , self . test_data ) self . assertEqual ( response . content , success_string ) def test_form_submit_good_hash ( self ) : self . test_data . update ( { 'stage' : 2 } ) response = self . client . post ( '/preview/' , self . test_data ) self . assertNotEqual ( response . content , success_string ) hash = utils . form_hmac ( TestForm ( self . test_data ) ) self . test_data . update ( { 'hash' : hash } ) response = self . client . post ( '/preview/' , self . test_data ) self . assertEqual ( response . content , success_string ) def test_form_submit_bad_hash ( self ) : self . test_data . update ( { 'stage' : 2 } ) response = self . client . post ( '/preview/' , self . test_data ) self . assertEqual ( response . status_code , 200 ) self . assertNotEqual ( response . content , success_string ) hash = utils . form_hmac ( TestForm ( self . test_data ) ) + "bad" self . test_data . update ( { 'hash' : hash } ) response = self . client . post ( '/previewpreview/' , self . test_data ) self . assertNotEqual ( response . content , success_string ) class SecurityHashTests ( unittest . TestCase ) : def setUp ( self ) : self . _warnings_state = get_warnings_state ( ) warnings . filterwarnings ( 'ignore' , category = DeprecationWarning , module = 'django.contrib.formtools.utils' ) def tearDown ( self ) : restore_warnings_state ( self . _warnings_state ) def test_textfield_hash ( self ) : f1 = HashTestForm ( { 'name' : 'joe' , 'bio' : 'Nothing notable.' } ) f2 = HashTestForm ( { 'name' : ' joe' , 'bio' : 'Nothing notable. ' } ) hash1 = utils . security_hash ( None , f1 ) hash2 = utils . security_hash ( None , f2 ) self . assertEqual ( hash1 , hash2 ) def test_empty_permitted ( self ) : f1 = HashTestBlankForm ( { } ) f2 = HashTestForm ( { } , empty_permitted = True ) hash1 = utils . security_hash ( None , f1 ) hash2 = utils . security_hash ( None , f2 ) self . assertEqual ( hash1 , hash2 ) class FormHmacTests ( unittest . TestCase ) : def test_textfield_hash ( self ) : f1 = HashTestForm ( { 'name' : 'joe' , 'bio' : 'Nothing notable.' } ) f2 = HashTestForm ( { 'name' : ' joe' , 'bio' : 'Nothing notable. ' } ) hash1 = utils . form_hmac ( f1 ) hash2 = utils . form_hmac ( f2 ) self . assertEqual ( hash1 , hash2 ) def test_empty_permitted ( self ) : f1 = HashTestBlankForm ( { } ) f2 = HashTestForm ( { } , empty_permitted = True ) hash1 = utils . form_hmac ( f1 ) hash2 = utils . form_hmac ( f2 ) self . assertEqual ( hash1 , hash2 ) class TestWizardClass ( FormWizard ) : def get_template ( self , step ) : return 'forms/wizard.html' def done ( self , request , cleaned_data ) : return http . HttpResponse ( success_string ) class DummyRequest ( http . HttpRequest ) : def __init__ ( self , POST = None ) : super ( DummyRequest , self ) . __init__ ( ) self . method = POST and "POST" or "GET" if POST is not None : self . POST . update ( POST ) self . _dont_enforce_csrf_checks = True class WizardTests ( FormToolsTestCase ) : urls = 'django.contrib.formtools.tests.urls' input_re = re . compile ( 'name="([^"]+)" value="([^"]+)"' ) wizard_step_data = ( { : 'Pony' , : '2' , } , { : '123 Main St' , : 'Djangoland' , } , { : 'blah blah' , } ) def setUp ( self ) : super ( WizardTests , self ) . setUp ( ) self . old_SECRET_KEY = settings . SECRET_KEY settings . SECRET_KEY = "123" def tearDown ( self ) : super ( WizardTests , self ) . tearDown ( ) settings . SECRET_KEY = self . old_SECRET_KEY def test_step_starts_at_zero ( self ) : response = self . client . get ( '/wizard1/' ) self . assertEqual ( 0 , response . context [ 'step0' ] ) def test_step_increments ( self ) : response = self . client . post ( '/wizard1/' , { "0-field" : "test" , "wizard_step" : "0" } ) self . assertEqual ( 1 , response . context [ 'step0' ] ) def test_bad_hash ( self ) : response = self . client . post ( '/wizard1/' , { "0-field" : "test" , : "test2" , : "1" } ) self . assertEqual ( 0 , response . context [ 'step0' ] ) def test_good_hash ( self ) : data = { "0-field" : "test" , : "test2" , : "7e9cea465f6a10a6fb47fcea65cb9a76350c9a5c" , : "1" } response = self . client . post ( '/wizard1/' , data ) self . assertEqual ( 2 , response . context [ 'step0' ] ) def test_11726 ( self ) : reached = [ False ] that = self class WizardWithProcessStep ( TestWizardClass ) : def process_step ( self , request , form , step ) : if step == 0 : if self . num_steps ( ) < 2 : self . form_list . append ( WizardPageTwoForm ) if step == 1 : that . assertTrue ( isinstance ( form , WizardPageTwoForm ) ) reached [ 0 ] = True wizard = WizardWithProcessStep ( [ WizardPageOneForm ] ) data = { "0-field" : "test" , : "test2" , : "7e9cea465f6a10a6fb47fcea65cb9a76350c9a5c" , : "1" } wizard ( DummyRequest ( POST = data ) ) self . assertTrue ( reached [ 0 ] ) data = { "0-field" : "test" , : "test2" , : "7e9cea465f6a10a6fb47fcea65cb9a76350c9a5c" , : "d5b434e3934cc92fee4bd2964c4ebc06f81d362d" , : "2" } self . assertRaises ( http . Http404 , wizard , DummyRequest ( POST = data ) ) def test_14498 ( self ) : reached = [ False ] that = self class WizardWithProcessStep ( TestWizardClass ) : def process_step ( self , request , form , step ) : that . assertTrue ( hasattr ( form , 'cleaned_data' ) ) reached [ 0 ] = True wizard = WizardWithProcessStep ( [ WizardPageOneForm , WizardPageTwoForm , WizardPageThreeForm ] ) data = { "0-field" : "test" , : "test2" , : "7e9cea465f6a10a6fb47fcea65cb9a76350c9a5c" , : "1" } wizard ( DummyRequest ( POST = data ) ) self . assertTrue ( reached [ 0 ] ) def test_14576 ( self ) : reached = [ False ] that = self class Wizard ( TestWizardClass ) : def done ( self , request , form_list ) : reached [ 0 ] = True that . assertTrue ( len ( form_list ) == 2 ) wizard = Wizard ( [ WizardPageOneForm , WizardPageTwoForm ] ) data = { "0-field" : "test" , : "test2" , : "7e9cea465f6a10a6fb47fcea65cb9a76350c9a5c" , : "1" } wizard ( DummyRequest ( POST = data ) ) self . assertTrue ( reached [ 0 ] ) def test_15075 ( self ) : reached = [ False ] that = self class WizardWithProcessStep ( TestWizardClass ) : def process_step ( self , request , form , step ) : if step == 0 : self . form_list [ 1 ] = WizardPageTwoAlternativeForm if step == 1 : that . assertTrue ( isinstance ( form , WizardPageTwoAlternativeForm ) ) reached [ 0 ] = True wizard = WizardWithProcessStep ( [ WizardPageOneForm , WizardPageTwoForm , WizardPageThreeForm ] ) data = { "0-field" : "test" , : "test2" , : "7e9cea465f6a10a6fb47fcea65cb9a76350c9a5c" , : "1" } wizard ( DummyRequest ( POST = data ) ) self . assertTrue ( reached [ 0 ] ) def grab_field_data ( self , response ) : previous_fields = response . context [ 'previous_fields' ] fields = { 'wizard_step' : response . context [ 'step0' ] } def grab ( m ) : fields [ m . group ( 1 ) ] = m . group ( 2 ) return '' self . input_re . sub ( grab , previous_fields ) return fields def check_wizard_step ( self , response , step_no ) : step_count = len ( self . wizard_step_data ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , 'Step %d of %d' % ( step_no , step_count ) ) data = self . grab_field_data ( response ) data . update ( self . wizard_step_data [ step_no - 1 ] ) return self . client . post ( '/wizard2/' , data ) def test_9473 ( self ) : response = self . client . get ( '/wizard2/' ) for step_no in range ( 1 , len ( self . wizard_step_data ) + 1 ) : response = self . check_wizard_step ( response , step_no )
