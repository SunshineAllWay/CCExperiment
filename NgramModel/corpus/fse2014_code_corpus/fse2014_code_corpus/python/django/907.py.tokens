from django . template import loader , RequestContext from django . http import HttpResponse , HttpResponseRedirect , HttpResponsePermanentRedirect , HttpResponseGone from django . utils . log import getLogger import warnings warnings . warn ( , DeprecationWarning ) logger = getLogger ( 'django.request' ) def direct_to_template ( request , template , extra_context = None , mimetype = None , ** kwargs ) : if extra_context is None : extra_context = { } dictionary = { 'params' : kwargs } for key , value in extra_context . items ( ) : if callable ( value ) : dictionary [ key ] = value ( ) else : dictionary [ key ] = value c = RequestContext ( request , dictionary ) t = loader . get_template ( template ) return HttpResponse ( t . render ( c ) , content_type = mimetype ) def redirect_to ( request , url , permanent = True , query_string = False , ** kwargs ) : args = request . META . get ( 'QUERY_STRING' , '' ) if url is not None : if kwargs : url = url % kwargs if args and query_string : url = "%s?%s" % ( url , args ) klass = permanent and HttpResponsePermanentRedirect or HttpResponseRedirect return klass ( url ) else : logger . warning ( 'Gone: %s' , request . path , extra = { : 410 , : request } ) return HttpResponseGone ( )
