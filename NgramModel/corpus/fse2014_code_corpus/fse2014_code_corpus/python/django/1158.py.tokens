import os from django . core . management . base import NoArgsCommand from optparse import make_option class Command ( NoArgsCommand ) : option_list = NoArgsCommand . option_list + ( make_option ( '--plain' , action = 'store_true' , dest = 'plain' , help = 'Tells Django to use plain Python, not IPython.' ) , ) help = "Runs a Python interactive interpreter. Tries to use IPython, if it's available." shells = [ 'ipython' , 'bpython' ] requires_model_validation = False def ipython ( self ) : try : from IPython import embed embed ( ) except ImportError : try : from IPython . Shell import IPShell shell = IPShell ( argv = [ ] ) shell . mainloop ( ) except ImportError : raise def bpython ( self ) : import bpython bpython . embed ( ) def run_shell ( self ) : for shell in self . shells : try : return getattr ( self , shell ) ( ) except ImportError : pass raise ImportError def handle_noargs ( self , ** options ) : from django . db . models . loading import get_models get_models ( ) use_plain = options . get ( 'plain' , False ) try : if use_plain : raise ImportError self . run_shell ( ) except ImportError : import code imported_objects = { } try : import readline except ImportError : pass else : import rlcompleter readline . set_completer ( rlcompleter . Completer ( imported_objects ) . complete ) readline . parse_and_bind ( "tab:complete" ) if not use_plain : pythonrc = os . environ . get ( "PYTHONSTARTUP" ) if pythonrc and os . path . isfile ( pythonrc ) : try : execfile ( pythonrc ) except NameError : pass import user code . interact ( local = imported_objects )
