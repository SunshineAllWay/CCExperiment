""" AR-specific Form helpers. """ from __future__ import absolute_import from django . contrib . localflavor . ar . ar_provinces import PROVINCE_CHOICES from django . core . validators import EMPTY_VALUES from django . forms import ValidationError from django . forms . fields import RegexField , CharField , Select from django . utils . translation import ugettext_lazy as _ class ARProvinceSelect ( Select ) : def __init__ ( self , attrs = None ) : super ( ARProvinceSelect , self ) . __init__ ( attrs , choices = PROVINCE_CHOICES ) class ARPostalCodeField ( RegexField ) : default_error_messages = { : _ ( "Enter a postal code in the format NNNN or ANNNNAAA." ) , } def __init__ ( self , max_length = 8 , min_length = 4 , * args , ** kwargs ) : super ( ARPostalCodeField , self ) . __init__ ( r'^\d{4}$|^[A-HJ-NP-Za-hj-np-z]\d{4}\D{3}$' , max_length , min_length , * args , ** kwargs ) def clean ( self , value ) : value = super ( ARPostalCodeField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' if len ( value ) not in ( 4 , 8 ) : raise ValidationError ( self . error_messages [ 'invalid' ] ) if len ( value ) == 8 : return u'%s%s%s' % ( value [ 0 ] . upper ( ) , value [ 1 : 5 ] , value [ 5 : ] . upper ( ) ) return value class ARDNIField ( CharField ) : default_error_messages = { : _ ( "This field requires only numbers." ) , : _ ( "This field requires 7 or 8 digits." ) , } def __init__ ( self , max_length = 10 , min_length = 7 , * args , ** kwargs ) : super ( ARDNIField , self ) . __init__ ( max_length , min_length , * args , ** kwargs ) def clean ( self , value ) : value = super ( ARDNIField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' if not value . isdigit ( ) : value = value . replace ( '.' , '' ) if not value . isdigit ( ) : raise ValidationError ( self . error_messages [ 'invalid' ] ) if len ( value ) not in ( 7 , 8 ) : raise ValidationError ( self . error_messages [ 'max_digits' ] ) return value class ARCUITField ( RegexField ) : default_error_messages = { : _ ( 'Enter a valid CUIT in XX-XXXXXXXX-X or XXXXXXXXXXXX format.' ) , : _ ( "Invalid CUIT." ) , } def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) : super ( ARCUITField , self ) . __init__ ( r'^\d{2}-?\d{8}-?\d$' , max_length , min_length , * args , ** kwargs ) def clean ( self , value ) : value = super ( ARCUITField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' value , cd = self . _canon ( value ) if self . _calc_cd ( value ) != cd : raise ValidationError ( self . error_messages [ 'checksum' ] ) return self . _format ( value , cd ) def _canon ( self , cuit ) : cuit = cuit . replace ( '-' , '' ) return cuit [ : - 1 ] , cuit [ - 1 ] def _calc_cd ( self , cuit ) : mults = ( 5 , 4 , 3 , 2 , 7 , 6 , 5 , 4 , 3 , 2 ) tmp = sum ( [ m * int ( cuit [ idx ] ) for idx , m in enumerate ( mults ) ] ) return str ( 11 - tmp % 11 ) def _format ( self , cuit , check_digit = None ) : if check_digit == None : check_digit = cuit [ - 1 ] cuit = cuit [ : - 1 ] return u'%s-%s-%s' % ( cuit [ : 2 ] , cuit [ 2 : ] , check_digit )
