from django . db . backends import BaseDatabaseIntrospection class DatabaseIntrospection ( BaseDatabaseIntrospection ) : data_types_reverse = { 16 : 'BooleanField' , 20 : 'BigIntegerField' , 21 : 'SmallIntegerField' , 23 : 'IntegerField' , 25 : 'TextField' , 700 : 'FloatField' , 701 : 'FloatField' , 869 : 'GenericIPAddressField' , 1042 : 'CharField' , 1043 : 'CharField' , 1082 : 'DateField' , 1083 : 'TimeField' , 1114 : 'DateTimeField' , 1184 : 'DateTimeField' , 1266 : 'TimeField' , 1700 : 'DecimalField' , } def get_table_list ( self , cursor ) : cursor . execute ( """ SELECT c.relname FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('r', 'v', '') AND n.nspname NOT IN ('pg_catalog', 'pg_toast') AND pg_catalog.pg_table_is_visible(c.oid)""" ) return [ row [ 0 ] for row in cursor . fetchall ( ) ] def get_table_description ( self , cursor , table_name ) : cursor . execute ( """ SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = %s""" , [ table_name ] ) null_map = dict ( cursor . fetchall ( ) ) cursor . execute ( "SELECT * FROM %s LIMIT 1" % self . connection . ops . quote_name ( table_name ) ) return [ tuple ( [ item for item in line [ : 6 ] ] + [ null_map [ line [ 0 ] ] == u'YES' ] ) for line in cursor . description ] def get_relations ( self , cursor , table_name ) : cursor . execute ( """ SELECT con.conkey, con.confkey, c2.relname FROM pg_constraint con, pg_class c1, pg_class c2 WHERE c1.oid = con.conrelid AND c2.oid = con.confrelid AND c1.relname = %s AND con.contype = 'f'""" , [ table_name ] ) relations = { } for row in cursor . fetchall ( ) : relations [ row [ 0 ] [ 0 ] - 1 ] = ( row [ 1 ] [ 0 ] - 1 , row [ 2 ] ) return relations def get_indexes ( self , cursor , table_name ) : cursor . execute ( """ SELECT attr.attname, idx.indkey, idx.indisunique, idx.indisprimary FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index idx, pg_catalog.pg_attribute attr WHERE c.oid = idx.indrelid AND idx.indexrelid = c2.oid AND attr.attrelid = c.oid AND attr.attnum = idx.indkey[0] AND c.relname = %s""" , [ table_name ] ) indexes = { } for row in cursor . fetchall ( ) : if ' ' in row [ 1 ] : continue indexes [ row [ 0 ] ] = { 'primary_key' : row [ 3 ] , 'unique' : row [ 2 ] } return indexes
