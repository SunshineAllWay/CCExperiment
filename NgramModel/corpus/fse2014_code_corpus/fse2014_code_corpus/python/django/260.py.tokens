from django . forms import Form , CharField , IntegerField , ValidationError , DateField from django . forms . formsets import formset_factory , BaseFormSet from django . test import TestCase class Choice ( Form ) : choice = CharField ( ) votes = IntegerField ( ) ChoiceFormSet = formset_factory ( Choice ) class FavoriteDrinkForm ( Form ) : name = CharField ( ) class BaseFavoriteDrinksFormSet ( BaseFormSet ) : def clean ( self ) : seen_drinks = [ ] for drink in self . cleaned_data : if drink [ 'name' ] in seen_drinks : raise ValidationError ( 'You may only specify a drink once.' ) seen_drinks . append ( drink [ 'name' ] ) class EmptyFsetWontValidate ( BaseFormSet ) : def clean ( self ) : raise ValidationError ( "Clean method called" ) FavoriteDrinksFormSet = formset_factory ( FavoriteDrinkForm , formset = BaseFavoriteDrinksFormSet , extra = 3 ) class FormsFormsetTestCase ( TestCase ) : def test_basic_formset ( self ) : formset = ChoiceFormSet ( auto_id = False , prefix = 'choices' ) self . assertHTMLEqual ( str ( formset ) , """<input type="hidden" name="choices-TOTAL_FORMS" value="1" /><input type="hidden" name="choices-INITIAL_FORMS" value="0" /><input type="hidden" name="choices-MAX_NUM_FORMS" /> <tr><th>Choice:</th><td><input type="text" name="choices-0-choice" /></td></tr> <tr><th>Votes:</th><td><input type="text" name="choices-0-votes" /></td></tr>""" ) data = { : '1' , : '0' , : '0' , : 'Calexico' , : '100' , } formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( [ form . cleaned_data for form in formset . forms ] , [ { 'votes' : 100 , 'choice' : u'Calexico' } ] ) formset = ChoiceFormSet ( ) self . assertFalse ( formset . is_valid ( ) ) self . assertFalse ( formset . has_changed ( ) ) def test_formset_validation ( self ) : data = { : '1' , : '0' , : '0' , : 'Calexico' , : '' , } formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . errors , [ { 'votes' : [ u'This field is required.' ] } ] ) def test_formset_has_changed ( self ) : data = { : '1' , : '0' , : '0' , : '' , : '' , } blank_formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertFalse ( blank_formset . has_changed ( ) ) data [ 'choices-0-choice' ] = 'Calexico' invalid_formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertFalse ( invalid_formset . is_valid ( ) ) self . assertTrue ( invalid_formset . has_changed ( ) ) data [ 'choices-0-votes' ] = '100' valid_formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertTrue ( valid_formset . is_valid ( ) ) self . assertTrue ( valid_formset . has_changed ( ) ) def test_formset_initial_data ( self ) : initial = [ { 'choice' : u'Calexico' , 'votes' : 100 } ] formset = ChoiceFormSet ( initial = initial , auto_id = False , prefix = 'choices' ) form_output = [ ] for form in formset . forms : form_output . append ( form . as_ul ( ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<li>Choice: <input type="text" name="choices-0-choice" value="Calexico" /></li> <li>Votes: <input type="text" name="choices-0-votes" value="100" /></li> <li>Choice: <input type="text" name="choices-1-choice" /></li> <li>Votes: <input type="text" name="choices-1-votes" /></li>""" ) data = { : '2' , : '1' , : '0' , : 'Calexico' , : '100' , : '' , : '' , } formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( [ form . cleaned_data for form in formset . forms ] , [ { 'votes' : 100 , 'choice' : u'Calexico' } , { } ] ) def test_second_form_partially_filled ( self ) : data = { : '2' , : '1' , : '0' , : 'Calexico' , : '100' , : 'The Decemberists' , : '' , } formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . errors , [ { } , { 'votes' : [ u'This field is required.' ] } ] ) def test_delete_prefilled_data ( self ) : data = { : '2' , : '1' , : '0' , : '' , : '' , : '' , : '' , } formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . errors , [ { 'votes' : [ u'This field is required.' ] , 'choice' : [ u'This field is required.' ] } , { } ] ) def test_displaying_more_than_one_blank_form ( self ) : ChoiceFormSet = formset_factory ( Choice , extra = 3 ) formset = ChoiceFormSet ( auto_id = False , prefix = 'choices' ) form_output = [ ] for form in formset . forms : form_output . append ( form . as_ul ( ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<li>Choice: <input type="text" name="choices-0-choice" /></li> <li>Votes: <input type="text" name="choices-0-votes" /></li> <li>Choice: <input type="text" name="choices-1-choice" /></li> <li>Votes: <input type="text" name="choices-1-votes" /></li> <li>Choice: <input type="text" name="choices-2-choice" /></li> <li>Votes: <input type="text" name="choices-2-votes" /></li>""" ) data = { : '3' , : '0' , : '0' , : '' , : '' , : '' , : '' , : '' , : '' , } formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( [ form . cleaned_data for form in formset . forms ] , [ { } , { } , { } ] ) def test_single_form_completed ( self ) : data = { : '3' , : '0' , : '0' , : 'Calexico' , : '100' , : '' , : '' , : '' , : '' , } ChoiceFormSet = formset_factory ( Choice , extra = 3 ) formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( [ form . cleaned_data for form in formset . forms ] , [ { 'votes' : 100 , 'choice' : u'Calexico' } , { } , { } ] ) def test_second_form_partially_filled_2 ( self ) : data = { : '3' , : '0' , : '0' , : 'Calexico' , : '100' , : 'The Decemberists' , : '' , : '' , : '' , } ChoiceFormSet = formset_factory ( Choice , extra = 3 ) formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . errors , [ { } , { 'votes' : [ u'This field is required.' ] } , { } ] ) def test_more_initial_data ( self ) : data = { : '3' , : '0' , : '0' , : 'Calexico' , : '100' , : '' , : '' , : '' , : '' , } initial = [ { 'choice' : u'Calexico' , 'votes' : 100 } ] ChoiceFormSet = formset_factory ( Choice , extra = 3 ) formset = ChoiceFormSet ( initial = initial , auto_id = False , prefix = 'choices' ) form_output = [ ] for form in formset . forms : form_output . append ( form . as_ul ( ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<li>Choice: <input type="text" name="choices-0-choice" value="Calexico" /></li> <li>Votes: <input type="text" name="choices-0-votes" value="100" /></li> <li>Choice: <input type="text" name="choices-1-choice" /></li> <li>Votes: <input type="text" name="choices-1-votes" /></li> <li>Choice: <input type="text" name="choices-2-choice" /></li> <li>Votes: <input type="text" name="choices-2-votes" /></li> <li>Choice: <input type="text" name="choices-3-choice" /></li> <li>Votes: <input type="text" name="choices-3-votes" /></li>""" ) self . assertTrue ( formset . empty_form . empty_permitted ) self . assertHTMLEqual ( formset . empty_form . as_ul ( ) , """<li>Choice: <input type="text" name="choices-__prefix__-choice" /></li> <li>Votes: <input type="text" name="choices-__prefix__-votes" /></li>""" ) def test_formset_with_deletion ( self ) : ChoiceFormSet = formset_factory ( Choice , can_delete = True ) initial = [ { 'choice' : u'Calexico' , 'votes' : 100 } , { 'choice' : u'Fergie' , 'votes' : 900 } ] formset = ChoiceFormSet ( initial = initial , auto_id = False , prefix = 'choices' ) form_output = [ ] for form in formset . forms : form_output . append ( form . as_ul ( ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<li>Choice: <input type="text" name="choices-0-choice" value="Calexico" /></li> <li>Votes: <input type="text" name="choices-0-votes" value="100" /></li> <li>Delete: <input type="checkbox" name="choices-0-DELETE" /></li> <li>Choice: <input type="text" name="choices-1-choice" value="Fergie" /></li> <li>Votes: <input type="text" name="choices-1-votes" value="900" /></li> <li>Delete: <input type="checkbox" name="choices-1-DELETE" /></li> <li>Choice: <input type="text" name="choices-2-choice" /></li> <li>Votes: <input type="text" name="choices-2-votes" /></li> <li>Delete: <input type="checkbox" name="choices-2-DELETE" /></li>""" ) data = { : '3' , : '2' , : '0' , : 'Calexico' , : '100' , : '' , : 'Fergie' , : '900' , : 'on' , : '' , : '' , : '' , } formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( [ form . cleaned_data for form in formset . forms ] , [ { 'votes' : 100 , 'DELETE' : False , 'choice' : u'Calexico' } , { 'votes' : 900 , 'DELETE' : True , 'choice' : u'Fergie' } , { } ] ) self . assertEqual ( [ form . cleaned_data for form in formset . deleted_forms ] , [ { 'votes' : 900 , 'DELETE' : True , 'choice' : u'Fergie' } ] ) class CheckForm ( Form ) : field = IntegerField ( min_value = 100 ) data = { : '3' , : '2' , : '0' , : '200' , : '' , : '50' , : 'on' , : '' , : '' , } CheckFormSet = formset_factory ( CheckForm , can_delete = True ) formset = CheckFormSet ( data , prefix = 'check' ) self . assertTrue ( formset . is_valid ( ) ) data [ 'check-1-DELETE' ] = '' formset = CheckFormSet ( data , prefix = 'check' ) self . assertFalse ( formset . is_valid ( ) ) class Person ( Form ) : name = CharField ( ) PeopleForm = formset_factory ( form = Person , can_delete = True ) p = PeopleForm ( { 'form-0-name' : u'' , 'form-0-DELETE' : u'on' , : 1 , 'form-INITIAL_FORMS' : 1 , : 1 } ) self . assertTrue ( p . is_valid ( ) ) self . assertEqual ( len ( p . deleted_forms ) , 1 ) def test_formsets_with_ordering ( self ) : ChoiceFormSet = formset_factory ( Choice , can_order = True ) initial = [ { 'choice' : u'Calexico' , 'votes' : 100 } , { 'choice' : u'Fergie' , 'votes' : 900 } ] formset = ChoiceFormSet ( initial = initial , auto_id = False , prefix = 'choices' ) form_output = [ ] for form in formset . forms : form_output . append ( form . as_ul ( ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<li>Choice: <input type="text" name="choices-0-choice" value="Calexico" /></li> <li>Votes: <input type="text" name="choices-0-votes" value="100" /></li> <li>Order: <input type="text" name="choices-0-ORDER" value="1" /></li> <li>Choice: <input type="text" name="choices-1-choice" value="Fergie" /></li> <li>Votes: <input type="text" name="choices-1-votes" value="900" /></li> <li>Order: <input type="text" name="choices-1-ORDER" value="2" /></li> <li>Choice: <input type="text" name="choices-2-choice" /></li> <li>Votes: <input type="text" name="choices-2-votes" /></li> <li>Order: <input type="text" name="choices-2-ORDER" /></li>""" ) data = { : '3' , : '2' , : '0' , : 'Calexico' , : '100' , : '1' , : 'Fergie' , : '900' , : '2' , : 'The Decemberists' , : '500' , : '0' , } formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertTrue ( formset . is_valid ( ) ) form_output = [ ] for form in formset . ordered_forms : form_output . append ( form . cleaned_data ) self . assertEqual ( form_output , [ { 'votes' : 500 , 'ORDER' : 0 , 'choice' : u'The Decemberists' } , { 'votes' : 100 , 'ORDER' : 1 , 'choice' : u'Calexico' } , { 'votes' : 900 , 'ORDER' : 2 , 'choice' : u'Fergie' } , ] ) def test_empty_ordered_fields ( self ) : data = { : '4' , : '3' , : '0' , : 'Calexico' , : '100' , : '1' , : 'Fergie' , : '900' , : '2' , : 'The Decemberists' , : '500' , : '' , : 'Basia Bulat' , : '50' , : '' , } ChoiceFormSet = formset_factory ( Choice , can_order = True ) formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertTrue ( formset . is_valid ( ) ) form_output = [ ] for form in formset . ordered_forms : form_output . append ( form . cleaned_data ) self . assertEqual ( form_output , [ { 'votes' : 100 , 'ORDER' : 1 , 'choice' : u'Calexico' } , { 'votes' : 900 , 'ORDER' : 2 , 'choice' : u'Fergie' } , { 'votes' : 500 , 'ORDER' : None , 'choice' : u'The Decemberists' } , { 'votes' : 50 , 'ORDER' : None , 'choice' : u'Basia Bulat' } , ] ) def test_ordering_blank_fieldsets ( self ) : data = { : '3' , : '0' , : '0' , } ChoiceFormSet = formset_factory ( Choice , can_order = True ) formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertTrue ( formset . is_valid ( ) ) form_output = [ ] for form in formset . ordered_forms : form_output . append ( form . cleaned_data ) self . assertEqual ( form_output , [ ] ) def test_formset_with_ordering_and_deletion ( self ) : ChoiceFormSet = formset_factory ( Choice , can_order = True , can_delete = True ) initial = [ { 'choice' : u'Calexico' , 'votes' : 100 } , { 'choice' : u'Fergie' , 'votes' : 900 } , { 'choice' : u'The Decemberists' , 'votes' : 500 } , ] formset = ChoiceFormSet ( initial = initial , auto_id = False , prefix = 'choices' ) form_output = [ ] for form in formset . forms : form_output . append ( form . as_ul ( ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<li>Choice: <input type="text" name="choices-0-choice" value="Calexico" /></li> <li>Votes: <input type="text" name="choices-0-votes" value="100" /></li> <li>Order: <input type="text" name="choices-0-ORDER" value="1" /></li> <li>Delete: <input type="checkbox" name="choices-0-DELETE" /></li> <li>Choice: <input type="text" name="choices-1-choice" value="Fergie" /></li> <li>Votes: <input type="text" name="choices-1-votes" value="900" /></li> <li>Order: <input type="text" name="choices-1-ORDER" value="2" /></li> <li>Delete: <input type="checkbox" name="choices-1-DELETE" /></li> <li>Choice: <input type="text" name="choices-2-choice" value="The Decemberists" /></li> <li>Votes: <input type="text" name="choices-2-votes" value="500" /></li> <li>Order: <input type="text" name="choices-2-ORDER" value="3" /></li> <li>Delete: <input type="checkbox" name="choices-2-DELETE" /></li> <li>Choice: <input type="text" name="choices-3-choice" /></li> <li>Votes: <input type="text" name="choices-3-votes" /></li> <li>Order: <input type="text" name="choices-3-ORDER" /></li> <li>Delete: <input type="checkbox" name="choices-3-DELETE" /></li>""" ) data = { : '4' , : '3' , : '0' , : 'Calexico' , : '100' , : '1' , : '' , : 'Fergie' , : '900' , : '2' , : 'on' , : 'The Decemberists' , : '500' , : '0' , : '' , : '' , : '' , : '' , : '' , } formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertTrue ( formset . is_valid ( ) ) form_output = [ ] for form in formset . ordered_forms : form_output . append ( form . cleaned_data ) self . assertEqual ( form_output , [ { 'votes' : 500 , 'DELETE' : False , 'ORDER' : 0 , 'choice' : u'The Decemberists' } , { 'votes' : 100 , 'DELETE' : False , 'ORDER' : 1 , 'choice' : u'Calexico' } , ] ) self . assertEqual ( [ form . cleaned_data for form in formset . deleted_forms ] , [ { 'votes' : 900 , 'DELETE' : True , 'ORDER' : 2 , 'choice' : u'Fergie' } ] ) def test_invalid_deleted_form_with_ordering ( self ) : class Person ( Form ) : name = CharField ( ) PeopleForm = formset_factory ( form = Person , can_delete = True , can_order = True ) p = PeopleForm ( { : u'' , : u'on' , : 1 , : 1 , : 1 } ) self . assertTrue ( p . is_valid ( ) ) self . assertEqual ( p . ordered_forms , [ ] ) def test_clean_hook ( self ) : data = { : '2' , : '0' , : '0' , : 'Gin and Tonic' , : 'Gin and Tonic' , } formset = FavoriteDrinksFormSet ( data , prefix = 'drinks' ) self . assertFalse ( formset . is_valid ( ) ) for error in formset . non_form_errors ( ) : self . assertEqual ( str ( error ) , 'You may only specify a drink once.' ) data = { : '2' , : '0' , : '0' , : 'Gin and Tonic' , : 'Bloody Mary' , } formset = FavoriteDrinksFormSet ( data , prefix = 'drinks' ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( formset . non_form_errors ( ) , [ ] ) def test_limiting_max_forms ( self ) : LimitedFavoriteDrinkFormSet = formset_factory ( FavoriteDrinkForm , extra = 3 ) formset = LimitedFavoriteDrinkFormSet ( ) form_output = [ ] for form in formset . forms : form_output . append ( str ( form ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<tr><th><label for="id_form-0-name">Name:</label></th><td><input type="text" name="form-0-name" id="id_form-0-name" /></td></tr> <tr><th><label for="id_form-1-name">Name:</label></th><td><input type="text" name="form-1-name" id="id_form-1-name" /></td></tr> <tr><th><label for="id_form-2-name">Name:</label></th><td><input type="text" name="form-2-name" id="id_form-2-name" /></td></tr>""" ) LimitedFavoriteDrinkFormSet = formset_factory ( FavoriteDrinkForm , extra = 3 , max_num = 0 ) formset = LimitedFavoriteDrinkFormSet ( ) form_output = [ ] for form in formset . forms : form_output . append ( str ( form ) ) self . assertEqual ( '\n' . join ( form_output ) , "" ) LimitedFavoriteDrinkFormSet = formset_factory ( FavoriteDrinkForm , extra = 5 , max_num = 2 ) formset = LimitedFavoriteDrinkFormSet ( ) form_output = [ ] for form in formset . forms : form_output . append ( str ( form ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<tr><th><label for="id_form-0-name">Name:</label></th><td><input type="text" name="form-0-name" id="id_form-0-name" /></td></tr> <tr><th><label for="id_form-1-name">Name:</label></th><td><input type="text" name="form-1-name" id="id_form-1-name" /></td></tr>""" ) LimitedFavoriteDrinkFormSet = formset_factory ( FavoriteDrinkForm , extra = 1 , max_num = 2 ) formset = LimitedFavoriteDrinkFormSet ( ) form_output = [ ] for form in formset . forms : form_output . append ( str ( form ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<tr><th><label for="id_form-0-name">Name:</label></th><td><input type="text" name="form-0-name" id="id_form-0-name" /></td></tr>""" ) def test_max_num_with_initial_data ( self ) : initial = [ { 'name' : 'Fernet and Coke' } , ] LimitedFavoriteDrinkFormSet = formset_factory ( FavoriteDrinkForm , extra = 1 ) formset = LimitedFavoriteDrinkFormSet ( initial = initial ) form_output = [ ] for form in formset . forms : form_output . append ( str ( form ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<tr><th><label for="id_form-0-name">Name:</label></th><td><input type="text" name="form-0-name" value="Fernet and Coke" id="id_form-0-name" /></td></tr> <tr><th><label for="id_form-1-name">Name:</label></th><td><input type="text" name="form-1-name" id="id_form-1-name" /></td></tr>""" ) def test_max_num_zero ( self ) : initial = [ { 'name' : 'Fernet and Coke' } , { 'name' : 'Bloody Mary' } , ] LimitedFavoriteDrinkFormSet = formset_factory ( FavoriteDrinkForm , extra = 1 , max_num = 0 ) formset = LimitedFavoriteDrinkFormSet ( initial = initial ) form_output = [ ] for form in formset . forms : form_output . append ( str ( form ) ) self . assertEqual ( '\n' . join ( form_output ) , "" ) def test_more_initial_than_max_num ( self ) : initial = [ { 'name' : 'Gin Tonic' } , { 'name' : 'Bloody Mary' } , { 'name' : 'Jack and Coke' } , ] LimitedFavoriteDrinkFormSet = formset_factory ( FavoriteDrinkForm , extra = 1 , max_num = 2 ) formset = LimitedFavoriteDrinkFormSet ( initial = initial ) form_output = [ ] for form in formset . forms : form_output . append ( str ( form ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<tr><th><label for="id_form-0-name">Name:</label></th><td><input type="text" name="form-0-name" value="Gin Tonic" id="id_form-0-name" /></td></tr> <tr><th><label for="id_form-1-name">Name:</label></th><td><input type="text" name="form-1-name" value="Bloody Mary" id="id_form-1-name" /></td></tr>""" ) initial = [ { 'name' : 'Gin Tonic' } , ] LimitedFavoriteDrinkFormSet = formset_factory ( FavoriteDrinkForm , extra = 3 , max_num = 2 ) formset = LimitedFavoriteDrinkFormSet ( initial = initial ) form_output = [ ] for form in formset . forms : form_output . append ( str ( form ) ) self . assertHTMLEqual ( '\n' . join ( form_output ) , """<tr><th><label for="id_form-0-name">Name:</label></th><td><input type="text" name="form-0-name" value="Gin Tonic" id="id_form-0-name" /></td></tr> <tr><th><label for="id_form-1-name">Name:</label></th><td><input type="text" name="form-1-name" id="id_form-1-name" /></td></tr>""" ) def test_regression_6926 ( self ) : formset = FavoriteDrinksFormSet ( ) self . assertEqual ( formset . management_form . prefix , 'form' ) data = { : '2' , : '0' , : '0' , } formset = FavoriteDrinksFormSet ( data = data ) self . assertEqual ( formset . management_form . prefix , 'form' ) formset = FavoriteDrinksFormSet ( initial = { } ) self . assertEqual ( formset . management_form . prefix , 'form' ) def test_regression_12878 ( self ) : data = { : '2' , : '0' , : '0' , : 'Gin and Tonic' , : 'Gin and Tonic' , } formset = FavoriteDrinksFormSet ( data , prefix = 'drinks' ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . non_form_errors ( ) , [ u'You may only specify a drink once.' ] ) def test_formset_iteration ( self ) : ChoiceFormset = formset_factory ( Choice , extra = 3 ) formset = ChoiceFormset ( ) forms = list ( formset ) self . assertEqual ( forms , formset . forms ) self . assertEqual ( len ( formset ) , len ( forms ) ) self . assertEqual ( formset [ 0 ] , forms [ 0 ] ) try : formset [ 3 ] self . fail ( 'Requesting an invalid formset index should raise an exception' ) except IndexError : pass class BaseReverseFormSet ( BaseFormSet ) : def __iter__ ( self ) : return reversed ( self . forms ) def __getitem__ ( self , idx ) : return super ( BaseReverseFormSet , self ) . __getitem__ ( len ( self ) - idx - 1 ) ReverseChoiceFormset = formset_factory ( Choice , BaseReverseFormSet , extra = 3 ) reverse_formset = ReverseChoiceFormset ( ) self . assertEqual ( str ( reverse_formset [ 0 ] ) , str ( forms [ - 1 ] ) ) self . assertEqual ( str ( reverse_formset [ 1 ] ) , str ( forms [ - 2 ] ) ) self . assertEqual ( len ( reverse_formset ) , len ( forms ) ) def test_formset_nonzero ( self ) : ChoiceFormset = formset_factory ( Choice , extra = 0 ) formset = ChoiceFormset ( ) self . assertEqual ( len ( formset . forms ) , 0 ) self . assertTrue ( formset ) data = { : '1' , : '0' , : '0' , : 'Calexico' , : '100' , } class Choice ( Form ) : choice = CharField ( ) votes = IntegerField ( ) ChoiceFormSet = formset_factory ( Choice ) class FormsetAsFooTests ( TestCase ) : def test_as_table ( self ) : formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertHTMLEqual ( formset . as_table ( ) , """<input type="hidden" name="choices-TOTAL_FORMS" value="1" /><input type="hidden" name="choices-INITIAL_FORMS" value="0" /><input type="hidden" name="choices-MAX_NUM_FORMS" value="0" /> <tr><th>Choice:</th><td><input type="text" name="choices-0-choice" value="Calexico" /></td></tr> <tr><th>Votes:</th><td><input type="text" name="choices-0-votes" value="100" /></td></tr>""" ) def test_as_p ( self ) : formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertHTMLEqual ( formset . as_p ( ) , """<input type="hidden" name="choices-TOTAL_FORMS" value="1" /><input type="hidden" name="choices-INITIAL_FORMS" value="0" /><input type="hidden" name="choices-MAX_NUM_FORMS" value="0" /> <p>Choice: <input type="text" name="choices-0-choice" value="Calexico" /></p> <p>Votes: <input type="text" name="choices-0-votes" value="100" /></p>""" ) def test_as_ul ( self ) : formset = ChoiceFormSet ( data , auto_id = False , prefix = 'choices' ) self . assertHTMLEqual ( formset . as_ul ( ) , """<input type="hidden" name="choices-TOTAL_FORMS" value="1" /><input type="hidden" name="choices-INITIAL_FORMS" value="0" /><input type="hidden" name="choices-MAX_NUM_FORMS" value="0" /> <li>Choice: <input type="text" name="choices-0-choice" value="Calexico" /></li> <li>Votes: <input type="text" name="choices-0-votes" value="100" /></li>""" ) class ArticleForm ( Form ) : title = CharField ( ) pub_date = DateField ( ) ArticleFormSet = formset_factory ( ArticleForm ) class TestIsBoundBehavior ( TestCase ) : def test_no_data_raises_validation_error ( self ) : self . assertRaises ( ValidationError , ArticleFormSet , { } ) def test_with_management_data_attrs_work_fine ( self ) : data = { : u'1' , : u'0' , } formset = ArticleFormSet ( data ) self . assertEqual ( 0 , formset . initial_form_count ( ) ) self . assertEqual ( 1 , formset . total_form_count ( ) ) self . assertTrue ( formset . is_bound ) self . assertTrue ( formset . forms [ 0 ] . is_bound ) self . assertTrue ( formset . is_valid ( ) ) self . assertTrue ( formset . forms [ 0 ] . is_valid ( ) ) self . assertEqual ( [ { } ] , formset . cleaned_data ) def test_form_errors_are_cought_by_formset ( self ) : data = { : u'2' , : u'0' , : u'Test' , : u'1904-06-16' , : u'Test' , : u'' , } formset = ArticleFormSet ( data ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( [ { } , { 'pub_date' : [ u'This field is required.' ] } ] , formset . errors ) def test_empty_forms_are_unbound ( self ) : data = { : u'1' , : u'0' , : u'Test' , : u'1904-06-16' , } unbound_formset = ArticleFormSet ( ) bound_formset = ArticleFormSet ( data ) empty_forms = [ ] empty_forms . append ( unbound_formset . empty_form ) empty_forms . append ( bound_formset . empty_form ) self . assertFalse ( empty_forms [ 0 ] . is_bound ) self . assertFalse ( empty_forms [ 1 ] . is_bound ) self . assertHTMLEqual ( empty_forms [ 0 ] . as_p ( ) , empty_forms [ 1 ] . as_p ( ) ) class TestEmptyFormSet ( TestCase ) : def test_empty_formset_is_valid ( self ) : EmptyFsetWontValidateFormset = formset_factory ( FavoriteDrinkForm , extra = 0 , formset = EmptyFsetWontValidate ) formset = EmptyFsetWontValidateFormset ( data = { 'form-INITIAL_FORMS' : '0' , 'form-TOTAL_FORMS' : '0' } , prefix = "form" ) formset2 = EmptyFsetWontValidateFormset ( data = { 'form-INITIAL_FORMS' : '0' , 'form-TOTAL_FORMS' : '1' , 'form-0-name' : 'bah' } , prefix = "form" ) self . assertFalse ( formset . is_valid ( ) ) self . assertFalse ( formset2 . is_valid ( ) )
