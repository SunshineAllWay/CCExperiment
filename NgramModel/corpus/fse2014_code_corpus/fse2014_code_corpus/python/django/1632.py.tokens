""" Tests for geography support in PostGIS 1.5+ """ from __future__ import absolute_import import os from django . contrib . gis import gdal from django . contrib . gis . measure import D from django . test import TestCase from . models import City , County , Zipcode class GeographyTest ( TestCase ) : def test01_fixture_load ( self ) : self . assertEqual ( 8 , City . objects . count ( ) ) def test02_distance_lookup ( self ) : z = Zipcode . objects . get ( code = '77002' ) cities1 = list ( City . objects . filter ( point__distance_lte = ( z . poly , D ( mi = 500 ) ) ) . order_by ( 'name' ) . values_list ( 'name' , flat = True ) ) cities2 = list ( City . objects . filter ( point__dwithin = ( z . poly , D ( mi = 500 ) ) ) . order_by ( 'name' ) . values_list ( 'name' , flat = True ) ) for cities in [ cities1 , cities2 ] : self . assertEqual ( [ 'Dallas' , 'Houston' , 'Oklahoma City' ] , cities ) def test03_distance_method ( self ) : htown = City . objects . get ( name = 'Houston' ) qs = Zipcode . objects . distance ( htown . point ) def test04_invalid_operators_functions ( self ) : z = Zipcode . objects . get ( code = '77002' ) self . assertRaises ( ValueError , City . objects . filter ( point__within = z . poly ) . count ) self . assertRaises ( ValueError , City . objects . filter ( point__contained = z . poly ) . count ) htown = City . objects . get ( name = 'Houston' ) self . assertRaises ( ValueError , City . objects . get , point__exact = htown . point ) def test05_geography_layermapping ( self ) : if not gdal . HAS_GDAL : return from django . contrib . gis . utils import LayerMapping shp_path = os . path . realpath ( os . path . join ( os . path . dirname ( __file__ ) , '..' , 'data' ) ) co_shp = os . path . join ( shp_path , 'counties' , 'counties.shp' ) co_mapping = { 'name' : 'Name' , : 'State' , : 'MULTIPOLYGON' , } names = [ 'Bexar' , 'Galveston' , 'Harris' , 'Honolulu' , 'Pueblo' ] num_polys = [ 1 , 2 , 1 , 19 , 1 ] st_names = [ 'Texas' , 'Texas' , 'Texas' , 'Hawaii' , 'Colorado' ] lm = LayerMapping ( County , co_shp , co_mapping , source_srs = 4269 , unique = 'name' ) lm . save ( silent = True , strict = True ) for c , name , num_poly , state in zip ( County . objects . order_by ( 'name' ) , names , num_polys , st_names ) : self . assertEqual ( 4326 , c . mpoly . srid ) self . assertEqual ( num_poly , len ( c . mpoly ) ) self . assertEqual ( name , c . name ) self . assertEqual ( state , c . state ) def test06_geography_area ( self ) : ref_area = 5439084.70637573 tol = 5 z = Zipcode . objects . area ( ) . get ( code = '77002' ) self . assertAlmostEqual ( z . area . sq_m , ref_area , tol )
