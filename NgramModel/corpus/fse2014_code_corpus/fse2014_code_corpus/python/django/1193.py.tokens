""" Django's standard crypto functions and utilities. """ import hmac import struct import hashlib import binascii import operator from django . conf import settings _trans_5c = "" . join ( [ chr ( x ^ 0x5C ) for x in xrange ( 256 ) ] ) _trans_36 = "" . join ( [ chr ( x ^ 0x36 ) for x in xrange ( 256 ) ] ) def salted_hmac ( key_salt , value , secret = None ) : if secret is None : secret = settings . SECRET_KEY key = hashlib . sha1 ( key_salt + secret ) . digest ( ) return hmac . new ( key , msg = value , digestmod = hashlib . sha1 ) def get_random_string ( length = 12 , allowed_chars = 'abcdefghijklmnopqrstuvwxyz' ) : import random try : random = random . SystemRandom ( ) except NotImplementedError : pass return '' . join ( [ random . choice ( allowed_chars ) for i in range ( length ) ] ) def constant_time_compare ( val1 , val2 ) : if len ( val1 ) != len ( val2 ) : return False result = 0 for x , y in zip ( val1 , val2 ) : result |= ord ( x ) ^ ord ( y ) return result == 0 def _bin_to_long ( x ) : return long ( x . encode ( 'hex' ) , 16 ) def _long_to_bin ( x , hex_format_string ) : return binascii . unhexlify ( hex_format_string % x ) def _fast_hmac ( key , msg , digest ) : dig1 , dig2 = digest ( ) , digest ( ) if len ( key ) > dig1 . block_size : key = digest ( key ) . digest ( ) key += chr ( 0 ) * ( dig1 . block_size - len ( key ) ) dig1 . update ( key . translate ( _trans_36 ) ) dig1 . update ( msg ) dig2 . update ( key . translate ( _trans_5c ) ) dig2 . update ( dig1 . digest ( ) ) return dig2 def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) : assert iterations > 0 if not digest : digest = hashlib . sha256 hlen = digest ( ) . digest_size if not dklen : dklen = hlen if dklen > ( 2 ** 32 - 1 ) * hlen : raise OverflowError ( 'dklen too big' ) l = - ( - dklen // hlen ) r = dklen - ( l - 1 ) * hlen hex_format_string = "%%0%ix" % ( hlen * 2 ) def F ( i ) : def U ( ) : u = salt + struct . pack ( '>I' , i ) for j in xrange ( int ( iterations ) ) : u = _fast_hmac ( password , u , digest ) . digest ( ) yield _bin_to_long ( u ) return _long_to_bin ( reduce ( operator . xor , U ( ) ) , hex_format_string ) T = [ F ( x ) for x in range ( 1 , l + 1 ) ] return '' . join ( T [ : - 1 ] ) + T [ - 1 ] [ : r ]
