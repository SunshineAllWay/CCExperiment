from django import template from django . utils . unittest import TestCase class CallableVariablesTests ( TestCase ) : def test_callable ( self ) : class Doodad ( object ) : def __init__ ( self , value ) : self . num_calls = 0 self . value = value def __call__ ( self ) : self . num_calls += 1 return { "the_value" : self . value } my_doodad = Doodad ( 42 ) c = template . Context ( { "my_doodad" : my_doodad } ) t = template . Template ( '{{ my_doodad.value }}' ) self . assertEqual ( t . render ( c ) , u'' ) self . assertEqual ( my_doodad . num_calls , 1 ) t = template . Template ( '{{ my_doodad.the_value }}' ) self . assertEqual ( t . render ( c ) , u'42' ) self . assertEqual ( my_doodad . num_calls , 2 ) def test_alters_data ( self ) : class Doodad ( object ) : alters_data = True def __init__ ( self , value ) : self . num_calls = 0 self . value = value def __call__ ( self ) : self . num_calls += 1 return { "the_value" : self . value } my_doodad = Doodad ( 42 ) c = template . Context ( { "my_doodad" : my_doodad } ) t = template . Template ( '{{ my_doodad.value }}' ) self . assertEqual ( t . render ( c ) , u'' ) t = template . Template ( '{{ my_doodad.the_value }}' ) self . assertEqual ( t . render ( c ) , u'' ) self . assertEqual ( my_doodad . num_calls , 0 ) def test_do_not_call ( self ) : class Doodad ( object ) : do_not_call_in_templates = True def __init__ ( self , value ) : self . num_calls = 0 self . value = value def __call__ ( self ) : self . num_calls += 1 return { "the_value" : self . value } my_doodad = Doodad ( 42 ) c = template . Context ( { "my_doodad" : my_doodad } ) t = template . Template ( '{{ my_doodad.value }}' ) self . assertEqual ( t . render ( c ) , u'42' ) t = template . Template ( '{{ my_doodad.the_value }}' ) self . assertEqual ( t . render ( c ) , u'' ) self . assertEqual ( my_doodad . num_calls , 0 ) def test_do_not_call_and_alters_data ( self ) : class Doodad ( object ) : do_not_call_in_templates = True alters_data = True def __init__ ( self , value ) : self . num_calls = 0 self . value = value def __call__ ( self ) : self . num_calls += 1 return { "the_value" : self . value } my_doodad = Doodad ( 42 ) c = template . Context ( { "my_doodad" : my_doodad } ) t = template . Template ( '{{ my_doodad.value }}' ) self . assertEqual ( t . render ( c ) , u'42' ) t = template . Template ( '{{ my_doodad.the_value }}' ) self . assertEqual ( t . render ( c ) , u'' ) self . assertEqual ( my_doodad . num_calls , 0 )
