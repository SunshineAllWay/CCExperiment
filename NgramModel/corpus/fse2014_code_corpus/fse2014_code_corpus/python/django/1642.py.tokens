from __future__ import absolute_import from django . db import connection from django . db . models import Q from django . contrib . gis . geos import GEOSGeometry , LineString from django . contrib . gis . measure import D from django . contrib . gis . tests . utils import oracle , postgis , spatialite , no_oracle , no_spatialite from django . test import TestCase from . models import ( AustraliaCity , Interstate , SouthTexasInterstate , SouthTexasCity , SouthTexasCityFt , CensusZipcode , SouthTexasZipcode ) class DistanceTest ( TestCase ) : stx_pnt = GEOSGeometry ( 'POINT (-95.370401017314293 29.704867409475465)' , 4326 ) au_pnt = GEOSGeometry ( 'POINT (150.791 -34.4919)' , 4326 ) def get_names ( self , qs ) : cities = [ c . name for c in qs ] cities . sort ( ) return cities def test01_init ( self ) : self . assertEqual ( 9 , SouthTexasCity . objects . count ( ) ) self . assertEqual ( 9 , SouthTexasCityFt . objects . count ( ) ) self . assertEqual ( 11 , AustraliaCity . objects . count ( ) ) self . assertEqual ( 4 , SouthTexasZipcode . objects . count ( ) ) self . assertEqual ( 4 , CensusZipcode . objects . count ( ) ) self . assertEqual ( 1 , Interstate . objects . count ( ) ) self . assertEqual ( 1 , SouthTexasInterstate . objects . count ( ) ) @ no_spatialite def test02_dwithin ( self ) : tx_dists = [ ( 7000 , 22965.83 ) , D ( km = 7 ) , D ( mi = 4.349 ) ] au_dists = [ ( 0.5 , 32000 ) , D ( km = 32 ) , D ( mi = 19.884 ) ] tx_cities = [ 'Downtown Houston' , 'Southside Place' ] au_cities = [ 'Mittagong' , 'Shellharbour' , 'Thirroul' , 'Wollongong' ] for dist in tx_dists : if isinstance ( dist , tuple ) : dist1 , dist2 = dist else : dist1 = dist2 = dist qs1 = SouthTexasCity . objects . filter ( point__dwithin = ( self . stx_pnt , dist1 ) ) qs2 = SouthTexasCityFt . objects . filter ( point__dwithin = ( self . stx_pnt , dist2 ) ) for qs in qs1 , qs2 : self . assertEqual ( tx_cities , self . get_names ( qs ) ) for dist in au_dists : if isinstance ( dist , D ) and not oracle : type_error = True else : type_error = False if isinstance ( dist , tuple ) : if oracle : dist = dist [ 1 ] else : dist = dist [ 0 ] qs = AustraliaCity . objects . order_by ( 'name' ) if type_error : self . assertRaises ( ValueError , AustraliaCity . objects . filter ( point__dwithin = ( self . au_pnt , dist ) ) . count ) else : self . assertEqual ( au_cities , self . get_names ( qs . filter ( point__dwithin = ( self . au_pnt , dist ) ) ) ) def test03a_distance_method ( self ) : lagrange = GEOSGeometry ( 'POINT(-96.876369 29.905320)' , 4326 ) m_distances = [ 147075.069813 , 139630.198056 , 140888.552826 , 138809.684197 , 158309.246259 , 212183.594374 , 70870.188967 , 165337.758878 , 139196.085105 ] ft_distances = [ 482528.79154625 , 458103.408123001 , 462231.860397575 , 455411.438904354 , 519386.252102563 , 696139.009211594 , 232513.278304279 , 542445.630586414 , 456679.155883207 ] dist1 = SouthTexasCity . objects . distance ( lagrange , field_name = 'point' ) dist2 = SouthTexasCity . objects . distance ( lagrange ) if spatialite or oracle : dist_qs = [ dist1 , dist2 ] else : dist3 = SouthTexasCityFt . objects . distance ( lagrange . ewkt ) dist4 = SouthTexasCityFt . objects . distance ( lagrange ) dist_qs = [ dist1 , dist2 , dist3 , dist4 ] if oracle : tol = 2 else : tol = 5 for qs in dist_qs : for i , c in enumerate ( qs ) : self . assertAlmostEqual ( m_distances [ i ] , c . distance . m , tol ) self . assertAlmostEqual ( ft_distances [ i ] , c . distance . survey_ft , tol ) @ no_spatialite def test03b_distance_method ( self ) : if oracle : tol = 2 else : tol = 5 ls = LineString ( ( ( 150.902 , - 34.4245 ) , ( 150.87 , - 34.5789 ) ) ) if oracle or connection . ops . geography : distances = [ 1120954.92533513 , 140575.720018241 , 640396.662906304 , 60580.9693849269 , 972807.955955075 , 568451.8357838 , 40435.4335201384 , 0 , 68272.3896586844 , 12375.0643697706 , 0 ] qs = AustraliaCity . objects . distance ( ls ) . order_by ( 'name' ) for city , distance in zip ( qs , distances ) : self . assertAlmostEqual ( distance , city . distance . m , 0 ) else : self . assertRaises ( ValueError , AustraliaCity . objects . distance , ls ) self . assertRaises ( ValueError , AustraliaCity . objects . distance , ls . wkt ) if connection . ops . postgis and connection . ops . proj_version_tuple ( ) >= ( 4 , 7 , 0 ) : spheroid_distances = [ 60504.0628957201 , 77023.9489850262 , 49154.8867574404 , 90847.4358768573 , 217402.811919332 , 709599.234564757 , 640011.483550888 , 7772.00667991925 , 1047861.78619339 , 1165126.55236034 ] sphere_distances = [ 60580.9693849267 , 77144.0435286473 , 49199.4415344719 , 90804.7533823494 , 217713.384600405 , 709134.127242793 , 639828.157159169 , 7786.82949717788 , 1049204.06569028 , 1162623.7238134 ] else : spheroid_distances = [ 60504.0628825298 , 77023.948962654 , 49154.8867507115 , 90847.435881812 , 217402.811862568 , 709599.234619957 , 640011.483583758 , 7772.00667666425 , 1047861.7859506 , 1165126.55237647 ] sphere_distances = [ 60580.7612632291 , 77143.7785056615 , 49199.2725132184 , 90804.4414289463 , 217712.63666124 , 709131.691061906 , 639825.959074112 , 7786.80274606706 , 1049200.46122281 , 1162619.7297006 ] hillsdale = AustraliaCity . objects . get ( name = 'Hillsdale' ) qs = AustraliaCity . objects . exclude ( id = hillsdale . id ) . distance ( hillsdale . point , spheroid = True ) for i , c in enumerate ( qs ) : self . assertAlmostEqual ( spheroid_distances [ i ] , c . distance . m , tol ) if postgis : qs = AustraliaCity . objects . exclude ( id = hillsdale . id ) . distance ( hillsdale . point ) for i , c in enumerate ( qs ) : self . assertAlmostEqual ( sphere_distances [ i ] , c . distance . m , tol ) @ no_oracle def test03c_distance_method ( self ) : if not connection . ops . geography : self . assertRaises ( ValueError , CensusZipcode . objects . distance , self . stx_pnt ) z = SouthTexasZipcode . objects . get ( name = '77005' ) dists_m = [ 3553.30384972258 , 1243.18391525602 , 2186.15439472242 ] buf1 = z . poly . centroid . buffer ( 100 ) buf2 = buf1 . transform ( 4269 , clone = True ) ref_zips = [ '77002' , '77025' , '77401' ] for buf in [ buf1 , buf2 ] : qs = CensusZipcode . objects . exclude ( name = '77005' ) . transform ( 32140 ) . distance ( buf ) self . assertEqual ( ref_zips , self . get_names ( qs ) ) for i , z in enumerate ( qs ) : self . assertAlmostEqual ( z . distance . m , dists_m [ i ] , 5 ) def test04_distance_lookups ( self ) : qs1 = SouthTexasCity . objects . filter ( point__distance_gte = ( self . stx_pnt , D ( km = 7 ) ) ) . filter ( point__distance_lte = ( self . stx_pnt , D ( km = 20 ) ) ) if spatialite or oracle : dist_qs = ( qs1 , ) else : qs2 = SouthTexasCityFt . objects . filter ( point__distance_gte = ( self . stx_pnt , D ( km = 7 ) ) ) . filter ( point__distance_lte = ( self . stx_pnt , D ( km = 20 ) ) ) dist_qs = ( qs1 , qs2 ) for qs in dist_qs : cities = self . get_names ( qs ) self . assertEqual ( cities , [ 'Bellaire' , 'Pearland' , 'West University Place' ] ) z = SouthTexasZipcode . objects . get ( name = '77005' ) qs = SouthTexasZipcode . objects . exclude ( name = '77005' ) . filter ( poly__distance_lte = ( z . poly , D ( m = 275 ) ) ) self . assertEqual ( [ '77025' , '77401' ] , self . get_names ( qs ) ) qs = SouthTexasZipcode . objects . exclude ( name = '77005' ) . filter ( poly__distance_lte = ( z . poly , D ( m = 300 ) ) ) self . assertEqual ( [ '77002' , '77025' , '77401' ] , self . get_names ( qs ) ) def test05_geodetic_distance_lookups ( self ) : line = GEOSGeometry ( 'LINESTRING(144.9630 -37.8143,151.2607 -33.8870)' , 4326 ) dist_qs = AustraliaCity . objects . filter ( point__distance_lte = ( line , D ( km = 100 ) ) ) if oracle or connection . ops . geography : self . assertEqual ( 9 , dist_qs . count ( ) ) self . assertEqual ( [ 'Batemans Bay' , 'Canberra' , 'Hillsdale' , , 'Mittagong' , 'Shellharbour' , , 'Thirroul' , 'Wollongong' ] , self . get_names ( dist_qs ) ) else : self . assertRaises ( ValueError , dist_qs . count ) if spatialite : return self . assertRaises ( ValueError , len , AustraliaCity . objects . filter ( point__distance_lte = ( 'POINT(5 23)' , D ( km = 100 ) , 'spheroid' , '4' ) ) ) self . assertRaises ( ValueError , len , AustraliaCity . objects . filter ( point__distance_lte = ( 'POINT(5 23)' , ) ) ) hobart = AustraliaCity . objects . get ( name = 'Hobart' ) qs = AustraliaCity . objects . exclude ( name = 'Hobart' ) . filter ( point__distance_lte = ( hobart . point , D ( mi = 550 ) ) ) cities = self . get_names ( qs ) self . assertEqual ( cities , [ 'Batemans Bay' , 'Canberra' , 'Melbourne' ] ) wollongong = AustraliaCity . objects . get ( name = 'Wollongong' ) d1 , d2 = D ( yd = 19500 ) , D ( nm = 400 ) gq1 = Q ( point__distance_lte = ( wollongong . point , d1 ) ) gq2 = Q ( point__distance_gte = ( wollongong . point , d2 ) ) qs1 = AustraliaCity . objects . exclude ( name = 'Wollongong' ) . filter ( gq1 | gq2 ) if postgis : gq3 = Q ( point__distance_lte = ( wollongong . point , d1 , 'spheroid' ) ) gq4 = Q ( point__distance_gte = ( wollongong . point , d2 , 'spheroid' ) ) qs2 = AustraliaCity . objects . exclude ( name = 'Wollongong' ) . filter ( gq3 | gq4 ) querysets = [ qs1 , qs2 ] else : querysets = [ qs1 ] for qs in querysets : cities = self . get_names ( qs ) self . assertEqual ( cities , [ 'Adelaide' , 'Hobart' , 'Shellharbour' , 'Thirroul' ] ) def test06_area ( self ) : area_sq_m = [ 5437908.90234375 , 10183031.4389648 , 11254471.0073242 , 9881708.91772461 ] tol = 2 for i , z in enumerate ( SouthTexasZipcode . objects . area ( ) ) : self . assertAlmostEqual ( area_sq_m [ i ] , z . area . sq_m , tol ) def test07_length ( self ) : len_m1 = 473504.769553813 len_m2 = 4617.668 if spatialite : self . assertRaises ( ValueError , Interstate . objects . length ) else : qs = Interstate . objects . length ( ) if oracle : tol = 2 else : tol = 5 self . assertAlmostEqual ( len_m1 , qs [ 0 ] . length . m , tol ) i10 = SouthTexasInterstate . objects . length ( ) . get ( name = 'I-10' ) self . assertAlmostEqual ( len_m2 , i10 . length . m , 2 ) @ no_spatialite def test08_perimeter ( self ) : perim_m = [ 18404.3550889361 , 15627.2108551001 , 20632.5588368978 , 17094.5996143697 ] if oracle : tol = 2 else : tol = 7 for i , z in enumerate ( SouthTexasZipcode . objects . perimeter ( ) ) : self . assertAlmostEqual ( perim_m [ i ] , z . perimeter . m , tol ) for i , c in enumerate ( SouthTexasCity . objects . perimeter ( model_att = 'perim' ) ) : self . assertEqual ( 0 , c . perim . m ) def test09_measurement_null_fields ( self ) : SouthTexasZipcode . objects . create ( name = '78212' ) htown = SouthTexasCity . objects . get ( name = 'Downtown Houston' ) z = SouthTexasZipcode . objects . distance ( htown . point ) . area ( ) . get ( name = '78212' ) self . assertEqual ( None , z . distance ) self . assertEqual ( None , z . area )
