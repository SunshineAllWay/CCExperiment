from __future__ import absolute_import import datetime import re from datetime import date from decimal import Decimal from django import forms from django . db import models from django . forms . models import ( _get_foreign_key , inlineformset_factory , modelformset_factory ) from django . test import TestCase , skipUnlessDBFeature from . models import ( Author , BetterAuthor , Book , BookWithCustomPK , BookWithOptionalAltEditor , AlternateBook , AuthorMeeting , CustomPrimaryKey , Place , Owner , Location , OwnerProfile , Restaurant , Product , Price , MexicanRestaurant , ClassyMexicanRestaurant , Repository , Revision , Person , Membership , Team , Player , Poet , Poem , Post ) class DeletionTests ( TestCase ) : def test_deletion ( self ) : PoetFormSet = modelformset_factory ( Poet , can_delete = True ) poet = Poet . objects . create ( name = 'test' ) data = { : u'1' , : u'1' , : u'0' , : str ( poet . pk ) , : u'test' , : u'on' , } formset = PoetFormSet ( data , queryset = Poet . objects . all ( ) ) formset . save ( ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( Poet . objects . count ( ) , 0 ) def test_add_form_deletion_when_invalid ( self ) : PoetFormSet = modelformset_factory ( Poet , can_delete = True ) data = { : u'1' , : u'0' , : u'0' , : u'' , : u'x' * 1000 , } formset = PoetFormSet ( data , queryset = Poet . objects . all ( ) ) self . assertEqual ( formset . is_valid ( ) , False ) self . assertEqual ( Poet . objects . count ( ) , 0 ) data [ 'form-0-DELETE' ] = 'on' formset = PoetFormSet ( data , queryset = Poet . objects . all ( ) ) self . assertEqual ( formset . is_valid ( ) , True ) formset . save ( ) self . assertEqual ( Poet . objects . count ( ) , 0 ) def test_change_form_deletion_when_invalid ( self ) : PoetFormSet = modelformset_factory ( Poet , can_delete = True ) poet = Poet . objects . create ( name = 'test' ) data = { : u'1' , : u'1' , : u'0' , : unicode ( poet . id ) , : u'x' * 1000 , } formset = PoetFormSet ( data , queryset = Poet . objects . all ( ) ) self . assertEqual ( formset . is_valid ( ) , False ) self . assertEqual ( Poet . objects . count ( ) , 1 ) data [ 'form-0-DELETE' ] = 'on' formset = PoetFormSet ( data , queryset = Poet . objects . all ( ) ) self . assertEqual ( formset . is_valid ( ) , True ) formset . save ( ) self . assertEqual ( Poet . objects . count ( ) , 0 ) class ModelFormsetTest ( TestCase ) : def test_simple_save ( self ) : qs = Author . objects . all ( ) AuthorFormSet = modelformset_factory ( Author , extra = 3 ) formset = AuthorFormSet ( queryset = qs ) self . assertEqual ( len ( formset . forms ) , 3 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , ) self . assertHTMLEqual ( formset . forms [ 2 ] . as_p ( ) , ) data = { : '3' , : '0' , : '' , : 'Charles Baudelaire' , : 'Arthur Rimbaud' , : '' , } formset = AuthorFormSet ( data = data , queryset = qs ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 2 ) author1 , author2 = saved self . assertEqual ( author1 , Author . objects . get ( name = 'Charles Baudelaire' ) ) self . assertEqual ( author2 , Author . objects . get ( name = 'Arthur Rimbaud' ) ) authors = list ( Author . objects . order_by ( 'name' ) ) self . assertEqual ( authors , [ author2 , author1 ] ) qs = Author . objects . order_by ( 'name' ) AuthorFormSet = modelformset_factory ( Author , extra = 1 , can_delete = False ) formset = AuthorFormSet ( queryset = qs ) self . assertEqual ( len ( formset . forms ) , 3 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , % author2 . id ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , % author1 . id ) self . assertHTMLEqual ( formset . forms [ 2 ] . as_p ( ) , ) data = { : '3' , : '2' , : '' , : str ( author2 . id ) , : 'Arthur Rimbaud' , : str ( author1 . id ) , : 'Charles Baudelaire' , : 'Paul Verlaine' , } formset = AuthorFormSet ( data = data , queryset = qs ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) author3 = saved [ 0 ] self . assertEqual ( author3 , Author . objects . get ( name = 'Paul Verlaine' ) ) authors = list ( Author . objects . order_by ( 'name' ) ) self . assertEqual ( authors , [ author2 , author1 , author3 ] ) qs = Author . objects . order_by ( 'name' ) AuthorFormSet = modelformset_factory ( Author , extra = 1 , can_delete = True ) formset = AuthorFormSet ( queryset = qs ) self . assertEqual ( len ( formset . forms ) , 4 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , % author2 . id ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , % author1 . id ) self . assertHTMLEqual ( formset . forms [ 2 ] . as_p ( ) , % author3 . id ) self . assertHTMLEqual ( formset . forms [ 3 ] . as_p ( ) , ) data = { : '4' , : '3' , : '' , : str ( author2 . id ) , : 'Arthur Rimbaud' , : str ( author1 . id ) , : 'Charles Baudelaire' , : str ( author3 . id ) , : 'Paul Verlaine' , : 'Walt Whitman' , : 'on' , } formset = AuthorFormSet ( data = data , queryset = qs ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( formset . save ( ) , [ ] ) authors = list ( Author . objects . order_by ( 'name' ) ) self . assertEqual ( authors , [ author2 , author1 , author3 ] ) data = { : '4' , : '3' , : '' , : str ( author2 . id ) , : 'Walt Whitman' , : str ( author1 . id ) , : 'Charles Baudelaire' , : str ( author3 . id ) , : 'Paul Verlaine' , : '' , : '' , } formset = AuthorFormSet ( data = data , queryset = qs ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) self . assertEqual ( saved [ 0 ] , Author . objects . get ( name = 'Walt Whitman' ) ) def test_commit_false ( self ) : author1 = Author . objects . create ( name = 'Charles Baudelaire' ) author2 = Author . objects . create ( name = 'Paul Verlaine' ) author3 = Author . objects . create ( name = 'Walt Whitman' ) meeting = AuthorMeeting . objects . create ( created = date . today ( ) ) meeting . authors = Author . objects . all ( ) author4 = Author . objects . create ( name = u'John Steinbeck' ) AuthorMeetingFormSet = modelformset_factory ( AuthorMeeting , extra = 1 , can_delete = True ) data = { : '2' , : '1' , : '' , : str ( meeting . id ) , : '2nd Tuesday of the Week Meeting' , : [ author2 . id , author1 . id , author3 . id , author4 . id ] , : '' , : '' , : '' , } formset = AuthorMeetingFormSet ( data = data , queryset = AuthorMeeting . objects . all ( ) ) self . assertTrue ( formset . is_valid ( ) ) instances = formset . save ( commit = False ) for instance in instances : instance . created = date . today ( ) instance . save ( ) formset . save_m2m ( ) self . assertQuerysetEqual ( instances [ 0 ] . authors . all ( ) , [ , , , , ] ) def test_max_num ( self ) : author1 = Author . objects . create ( name = 'Charles Baudelaire' ) author2 = Author . objects . create ( name = 'Paul Verlaine' ) author3 = Author . objects . create ( name = 'Walt Whitman' ) qs = Author . objects . order_by ( 'name' ) AuthorFormSet = modelformset_factory ( Author , max_num = None , extra = 3 ) formset = AuthorFormSet ( queryset = qs ) self . assertEqual ( len ( formset . forms ) , 6 ) self . assertEqual ( len ( formset . extra_forms ) , 3 ) AuthorFormSet = modelformset_factory ( Author , max_num = 4 , extra = 3 ) formset = AuthorFormSet ( queryset = qs ) self . assertEqual ( len ( formset . forms ) , 4 ) self . assertEqual ( len ( formset . extra_forms ) , 1 ) AuthorFormSet = modelformset_factory ( Author , max_num = 0 , extra = 3 ) formset = AuthorFormSet ( queryset = qs ) self . assertEqual ( len ( formset . forms ) , 3 ) self . assertEqual ( len ( formset . extra_forms ) , 0 ) AuthorFormSet = modelformset_factory ( Author , max_num = None ) formset = AuthorFormSet ( queryset = qs ) self . assertQuerysetEqual ( formset . get_queryset ( ) , [ , , , ] ) AuthorFormSet = modelformset_factory ( Author , max_num = 0 ) formset = AuthorFormSet ( queryset = qs ) self . assertQuerysetEqual ( formset . get_queryset ( ) , [ , , , ] ) AuthorFormSet = modelformset_factory ( Author , max_num = 4 ) formset = AuthorFormSet ( queryset = qs ) self . assertQuerysetEqual ( formset . get_queryset ( ) , [ , , , ] ) def test_custom_save_method ( self ) : class PoetForm ( forms . ModelForm ) : def save ( self , commit = True ) : author = super ( PoetForm , self ) . save ( commit = False ) author . name = u"Vladimir Mayakovsky" if commit : author . save ( ) return author PoetFormSet = modelformset_factory ( Poet , form = PoetForm ) data = { : '3' , : '0' , : '' , : 'Walt Whitman' , : 'Charles Baudelaire' , : '' , } qs = Poet . objects . all ( ) formset = PoetFormSet ( data = data , queryset = qs ) self . assertTrue ( formset . is_valid ( ) ) poets = formset . save ( ) self . assertEqual ( len ( poets ) , 2 ) poet1 , poet2 = poets self . assertEqual ( poet1 . name , 'Vladimir Mayakovsky' ) self . assertEqual ( poet2 . name , 'Vladimir Mayakovsky' ) def test_custom_form ( self ) : class PostForm1 ( forms . ModelForm ) : class Meta : model = Post fields = ( 'title' , 'posted' ) class PostForm2 ( forms . ModelForm ) : class Meta : model = Post exclude = ( 'subtitle' , ) PostFormSet = modelformset_factory ( Post , form = PostForm1 ) formset = PostFormSet ( ) self . assertFalse ( "subtitle" in formset . forms [ 0 ] . fields ) PostFormSet = modelformset_factory ( Post , form = PostForm2 ) formset = PostFormSet ( ) self . assertFalse ( "subtitle" in formset . forms [ 0 ] . fields ) def test_model_inheritance ( self ) : BetterAuthorFormSet = modelformset_factory ( BetterAuthor ) formset = BetterAuthorFormSet ( ) self . assertEqual ( len ( formset . forms ) , 1 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , ) data = { : '1' , : '0' , : '' , : '' , : 'Ernest Hemingway' , : '10' , } formset = BetterAuthorFormSet ( data ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) author1 , = saved self . assertEqual ( author1 , BetterAuthor . objects . get ( name = 'Ernest Hemingway' ) ) hemingway_id = BetterAuthor . objects . get ( name = "Ernest Hemingway" ) . pk formset = BetterAuthorFormSet ( ) self . assertEqual ( len ( formset . forms ) , 2 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , % hemingway_id ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , ) data = { : '2' , : '1' , : '' , : hemingway_id , : 'Ernest Hemingway' , : '10' , : '' , : '' , : '' , } formset = BetterAuthorFormSet ( data ) self . assertTrue ( formset . is_valid ( ) ) self . assertEqual ( formset . save ( ) , [ ] ) def test_inline_formsets ( self ) : AuthorBooksFormSet = inlineformset_factory ( Author , Book , can_delete = False , extra = 3 ) author = Author . objects . create ( name = 'Charles Baudelaire' ) formset = AuthorBooksFormSet ( instance = author ) self . assertEqual ( len ( formset . forms ) , 3 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , % author . id ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , % author . id ) self . assertHTMLEqual ( formset . forms [ 2 ] . as_p ( ) , % author . id ) data = { : '3' , : '0' , : '' , : 'Les Fleurs du Mal' , : '' , : '' , } formset = AuthorBooksFormSet ( data , instance = author ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) book1 , = saved self . assertEqual ( book1 , Book . objects . get ( title = 'Les Fleurs du Mal' ) ) self . assertQuerysetEqual ( author . book_set . all ( ) , [ '<Book: Les Fleurs du Mal>' ] ) AuthorBooksFormSet = inlineformset_factory ( Author , Book , can_delete = False , extra = 2 ) author = Author . objects . get ( name = 'Charles Baudelaire' ) formset = AuthorBooksFormSet ( instance = author ) self . assertEqual ( len ( formset . forms ) , 3 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , % ( author . id , book1 . id ) ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , % author . id ) self . assertHTMLEqual ( formset . forms [ 2 ] . as_p ( ) , % author . id ) data = { : '3' , : '1' , : '' , : str ( book1 . id ) , : 'Les Fleurs du Mal' , : 'Les Paradis Artificiels' , : '' , } formset = AuthorBooksFormSet ( data , instance = author ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) book2 , = saved self . assertEqual ( book2 , Book . objects . get ( title = 'Les Paradis Artificiels' ) ) self . assertQuerysetEqual ( author . book_set . order_by ( 'title' ) , [ , , ] ) def test_inline_formsets_save_as_new ( self ) : AuthorBooksFormSet = inlineformset_factory ( Author , Book , can_delete = False , extra = 2 ) author = Author . objects . create ( name = 'Charles Baudelaire' ) data = { : '3' , : '2' , : '' , : '1' , : 'Les Fleurs du Mal' , : '2' , : 'Les Paradis Artificiels' , : '' , } formset = AuthorBooksFormSet ( data , instance = Author ( ) , save_as_new = True ) self . assertTrue ( formset . is_valid ( ) ) new_author = Author . objects . create ( name = 'Charles Baudelaire' ) formset = AuthorBooksFormSet ( data , instance = new_author , save_as_new = True ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 2 ) book1 , book2 = saved self . assertEqual ( book1 . title , 'Les Fleurs du Mal' ) self . assertEqual ( book2 . title , 'Les Paradis Artificiels' ) formset = AuthorBooksFormSet ( prefix = "test" ) self . assertEqual ( len ( formset . forms ) , 2 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , ) def test_inline_formsets_with_custom_pk ( self ) : AuthorBooksFormSet2 = inlineformset_factory ( Author , BookWithCustomPK , can_delete = False , extra = 1 ) author = Author . objects . create ( pk = 1 , name = 'Charles Baudelaire' ) formset = AuthorBooksFormSet2 ( instance = author ) self . assertEqual ( len ( formset . forms ) , 1 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , ) data = { : '1' , : '0' , : '' , : '77777' , : 'Les Fleurs du Mal' , } formset = AuthorBooksFormSet2 ( data , instance = author ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) book1 , = saved self . assertEqual ( book1 . pk , 77777 ) book1 = author . bookwithcustompk_set . get ( ) self . assertEqual ( book1 . title , 'Les Fleurs du Mal' ) def test_inline_formsets_with_multi_table_inheritance ( self ) : AuthorBooksFormSet3 = inlineformset_factory ( Author , AlternateBook , can_delete = False , extra = 1 ) author = Author . objects . create ( pk = 1 , name = 'Charles Baudelaire' ) formset = AuthorBooksFormSet3 ( instance = author ) self . assertEqual ( len ( formset . forms ) , 1 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , ) data = { : '1' , : '0' , : '' , : 'Flowers of Evil' , : 'English translation of Les Fleurs du Mal' } formset = AuthorBooksFormSet3 ( data , instance = author ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) book1 , = saved self . assertEqual ( book1 . title , 'Flowers of Evil' ) self . assertEqual ( book1 . notes , 'English translation of Les Fleurs du Mal' ) @ skipUnlessDBFeature ( 'ignores_nulls_in_unique_constraints' ) def test_inline_formsets_with_nullable_unique_together ( self ) : AuthorBooksFormSet4 = inlineformset_factory ( Author , BookWithOptionalAltEditor , can_delete = False , extra = 2 ) author = Author . objects . create ( pk = 1 , name = 'Charles Baudelaire' ) data = { : '2' , : '0' , : '' , : '1' , : 'Les Fleurs du Mal' , : '1' , : 'Les Fleurs du Mal' , } formset = AuthorBooksFormSet4 ( data , instance = author ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 2 ) book1 , book2 = saved self . assertEqual ( book1 . author_id , 1 ) self . assertEqual ( book1 . title , 'Les Fleurs du Mal' ) self . assertEqual ( book2 . author_id , 1 ) self . assertEqual ( book2 . title , 'Les Fleurs du Mal' ) def test_inline_formsets_with_custom_save_method ( self ) : AuthorBooksFormSet = inlineformset_factory ( Author , Book , can_delete = False , extra = 2 ) author = Author . objects . create ( pk = 1 , name = 'Charles Baudelaire' ) book1 = Book . objects . create ( pk = 1 , author = author , title = 'Les Paradis Artificiels' ) book2 = Book . objects . create ( pk = 2 , author = author , title = 'Les Fleurs du Mal' ) book3 = Book . objects . create ( pk = 3 , author = author , title = 'Flowers of Evil' ) class PoemForm ( forms . ModelForm ) : def save ( self , commit = True ) : poem = super ( PoemForm , self ) . save ( commit = False ) poem . name = u"Brooklyn Bridge" if commit : poem . save ( ) return poem PoemFormSet = inlineformset_factory ( Poet , Poem , form = PoemForm ) data = { : '3' , : '0' , : '' , : 'The Cloud in Trousers' , : 'I' , : '' , } poet = Poet . objects . create ( name = 'Vladimir Mayakovsky' ) formset = PoemFormSet ( data = data , instance = poet ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 2 ) poem1 , poem2 = saved self . assertEqual ( poem1 . name , 'Brooklyn Bridge' ) self . assertEqual ( poem2 . name , 'Brooklyn Bridge' ) custom_qs = Book . objects . order_by ( '-title' ) formset = AuthorBooksFormSet ( instance = author , queryset = custom_qs ) self . assertEqual ( len ( formset . forms ) , 5 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , ) self . assertHTMLEqual ( formset . forms [ 2 ] . as_p ( ) , ) self . assertHTMLEqual ( formset . forms [ 3 ] . as_p ( ) , ) self . assertHTMLEqual ( formset . forms [ 4 ] . as_p ( ) , ) data = { : '5' , : '3' , : '' , : str ( book1 . id ) , : 'Les Paradis Artificiels' , : str ( book2 . id ) , : 'Les Fleurs du Mal' , : str ( book3 . id ) , : 'Flowers of Evil' , : 'Revue des deux mondes' , : '' , } formset = AuthorBooksFormSet ( data , instance = author , queryset = custom_qs ) self . assertTrue ( formset . is_valid ( ) ) custom_qs = Book . objects . filter ( title__startswith = 'F' ) formset = AuthorBooksFormSet ( instance = author , queryset = custom_qs ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , ) self . assertHTMLEqual ( formset . forms [ 2 ] . as_p ( ) , ) data = { : '3' , : '1' , : '' , : str ( book3 . id ) , : 'Flowers of Evil' , : 'Revue des deux mondes' , : '' , } formset = AuthorBooksFormSet ( data , instance = author , queryset = custom_qs ) self . assertTrue ( formset . is_valid ( ) ) def test_custom_pk ( self ) : CustomPrimaryKeyFormSet = modelformset_factory ( CustomPrimaryKey ) formset = CustomPrimaryKeyFormSet ( ) self . assertEqual ( len ( formset . forms ) , 1 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , ) place = Place . objects . create ( pk = 1 , name = u'Giordanos' , city = u'Chicago' ) FormSet = inlineformset_factory ( Place , Owner , extra = 2 , can_delete = False ) formset = FormSet ( instance = place ) self . assertEqual ( len ( formset . forms ) , 2 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , ) data = { : '2' , : '0' , : '' , : '' , : u'Joe Perry' , : '' , : '' , } formset = FormSet ( data , instance = place ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) owner1 , = saved self . assertEqual ( owner1 . name , 'Joe Perry' ) self . assertEqual ( owner1 . place . name , 'Giordanos' ) formset = FormSet ( instance = place ) self . assertEqual ( len ( formset . forms ) , 3 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , % owner1 . auto_id ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , ) self . assertHTMLEqual ( formset . forms [ 2 ] . as_p ( ) , ) data = { : '3' , : '1' , : '' , : unicode ( owner1 . auto_id ) , : u'Joe Perry' , : '' , : u'Jack Berry' , : '' , : '' , } formset = FormSet ( data , instance = place ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) owner2 , = saved self . assertEqual ( owner2 . name , 'Jack Berry' ) self . assertEqual ( owner2 . place . name , 'Giordanos' ) FormSet = modelformset_factory ( OwnerProfile ) formset = FormSet ( ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , % ( owner1 . auto_id , owner2 . auto_id ) ) owner1 = Owner . objects . get ( name = u'Joe Perry' ) FormSet = inlineformset_factory ( Owner , OwnerProfile , max_num = 1 , can_delete = False ) self . assertEqual ( FormSet . max_num , 1 ) formset = FormSet ( instance = owner1 ) self . assertEqual ( len ( formset . forms ) , 1 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , % owner1 . auto_id ) data = { : '1' , : '0' , : '1' , : '' , : u'54' , } formset = FormSet ( data , instance = owner1 ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) profile1 , = saved self . assertEqual ( profile1 . owner , owner1 ) self . assertEqual ( profile1 . age , 54 ) formset = FormSet ( instance = owner1 ) self . assertEqual ( len ( formset . forms ) , 1 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , % owner1 . auto_id ) data = { : '1' , : '1' , : '1' , : unicode ( owner1 . auto_id ) , : u'55' , } formset = FormSet ( data , instance = owner1 ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) profile1 , = saved self . assertEqual ( profile1 . owner , owner1 ) self . assertEqual ( profile1 . age , 55 ) def test_unique_true_enforces_max_num_one ( self ) : place = Place . objects . create ( pk = 1 , name = u'Giordanos' , city = u'Chicago' ) FormSet = inlineformset_factory ( Place , Location , can_delete = False ) self . assertEqual ( FormSet . max_num , 1 ) formset = FormSet ( instance = place ) self . assertEqual ( len ( formset . forms ) , 1 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , ) def test_foreign_keys_in_parents ( self ) : self . assertEqual ( type ( _get_foreign_key ( Restaurant , Owner ) ) , models . ForeignKey ) self . assertEqual ( type ( _get_foreign_key ( MexicanRestaurant , Owner ) ) , models . ForeignKey ) def test_unique_validation ( self ) : FormSet = modelformset_factory ( Product , extra = 1 ) data = { : '1' , : '0' , : '' , : 'car-red' , } formset = FormSet ( data ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) product1 , = saved self . assertEqual ( product1 . slug , 'car-red' ) data = { : '1' , : '0' , : '' , : 'car-red' , } formset = FormSet ( data ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . errors , [ { 'slug' : [ u'Product with this Slug already exists.' ] } ] ) def test_unique_together_validation ( self ) : FormSet = modelformset_factory ( Price , extra = 1 ) data = { : '1' , : '0' , : '' , : u'12.00' , : '1' , } formset = FormSet ( data ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) price1 , = saved self . assertEqual ( price1 . price , Decimal ( '12.00' ) ) self . assertEqual ( price1 . quantity , 1 ) data = { : '1' , : '0' , : '' , : u'12.00' , : '1' , } formset = FormSet ( data ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . errors , [ { '__all__' : [ u'Price with this Price and Quantity already exists.' ] } ] ) def test_unique_together_with_inlineformset_factory ( self ) : repository = Repository . objects . create ( name = u'Test Repo' ) FormSet = inlineformset_factory ( Repository , Revision , extra = 1 ) data = { : '1' , : '0' , : '' , : repository . pk , : '146239817507f148d448db38840db7c3cbf47c76' , : '' , } formset = FormSet ( data , instance = repository ) self . assertTrue ( formset . is_valid ( ) ) saved = formset . save ( ) self . assertEqual ( len ( saved ) , 1 ) revision1 , = saved self . assertEqual ( revision1 . repository , repository ) self . assertEqual ( revision1 . revision , '146239817507f148d448db38840db7c3cbf47c76' ) data = { : '1' , : '0' , : '' , : repository . pk , : '146239817507f148d448db38840db7c3cbf47c76' , : '' , } formset = FormSet ( data , instance = repository ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . errors , [ { '__all__' : [ u'Revision with this Repository and Revision already exists.' ] } ] ) FormSet = inlineformset_factory ( Repository , Revision , fields = ( 'revision' , ) , extra = 1 ) data = { : '1' , : '0' , : '' , : repository . pk , : '146239817507f148d448db38840db7c3cbf47c76' , : '' , } formset = FormSet ( data , instance = repository ) self . assertFalse ( formset . is_valid ( ) ) def test_callable_defaults ( self ) : person = Person . objects . create ( name = 'Ringo' ) FormSet = inlineformset_factory ( Person , Membership , can_delete = False , extra = 1 ) formset = FormSet ( instance = person ) self . assertEqual ( len ( formset . forms ) , 1 ) form = formset . forms [ 0 ] now = form . fields [ 'date_joined' ] . initial ( ) result = form . as_p ( ) result = re . sub ( r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(?:\.\d+)?' , '__DATETIME__' , result ) self . assertHTMLEqual ( result , % person . id ) data = { : '1' , : '0' , : '' , : unicode ( now . strftime ( '%Y-%m-%d %H:%M:%S' ) ) , : unicode ( now . strftime ( '%Y-%m-%d %H:%M:%S' ) ) , : '' , } formset = FormSet ( data , instance = person ) self . assertTrue ( formset . is_valid ( ) ) one_day_later = now + datetime . timedelta ( days = 1 ) filled_data = { : '1' , : '0' , : '' , : unicode ( one_day_later . strftime ( '%Y-%m-%d %H:%M:%S' ) ) , : unicode ( now . strftime ( '%Y-%m-%d %H:%M:%S' ) ) , : '' , } formset = FormSet ( filled_data , instance = person ) self . assertFalse ( formset . is_valid ( ) ) class MembershipForm ( forms . ModelForm ) : date_joined = forms . SplitDateTimeField ( initial = now ) class Meta : model = Membership def __init__ ( self , ** kwargs ) : super ( MembershipForm , self ) . __init__ ( ** kwargs ) self . fields [ 'date_joined' ] . widget = forms . SplitDateTimeWidget ( ) FormSet = inlineformset_factory ( Person , Membership , form = MembershipForm , can_delete = False , extra = 1 ) data = { : '1' , : '0' , : '' , : unicode ( now . strftime ( '%Y-%m-%d' ) ) , : unicode ( now . strftime ( '%H:%M:%S' ) ) , : unicode ( now . strftime ( '%Y-%m-%d %H:%M:%S' ) ) , : '' , } formset = FormSet ( data , instance = person ) self . assertTrue ( formset . is_valid ( ) ) def test_inlineformset_factory_with_null_fk ( self ) : team = Team . objects . create ( name = u"Red Vipers" ) Player ( name = "Timmy" ) . save ( ) Player ( name = "Bobby" , team = team ) . save ( ) PlayerInlineFormSet = inlineformset_factory ( Team , Player ) formset = PlayerInlineFormSet ( ) self . assertQuerysetEqual ( formset . get_queryset ( ) , [ ] ) formset = PlayerInlineFormSet ( instance = team ) players = formset . get_queryset ( ) self . assertEqual ( len ( players ) , 1 ) player1 , = players self . assertEqual ( player1 . team , team ) self . assertEqual ( player1 . name , 'Bobby' ) def test_model_formset_with_custom_pk ( self ) : FormSet = modelformset_factory ( ClassyMexicanRestaurant , fields = [ "tacos_are_yummy" ] ) self . assertEqual ( sorted ( FormSet ( ) . forms [ 0 ] . fields . keys ( ) ) , [ 'restaurant' , 'tacos_are_yummy' ] ) def test_prevent_duplicates_from_with_the_same_formset ( self ) : FormSet = modelformset_factory ( Product , extra = 2 ) data = { : 2 , : 0 , : '' , : 'red_car' , : 'red_car' , } formset = FormSet ( data ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . _non_form_errors , [ u'Please correct the duplicate data for slug.' ] ) FormSet = modelformset_factory ( Price , extra = 2 ) data = { : 2 , : 0 , : '' , : '25' , : '7' , : '25' , : '7' , } formset = FormSet ( data ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . _non_form_errors , [ u'Please correct the duplicate data for price and quantity, which must be unique.' ] ) FormSet = modelformset_factory ( Price , fields = ( "price" , ) , extra = 2 ) data = { : '2' , : '0' , : '' , : '24' , : '24' , } formset = FormSet ( data ) self . assertTrue ( formset . is_valid ( ) ) FormSet = inlineformset_factory ( Author , Book , extra = 0 ) author = Author . objects . create ( pk = 1 , name = 'Charles Baudelaire' ) book1 = Book . objects . create ( pk = 1 , author = author , title = 'Les Paradis Artificiels' ) book2 = Book . objects . create ( pk = 2 , author = author , title = 'Les Fleurs du Mal' ) book3 = Book . objects . create ( pk = 3 , author = author , title = 'Flowers of Evil' ) book_ids = author . book_set . order_by ( 'id' ) . values_list ( 'id' , flat = True ) data = { : '2' , : '2' , : '' , : 'The 2008 Election' , : str ( author . id ) , : str ( book_ids [ 0 ] ) , : 'The 2008 Election' , : str ( author . id ) , : str ( book_ids [ 1 ] ) , } formset = FormSet ( data = data , instance = author ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . _non_form_errors , [ u'Please correct the duplicate data for title.' ] ) self . assertEqual ( formset . errors , [ { } , { '__all__' : [ u'Please correct the duplicate values below.' ] } ] ) FormSet = modelformset_factory ( Post , extra = 2 ) data = { : '2' , : '0' , : '' , : 'blah' , : 'Morning' , : 'foo' , : '2009-01-01' , : 'blah' , : 'Morning in Prague' , : 'rawr' , : '2009-01-01' } formset = FormSet ( data ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . _non_form_errors , [ u'Please correct the duplicate data for title which must be unique for the date in posted.' ] ) self . assertEqual ( formset . errors , [ { } , { '__all__' : [ u'Please correct the duplicate values below.' ] } ] ) data = { : '2' , : '0' , : '' , : 'foo' , : 'Morning in Prague' , : 'foo' , : '2009-01-01' , : 'blah' , : 'Morning in Prague' , : 'rawr' , : '2009-08-02' } formset = FormSet ( data ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . _non_form_errors , [ u'Please correct the duplicate data for slug which must be unique for the year in posted.' ] ) data = { : '2' , : '0' , : '' , : 'foo' , : 'Morning in Prague' , : 'rawr' , : '2008-08-01' , : 'blah' , : 'Prague' , : 'rawr' , : '2009-08-02' } formset = FormSet ( data ) self . assertFalse ( formset . is_valid ( ) ) self . assertEqual ( formset . _non_form_errors , [ u'Please correct the duplicate data for subtitle which must be unique for the month in posted.' ] )
