""" Caching framework. This package defines set of cache backends that all conform to a simple API. In a nutshell, a cache is a set of values -- which can be any object that may be pickled -- identified by string keys. For the complete API, see the abstract BaseCache class in django.core.cache.backends.base. Client code should not access a cache backend directly; instead it should either use the "cache" variable made available here, or it should use the get_cache() function made available here. get_cache() takes a backend URI (e.g. "memcached://127.0.0.1:11211/") and returns an instance of a backend cache class. See docs/topics/cache.txt for information on the public API. """ from django . conf import settings from django . core import signals from django . core . cache . backends . base import ( InvalidCacheBackendError , CacheKeyWarning , BaseCache ) from django . core . exceptions import ImproperlyConfigured from django . utils import importlib try : from mod_python . util import parse_qsl except ImportError : try : from urlparse import parse_qsl except ImportError : from cgi import parse_qsl __all__ = [ , 'cache' , 'DEFAULT_CACHE_ALIAS' ] BACKENDS = { : 'memcached' , : 'locmem' , : 'filebased' , : 'db' , : 'dummy' , } DEFAULT_CACHE_ALIAS = 'default' def parse_backend_uri ( backend_uri ) : if backend_uri . find ( ':' ) == - 1 : raise InvalidCacheBackendError ( "Backend URI must start with scheme://" ) scheme , rest = backend_uri . split ( ':' , 1 ) if not rest . startswith ( '//' ) : raise InvalidCacheBackendError ( "Backend URI must start with scheme://" ) host = rest [ 2 : ] qpos = rest . find ( '?' ) if qpos != - 1 : params = dict ( parse_qsl ( rest [ qpos + 1 : ] ) ) host = rest [ 2 : qpos ] else : params = { } if host . endswith ( '/' ) : host = host [ : - 1 ] return scheme , host , params if not settings . CACHES : legacy_backend = getattr ( settings , 'CACHE_BACKEND' , None ) if legacy_backend : import warnings warnings . warn ( , DeprecationWarning ) else : settings . CACHE_BACKEND = 'locmem://' backend_classes = { : 'memcached.CacheClass' , : 'locmem.LocMemCache' , : 'filebased.FileBasedCache' , : 'db.DatabaseCache' , : 'dummy.DummyCache' , } engine , host , params = parse_backend_uri ( settings . CACHE_BACKEND ) if engine in backend_classes : engine = 'django.core.cache.backends.%s' % backend_classes [ engine ] else : engine = '%s.CacheClass' % engine defaults = { : engine , : host , } defaults . update ( params ) settings . CACHES [ DEFAULT_CACHE_ALIAS ] = defaults if DEFAULT_CACHE_ALIAS not in settings . CACHES : raise ImproperlyConfigured ( "You must define a '%s' cache" % DEFAULT_CACHE_ALIAS ) def parse_backend_conf ( backend , ** kwargs ) : conf = settings . CACHES . get ( backend , None ) if conf is not None : args = conf . copy ( ) args . update ( kwargs ) backend = args . pop ( 'BACKEND' ) location = args . pop ( 'LOCATION' , '' ) return backend , location , args else : try : mod_path , cls_name = backend . rsplit ( '.' , 1 ) mod = importlib . import_module ( mod_path ) backend_cls = getattr ( mod , cls_name ) except ( AttributeError , ImportError , ValueError ) : raise InvalidCacheBackendError ( "Could not find backend '%s'" % backend ) location = kwargs . pop ( 'LOCATION' , '' ) return backend , location , kwargs raise InvalidCacheBackendError ( % backend ) def get_cache ( backend , ** kwargs ) : try : if '://' in backend : backend , location , params = parse_backend_uri ( backend ) if backend in BACKENDS : backend = 'django.core.cache.backends.%s' % BACKENDS [ backend ] params . update ( kwargs ) mod = importlib . import_module ( backend ) backend_cls = mod . CacheClass else : backend , location , params = parse_backend_conf ( backend , ** kwargs ) mod_path , cls_name = backend . rsplit ( '.' , 1 ) mod = importlib . import_module ( mod_path ) backend_cls = getattr ( mod , cls_name ) except ( AttributeError , ImportError ) , e : raise InvalidCacheBackendError ( % ( backend , e ) ) cache = backend_cls ( location , params ) if hasattr ( cache , 'close' ) : signals . request_finished . connect ( cache . close ) return cache cache = get_cache ( DEFAULT_CACHE_ALIAS )
