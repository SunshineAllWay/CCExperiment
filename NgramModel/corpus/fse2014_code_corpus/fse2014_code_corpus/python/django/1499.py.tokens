from django . db import transaction from django . conf import settings from django . contrib import admin from django . contrib . auth . forms import ( UserCreationForm , UserChangeForm , AdminPasswordChangeForm ) from django . contrib . auth . models import User , Group from django . contrib import messages from django . core . exceptions import PermissionDenied from django . http import HttpResponseRedirect , Http404 from django . shortcuts import get_object_or_404 from django . template . response import TemplateResponse from django . utils . html import escape from django . utils . decorators import method_decorator from django . utils . safestring import mark_safe from django . utils . translation import ugettext , ugettext_lazy as _ from django . views . decorators . csrf import csrf_protect from django . views . decorators . debug import sensitive_post_parameters csrf_protect_m = method_decorator ( csrf_protect ) class GroupAdmin ( admin . ModelAdmin ) : search_fields = ( 'name' , ) ordering = ( 'name' , ) filter_horizontal = ( 'permissions' , ) def formfield_for_manytomany ( self , db_field , request = None , ** kwargs ) : if db_field . name == 'permissions' : qs = kwargs . get ( 'queryset' , db_field . rel . to . objects ) kwargs [ 'queryset' ] = qs . select_related ( 'content_type' ) return super ( GroupAdmin , self ) . formfield_for_manytomany ( db_field , request = request , ** kwargs ) class UserAdmin ( admin . ModelAdmin ) : add_form_template = 'admin/auth/user/add_form.html' change_user_password_template = None fieldsets = ( ( None , { 'fields' : ( 'username' , 'password' ) } ) , ( _ ( 'Personal info' ) , { 'fields' : ( 'first_name' , 'last_name' , 'email' ) } ) , ( _ ( 'Permissions' ) , { 'fields' : ( 'is_active' , 'is_staff' , 'is_superuser' , , 'user_permissions' ) } ) , ( _ ( 'Important dates' ) , { 'fields' : ( 'last_login' , 'date_joined' ) } ) , ) add_fieldsets = ( ( None , { : ( 'wide' , ) , : ( 'username' , 'password1' , 'password2' ) } ) , ) form = UserChangeForm add_form = UserCreationForm change_password_form = AdminPasswordChangeForm list_display = ( 'username' , 'email' , 'first_name' , 'last_name' , 'is_staff' ) list_filter = ( 'is_staff' , 'is_superuser' , 'is_active' ) search_fields = ( 'username' , 'first_name' , 'last_name' , 'email' ) ordering = ( 'username' , ) filter_horizontal = ( 'user_permissions' , ) def get_fieldsets ( self , request , obj = None ) : if not obj : return self . add_fieldsets return super ( UserAdmin , self ) . get_fieldsets ( request , obj ) def get_form ( self , request , obj = None , ** kwargs ) : defaults = { } if obj is None : defaults . update ( { : self . add_form , : admin . util . flatten_fieldsets ( self . add_fieldsets ) , } ) defaults . update ( kwargs ) return super ( UserAdmin , self ) . get_form ( request , obj , ** defaults ) def get_urls ( self ) : from django . conf . urls import patterns return patterns ( '' , ( r'^(\d+)/password/$' , self . admin_site . admin_view ( self . user_change_password ) ) ) + super ( UserAdmin , self ) . get_urls ( ) @ sensitive_post_parameters ( ) @ csrf_protect_m @ transaction . commit_on_success def add_view ( self , request , form_url = '' , extra_context = None ) : if not self . has_change_permission ( request ) : if self . has_add_permission ( request ) and settings . DEBUG : raise Http404 ( ) raise PermissionDenied if extra_context is None : extra_context = { } defaults = { : ( ) , : self . model . _meta . get_field ( 'username' ) . help_text , } extra_context . update ( defaults ) return super ( UserAdmin , self ) . add_view ( request , form_url , extra_context ) @ sensitive_post_parameters ( ) def user_change_password ( self , request , id , form_url = '' ) : if not self . has_change_permission ( request ) : raise PermissionDenied user = get_object_or_404 ( self . queryset ( request ) , pk = id ) if request . method == 'POST' : form = self . change_password_form ( user , request . POST ) if form . is_valid ( ) : form . save ( ) msg = ugettext ( 'Password changed successfully.' ) messages . success ( request , msg ) return HttpResponseRedirect ( '..' ) else : form = self . change_password_form ( user ) fieldsets = [ ( None , { 'fields' : form . base_fields . keys ( ) } ) ] adminForm = admin . helpers . AdminForm ( form , fieldsets , { } ) context = { : _ ( 'Change password: %s' ) % escape ( user . username ) , : adminForm , : mark_safe ( form_url ) , : form , : '_popup' in request . REQUEST , : True , : False , : False , : True , : False , : self . model . _meta , : user , : False , : True , } return TemplateResponse ( request , [ self . change_user_password_template or ] , context , current_app = self . admin_site . name ) def response_add ( self , request , obj , post_url_continue = '../%s/' ) : if '_addanother' not in request . POST and '_popup' not in request . POST : request . POST [ '_continue' ] = 1 return super ( UserAdmin , self ) . response_add ( request , obj , post_url_continue ) admin . site . register ( Group , GroupAdmin ) admin . site . register ( User , UserAdmin )
