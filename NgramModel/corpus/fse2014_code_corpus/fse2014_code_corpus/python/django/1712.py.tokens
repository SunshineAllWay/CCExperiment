""" This module houses the error-checking routines used by the GDAL ctypes prototypes. """ from ctypes import c_void_p , string_at from django . contrib . gis . gdal . error import check_err , OGRException , SRSException from django . contrib . gis . gdal . libgdal import lgdal def arg_byref ( args , offset = - 1 ) : return args [ offset ] . _obj . value def ptr_byref ( args , offset = - 1 ) : return args [ offset ] . _obj def check_bool ( result , func , cargs ) : if bool ( result ) : return True else : return False def check_const_string ( result , func , cargs , offset = None ) : if offset : check_err ( result ) ptr = ptr_byref ( cargs , offset ) return ptr . value else : return result def check_string ( result , func , cargs , offset = - 1 , str_result = False ) : if str_result : ptr = result if not ptr : s = None else : s = string_at ( result ) else : check_err ( result ) ptr = ptr_byref ( cargs , offset ) s = ptr . value if ptr : lgdal . VSIFree ( ptr ) return s def check_envelope ( result , func , cargs , offset = - 1 ) : env = ptr_byref ( cargs , offset ) return env def check_geom ( result , func , cargs ) : if isinstance ( result , ( int , long ) ) : result = c_void_p ( result ) if not result : raise OGRException ( 'Invalid geometry pointer returned from "%s".' % func . __name__ ) return result def check_geom_offset ( result , func , cargs , offset = - 1 ) : check_err ( result ) geom = ptr_byref ( cargs , offset = offset ) return check_geom ( geom , func , cargs ) def check_srs ( result , func , cargs ) : if isinstance ( result , ( int , long ) ) : result = c_void_p ( result ) if not result : raise SRSException ( 'Invalid spatial reference pointer returned from "%s".' % func . __name__ ) return result def check_arg_errcode ( result , func , cargs ) : check_err ( arg_byref ( cargs ) ) return result def check_errcode ( result , func , cargs ) : check_err ( result ) return def check_pointer ( result , func , cargs ) : if isinstance ( result , ( int , long ) ) : result = c_void_p ( result ) if bool ( result ) : return result else : raise OGRException ( 'Invalid pointer returned from "%s"' % func . __name__ ) def check_str_arg ( result , func , cargs ) : dbl = result ptr = cargs [ - 1 ] . _obj return dbl , ptr . value
