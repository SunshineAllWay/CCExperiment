from __future__ import absolute_import import hashlib import os from django . core . files . uploadedfile import UploadedFile from django . http import HttpResponse , HttpResponseServerError from django . utils import simplejson from . models import FileModel , UPLOAD_TO from . tests import UNICODE_FILENAME from . uploadhandler import QuotaUploadHandler , ErroringUploadHandler def file_upload_view ( request ) : form_data = request . POST . copy ( ) form_data . update ( request . FILES ) if isinstance ( form_data . get ( 'file_field' ) , UploadedFile ) and isinstance ( form_data [ 'name' ] , unicode ) : if os . path . dirname ( form_data [ 'file_field' ] . name ) != '' : return HttpResponseServerError ( ) return HttpResponse ( '' ) else : return HttpResponseServerError ( ) def file_upload_view_verify ( request ) : form_data = request . POST . copy ( ) form_data . update ( request . FILES ) for key , value in form_data . items ( ) : if key . endswith ( '_hash' ) : continue if key + '_hash' not in form_data : continue submitted_hash = form_data [ key + '_hash' ] if isinstance ( value , UploadedFile ) : new_hash = hashlib . sha1 ( value . read ( ) ) . hexdigest ( ) else : new_hash = hashlib . sha1 ( value ) . hexdigest ( ) if new_hash != submitted_hash : return HttpResponseServerError ( ) largefile = request . FILES [ 'file_field2' ] obj = FileModel ( ) obj . testfile . save ( largefile . name , largefile ) return HttpResponse ( '' ) def file_upload_unicode_name ( request ) : if not request . FILES [ 'file_unicode' ] . name . endswith ( UNICODE_FILENAME ) : return HttpResponseServerError ( ) response = None uni_named_file = request . FILES [ 'file_unicode' ] obj = FileModel . objects . create ( testfile = uni_named_file ) full_name = u'%s/%s' % ( UPLOAD_TO , uni_named_file . name ) if not os . path . exists ( full_name ) : response = HttpResponseServerError ( ) obj . delete ( ) os . unlink ( full_name ) if response : return response else : return HttpResponse ( '' ) def file_upload_echo ( request ) : r = dict ( [ ( k , f . name ) for k , f in request . FILES . items ( ) ] ) return HttpResponse ( simplejson . dumps ( r ) ) def file_upload_echo_content ( request ) : r = dict ( [ ( k , f . read ( ) ) for k , f in request . FILES . items ( ) ] ) return HttpResponse ( simplejson . dumps ( r ) ) def file_upload_quota ( request ) : request . upload_handlers . insert ( 0 , QuotaUploadHandler ( ) ) return file_upload_echo ( request ) def file_upload_quota_broken ( request ) : response = file_upload_echo ( request ) request . upload_handlers . insert ( 0 , QuotaUploadHandler ( ) ) return response def file_upload_getlist_count ( request ) : file_counts = { } for key in request . FILES . keys ( ) : file_counts [ key ] = len ( request . FILES . getlist ( key ) ) return HttpResponse ( simplejson . dumps ( file_counts ) ) def file_upload_errors ( request ) : request . upload_handlers . insert ( 0 , ErroringUploadHandler ( ) ) return file_upload_echo ( request ) def file_upload_filename_case_view ( request ) : file = request . FILES [ 'file_field' ] obj = FileModel ( ) obj . testfile . save ( file . name , file ) return HttpResponse ( '%d' % obj . pk )
