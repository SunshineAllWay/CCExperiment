import re from django import forms from django . shortcuts import redirect from django . core . urlresolvers import reverse from django . forms import formsets , ValidationError from django . views . generic import TemplateView from django . utils . datastructures import SortedDict from django . utils . decorators import classonlymethod from django . contrib . formtools . wizard . storage import get_storage from django . contrib . formtools . wizard . storage . exceptions import NoFileStorageConfigured from django . contrib . formtools . wizard . forms import ManagementForm def normalize_name ( name ) : new = re . sub ( '(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))' , '_\\1' , name ) return new . lower ( ) . strip ( '_' ) class StepsHelper ( object ) : def __init__ ( self , wizard ) : self . _wizard = wizard def __dir__ ( self ) : return self . all def __len__ ( self ) : return self . count def __repr__ ( self ) : return '<StepsHelper for %s (steps: %s)>' % ( self . _wizard , self . all ) @ property def all ( self ) : return self . _wizard . get_form_list ( ) . keys ( ) @ property def count ( self ) : return len ( self . all ) @ property def current ( self ) : return self . _wizard . storage . current_step or self . first @ property def first ( self ) : return self . all [ 0 ] @ property def last ( self ) : return self . all [ - 1 ] @ property def next ( self ) : return self . _wizard . get_next_step ( ) @ property def prev ( self ) : return self . _wizard . get_prev_step ( ) @ property def index ( self ) : return self . _wizard . get_step_index ( ) @ property def step0 ( self ) : return int ( self . index ) @ property def step1 ( self ) : return int ( self . index ) + 1 class WizardView ( TemplateView ) : storage_name = None form_list = None initial_dict = None instance_dict = None condition_dict = None template_name = 'formtools/wizard/wizard_form.html' def __repr__ ( self ) : return '<%s: forms: %s>' % ( self . __class__ . __name__ , self . form_list ) @ classonlymethod def as_view ( cls , * args , ** kwargs ) : initkwargs = cls . get_initkwargs ( * args , ** kwargs ) return super ( WizardView , cls ) . as_view ( ** initkwargs ) @ classmethod def get_initkwargs ( cls , form_list , initial_dict = None , instance_dict = None , condition_dict = None , * args , ** kwargs ) : kwargs . update ( { : initial_dict or { } , : instance_dict or { } , : condition_dict or { } , } ) init_form_list = SortedDict ( ) assert len ( form_list ) > 0 , 'at least one form is needed' for i , form in enumerate ( form_list ) : if isinstance ( form , ( list , tuple ) ) : init_form_list [ unicode ( form [ 0 ] ) ] = form [ 1 ] else : init_form_list [ unicode ( i ) ] = form for form in init_form_list . itervalues ( ) : if issubclass ( form , formsets . BaseFormSet ) : form = form . form for field in form . base_fields . itervalues ( ) : if ( isinstance ( field , forms . FileField ) and not hasattr ( cls , 'file_storage' ) ) : raise NoFileStorageConfigured kwargs [ 'form_list' ] = init_form_list return kwargs def get_prefix ( self , * args , ** kwargs ) : return normalize_name ( self . __class__ . __name__ ) def get_form_list ( self ) : form_list = SortedDict ( ) for form_key , form_class in self . form_list . iteritems ( ) : condition = self . condition_dict . get ( form_key , True ) if callable ( condition ) : condition = condition ( self ) if condition : form_list [ form_key ] = form_class return form_list def dispatch ( self , request , * args , ** kwargs ) : self . prefix = self . get_prefix ( * args , ** kwargs ) self . storage = get_storage ( self . storage_name , self . prefix , request , getattr ( self , 'file_storage' , None ) ) self . steps = StepsHelper ( self ) response = super ( WizardView , self ) . dispatch ( request , * args , ** kwargs ) self . storage . update_response ( response ) return response def get ( self , request , * args , ** kwargs ) : self . storage . reset ( ) self . storage . current_step = self . steps . first return self . render ( self . get_form ( ) ) def post ( self , * args , ** kwargs ) : wizard_goto_step = self . request . POST . get ( 'wizard_goto_step' , None ) if wizard_goto_step and wizard_goto_step in self . get_form_list ( ) : self . storage . current_step = wizard_goto_step form = self . get_form ( data = self . storage . get_step_data ( self . steps . current ) , files = self . storage . get_step_files ( self . steps . current ) ) return self . render ( form ) management_form = ManagementForm ( self . request . POST , prefix = self . prefix ) if not management_form . is_valid ( ) : raise ValidationError ( ) form_current_step = management_form . cleaned_data [ 'current_step' ] if ( form_current_step != self . steps . current and self . storage . current_step is not None ) : self . storage . current_step = form_current_step form = self . get_form ( data = self . request . POST , files = self . request . FILES ) if form . is_valid ( ) : self . storage . set_step_data ( self . steps . current , self . process_step ( form ) ) self . storage . set_step_files ( self . steps . current , self . process_step_files ( form ) ) if self . steps . current == self . steps . last : return self . render_done ( form , ** kwargs ) else : return self . render_next_step ( form ) return self . render ( form ) def render_next_step ( self , form , ** kwargs ) : next_step = self . steps . next new_form = self . get_form ( next_step , data = self . storage . get_step_data ( next_step ) , files = self . storage . get_step_files ( next_step ) ) self . storage . current_step = next_step return self . render ( new_form , ** kwargs ) def render_done ( self , form , ** kwargs ) : final_form_list = [ ] for form_key in self . get_form_list ( ) : form_obj = self . get_form ( step = form_key , data = self . storage . get_step_data ( form_key ) , files = self . storage . get_step_files ( form_key ) ) if not form_obj . is_valid ( ) : return self . render_revalidation_failure ( form_key , form_obj , ** kwargs ) final_form_list . append ( form_obj ) done_response = self . done ( final_form_list , ** kwargs ) self . storage . reset ( ) return done_response def get_form_prefix ( self , step = None , form = None ) : if step is None : step = self . steps . current return str ( step ) def get_form_initial ( self , step ) : return self . initial_dict . get ( step , { } ) def get_form_instance ( self , step ) : return self . instance_dict . get ( step , None ) def get_form_kwargs ( self , step = None ) : return { } def get_form ( self , step = None , data = None , files = None ) : if step is None : step = self . steps . current kwargs = self . get_form_kwargs ( step ) kwargs . update ( { : data , : files , : self . get_form_prefix ( step , self . form_list [ step ] ) , : self . get_form_initial ( step ) , } ) if issubclass ( self . form_list [ step ] , forms . ModelForm ) : kwargs . update ( { 'instance' : self . get_form_instance ( step ) } ) elif issubclass ( self . form_list [ step ] , forms . models . BaseModelFormSet ) : kwargs . update ( { 'queryset' : self . get_form_instance ( step ) } ) return self . form_list [ step ] ( ** kwargs ) def process_step ( self , form ) : return self . get_form_step_data ( form ) def process_step_files ( self , form ) : return self . get_form_step_files ( form ) def render_revalidation_failure ( self , step , form , ** kwargs ) : self . storage . current_step = step return self . render ( form , ** kwargs ) def get_form_step_data ( self , form ) : return form . data def get_form_step_files ( self , form ) : return form . files def get_all_cleaned_data ( self ) : cleaned_data = { } for form_key in self . get_form_list ( ) : form_obj = self . get_form ( step = form_key , data = self . storage . get_step_data ( form_key ) , files = self . storage . get_step_files ( form_key ) ) if form_obj . is_valid ( ) : if isinstance ( form_obj . cleaned_data , ( tuple , list ) ) : cleaned_data . update ( { % form_key : form_obj . cleaned_data } ) else : cleaned_data . update ( form_obj . cleaned_data ) return cleaned_data def get_cleaned_data_for_step ( self , step ) : if step in self . form_list : form_obj = self . get_form ( step = step , data = self . storage . get_step_data ( step ) , files = self . storage . get_step_files ( step ) ) if form_obj . is_valid ( ) : return form_obj . cleaned_data return None def get_next_step ( self , step = None ) : if step is None : step = self . steps . current form_list = self . get_form_list ( ) key = form_list . keyOrder . index ( step ) + 1 if len ( form_list . keyOrder ) > key : return form_list . keyOrder [ key ] return None def get_prev_step ( self , step = None ) : if step is None : step = self . steps . current form_list = self . get_form_list ( ) key = form_list . keyOrder . index ( step ) - 1 if key >= 0 : return form_list . keyOrder [ key ] return None def get_step_index ( self , step = None ) : if step is None : step = self . steps . current return self . get_form_list ( ) . keyOrder . index ( step ) def get_context_data ( self , form , ** kwargs ) : context = super ( WizardView , self ) . get_context_data ( ** kwargs ) context . update ( self . storage . extra_data ) context [ 'wizard' ] = { : form , : self . steps , : ManagementForm ( prefix = self . prefix , initial = { : self . steps . current , } ) , } return context def render ( self , form = None , ** kwargs ) : form = form or self . get_form ( ) context = self . get_context_data ( form = form , ** kwargs ) return self . render_to_response ( context ) def done ( self , form_list , ** kwargs ) : raise NotImplementedError ( "Your %s class has not defined a done() " % self . __class__ . __name__ ) class SessionWizardView ( WizardView ) : storage_name = 'django.contrib.formtools.wizard.storage.session.SessionStorage' class CookieWizardView ( WizardView ) : storage_name = 'django.contrib.formtools.wizard.storage.cookie.CookieStorage' class NamedUrlWizardView ( WizardView ) : url_name = None done_step_name = None @ classmethod def get_initkwargs ( cls , * args , ** kwargs ) : assert 'url_name' in kwargs , 'URL name is needed to resolve correct wizard URLs' extra_kwargs = { : kwargs . pop ( 'done_step_name' , 'done' ) , : kwargs . pop ( 'url_name' ) , } initkwargs = super ( NamedUrlWizardView , cls ) . get_initkwargs ( * args , ** kwargs ) initkwargs . update ( extra_kwargs ) assert initkwargs [ 'done_step_name' ] not in initkwargs [ 'form_list' ] , 'step name "%s" is reserved for "done" view' % initkwargs [ 'done_step_name' ] return initkwargs def get_step_url ( self , step ) : return reverse ( self . url_name , kwargs = { 'step' : step } ) def get ( self , * args , ** kwargs ) : step_url = kwargs . get ( 'step' , None ) if step_url is None : if 'reset' in self . request . GET : self . storage . reset ( ) self . storage . current_step = self . steps . first if self . request . GET : query_string = "?%s" % self . request . GET . urlencode ( ) else : query_string = "" return redirect ( self . get_step_url ( self . steps . current ) + query_string ) elif step_url == self . done_step_name : last_step = self . steps . last return self . render_done ( self . get_form ( step = last_step , data = self . storage . get_step_data ( last_step ) , files = self . storage . get_step_files ( last_step ) ) , ** kwargs ) elif step_url == self . steps . current : return self . render ( self . get_form ( data = self . storage . current_step_data , files = self . storage . current_step_data , ) , ** kwargs ) elif step_url in self . get_form_list ( ) : self . storage . current_step = step_url return self . render ( self . get_form ( data = self . storage . current_step_data , files = self . storage . current_step_data , ) , ** kwargs ) else : self . storage . current_step = self . steps . first return redirect ( self . get_step_url ( self . steps . first ) ) def post ( self , * args , ** kwargs ) : wizard_goto_step = self . request . POST . get ( 'wizard_goto_step' , None ) if wizard_goto_step and wizard_goto_step in self . get_form_list ( ) : self . storage . current_step = wizard_goto_step return redirect ( self . get_step_url ( wizard_goto_step ) ) return super ( NamedUrlWizardView , self ) . post ( * args , ** kwargs ) def get_context_data ( self , form , ** kwargs ) : context = super ( NamedUrlWizardView , self ) . get_context_data ( form = form , ** kwargs ) context [ 'wizard' ] [ 'url_name' ] = self . url_name return context def render_next_step ( self , form , ** kwargs ) : next_step = self . get_next_step ( ) self . storage . current_step = next_step return redirect ( self . get_step_url ( next_step ) ) def render_revalidation_failure ( self , failed_step , form , ** kwargs ) : self . storage . current_step = failed_step return redirect ( self . get_step_url ( failed_step ) ) def render_done ( self , form , ** kwargs ) : if kwargs . get ( 'step' , None ) != self . done_step_name : return redirect ( self . get_step_url ( self . done_step_name ) ) return super ( NamedUrlWizardView , self ) . render_done ( form , ** kwargs ) class NamedUrlSessionWizardView ( NamedUrlWizardView ) : storage_name = 'django.contrib.formtools.wizard.storage.session.SessionStorage' class NamedUrlCookieWizardView ( NamedUrlWizardView ) : storage_name = 'django.contrib.formtools.wizard.storage.cookie.CookieStorage'
