import copy from django . conf import settings from django . db import connection from django . db import models from django . db . models . loading import cache from django . core . management . color import no_style from django . test import TestCase , skipIfDBFeature , skipUnlessDBFeature from models import Article , ArticleRef , Authors , Reviewers , Scientist , ScientistRef def sql_for_table ( model ) : return '\n' . join ( connection . creation . sql_create_model ( model , no_style ( ) ) [ 0 ] ) def sql_for_index ( model ) : return '\n' . join ( connection . creation . sql_indexes_for_model ( model , no_style ( ) ) ) class TablespacesTests ( TestCase ) : def setUp ( self ) : self . old_app_models = copy . deepcopy ( cache . app_models ) self . old_app_store = copy . deepcopy ( cache . app_store ) for model in Article , Authors , Reviewers , Scientist : model . _meta . managed = True def tearDown ( self ) : for model in Article , Authors , Reviewers , Scientist : model . _meta . managed = False cache . app_models = self . old_app_models cache . app_store = self . old_app_store cache . _get_models_cache = { } def assertNumContains ( self , haystack , needle , count ) : real_count = haystack . count ( needle ) self . assertEqual ( real_count , count , "Found %d instances of '%s', " % ( real_count , needle , count ) ) @ skipUnlessDBFeature ( 'supports_tablespaces' ) def test_tablespace_for_model ( self ) : sql = sql_for_table ( Scientist ) . lower ( ) if settings . DEFAULT_INDEX_TABLESPACE : self . assertNumContains ( sql , 'tbl_tbsp' , 1 ) self . assertNumContains ( sql , settings . DEFAULT_INDEX_TABLESPACE , 1 ) else : self . assertNumContains ( sql , 'tbl_tbsp' , 2 ) @ skipIfDBFeature ( 'supports_tablespaces' ) def test_tablespace_ignored_for_model ( self ) : self . assertEqual ( sql_for_table ( Scientist ) , sql_for_table ( ScientistRef ) ) @ skipUnlessDBFeature ( 'supports_tablespaces' ) def test_tablespace_for_indexed_field ( self ) : sql = sql_for_table ( Article ) . lower ( ) if settings . DEFAULT_INDEX_TABLESPACE : self . assertNumContains ( sql , 'tbl_tbsp' , 1 ) self . assertNumContains ( sql , settings . DEFAULT_INDEX_TABLESPACE , 2 ) else : self . assertNumContains ( sql , 'tbl_tbsp' , 3 ) self . assertNumContains ( sql , 'idx_tbsp' , 1 ) @ skipIfDBFeature ( 'supports_tablespaces' ) def test_tablespace_ignored_for_indexed_field ( self ) : self . assertEqual ( sql_for_table ( Article ) , sql_for_table ( ArticleRef ) ) @ skipUnlessDBFeature ( 'supports_tablespaces' ) def test_tablespace_for_many_to_many_field ( self ) : sql = sql_for_table ( Authors ) . lower ( ) if settings . DEFAULT_INDEX_TABLESPACE : self . assertNumContains ( sql , 'tbl_tbsp' , 1 ) self . assertNumContains ( sql , settings . DEFAULT_INDEX_TABLESPACE , 1 ) else : self . assertNumContains ( sql , 'tbl_tbsp' , 2 ) self . assertNumContains ( sql , 'idx_tbsp' , 0 ) sql = sql_for_index ( Authors ) . lower ( ) if settings . DEFAULT_INDEX_TABLESPACE : self . assertNumContains ( sql , settings . DEFAULT_INDEX_TABLESPACE , 2 ) else : self . assertNumContains ( sql , 'tbl_tbsp' , 2 ) self . assertNumContains ( sql , 'idx_tbsp' , 0 ) sql = sql_for_table ( Reviewers ) . lower ( ) if settings . DEFAULT_INDEX_TABLESPACE : self . assertNumContains ( sql , 'tbl_tbsp' , 1 ) self . assertNumContains ( sql , settings . DEFAULT_INDEX_TABLESPACE , 1 ) else : self . assertNumContains ( sql , 'tbl_tbsp' , 2 ) self . assertNumContains ( sql , 'idx_tbsp' , 0 ) sql = sql_for_index ( Reviewers ) . lower ( ) self . assertNumContains ( sql , 'tbl_tbsp' , 0 ) self . assertNumContains ( sql , 'idx_tbsp' , 2 )
