from django . core . exceptions import ValidationError def clean_ipv6_address ( ip_str , unpack_ipv4 = False , error_message = "This is not a valid IPv6 address" ) : best_doublecolon_start = - 1 best_doublecolon_len = 0 doublecolon_start = - 1 doublecolon_len = 0 if not is_valid_ipv6_address ( ip_str ) : raise ValidationError ( error_message ) ip_str = _explode_shorthand_ip_string ( ip_str ) ip_str = _sanitize_ipv4_mapping ( ip_str ) if unpack_ipv4 : ipv4_unpacked = _unpack_ipv4 ( ip_str ) if ipv4_unpacked : return ipv4_unpacked hextets = ip_str . split ( ":" ) for index in range ( len ( hextets ) ) : hextets [ index ] = hextets [ index ] . lstrip ( '0' ) if not hextets [ index ] : hextets [ index ] = '0' if hextets [ index ] == '0' : doublecolon_len += 1 if doublecolon_start == - 1 : doublecolon_start = index if doublecolon_len > best_doublecolon_len : best_doublecolon_len = doublecolon_len best_doublecolon_start = doublecolon_start else : doublecolon_len = 0 doublecolon_start = - 1 if best_doublecolon_len > 1 : best_doublecolon_end = ( best_doublecolon_start + best_doublecolon_len ) if best_doublecolon_end == len ( hextets ) : hextets += [ '' ] hextets [ best_doublecolon_start : best_doublecolon_end ] = [ '' ] if best_doublecolon_start == 0 : hextets = [ '' ] + hextets result = ":" . join ( hextets ) return result . lower ( ) def _sanitize_ipv4_mapping ( ip_str ) : if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) : return ip_str hextets = ip_str . split ( ':' ) if '.' in hextets [ - 1 ] : return ip_str ipv4_address = "%d.%d.%d.%d" % ( int ( hextets [ 6 ] [ 0 : 2 ] , 16 ) , int ( hextets [ 6 ] [ 2 : 4 ] , 16 ) , int ( hextets [ 7 ] [ 0 : 2 ] , 16 ) , int ( hextets [ 7 ] [ 2 : 4 ] , 16 ) , ) result = ':' . join ( hextets [ 0 : 6 ] ) result += ':' + ipv4_address return result def _unpack_ipv4 ( ip_str ) : if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) : return None hextets = ip_str . split ( ':' ) return hextets [ - 1 ] def is_valid_ipv6_address ( ip_str ) : from django . core . validators import validate_ipv4_address if ':' not in ip_str : return False if ip_str . count ( '::' ) > 1 : return False if ':::' in ip_str : return False if ( ( ip_str . startswith ( ':' ) and not ip_str . startswith ( '::' ) ) or ( ip_str . endswith ( ':' ) and not ip_str . endswith ( '::' ) ) ) : return False if ip_str . count ( ':' ) > 7 : return False if '::' not in ip_str and ip_str . count ( ':' ) != 7 : if ip_str . count ( '.' ) != 3 : return False ip_str = _explode_shorthand_ip_string ( ip_str ) for hextet in ip_str . split ( ':' ) : if hextet . count ( '.' ) == 3 : if not ip_str . split ( ':' ) [ - 1 ] == hextet : return False try : validate_ipv4_address ( hextet ) except ValidationError : return False else : try : if int ( hextet , 16 ) < 0x0 or int ( hextet , 16 ) > 0xFFFF : return False except ValueError : return False return True def _explode_shorthand_ip_string ( ip_str ) : if not _is_shorthand_ip ( ip_str ) : return ip_str new_ip = [ ] hextet = ip_str . split ( '::' ) if '.' in ip_str . split ( ':' ) [ - 1 ] : fill_to = 7 else : fill_to = 8 if len ( hextet ) > 1 : sep = len ( hextet [ 0 ] . split ( ':' ) ) + len ( hextet [ 1 ] . split ( ':' ) ) new_ip = hextet [ 0 ] . split ( ':' ) for _ in xrange ( fill_to - sep ) : new_ip . append ( '0000' ) new_ip += hextet [ 1 ] . split ( ':' ) else : new_ip = ip_str . split ( ':' ) ret_ip = [ ] for hextet in new_ip : ret_ip . append ( ( '0' * ( 4 - len ( hextet ) ) + hextet ) . lower ( ) ) return ':' . join ( ret_ip ) def _is_shorthand_ip ( ip_str ) : if ip_str . count ( '::' ) == 1 : return True if filter ( lambda x : len ( x ) < 4 , ip_str . split ( ':' ) ) : return True return False
