from django . contrib . messages import constants from django . contrib . messages . tests . base import BaseTest from django . contrib . messages . storage . cookie import ( CookieStorage , MessageEncoder , MessageDecoder ) from django . contrib . messages . storage . base import Message from django . test . utils import override_settings from django . utils import simplejson as json def set_cookie_data ( storage , messages , invalid = False , encode_empty = False ) : encoded_data = storage . _encode ( messages , encode_empty = encode_empty ) if invalid : encoded_data = encoded_data [ 1 : ] storage . request . COOKIES = { CookieStorage . cookie_name : encoded_data } if hasattr ( storage , '_loaded_data' ) : del storage . _loaded_data def stored_cookie_messages_count ( storage , response ) : cookie = response . cookies . get ( storage . cookie_name ) if not cookie or cookie [ 'max-age' ] == 0 : return 0 data = storage . _decode ( cookie . value ) if not data : return 0 if data [ - 1 ] == CookieStorage . not_finished : data . pop ( ) return len ( data ) class CookieTest ( BaseTest ) : storage_class = CookieStorage def stored_messages_count ( self , storage , response ) : return stored_cookie_messages_count ( storage , response ) def test_get ( self ) : storage = self . storage_class ( self . get_request ( ) ) example_messages = [ 'test' , 'me' ] set_cookie_data ( storage , example_messages ) self . assertEqual ( list ( storage ) , example_messages ) def test_domain ( self ) : storage = self . get_storage ( ) response = self . get_response ( ) storage . add ( constants . INFO , 'test' ) storage . update ( response ) self . assertTrue ( 'test' in response . cookies [ 'messages' ] . value ) self . assertEqual ( response . cookies [ 'messages' ] [ 'domain' ] , '.lawrence.com' ) self . assertEqual ( response . cookies [ 'messages' ] [ 'expires' ] , '' ) storage = self . get_storage ( ) response = self . get_response ( ) storage . add ( constants . INFO , 'test' ) for m in storage : pass storage . update ( response ) self . assertEqual ( response . cookies [ 'messages' ] . value , '' ) self . assertEqual ( response . cookies [ 'messages' ] [ 'domain' ] , '.lawrence.com' ) self . assertEqual ( response . cookies [ 'messages' ] [ 'expires' ] , 'Thu, 01-Jan-1970 00:00:00 GMT' ) def test_get_bad_cookie ( self ) : request = self . get_request ( ) storage = self . storage_class ( request ) example_messages = [ 'test' , 'me' ] set_cookie_data ( storage , example_messages , invalid = True ) self . assertEqual ( list ( storage ) , [ ] ) def test_max_cookie_length ( self ) : storage = self . get_storage ( ) response = self . get_response ( ) msg_size = int ( ( CookieStorage . max_cookie_size - 54 ) / 4.5 - 37 ) for i in range ( 5 ) : storage . add ( constants . INFO , str ( i ) * msg_size ) unstored_messages = storage . update ( response ) cookie_storing = self . stored_messages_count ( storage , response ) self . assertEqual ( cookie_storing , 4 ) self . assertEqual ( len ( unstored_messages ) , 1 ) self . assertTrue ( unstored_messages [ 0 ] . message == '0' * msg_size ) def test_json_encoder_decoder ( self ) : messages = [ { : Message ( constants . INFO , 'Test message' ) , : [ Message ( constants . INFO , 'message %s' ) for x in xrange ( 5 ) ] + [ { 'another-message' : Message ( constants . ERROR , 'error' ) } ] , } , Message ( constants . INFO , 'message %s' ) , ] encoder = MessageEncoder ( separators = ( ',' , ':' ) ) value = encoder . encode ( messages ) decoded_messages = json . loads ( value , cls = MessageDecoder ) self . assertEqual ( messages , decoded_messages ) CookieTest = override_settings ( SESSION_COOKIE_DOMAIN = '.lawrence.com' ) ( CookieTest )
