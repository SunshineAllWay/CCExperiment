"Implementation of tzinfo classes for use with datetime.datetime." import time from datetime import timedelta , tzinfo from django . utils . encoding import smart_unicode , smart_str , DEFAULT_LOCALE_ENCODING class FixedOffset ( tzinfo ) : def __init__ ( self , offset ) : if isinstance ( offset , timedelta ) : self . __offset = offset offset = self . __offset . seconds // 60 else : self . __offset = timedelta ( minutes = offset ) sign = '-' if offset < 0 else '+' self . __name = u"%s%02d%02d" % ( sign , abs ( offset ) / 60. , abs ( offset ) % 60 ) def __repr__ ( self ) : return self . __name def __getinitargs__ ( self ) : return self . __offset , def utcoffset ( self , dt ) : return self . __offset def tzname ( self , dt ) : return self . __name def dst ( self , dt ) : return timedelta ( 0 ) class LocalTimezone ( tzinfo ) : def __init__ ( self , dt ) : tzinfo . __init__ ( self ) self . __dt = dt self . _tzname = self . tzname ( dt ) def __repr__ ( self ) : return smart_str ( self . _tzname ) def __getinitargs__ ( self ) : return self . __dt , def utcoffset ( self , dt ) : if self . _isdst ( dt ) : return timedelta ( seconds = - time . altzone ) else : return timedelta ( seconds = - time . timezone ) def dst ( self , dt ) : if self . _isdst ( dt ) : return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone ) else : return timedelta ( 0 ) def tzname ( self , dt ) : try : return smart_unicode ( time . tzname [ self . _isdst ( dt ) ] , DEFAULT_LOCALE_ENCODING ) except UnicodeDecodeError : return None def _isdst ( self , dt ) : tt = ( dt . year , dt . month , dt . day , dt . hour , dt . minute , dt . second , dt . weekday ( ) , 0 , 0 ) try : stamp = time . mktime ( tt ) except ( OverflowError , ValueError ) : tt = ( 2037 , ) + tt [ 1 : ] stamp = time . mktime ( tt ) tt = time . localtime ( stamp ) return tt . tm_isdst > 0
