import psycopg2 . extensions from django . db . backends . creation import BaseDatabaseCreation from django . db . backends . util import truncate_name class DatabaseCreation ( BaseDatabaseCreation ) : data_types = { : 'serial' , : 'boolean' , : 'varchar(%(max_length)s)' , : 'varchar(%(max_length)s)' , : 'date' , : 'timestamp with time zone' , : 'numeric(%(max_digits)s, %(decimal_places)s)' , : 'varchar(%(max_length)s)' , : 'varchar(%(max_length)s)' , : 'double precision' , : 'integer' , : 'bigint' , : 'inet' , : 'inet' , : 'boolean' , : 'integer' , : 'integer CHECK ("%(column)s" >= 0)' , : 'smallint CHECK ("%(column)s" >= 0)' , : 'varchar(%(max_length)s)' , : 'smallint' , : 'text' , : 'time' , } def sql_table_creation_suffix ( self ) : assert self . connection . settings_dict [ 'TEST_COLLATION' ] is None , "PostgreSQL does not support collation setting at database creation time." if self . connection . settings_dict [ 'TEST_CHARSET' ] : return "WITH ENCODING '%s'" % self . connection . settings_dict [ 'TEST_CHARSET' ] return '' def sql_indexes_for_field ( self , model , f , style ) : if f . db_index and not f . unique : qn = self . connection . ops . quote_name db_table = model . _meta . db_table tablespace = f . db_tablespace or model . _meta . db_tablespace if tablespace : tablespace_sql = self . connection . ops . tablespace_sql ( tablespace ) if tablespace_sql : tablespace_sql = ' ' + tablespace_sql else : tablespace_sql = '' def get_index_sql ( index_name , opclass = '' ) : return ( style . SQL_KEYWORD ( 'CREATE INDEX' ) + ' ' + style . SQL_TABLE ( qn ( truncate_name ( index_name , self . connection . ops . max_name_length ( ) ) ) ) + ' ' + style . SQL_KEYWORD ( 'ON' ) + ' ' + style . SQL_TABLE ( qn ( db_table ) ) + ' ' + % ( style . SQL_FIELD ( qn ( f . column ) ) , opclass ) + % tablespace_sql ) output = [ get_index_sql ( '%s_%s' % ( db_table , f . column ) ) ] db_type = f . db_type ( connection = self . connection ) if db_type . startswith ( 'varchar' ) : output . append ( get_index_sql ( '%s_%s_like' % ( db_table , f . column ) , ) ) elif db_type . startswith ( 'text' ) : output . append ( get_index_sql ( '%s_%s_like' % ( db_table , f . column ) , ) ) else : output = [ ] return output def set_autocommit ( self ) : self . _prepare_for_test_db_ddl ( ) def _prepare_for_test_db_ddl ( self ) : self . connection . connection . rollback ( ) self . connection . connection . set_isolation_level ( psycopg2 . extensions . ISOLATION_LEVEL_AUTOCOMMIT )
