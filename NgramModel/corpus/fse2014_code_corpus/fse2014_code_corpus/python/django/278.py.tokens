import operator from django import template from django . template . defaultfilters import stringfilter from django . template . loader import get_template register = template . Library ( ) @ register . filter @ stringfilter def trim ( value , num ) : return value [ : num ] @ register . simple_tag def no_params ( ) : return "no_params - Expected result" no_params . anything = "Expected no_params __dict__" @ register . simple_tag def one_param ( arg ) : return "one_param - Expected result: %s" % arg one_param . anything = "Expected one_param __dict__" @ register . simple_tag ( takes_context = False ) def explicit_no_context ( arg ) : return "explicit_no_context - Expected result: %s" % arg explicit_no_context . anything = "Expected explicit_no_context __dict__" @ register . simple_tag ( takes_context = True ) def no_params_with_context ( context ) : return "no_params_with_context - Expected result (context value: %s)" % context [ 'value' ] no_params_with_context . anything = "Expected no_params_with_context __dict__" @ register . simple_tag ( takes_context = True ) def params_and_context ( context , arg ) : return "params_and_context - Expected result (context value: %s): %s" % ( context [ 'value' ] , arg ) params_and_context . anything = "Expected params_and_context __dict__" @ register . simple_tag def simple_two_params ( one , two ) : return "simple_two_params - Expected result: %s, %s" % ( one , two ) simple_two_params . anything = "Expected simple_two_params __dict__" @ register . simple_tag def simple_one_default ( one , two = 'hi' ) : return "simple_one_default - Expected result: %s, %s" % ( one , two ) simple_one_default . anything = "Expected simple_one_default __dict__" @ register . simple_tag def simple_unlimited_args ( one , two = 'hi' , * args ) : return "simple_unlimited_args - Expected result: %s" % ( ', ' . join ( [ unicode ( arg ) for arg in [ one , two ] + list ( args ) ] ) ) simple_unlimited_args . anything = "Expected simple_unlimited_args __dict__" @ register . simple_tag def simple_only_unlimited_args ( * args ) : return "simple_only_unlimited_args - Expected result: %s" % ', ' . join ( [ unicode ( arg ) for arg in args ] ) simple_only_unlimited_args . anything = "Expected simple_only_unlimited_args __dict__" @ register . simple_tag def simple_unlimited_args_kwargs ( one , two = 'hi' , * args , ** kwargs ) : sorted_kwarg = sorted ( kwargs . iteritems ( ) , key = operator . itemgetter ( 0 ) ) return "simple_unlimited_args_kwargs - Expected result: %s / %s" % ( . join ( [ unicode ( arg ) for arg in [ one , two ] + list ( args ) ] ) , . join ( [ '%s=%s' % ( k , v ) for ( k , v ) in sorted_kwarg ] ) ) simple_unlimited_args_kwargs . anything = "Expected simple_unlimited_args_kwargs __dict__" @ register . simple_tag ( takes_context = True ) def simple_tag_without_context_parameter ( arg ) : return "Expected result" simple_tag_without_context_parameter . anything = "Expected simple_tag_without_context_parameter __dict__" @ register . simple_tag ( takes_context = True ) def current_app ( context ) : return "%s" % context . current_app @ register . simple_tag ( takes_context = True ) def use_l10n ( context ) : return "%s" % context . use_l10n @ register . simple_tag ( name = 'minustwo' ) def minustwo_overridden_name ( value ) : return value - 2 register . simple_tag ( lambda x : x - 1 , name = 'minusone' ) @ register . inclusion_tag ( 'inclusion.html' ) def inclusion_no_params ( ) : return { "result" : "inclusion_no_params - Expected result" } inclusion_no_params . anything = "Expected inclusion_no_params __dict__" @ register . inclusion_tag ( get_template ( 'inclusion.html' ) ) def inclusion_no_params_from_template ( ) : return { "result" : "inclusion_no_params_from_template - Expected result" } inclusion_no_params_from_template . anything = "Expected inclusion_no_params_from_template __dict__" @ register . inclusion_tag ( 'inclusion.html' ) def inclusion_one_param ( arg ) : return { "result" : "inclusion_one_param - Expected result: %s" % arg } inclusion_one_param . anything = "Expected inclusion_one_param __dict__" @ register . inclusion_tag ( get_template ( 'inclusion.html' ) ) def inclusion_one_param_from_template ( arg ) : return { "result" : "inclusion_one_param_from_template - Expected result: %s" % arg } inclusion_one_param_from_template . anything = "Expected inclusion_one_param_from_template __dict__" @ register . inclusion_tag ( 'inclusion.html' , takes_context = False ) def inclusion_explicit_no_context ( arg ) : return { "result" : "inclusion_explicit_no_context - Expected result: %s" % arg } inclusion_explicit_no_context . anything = "Expected inclusion_explicit_no_context __dict__" @ register . inclusion_tag ( get_template ( 'inclusion.html' ) , takes_context = False ) def inclusion_explicit_no_context_from_template ( arg ) : return { "result" : "inclusion_explicit_no_context_from_template - Expected result: %s" % arg } inclusion_explicit_no_context_from_template . anything = "Expected inclusion_explicit_no_context_from_template __dict__" @ register . inclusion_tag ( 'inclusion.html' , takes_context = True ) def inclusion_no_params_with_context ( context ) : return { "result" : "inclusion_no_params_with_context - Expected result (context value: %s)" % context [ 'value' ] } inclusion_no_params_with_context . anything = "Expected inclusion_no_params_with_context __dict__" @ register . inclusion_tag ( get_template ( 'inclusion.html' ) , takes_context = True ) def inclusion_no_params_with_context_from_template ( context ) : return { "result" : "inclusion_no_params_with_context_from_template - Expected result (context value: %s)" % context [ 'value' ] } inclusion_no_params_with_context_from_template . anything = "Expected inclusion_no_params_with_context_from_template __dict__" @ register . inclusion_tag ( 'inclusion.html' , takes_context = True ) def inclusion_params_and_context ( context , arg ) : return { "result" : "inclusion_params_and_context - Expected result (context value: %s): %s" % ( context [ 'value' ] , arg ) } inclusion_params_and_context . anything = "Expected inclusion_params_and_context __dict__" @ register . inclusion_tag ( get_template ( 'inclusion.html' ) , takes_context = True ) def inclusion_params_and_context_from_template ( context , arg ) : return { "result" : "inclusion_params_and_context_from_template - Expected result (context value: %s): %s" % ( context [ 'value' ] , arg ) } inclusion_params_and_context_from_template . anything = "Expected inclusion_params_and_context_from_template __dict__" @ register . inclusion_tag ( 'inclusion.html' ) def inclusion_two_params ( one , two ) : return { "result" : "inclusion_two_params - Expected result: %s, %s" % ( one , two ) } inclusion_two_params . anything = "Expected inclusion_two_params __dict__" @ register . inclusion_tag ( get_template ( 'inclusion.html' ) ) def inclusion_two_params_from_template ( one , two ) : return { "result" : "inclusion_two_params_from_template - Expected result: %s, %s" % ( one , two ) } inclusion_two_params_from_template . anything = "Expected inclusion_two_params_from_template __dict__" @ register . inclusion_tag ( 'inclusion.html' ) def inclusion_one_default ( one , two = 'hi' ) : return { "result" : "inclusion_one_default - Expected result: %s, %s" % ( one , two ) } inclusion_one_default . anything = "Expected inclusion_one_default __dict__" @ register . inclusion_tag ( get_template ( 'inclusion.html' ) ) def inclusion_one_default_from_template ( one , two = 'hi' ) : return { "result" : "inclusion_one_default_from_template - Expected result: %s, %s" % ( one , two ) } inclusion_one_default_from_template . anything = "Expected inclusion_one_default_from_template __dict__" @ register . inclusion_tag ( 'inclusion.html' ) def inclusion_unlimited_args ( one , two = 'hi' , * args ) : return { "result" : "inclusion_unlimited_args - Expected result: %s" % ( ', ' . join ( [ unicode ( arg ) for arg in [ one , two ] + list ( args ) ] ) ) } inclusion_unlimited_args . anything = "Expected inclusion_unlimited_args __dict__" @ register . inclusion_tag ( get_template ( 'inclusion.html' ) ) def inclusion_unlimited_args_from_template ( one , two = 'hi' , * args ) : return { "result" : "inclusion_unlimited_args_from_template - Expected result: %s" % ( ', ' . join ( [ unicode ( arg ) for arg in [ one , two ] + list ( args ) ] ) ) } inclusion_unlimited_args_from_template . anything = "Expected inclusion_unlimited_args_from_template __dict__" @ register . inclusion_tag ( 'inclusion.html' ) def inclusion_only_unlimited_args ( * args ) : return { "result" : "inclusion_only_unlimited_args - Expected result: %s" % ( ', ' . join ( [ unicode ( arg ) for arg in args ] ) ) } inclusion_only_unlimited_args . anything = "Expected inclusion_only_unlimited_args __dict__" @ register . inclusion_tag ( get_template ( 'inclusion.html' ) ) def inclusion_only_unlimited_args_from_template ( * args ) : return { "result" : "inclusion_only_unlimited_args_from_template - Expected result: %s" % ( ', ' . join ( [ unicode ( arg ) for arg in args ] ) ) } inclusion_only_unlimited_args_from_template . anything = "Expected inclusion_only_unlimited_args_from_template __dict__" @ register . inclusion_tag ( 'test_incl_tag_current_app.html' , takes_context = True ) def inclusion_tag_current_app ( context ) : return { } inclusion_tag_current_app . anything = "Expected inclusion_tag_current_app __dict__" @ register . inclusion_tag ( 'test_incl_tag_use_l10n.html' , takes_context = True ) def inclusion_tag_use_l10n ( context ) : return { } inclusion_tag_use_l10n . anything = "Expected inclusion_tag_use_l10n __dict__" @ register . inclusion_tag ( 'inclusion.html' ) def inclusion_unlimited_args_kwargs ( one , two = 'hi' , * args , ** kwargs ) : sorted_kwarg = sorted ( kwargs . iteritems ( ) , key = operator . itemgetter ( 0 ) ) return { "result" : "inclusion_unlimited_args_kwargs - Expected result: %s / %s" % ( . join ( [ unicode ( arg ) for arg in [ one , two ] + list ( args ) ] ) , . join ( [ '%s=%s' % ( k , v ) for ( k , v ) in sorted_kwarg ] ) ) } inclusion_unlimited_args_kwargs . anything = "Expected inclusion_unlimited_args_kwargs __dict__" @ register . inclusion_tag ( 'inclusion.html' , takes_context = True ) def inclusion_tag_without_context_parameter ( arg ) : return { } inclusion_tag_without_context_parameter . anything = "Expected inclusion_tag_without_context_parameter __dict__" @ register . assignment_tag def assignment_no_params ( ) : return "assignment_no_params - Expected result" assignment_no_params . anything = "Expected assignment_no_params __dict__" @ register . assignment_tag def assignment_one_param ( arg ) : return "assignment_one_param - Expected result: %s" % arg assignment_one_param . anything = "Expected assignment_one_param __dict__" @ register . assignment_tag ( takes_context = False ) def assignment_explicit_no_context ( arg ) : return "assignment_explicit_no_context - Expected result: %s" % arg assignment_explicit_no_context . anything = "Expected assignment_explicit_no_context __dict__" @ register . assignment_tag ( takes_context = True ) def assignment_no_params_with_context ( context ) : return "assignment_no_params_with_context - Expected result (context value: %s)" % context [ 'value' ] assignment_no_params_with_context . anything = "Expected assignment_no_params_with_context __dict__" @ register . assignment_tag ( takes_context = True ) def assignment_params_and_context ( context , arg ) : return "assignment_params_and_context - Expected result (context value: %s): %s" % ( context [ 'value' ] , arg ) assignment_params_and_context . anything = "Expected assignment_params_and_context __dict__" @ register . assignment_tag def assignment_two_params ( one , two ) : return "assignment_two_params - Expected result: %s, %s" % ( one , two ) assignment_two_params . anything = "Expected assignment_two_params __dict__" @ register . assignment_tag def assignment_one_default ( one , two = 'hi' ) : return "assignment_one_default - Expected result: %s, %s" % ( one , two ) assignment_one_default . anything = "Expected assignment_one_default __dict__" @ register . assignment_tag def assignment_unlimited_args ( one , two = 'hi' , * args ) : return "assignment_unlimited_args - Expected result: %s" % ( ', ' . join ( [ unicode ( arg ) for arg in [ one , two ] + list ( args ) ] ) ) assignment_unlimited_args . anything = "Expected assignment_unlimited_args __dict__" @ register . assignment_tag def assignment_only_unlimited_args ( * args ) : return "assignment_only_unlimited_args - Expected result: %s" % ', ' . join ( [ unicode ( arg ) for arg in args ] ) assignment_only_unlimited_args . anything = "Expected assignment_only_unlimited_args __dict__" @ register . assignment_tag def assignment_unlimited_args_kwargs ( one , two = 'hi' , * args , ** kwargs ) : sorted_kwarg = sorted ( kwargs . iteritems ( ) , key = operator . itemgetter ( 0 ) ) return "assignment_unlimited_args_kwargs - Expected result: %s / %s" % ( . join ( [ unicode ( arg ) for arg in [ one , two ] + list ( args ) ] ) , . join ( [ '%s=%s' % ( k , v ) for ( k , v ) in sorted_kwarg ] ) ) assignment_unlimited_args_kwargs . anything = "Expected assignment_unlimited_args_kwargs __dict__" @ register . assignment_tag ( takes_context = True ) def assignment_tag_without_context_parameter ( arg ) : return "Expected result" assignment_tag_without_context_parameter . anything = "Expected assignment_tag_without_context_parameter __dict__"
