from django . forms . models import ModelFormMetaclass , ModelForm from django . template import RequestContext , loader from django . http import Http404 , HttpResponse , HttpResponseRedirect from django . core . xheaders import populate_xheaders from django . core . exceptions import ObjectDoesNotExist , ImproperlyConfigured from django . utils . translation import ugettext from django . contrib . auth . views import redirect_to_login from django . views . generic import GenericViewError from django . contrib import messages import warnings warnings . warn ( , DeprecationWarning ) def apply_extra_context ( extra_context , context ) : for key , value in extra_context . iteritems ( ) : if callable ( value ) : context [ key ] = value ( ) else : context [ key ] = value def get_model_and_form_class ( model , form_class ) : if form_class : return form_class . _meta . model , form_class if model : tmp_model = model class Meta : model = tmp_model class_name = model . __name__ + 'Form' form_class = ModelFormMetaclass ( class_name , ( ModelForm , ) , { 'Meta' : Meta } ) return model , form_class raise GenericViewError ( "Generic view must be called with either a model or" ) def redirect ( post_save_redirect , obj ) : if post_save_redirect : return HttpResponseRedirect ( post_save_redirect % obj . __dict__ ) elif hasattr ( obj , 'get_absolute_url' ) : return HttpResponseRedirect ( obj . get_absolute_url ( ) ) else : raise ImproperlyConfigured ( ) def lookup_object ( model , object_id , slug , slug_field ) : lookup_kwargs = { } if object_id : lookup_kwargs [ '%s__exact' % model . _meta . pk . name ] = object_id elif slug and slug_field : lookup_kwargs [ '%s__exact' % slug_field ] = slug else : raise GenericViewError ( ) try : return model . objects . get ( ** lookup_kwargs ) except ObjectDoesNotExist : raise Http404 ( "No %s found for %s" % ( model . _meta . verbose_name , lookup_kwargs ) ) def create_object ( request , model = None , template_name = None , template_loader = loader , extra_context = None , post_save_redirect = None , login_required = False , context_processors = None , form_class = None ) : if extra_context is None : extra_context = { } if login_required and not request . user . is_authenticated ( ) : return redirect_to_login ( request . path ) model , form_class = get_model_and_form_class ( model , form_class ) if request . method == 'POST' : form = form_class ( request . POST , request . FILES ) if form . is_valid ( ) : new_object = form . save ( ) msg = ugettext ( "The %(verbose_name)s was created successfully." ) % { "verbose_name" : model . _meta . verbose_name } messages . success ( request , msg , fail_silently = True ) return redirect ( post_save_redirect , new_object ) else : form = form_class ( ) if not template_name : template_name = "%s/%s_form.html" % ( model . _meta . app_label , model . _meta . object_name . lower ( ) ) t = template_loader . get_template ( template_name ) c = RequestContext ( request , { : form , } , context_processors ) apply_extra_context ( extra_context , c ) return HttpResponse ( t . render ( c ) ) def update_object ( request , model = None , object_id = None , slug = None , slug_field = 'slug' , template_name = None , template_loader = loader , extra_context = None , post_save_redirect = None , login_required = False , context_processors = None , template_object_name = 'object' , form_class = None ) : if extra_context is None : extra_context = { } if login_required and not request . user . is_authenticated ( ) : return redirect_to_login ( request . path ) model , form_class = get_model_and_form_class ( model , form_class ) obj = lookup_object ( model , object_id , slug , slug_field ) if request . method == 'POST' : form = form_class ( request . POST , request . FILES , instance = obj ) if form . is_valid ( ) : obj = form . save ( ) msg = ugettext ( "The %(verbose_name)s was updated successfully." ) % { "verbose_name" : model . _meta . verbose_name } messages . success ( request , msg , fail_silently = True ) return redirect ( post_save_redirect , obj ) else : form = form_class ( instance = obj ) if not template_name : template_name = "%s/%s_form.html" % ( model . _meta . app_label , model . _meta . object_name . lower ( ) ) t = template_loader . get_template ( template_name ) c = RequestContext ( request , { : form , template_object_name : obj , } , context_processors ) apply_extra_context ( extra_context , c ) response = HttpResponse ( t . render ( c ) ) populate_xheaders ( request , response , model , getattr ( obj , obj . _meta . pk . attname ) ) return response def delete_object ( request , model , post_delete_redirect , object_id = None , slug = None , slug_field = 'slug' , template_name = None , template_loader = loader , extra_context = None , login_required = False , context_processors = None , template_object_name = 'object' ) : if extra_context is None : extra_context = { } if login_required and not request . user . is_authenticated ( ) : return redirect_to_login ( request . path ) obj = lookup_object ( model , object_id , slug , slug_field ) if request . method == 'POST' : obj . delete ( ) msg = ugettext ( "The %(verbose_name)s was deleted." ) % { "verbose_name" : model . _meta . verbose_name } messages . success ( request , msg , fail_silently = True ) return HttpResponseRedirect ( post_delete_redirect ) else : if not template_name : template_name = "%s/%s_confirm_delete.html" % ( model . _meta . app_label , model . _meta . object_name . lower ( ) ) t = template_loader . get_template ( template_name ) c = RequestContext ( request , { template_object_name : obj , } , context_processors ) apply_extra_context ( extra_context , c ) response = HttpResponse ( t . render ( c ) ) populate_xheaders ( request , response , model , getattr ( obj , obj . _meta . pk . attname ) ) return response
