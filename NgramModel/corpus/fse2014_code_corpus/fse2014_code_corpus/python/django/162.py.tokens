from django . core . exceptions import ValidationError from django . db import models from django . utils . unittest import TestCase class ValidationMessagesTest ( TestCase ) : def test_autofield_field_raises_error_message ( self ) : f = models . AutoField ( primary_key = True ) self . assertRaises ( ValidationError , f . clean , 'foo' , None ) try : f . clean ( 'foo' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ u"'foo' value must be an integer." ] ) self . assertRaises ( AssertionError , models . AutoField , 'primary_key' , False ) try : models . AutoField ( primary_key = False ) except AssertionError , e : self . assertEqual ( str ( e ) , "AutoFields must have primary_key=True." ) def test_integer_field_raises_error_message ( self ) : f = models . IntegerField ( ) self . assertRaises ( ValidationError , f . clean , 'foo' , None ) try : f . clean ( 'foo' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ u"'foo' value must be an integer." ] ) def test_boolean_field_raises_error_message ( self ) : f = models . BooleanField ( ) self . assertRaises ( ValidationError , f . clean , 'foo' , None ) try : f . clean ( 'foo' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ u"'foo' value must be either True or False." ] ) def test_float_field_raises_error_message ( self ) : f = models . FloatField ( ) self . assertRaises ( ValidationError , f . clean , 'foo' , None ) try : f . clean ( 'foo' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ u"'foo' value must be a float." ] ) def test_decimal_field_raises_error_message ( self ) : f = models . DecimalField ( ) self . assertRaises ( ValidationError , f . clean , 'foo' , None ) try : f . clean ( 'foo' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ u"'foo' value must be a decimal number." ] ) def test_null_boolean_field_raises_error_message ( self ) : f = models . NullBooleanField ( ) self . assertRaises ( ValidationError , f . clean , 'foo' , None ) try : f . clean ( 'foo' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ u"'foo' value must be either None, True or False." ] ) def test_date_field_raises_error_message ( self ) : f = models . DateField ( ) self . assertRaises ( ValidationError , f . clean , 'foo' , None ) try : f . clean ( 'foo' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ ] ) self . assertRaises ( ValidationError , f . clean , 'aaaa-10-10' , None ) try : f . clean ( 'aaaa-10-10' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ ] ) self . assertRaises ( ValidationError , f . clean , '2011-13-10' , None ) try : f . clean ( '2011-13-10' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ ] ) self . assertRaises ( ValidationError , f . clean , '2011-10-32' , None ) try : f . clean ( '2011-10-32' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ ] ) def test_datetime_field_raises_error_message ( self ) : f = models . DateTimeField ( ) self . assertRaises ( ValidationError , f . clean , 'foo' , None ) try : f . clean ( 'foo' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ ] ) self . assertRaises ( ValidationError , f . clean , '2011-10-32' , None ) try : f . clean ( '2011-10-32' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ ] ) self . assertRaises ( ValidationError , f . clean , '2011-10-32 10:10' , None ) try : f . clean ( '2011-10-32 10:10' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ ] ) def test_time_field_raises_error_message ( self ) : f = models . TimeField ( ) self . assertRaises ( ValidationError , f . clean , 'foo' , None ) try : f . clean ( 'foo' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ ] ) self . assertRaises ( ValidationError , f . clean , '25:50' , None ) try : f . clean ( '25:50' , None ) except ValidationError , e : self . assertEqual ( e . messages , [ ] )
