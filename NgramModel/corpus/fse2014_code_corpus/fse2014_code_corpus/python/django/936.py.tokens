from copy import copy from django . core . exceptions import ImproperlyConfigured from django . utils . importlib import import_module _standard_context_processors = None _builtin_context_processors = ( 'django.core.context_processors.csrf' , ) class ContextPopException ( Exception ) : pass class BaseContext ( object ) : def __init__ ( self , dict_ = None ) : self . _reset_dicts ( dict_ ) def _reset_dicts ( self , value = None ) : self . dicts = [ value or { } ] def __copy__ ( self ) : duplicate = copy ( super ( BaseContext , self ) ) duplicate . dicts = self . dicts [ : ] return duplicate def __repr__ ( self ) : return repr ( self . dicts ) def __iter__ ( self ) : for d in reversed ( self . dicts ) : yield d def push ( self ) : d = { } self . dicts . append ( d ) return d def pop ( self ) : if len ( self . dicts ) == 1 : raise ContextPopException return self . dicts . pop ( ) def __setitem__ ( self , key , value ) : self . dicts [ - 1 ] [ key ] = value def __getitem__ ( self , key ) : for d in reversed ( self . dicts ) : if key in d : return d [ key ] raise KeyError ( key ) def __delitem__ ( self , key ) : del self . dicts [ - 1 ] [ key ] def has_key ( self , key ) : for d in self . dicts : if key in d : return True return False def __contains__ ( self , key ) : return self . has_key ( key ) def get ( self , key , otherwise = None ) : for d in reversed ( self . dicts ) : if key in d : return d [ key ] return otherwise def new ( self , values = None ) : new_context = copy ( self ) new_context . _reset_dicts ( values ) return new_context class Context ( BaseContext ) : def __init__ ( self , dict_ = None , autoescape = True , current_app = None , use_l10n = None , use_tz = None ) : self . autoescape = autoescape self . current_app = current_app self . use_l10n = use_l10n self . use_tz = use_tz self . render_context = RenderContext ( ) super ( Context , self ) . __init__ ( dict_ ) def __copy__ ( self ) : duplicate = super ( Context , self ) . __copy__ ( ) duplicate . render_context = copy ( self . render_context ) return duplicate def update ( self , other_dict ) : if not hasattr ( other_dict , '__getitem__' ) : raise TypeError ( 'other_dict must be a mapping (dictionary-like) object.' ) self . dicts . append ( other_dict ) return other_dict class RenderContext ( BaseContext ) : def __iter__ ( self ) : for d in self . dicts [ - 1 ] : yield d def has_key ( self , key ) : return key in self . dicts [ - 1 ] def get ( self , key , otherwise = None ) : d = self . dicts [ - 1 ] if key in d : return d [ key ] return otherwise def get_standard_processors ( ) : from django . conf import settings global _standard_context_processors if _standard_context_processors is None : processors = [ ] collect = [ ] collect . extend ( _builtin_context_processors ) collect . extend ( settings . TEMPLATE_CONTEXT_PROCESSORS ) for path in collect : i = path . rfind ( '.' ) module , attr = path [ : i ] , path [ i + 1 : ] try : mod = import_module ( module ) except ImportError , e : raise ImproperlyConfigured ( 'Error importing request processor module %s: "%s"' % ( module , e ) ) try : func = getattr ( mod , attr ) except AttributeError : raise ImproperlyConfigured ( 'Module "%s" does not define a "%s" callable request processor' % ( module , attr ) ) processors . append ( func ) _standard_context_processors = tuple ( processors ) return _standard_context_processors class RequestContext ( Context ) : def __init__ ( self , request , dict_ = None , processors = None , current_app = None , use_l10n = None , use_tz = None ) : Context . __init__ ( self , dict_ , current_app = current_app , use_l10n = use_l10n , use_tz = use_tz ) if processors is None : processors = ( ) else : processors = tuple ( processors ) for processor in get_standard_processors ( ) + processors : self . update ( processor ( request ) )
