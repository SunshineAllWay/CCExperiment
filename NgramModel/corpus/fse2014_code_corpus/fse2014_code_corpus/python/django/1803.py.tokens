from django . contrib . sessions . backends . base import SessionBase , CreateError from django . core . exceptions import SuspiciousOperation from django . db import IntegrityError , transaction , router from django . utils . encoding import force_unicode from django . utils import timezone class SessionStore ( SessionBase ) : def __init__ ( self , session_key = None ) : super ( SessionStore , self ) . __init__ ( session_key ) def load ( self ) : try : s = Session . objects . get ( session_key = self . session_key , expire_date__gt = timezone . now ( ) ) return self . decode ( force_unicode ( s . session_data ) ) except ( Session . DoesNotExist , SuspiciousOperation ) : self . create ( ) return { } def exists ( self , session_key ) : return Session . objects . filter ( session_key = session_key ) . exists ( ) def create ( self ) : while True : self . _session_key = self . _get_new_session_key ( ) try : self . save ( must_create = True ) except CreateError : continue self . modified = True self . _session_cache = { } return def save ( self , must_create = False ) : obj = Session ( session_key = self . _get_or_create_session_key ( ) , session_data = self . encode ( self . _get_session ( no_load = must_create ) ) , expire_date = self . get_expiry_date ( ) ) using = router . db_for_write ( Session , instance = obj ) sid = transaction . savepoint ( using = using ) try : obj . save ( force_insert = must_create , using = using ) except IntegrityError : if must_create : transaction . savepoint_rollback ( sid , using = using ) raise CreateError raise def delete ( self , session_key = None ) : if session_key is None : if self . session_key is None : return session_key = self . session_key try : Session . objects . get ( session_key = session_key ) . delete ( ) except Session . DoesNotExist : pass from django . contrib . sessions . models import Session
