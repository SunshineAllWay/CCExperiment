from __future__ import with_statement , absolute_import from operator import attrgetter from django . contrib . contenttypes . models import ContentType from django . contrib . sessions . backends . db import SessionStore from django . db . models import Count from django . db . models . loading import cache from django . test import TestCase from . models import ( ResolveThis , Item , RelatedItem , Child , Leaf , Proxy , SimpleItem , Feature ) class DeferRegressionTest ( TestCase ) : def test_basic ( self ) : Item . objects . create ( name = "first" , value = 42 ) obj = Item . objects . only ( "name" , "other_value" ) . get ( name = "first" ) with self . assertNumQueries ( 0 ) : self . assertEqual ( obj . name , "first" ) self . assertEqual ( obj . other_value , 0 ) with self . assertNumQueries ( 1 ) : self . assertEqual ( obj . value , 42 ) with self . assertNumQueries ( 1 ) : self . assertEqual ( obj . text , "xyzzy" ) with self . assertNumQueries ( 0 ) : self . assertEqual ( obj . text , "xyzzy" ) i = Item . objects . create ( name = "no I'm first" , value = 37 ) items = Item . objects . only ( "value" ) . order_by ( "-value" ) self . assertEqual ( items [ 0 ] . name , "first" ) self . assertEqual ( items [ 1 ] . name , "no I'm first" ) RelatedItem . objects . create ( item = i ) r = RelatedItem . objects . defer ( "item" ) . get ( ) self . assertEqual ( r . item_id , i . id ) self . assertEqual ( r . item , i ) c1 = Child . objects . create ( name = "c1" , value = 42 ) c2 = Child . objects . create ( name = "c2" , value = 37 ) Leaf . objects . create ( name = "l1" , child = c1 , second_child = c2 ) obj = Leaf . objects . only ( "name" , "child" ) . select_related ( ) [ 0 ] self . assertEqual ( obj . child . name , "c1" ) self . assertQuerysetEqual ( Leaf . objects . select_related ( ) . only ( "child__name" , "second_child__name" ) , [ , ] , attrgetter ( "name" ) ) ctype = ContentType . objects . get_for_model c1 = ctype ( Item . objects . all ( ) [ 0 ] ) c2 = ctype ( Item . objects . defer ( "name" ) [ 0 ] ) c3 = ctype ( Item . objects . only ( "name" ) [ 0 ] ) self . assertTrue ( c1 is c2 is c3 ) results = Leaf . objects . only ( "name" , "child" , "second_child" ) . select_related ( ) self . assertEqual ( results [ 0 ] . child . name , "c1" ) self . assertEqual ( results [ 0 ] . second_child . name , "c2" ) results = Leaf . objects . only ( "name" , "child" , "second_child" , "child__name" , "second_child__name" ) . select_related ( ) self . assertEqual ( results [ 0 ] . child . name , "c1" ) self . assertEqual ( results [ 0 ] . second_child . name , "c2" ) SESSION_KEY = '2b1189a188b44ad18c35e1baac6ceead' item = Item ( ) item . _deferred = False s = SessionStore ( SESSION_KEY ) s . clear ( ) s [ "item" ] = item s . save ( ) s = SessionStore ( SESSION_KEY ) s . modified = True s . save ( ) i2 = s [ "item" ] self . assertFalse ( i2 . _deferred ) klasses = sorted ( cache . get_models ( cache . get_app ( "defer_regress" ) ) , key = lambda klass : klass . __name__ ) self . assertEqual ( klasses , [ Child , Feature , Item , Leaf , Proxy , RelatedItem , ResolveThis , SimpleItem , ] ) klasses = sorted ( map ( attrgetter ( "__name__" ) , cache . get_models ( cache . get_app ( "defer_regress" ) , include_deferred = True ) , ) ) self . assertEqual ( klasses , [ , , , , , , , , , , , , , , , , , , , , ] ) self . assertIsInstance ( list ( SimpleItem . objects . annotate ( Count ( 'feature' ) ) . defer ( 'name' ) ) , list ) self . assertIsInstance ( list ( SimpleItem . objects . annotate ( Count ( 'feature' ) ) . only ( 'name' ) ) , list ) def test_only_and_defer_usage_on_proxy_models ( self ) : proxy = Proxy . objects . create ( name = "proxy" , value = 42 ) msg = 'QuerySet.only() return bogus results with proxy models' dp = Proxy . objects . only ( 'other_value' ) . get ( pk = proxy . pk ) self . assertEqual ( dp . name , proxy . name , msg = msg ) self . assertEqual ( dp . value , proxy . value , msg = msg ) msg = 'QuerySet.defer() return bogus results with proxy models' dp = Proxy . objects . defer ( 'name' , 'text' , 'value' ) . get ( pk = proxy . pk ) self . assertEqual ( dp . name , proxy . name , msg = msg ) self . assertEqual ( dp . value , proxy . value , msg = msg ) def test_resolve_columns ( self ) : rt = ResolveThis . objects . create ( num = 5.0 , name = 'Foobar' ) qs = ResolveThis . objects . defer ( 'num' ) self . assertEqual ( 1 , qs . count ( ) ) self . assertEqual ( 'Foobar' , qs [ 0 ] . name )
