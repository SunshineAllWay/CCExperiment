import os from django . conf import settings from django . contrib . auth import authenticate from django . db . models import Q from django . test import TestCase class AuthContextProcessorTests ( TestCase ) : urls = 'django.contrib.auth.tests.urls' fixtures = [ 'context-processors-users.xml' ] def setUp ( self ) : self . old_TEMPLATE_DIRS = settings . TEMPLATE_DIRS settings . TEMPLATE_DIRS = ( os . path . join ( os . path . dirname ( __file__ ) , 'templates' ) , ) def tearDown ( self ) : settings . TEMPLATE_DIRS = self . old_TEMPLATE_DIRS def test_session_not_accessed ( self ) : response = self . client . get ( '/auth_processor_no_attr_access/' ) self . assertContains ( response , "Session not accessed" ) def test_session_is_accessed ( self ) : response = self . client . get ( '/auth_processor_attr_access/' ) self . assertContains ( response , "Session accessed" ) def test_perms_attrs ( self ) : self . client . login ( username = 'super' , password = 'secret' ) response = self . client . get ( '/auth_processor_perms/' ) self . assertContains ( response , "Has auth permissions" ) def test_message_attrs ( self ) : self . client . login ( username = 'super' , password = 'secret' ) response = self . client . get ( '/auth_processor_messages/' ) self . assertContains ( response , "Message 1" ) def test_user_attrs ( self ) : self . client . login ( username = 'super' , password = 'secret' ) user = authenticate ( username = 'super' , password = 'secret' ) response = self . client . get ( '/auth_processor_user/' ) self . assertContains ( response , "unicode: super" ) self . assertContains ( response , "id: 100" ) self . assertContains ( response , "username: super" ) self . assertContains ( response , "url: /userpage/super/" ) query = Q ( user = response . context [ 'user' ] ) & Q ( someflag = True ) self . assertEqual ( response . context [ 'user' ] , user ) self . assertEqual ( user , response . context [ 'user' ] )
