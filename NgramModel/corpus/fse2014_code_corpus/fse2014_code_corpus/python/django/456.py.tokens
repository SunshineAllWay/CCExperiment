import datetime import warnings from django . test import TestCase from django . core . exceptions import ImproperlyConfigured from regressiontests . views . models import Article , UrlArticle class CreateObjectTest ( TestCase ) : fixtures = [ 'testdata.json' ] urls = 'regressiontests.views.generic_urls' def setUp ( self ) : self . save_warnings_state ( ) warnings . filterwarnings ( 'ignore' , category = DeprecationWarning , module = 'django.views.generic.create_update' ) def tearDown ( self ) : self . restore_warnings_state ( ) def test_login_required_view ( self ) : view_url = '/create_update/member/create/article/' response = self . client . get ( view_url ) self . assertRedirects ( response , '/accounts/login/?next=%s' % view_url ) login = self . client . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) response = self . client . get ( view_url ) self . assertEqual ( response . status_code , 200 ) self . assertTemplateUsed ( response , 'views/article_form.html' ) def test_create_article_display_page ( self ) : view_url = '/create_update/create/article/' response = self . client . get ( view_url ) self . assertEqual ( response . status_code , 200 ) self . assertTemplateUsed ( response , 'views/article_form.html' ) if not response . context . get ( 'form' ) : self . fail ( 'No form found in the response.' ) def test_create_article_with_errors ( self ) : view_url = '/create_update/create/article/' num_articles = Article . objects . count ( ) response = self . client . post ( view_url , { : 'My First Article' , } ) self . assertFormError ( response , 'form' , 'slug' , [ u'This field is required.' ] ) self . assertTemplateUsed ( response , 'views/article_form.html' ) self . assertEqual ( num_articles , Article . objects . count ( ) , ) def test_create_custom_save_article ( self ) : view_url = '/create_update/create_custom/article/' response = self . client . post ( view_url , { : 'Test Article' , : 'this-should-get-replaced' , : 1 , : datetime . datetime ( 2007 , 6 , 25 ) , } ) self . assertRedirects ( response , , target_status_code = 404 ) class UpdateDeleteObjectTest ( TestCase ) : fixtures = [ 'testdata.json' ] urls = 'regressiontests.views.generic_urls' def setUp ( self ) : self . save_warnings_state ( ) warnings . filterwarnings ( 'ignore' , category = DeprecationWarning , module = 'django.views.generic.create_update' ) def tearDown ( self ) : self . restore_warnings_state ( ) def test_update_object_form_display ( self ) : response = self . client . get ( '/create_update/update/article/old_article/' ) self . assertTemplateUsed ( response , 'views/article_form.html' ) self . assertHTMLEqual ( unicode ( response . context [ 'form' ] [ 'title' ] ) , ) def test_update_object ( self ) : response = self . client . post ( '/create_update/update/article/old_article/' , { : 'Another Article' , : 'another-article-slug' , : 1 , : datetime . datetime ( 2007 , 6 , 25 ) , } ) article = Article . objects . get ( pk = 1 ) self . assertEqual ( article . title , "Another Article" ) def test_delete_object_confirm ( self ) : response = self . client . get ( '/create_update/delete/article/old_article/' ) self . assertTemplateUsed ( response , 'views/article_confirm_delete.html' ) def test_delete_object ( self ) : view_url = '/create_update/delete/article/old_article/' response = self . client . post ( view_url ) try : Article . objects . get ( slug = 'old_article' ) except Article . DoesNotExist : pass else : self . fail ( 'Object was not deleted.' ) class PostSaveRedirectTests ( TestCase ) : fixtures = [ 'testdata.json' ] article_model = Article urls = 'regressiontests.views.generic_urls' create_url = '/create_update/create/article/' update_url = '/create_update/update/article/old_article/' delete_url = '/create_update/delete/article/old_article/' create_redirect = '/create_update/view/article/my-first-article/' update_redirect = '/create_update/view/article/another-article-slug/' delete_redirect = '/create_update/' def setUp ( self ) : self . save_warnings_state ( ) warnings . filterwarnings ( 'ignore' , category = DeprecationWarning , module = 'django.views.generic.create_update' ) def tearDown ( self ) : self . restore_warnings_state ( ) def test_create_article ( self ) : num_articles = self . article_model . objects . count ( ) response = self . client . post ( self . create_url , { : 'My First Article' , : 'my-first-article' , : '1' , : datetime . datetime ( 2007 , 6 , 25 ) , } ) self . assertRedirects ( response , self . create_redirect , target_status_code = 404 ) self . assertEqual ( num_articles + 1 , self . article_model . objects . count ( ) , ) def test_update_article ( self ) : num_articles = self . article_model . objects . count ( ) response = self . client . post ( self . update_url , { : 'Another Article' , : 'another-article-slug' , : 1 , : datetime . datetime ( 2007 , 6 , 25 ) , } ) self . assertRedirects ( response , self . update_redirect , target_status_code = 404 ) self . assertEqual ( num_articles , self . article_model . objects . count ( ) , ) def test_delete_article ( self ) : num_articles = self . article_model . objects . count ( ) response = self . client . post ( self . delete_url ) self . assertRedirects ( response , self . delete_redirect , target_status_code = 404 ) self . assertEqual ( num_articles - 1 , self . article_model . objects . count ( ) , ) class NoPostSaveNoAbsoluteUrl ( PostSaveRedirectTests ) : urls = 'regressiontests.views.generic_urls' create_url = '/create_update/no_redirect/create/article/' update_url = '/create_update/no_redirect/update/article/old_article/' def setUp ( self ) : self . save_warnings_state ( ) warnings . filterwarnings ( 'ignore' , category = DeprecationWarning , module = 'django.views.generic.create_update' ) def tearDown ( self ) : self . restore_warnings_state ( ) def test_create_article ( self ) : self . assertRaises ( ImproperlyConfigured , super ( NoPostSaveNoAbsoluteUrl , self ) . test_create_article ) def test_update_article ( self ) : self . assertRaises ( ImproperlyConfigured , super ( NoPostSaveNoAbsoluteUrl , self ) . test_update_article ) def test_delete_article ( self ) : pass class AbsoluteUrlNoPostSave ( PostSaveRedirectTests ) : urls = 'regressiontests.views.generic_urls' article_model = UrlArticle create_url = '/create_update/no_url/create/article/' update_url = '/create_update/no_url/update/article/old_article/' create_redirect = '/urlarticles/my-first-article/' update_redirect = '/urlarticles/another-article-slug/' def setUp ( self ) : self . save_warnings_state ( ) warnings . filterwarnings ( 'ignore' , category = DeprecationWarning , module = 'django.views.generic.create_update' ) def tearDown ( self ) : self . restore_warnings_state ( ) def test_delete_article ( self ) : pass
