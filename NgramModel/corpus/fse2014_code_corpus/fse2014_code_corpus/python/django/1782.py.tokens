from django . db . backends . postgresql_psycopg2 . introspection import DatabaseIntrospection from django . contrib . gis . gdal import OGRGeomType class GeoIntrospectionError ( Exception ) : pass class PostGISIntrospection ( DatabaseIntrospection ) : postgis_types_reverse = { } def get_postgis_types ( self ) : cursor = self . connection . cursor ( ) oid_sql = 'SELECT "oid" FROM "pg_type" WHERE "typname" = %s' try : cursor . execute ( oid_sql , ( 'geometry' , ) ) GEOM_TYPE = cursor . fetchone ( ) [ 0 ] postgis_types = { GEOM_TYPE : 'GeometryField' } if self . connection . ops . geography : cursor . execute ( oid_sql , ( 'geography' , ) ) GEOG_TYPE = cursor . fetchone ( ) [ 0 ] postgis_types [ GEOG_TYPE ] = ( 'GeometryField' , { 'geography' : True } ) finally : cursor . close ( ) return postgis_types def get_field_type ( self , data_type , description ) : if not self . postgis_types_reverse : self . postgis_types_reverse = self . get_postgis_types ( ) self . data_types_reverse . update ( self . postgis_types_reverse ) return super ( PostGISIntrospection , self ) . get_field_type ( data_type , description ) def get_geometry_type ( self , table_name , geo_col ) : cursor = self . connection . cursor ( ) try : try : cursor . execute ( 'SELECT "coord_dimension", "srid", "type" ' , ( table_name , geo_col ) ) row = cursor . fetchone ( ) if not row : raise GeoIntrospectionError except GeoIntrospectionError : if self . connection . ops . geography : cursor . execute ( 'SELECT "coord_dimension", "srid", "type" ' , ( table_name , geo_col ) ) row = cursor . fetchone ( ) if not row : raise Exception ( 'Could not find a geometry or geography column for "%s"."%s"' % ( table_name , geo_col ) ) field_type = OGRGeomType ( row [ 2 ] ) . django dim = row [ 0 ] srid = row [ 1 ] field_params = { } if srid != 4326 : field_params [ 'srid' ] = srid if dim != 2 : field_params [ 'dim' ] = dim finally : cursor . close ( ) return field_type , field_params
