from django import http from django . db import models from django . contrib . databrowse . datastructures import EasyModel from django . shortcuts import render_to_response from django . utils . safestring import mark_safe class AlreadyRegistered ( Exception ) : pass class NotRegistered ( Exception ) : pass class DatabrowsePlugin ( object ) : def urls ( self , plugin_name , easy_instance_field ) : return None def model_index_html ( self , request , model , site ) : return '' def model_view ( self , request , model_databrowse , url ) : raise NotImplementedError class ModelDatabrowse ( object ) : plugins = { } def __init__ ( self , model , site ) : self . model = model self . site = site def root ( self , request , url ) : if url is None : return self . main_view ( request ) try : plugin_name , rest_of_url = url . split ( '/' , 1 ) except ValueError : plugin_name , rest_of_url = url , None try : plugin = self . plugins [ plugin_name ] except KeyError : raise http . Http404 ( 'A plugin with the requested name does not exist.' ) return plugin . model_view ( request , self , rest_of_url ) def main_view ( self , request ) : easy_model = EasyModel ( self . site , self . model ) html_snippets = mark_safe ( u'\n' . join ( [ p . model_index_html ( request , self . model , self . site ) for p in self . plugins . values ( ) ] ) ) return render_to_response ( 'databrowse/model_detail.html' , { : easy_model , : self . site . root_url , : html_snippets , } ) class DatabrowseSite ( object ) : def __init__ ( self ) : self . registry = { } self . root_url = None def register ( self , * model_list , ** options ) : databrowse_class = options . pop ( 'databrowse_class' , DefaultModelDatabrowse ) for model in model_list : if model in self . registry : raise AlreadyRegistered ( 'The model %s is already registered' % model . __name__ ) self . registry [ model ] = databrowse_class def unregister ( self , * model_list ) : for model in model_list : if model not in self . registry : raise NotRegistered ( 'The model %s is not registered' % model . __name__ ) del self . registry [ model ] def root ( self , request , url ) : self . root_url = request . path [ : len ( request . path ) - len ( url ) ] url = url . rstrip ( '/' ) if url == '' : return self . index ( request ) elif '/' in url : return self . model_page ( request , * url . split ( '/' , 2 ) ) raise http . Http404 ( 'The requested databrowse page does not exist.' ) def index ( self , request ) : m_list = [ EasyModel ( self , m ) for m in self . registry . keys ( ) ] return render_to_response ( 'databrowse/homepage.html' , { 'model_list' : m_list , 'root_url' : self . root_url } ) def model_page ( self , request , app_label , model_name , rest_of_url = None ) : model = models . get_model ( app_label , model_name ) if model is None : raise http . Http404 ( "App %r, model %r, not found." % ( app_label , model_name ) ) try : databrowse_class = self . registry [ model ] except KeyError : raise http . Http404 ( "This model exists but has not been registered with databrowse." ) return databrowse_class ( model , self ) . root ( request , rest_of_url ) site = DatabrowseSite ( ) from django . contrib . databrowse . plugins . calendars import CalendarPlugin from django . contrib . databrowse . plugins . objects import ObjectDetailPlugin from django . contrib . databrowse . plugins . fieldchoices import FieldChoicePlugin class DefaultModelDatabrowse ( ModelDatabrowse ) : plugins = { 'objects' : ObjectDetailPlugin ( ) , 'calendars' : CalendarPlugin ( ) , 'fields' : FieldChoicePlugin ( ) }
