from __future__ import absolute_import import StringIO from django . contrib . sites . models import Site from django . core import management from django . db import connection from django . test import TestCase , TransactionTestCase , skipUnlessDBFeature from . models import Article , Book , Spy , Tag , Visa class TestCaseFixtureLoadingTests ( TestCase ) : fixtures = [ 'fixture1.json' , 'fixture2.json' ] def testClassFixtures ( self ) : self . assertEqual ( Article . objects . count ( ) , 3 ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , , ] ) class FixtureLoadingTests ( TestCase ) : def _dumpdata_assert ( self , args , output , format = 'json' , natural_keys = False , use_base_manager = False , exclude_list = [ ] ) : new_io = StringIO . StringIO ( ) management . call_command ( 'dumpdata' , * args , ** { 'format' : format , : new_io , : new_io , : natural_keys , : use_base_manager , : exclude_list } ) command_output = new_io . getvalue ( ) . strip ( ) self . assertEqual ( command_output , output ) def test_initial_data ( self ) : self . assertQuerysetEqual ( Book . objects . all ( ) , [ ] ) def test_loading_and_dumping ( self ) : new_io = StringIO . StringIO ( ) Site . objects . all ( ) . delete ( ) management . call_command ( 'loaddata' , 'fixture1.json' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , ] ) self . _dumpdata_assert ( [ 'fixtures' ] , '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": "News Stories"}}, {"pk": 3, "model": "fixtures.article", "fields": {"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place on ESPN", "pub_date": "2006-06-16T12:00:00"}}, {"pk": 10, "model": "fixtures.book", "fields": {"name": "Achieving self-awareness of Python programs", "authors": []}}]' ) self . _dumpdata_assert ( [ 'fixtures.Category' ] , '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": "News Stories"}}]' ) self . _dumpdata_assert ( [ 'fixtures.Article' ] , '[{"pk": 3, "model": "fixtures.article", "fields": {"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place on ESPN", "pub_date": "2006-06-16T12:00:00"}}]' ) self . _dumpdata_assert ( [ 'fixtures.Category' , 'fixtures.Article' ] , '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": "News Stories"}}, {"pk": 3, "model": "fixtures.article", "fields": {"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place on ESPN", "pub_date": "2006-06-16T12:00:00"}}]' ) self . _dumpdata_assert ( [ 'fixtures.Article' , 'fixtures.Article' ] , '[{"pk": 3, "model": "fixtures.article", "fields": {"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place on ESPN", "pub_date": "2006-06-16T12:00:00"}}]' ) self . _dumpdata_assert ( [ 'fixtures.Article' , 'fixtures' ] , '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": "News Stories"}}, {"pk": 3, "model": "fixtures.article", "fields": {"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place on ESPN", "pub_date": "2006-06-16T12:00:00"}}, {"pk": 10, "model": "fixtures.book", "fields": {"name": "Achieving self-awareness of Python programs", "authors": []}}]' ) self . _dumpdata_assert ( [ 'fixtures' ] , '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": "News Stories"}}, {"pk": 3, "model": "fixtures.article", "fields": {"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place on ESPN", "pub_date": "2006-06-16T12:00:00"}}, {"pk": 10, "model": "fixtures.book", "fields": {"name": "Achieving self-awareness of Python programs", "authors": []}}]' ) self . _dumpdata_assert ( [ 'fixtures.Category' , 'sites' ] , '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": "News Stories"}}, {"pk": 1, "model": "sites.site", "fields": {"domain": "example.com", "name": "example.com"}}]' ) management . call_command ( 'loaddata' , 'fixture2.json' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , , ] ) management . call_command ( 'loaddata' , 'fixture3.xml' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , , , ] ) management . call_command ( 'loaddata' , 'fixture6.json' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Tag . objects . all ( ) , [ , ] ) management . call_command ( 'loaddata' , 'fixture7.xml' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Tag . objects . all ( ) , [ , , , ] ) management . call_command ( 'loaddata' , 'fixture8.json' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Visa . objects . all ( ) , [ , , ] ) management . call_command ( 'loaddata' , 'fixture9.xml' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Visa . objects . all ( ) , [ , , ] ) self . assertQuerysetEqual ( Book . objects . all ( ) , [ , ] ) management . call_command ( 'loaddata' , 'unknown.json' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , , , ] ) self . _dumpdata_assert ( [ 'fixtures.book' ] , '[{"pk": 10, "model": "fixtures.book", "fields": {"name": "Achieving self-awareness of Python programs", "authors": []}}, {"pk": 1, "model": "fixtures.book", "fields": {"name": "Music for all ages", "authors": [3, 1]}}]' ) self . _dumpdata_assert ( [ 'fixtures.book' ] , '[{"pk": 10, "model": "fixtures.book", "fields": {"name": "Achieving self-awareness of Python programs", "authors": []}}, {"pk": 1, "model": "fixtures.book", "fields": {"name": "Music for all ages", "authors": [["Artist formerly known as \\"Prince\\""], ["Django Reinhardt"]]}}]' , natural_keys = True ) self . _dumpdata_assert ( [ 'fixtures' ] , '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": "News Stories"}}, {"pk": 5, "model": "fixtures.article", "fields": {"headline": "XML identified as leading cause of cancer", "pub_date": "2006-06-16T16:00:00"}}, {"pk": 4, "model": "fixtures.article", "fields": {"headline": "Django conquers world!", "pub_date": "2006-06-16T15:00:00"}}, {"pk": 3, "model": "fixtures.article", "fields": {"headline": "Copyright is fine the way it is", "pub_date": "2006-06-16T14:00:00"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker on TV is great!", "pub_date": "2006-06-16T11:00:00"}}, {"pk": 1, "model": "fixtures.tag", "fields": {"tagged_type": ["fixtures", "article"], "name": "copyright", "tagged_id": 3}}, {"pk": 2, "model": "fixtures.tag", "fields": {"tagged_type": ["fixtures", "article"], "name": "legal", "tagged_id": 3}}, {"pk": 3, "model": "fixtures.tag", "fields": {"tagged_type": ["fixtures", "article"], "name": "django", "tagged_id": 4}}, {"pk": 4, "model": "fixtures.tag", "fields": {"tagged_type": ["fixtures", "article"], "name": "world domination", "tagged_id": 4}}, {"pk": 3, "model": "fixtures.person", "fields": {"name": "Artist formerly known as \\"Prince\\""}}, {"pk": 1, "model": "fixtures.person", "fields": {"name": "Django Reinhardt"}}, {"pk": 2, "model": "fixtures.person", "fields": {"name": "Stephane Grappelli"}}, {"pk": 1, "model": "fixtures.visa", "fields": {"person": ["Django Reinhardt"], "permissions": [["add_user", "auth", "user"], ["change_user", "auth", "user"], ["delete_user", "auth", "user"]]}}, {"pk": 2, "model": "fixtures.visa", "fields": {"person": ["Stephane Grappelli"], "permissions": [["add_user", "auth", "user"], ["delete_user", "auth", "user"]]}}, {"pk": 3, "model": "fixtures.visa", "fields": {"person": ["Artist formerly known as \\"Prince\\""], "permissions": [["change_user", "auth", "user"]]}}, {"pk": 10, "model": "fixtures.book", "fields": {"name": "Achieving self-awareness of Python programs", "authors": []}}, {"pk": 1, "model": "fixtures.book", "fields": {"name": "Music for all ages", "authors": [["Artist formerly known as \\"Prince\\""], ["Django Reinhardt"]]}}]' , natural_keys = True ) self . _dumpdata_assert ( [ 'fixtures' ] , """<?xml version="1.0" encoding="utf-8"?> <django-objects version="1.0"><object pk="1" model="fixtures.category"><field type="CharField" name="title">News Stories</field><field type="TextField" name="description">Latest news stories</field></object><object pk="5" model="fixtures.article"><field type="CharField" name="headline">XML identified as leading cause of cancer</field><field type="DateTimeField" name="pub_date">2006-06-16T16:00:00</field></object><object pk="4" model="fixtures.article"><field type="CharField" name="headline">Django conquers world!</field><field type="DateTimeField" name="pub_date">2006-06-16T15:00:00</field></object><object pk="3" model="fixtures.article"><field type="CharField" name="headline">Copyright is fine the way it is</field><field type="DateTimeField" name="pub_date">2006-06-16T14:00:00</field></object><object pk="2" model="fixtures.article"><field type="CharField" name="headline">Poker on TV is great!</field><field type="DateTimeField" name="pub_date">2006-06-16T11:00:00</field></object><object pk="1" model="fixtures.tag"><field type="CharField" name="name">copyright</field><field to="contenttypes.contenttype" name="tagged_type" rel="ManyToOneRel"><natural>fixtures</natural><natural>article</natural></field><field type="PositiveIntegerField" name="tagged_id">3</field></object><object pk="2" model="fixtures.tag"><field type="CharField" name="name">legal</field><field to="contenttypes.contenttype" name="tagged_type" rel="ManyToOneRel"><natural>fixtures</natural><natural>article</natural></field><field type="PositiveIntegerField" name="tagged_id">3</field></object><object pk="3" model="fixtures.tag"><field type="CharField" name="name">django</field><field to="contenttypes.contenttype" name="tagged_type" rel="ManyToOneRel"><natural>fixtures</natural><natural>article</natural></field><field type="PositiveIntegerField" name="tagged_id">4</field></object><object pk="4" model="fixtures.tag"><field type="CharField" name="name">world domination</field><field to="contenttypes.contenttype" name="tagged_type" rel="ManyToOneRel"><natural>fixtures</natural><natural>article</natural></field><field type="PositiveIntegerField" name="tagged_id">4</field></object><object pk="3" model="fixtures.person"><field type="CharField" name="name">Artist formerly known as "Prince"</field></object><object pk="1" model="fixtures.person"><field type="CharField" name="name">Django Reinhardt</field></object><object pk="2" model="fixtures.person"><field type="CharField" name="name">Stephane Grappelli</field></object><object pk="1" model="fixtures.visa"><field to="fixtures.person" name="person" rel="ManyToOneRel"><natural>Django Reinhardt</natural></field><field to="auth.permission" name="permissions" rel="ManyToManyRel"><object><natural>add_user</natural><natural>auth</natural><natural>user</natural></object><object><natural>change_user</natural><natural>auth</natural><natural>user</natural></object><object><natural>delete_user</natural><natural>auth</natural><natural>user</natural></object></field></object><object pk="2" model="fixtures.visa"><field to="fixtures.person" name="person" rel="ManyToOneRel"><natural>Stephane Grappelli</natural></field><field to="auth.permission" name="permissions" rel="ManyToManyRel"><object><natural>add_user</natural><natural>auth</natural><natural>user</natural></object><object><natural>delete_user</natural><natural>auth</natural><natural>user</natural></object></field></object><object pk="3" model="fixtures.visa"><field to="fixtures.person" name="person" rel="ManyToOneRel"><natural>Artist formerly known as "Prince"</natural></field><field to="auth.permission" name="permissions" rel="ManyToManyRel"><object><natural>change_user</natural><natural>auth</natural><natural>user</natural></object></field></object><object pk="10" model="fixtures.book"><field type="CharField" name="name">Achieving self-awareness of Python programs</field><field to="fixtures.person" name="authors" rel="ManyToManyRel"></field></object><object pk="1" model="fixtures.book"><field type="CharField" name="name">Music for all ages</field><field to="fixtures.person" name="authors" rel="ManyToManyRel"><object><natural>Artist formerly known as "Prince"</natural></object><object><natural>Django Reinhardt</natural></object></field></object></django-objects>""" , format = 'xml' , natural_keys = True ) def test_dumpdata_with_excludes ( self ) : Site . objects . all ( ) . delete ( ) management . call_command ( 'loaddata' , 'fixture1.json' , verbosity = 0 , commit = False ) self . _dumpdata_assert ( [ 'sites' , 'fixtures' ] , , exclude_list = [ 'fixtures' ] ) self . _dumpdata_assert ( [ 'sites' , 'fixtures' ] , , exclude_list = [ 'fixtures.Article' , 'fixtures.Book' ] ) self . _dumpdata_assert ( [ 'sites' , 'fixtures' ] , , exclude_list = [ 'fixtures.Article' , 'fixtures.Book' ] ) self . _dumpdata_assert ( [ 'sites' , 'fixtures' ] , , exclude_list = [ 'fixtures.Article' , 'fixtures.Book' , 'sites' ] ) self . assertRaises ( SystemExit , self . _dumpdata_assert , [ 'fixtures' , 'sites' ] , , exclude_list = [ 'foo_app' ] ) self . assertRaises ( SystemExit , self . _dumpdata_assert , [ 'fixtures' , 'sites' ] , , exclude_list = [ 'fixtures.FooModel' ] ) def test_dumpdata_with_filtering_manager ( self ) : spy1 = Spy . objects . create ( name = 'Paul' ) spy2 = Spy . objects . create ( name = 'Alex' , cover_blown = True ) self . assertQuerysetEqual ( Spy . objects . all ( ) , [ '<Spy: Paul>' ] ) self . _dumpdata_assert ( [ 'fixtures.Spy' ] , '[{"pk": %d, "model": "fixtures.spy", "fields": {"cover_blown": false}}]' % spy1 . pk ) self . _dumpdata_assert ( [ 'fixtures.Spy' ] , '[{"pk": %d, "model": "fixtures.spy", "fields": {"cover_blown": true}}, {"pk": %d, "model": "fixtures.spy", "fields": {"cover_blown": false}}]' % ( spy2 . pk , spy1 . pk ) , use_base_manager = True ) def test_compress_format_loading ( self ) : management . call_command ( 'loaddata' , 'fixture4.json' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , ] ) def test_compressed_specified_loading ( self ) : management . call_command ( 'loaddata' , 'fixture5.json.zip' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , ] ) def test_compressed_loading ( self ) : management . call_command ( 'loaddata' , 'fixture5.zip' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , ] ) def test_ambiguous_compressed_fixture ( self ) : new_io = StringIO . StringIO ( ) management . call_command ( 'loaddata' , 'fixture5' , verbosity = 0 , stderr = new_io , commit = False ) output = new_io . getvalue ( ) . strip ( ) . split ( '\n' ) self . assertEqual ( len ( output ) , 1 ) self . assertTrue ( output [ 0 ] . startswith ( "Multiple fixtures named 'fixture5'" ) ) def test_db_loading ( self ) : management . call_command ( 'loaddata' , 'db_fixture_1' , verbosity = 0 , commit = False ) management . call_command ( 'loaddata' , 'db_fixture_2' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , ] ) def test_loaddata_error_message ( self ) : if connection . vendor == 'mysql' : connection . cursor ( ) . execute ( "SET sql_mode = 'TRADITIONAL'" ) new_io = StringIO . StringIO ( ) management . call_command ( 'loaddata' , 'invalid.json' , verbosity = 0 , stderr = new_io , commit = False ) output = new_io . getvalue ( ) . strip ( ) . split ( '\n' ) self . assertRegexpMatches ( output [ - 1 ] , "Error: Could not load fixtures.Article\(pk=1\): .*$" ) def test_loading_using ( self ) : management . call_command ( 'loaddata' , 'db_fixture_1' , verbosity = 0 , using = 'default' , commit = False ) management . call_command ( 'loaddata' , 'db_fixture_2' , verbosity = 0 , using = 'default' , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , ] ) def test_unmatched_identifier_loading ( self ) : management . call_command ( 'loaddata' , 'db_fixture_3' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ ] ) management . call_command ( 'loaddata' , 'db_fixture_3' , verbosity = 0 , using = 'default' , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ ] ) def test_output_formats ( self ) : management . call_command ( 'loaddata' , 'fixture1' , verbosity = 0 , commit = False ) management . call_command ( 'loaddata' , 'fixture6' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Tag . objects . all ( ) , [ , ] ) self . _dumpdata_assert ( [ 'fixtures' ] , '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": "News Stories"}}, {"pk": 3, "model": "fixtures.article", "fields": {"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place on ESPN", "pub_date": "2006-06-16T12:00:00"}}, {"pk": 1, "model": "fixtures.tag", "fields": {"tagged_type": ["fixtures", "article"], "name": "copyright", "tagged_id": 3}}, {"pk": 2, "model": "fixtures.tag", "fields": {"tagged_type": ["fixtures", "article"], "name": "law", "tagged_id": 3}}, {"pk": 1, "model": "fixtures.person", "fields": {"name": "Django Reinhardt"}}, {"pk": 3, "model": "fixtures.person", "fields": {"name": "Prince"}}, {"pk": 2, "model": "fixtures.person", "fields": {"name": "Stephane Grappelli"}}, {"pk": 10, "model": "fixtures.book", "fields": {"name": "Achieving self-awareness of Python programs", "authors": []}}]' , natural_keys = True ) self . _dumpdata_assert ( [ 'fixtures' ] , """<?xml version="1.0" encoding="utf-8"?> <django-objects version="1.0"><object pk="1" model="fixtures.category"><field type="CharField" name="title">News Stories</field><field type="TextField" name="description">Latest news stories</field></object><object pk="3" model="fixtures.article"><field type="CharField" name="headline">Time to reform copyright</field><field type="DateTimeField" name="pub_date">2006-06-16T13:00:00</field></object><object pk="2" model="fixtures.article"><field type="CharField" name="headline">Poker has no place on ESPN</field><field type="DateTimeField" name="pub_date">2006-06-16T12:00:00</field></object><object pk="1" model="fixtures.tag"><field type="CharField" name="name">copyright</field><field to="contenttypes.contenttype" name="tagged_type" rel="ManyToOneRel"><natural>fixtures</natural><natural>article</natural></field><field type="PositiveIntegerField" name="tagged_id">3</field></object><object pk="2" model="fixtures.tag"><field type="CharField" name="name">law</field><field to="contenttypes.contenttype" name="tagged_type" rel="ManyToOneRel"><natural>fixtures</natural><natural>article</natural></field><field type="PositiveIntegerField" name="tagged_id">3</field></object><object pk="1" model="fixtures.person"><field type="CharField" name="name">Django Reinhardt</field></object><object pk="3" model="fixtures.person"><field type="CharField" name="name">Prince</field></object><object pk="2" model="fixtures.person"><field type="CharField" name="name">Stephane Grappelli</field></object><object pk="10" model="fixtures.book"><field type="CharField" name="name">Achieving self-awareness of Python programs</field><field to="fixtures.person" name="authors" rel="ManyToManyRel"></field></object></django-objects>""" , format = 'xml' , natural_keys = True ) class FixtureTransactionTests ( TransactionTestCase ) : def _dumpdata_assert ( self , args , output , format = 'json' ) : new_io = StringIO . StringIO ( ) management . call_command ( 'dumpdata' , * args , ** { 'format' : format , 'stdout' : new_io } ) command_output = new_io . getvalue ( ) . strip ( ) self . assertEqual ( command_output , output ) @ skipUnlessDBFeature ( 'supports_forward_references' ) def test_format_discovery ( self ) : management . call_command ( 'loaddata' , 'fixture1' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , ] ) new_io = StringIO . StringIO ( ) management . call_command ( 'loaddata' , 'fixture2' , verbosity = 0 , stderr = new_io ) output = new_io . getvalue ( ) . strip ( ) . split ( '\n' ) self . assertEqual ( len ( output ) , 1 ) self . assertTrue ( output [ 0 ] . startswith ( "Multiple fixtures named 'fixture2'" ) ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , ] ) self . _dumpdata_assert ( [ 'fixtures' ] , '[{"pk": 1, "model": "fixtures.category", "fields": {"description": "Latest news stories", "title": "News Stories"}}, {"pk": 3, "model": "fixtures.article", "fields": {"headline": "Time to reform copyright", "pub_date": "2006-06-16T13:00:00"}}, {"pk": 2, "model": "fixtures.article", "fields": {"headline": "Poker has no place on ESPN", "pub_date": "2006-06-16T12:00:00"}}, {"pk": 10, "model": "fixtures.book", "fields": {"name": "Achieving self-awareness of Python programs", "authors": []}}]' ) management . call_command ( 'loaddata' , 'fixture4' , verbosity = 0 , commit = False ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , , ] )
