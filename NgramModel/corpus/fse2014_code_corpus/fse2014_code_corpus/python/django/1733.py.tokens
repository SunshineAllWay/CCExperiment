import os from django . conf import settings from django . contrib . gis . geos import GEOSGeometry from django . contrib . gis . geoip import GeoIP , GeoIPException from django . utils import unittest class GeoIPTest ( unittest . TestCase ) : def test01_init ( self ) : g1 = GeoIP ( ) path = settings . GEOIP_PATH g2 = GeoIP ( path , 0 ) g3 = GeoIP . open ( path , 0 ) for g in ( g1 , g2 , g3 ) : self . assertEqual ( True , bool ( g . _country ) ) self . assertEqual ( True , bool ( g . _city ) ) city = os . path . join ( path , 'GeoLiteCity.dat' ) cntry = os . path . join ( path , 'GeoIP.dat' ) g4 = GeoIP ( city , country = '' ) self . assertEqual ( None , g4 . _country ) g5 = GeoIP ( cntry , city = '' ) self . assertEqual ( None , g5 . _city ) bad_params = ( 23 , 'foo' , 15.23 ) for bad in bad_params : self . assertRaises ( GeoIPException , GeoIP , cache = bad ) if isinstance ( bad , basestring ) : e = GeoIPException else : e = TypeError self . assertRaises ( e , GeoIP , bad , 0 ) def test02_bad_query ( self ) : cntry_g = GeoIP ( city = '<foo>' ) self . assertRaises ( GeoIPException , cntry_g . city , 'google.com' ) self . assertRaises ( GeoIPException , cntry_g . coords , 'yahoo.com' ) self . assertRaises ( TypeError , cntry_g . country_code , 17 ) self . assertRaises ( TypeError , cntry_g . country_name , GeoIP ) def test03_country ( self ) : g = GeoIP ( city = '<foo>' ) fqdn = 'www.google.com' addr = '12.215.42.19' for query in ( fqdn , addr ) : for func in ( g . country_code , g . country_code_by_addr , g . country_code_by_name ) : self . assertEqual ( 'US' , func ( query ) ) for func in ( g . country_name , g . country_name_by_addr , g . country_name_by_name ) : self . assertEqual ( 'United States' , func ( query ) ) self . assertEqual ( { 'country_code' : 'US' , 'country_name' : 'United States' } , g . country ( query ) ) def test04_city ( self ) : g = GeoIP ( country = '<foo>' ) addr = '128.249.1.1' fqdn = 'tmc.edu' for query in ( fqdn , addr ) : for func in ( g . country_code , g . country_code_by_addr , g . country_code_by_name ) : self . assertEqual ( 'US' , func ( query ) ) for func in ( g . country_name , g . country_name_by_addr , g . country_name_by_name ) : self . assertEqual ( 'United States' , func ( query ) ) self . assertEqual ( { 'country_code' : 'US' , 'country_name' : 'United States' } , g . country ( query ) ) d = g . city ( query ) self . assertEqual ( 'USA' , d [ 'country_code3' ] ) self . assertEqual ( 'Houston' , d [ 'city' ] ) self . assertEqual ( 'TX' , d [ 'region' ] ) self . assertEqual ( 713 , d [ 'area_code' ] ) geom = g . geos ( query ) self . failIf ( not isinstance ( geom , GEOSGeometry ) ) lon , lat = ( - 95.4010 , 29.7079 ) lat_lon = g . lat_lon ( query ) lat_lon = ( lat_lon [ 1 ] , lat_lon [ 0 ] ) for tup in ( geom . tuple , g . coords ( query ) , g . lon_lat ( query ) , lat_lon ) : self . assertAlmostEqual ( lon , tup [ 0 ] , 4 ) self . assertAlmostEqual ( lat , tup [ 1 ] , 4 ) def test05_unicode_response ( self ) : g = GeoIP ( ) d = g . city ( '62.224.93.23' ) self . assertEqual ( u'Sch\xf6mberg' , d [ 'city' ] ) def test06_unicode_query ( self ) : g = GeoIP ( ) d = g . country ( u'whitehouse.gov' ) self . assertEqual ( u'US' , d [ 'country_code' ] ) def suite ( ) : s = unittest . TestSuite ( ) s . addTest ( unittest . makeSuite ( GeoIPTest ) ) return s def run ( verbosity = 1 ) : unittest . TextTestRunner ( verbosity = verbosity ) . run ( suite ( ) )
