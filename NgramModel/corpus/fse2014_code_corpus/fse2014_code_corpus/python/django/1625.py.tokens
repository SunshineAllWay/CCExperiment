from django import forms from django . utils . translation import ugettext_lazy as _ from django . contrib . gis . geos import GEOSGeometry class GeometryField ( forms . Field ) : widget = forms . Textarea default_error_messages = { : _ ( u'No geometry value provided.' ) , : _ ( u'Invalid geometry value.' ) , : _ ( u'Invalid geometry type.' ) , : _ ( u'An error occurred when transforming the geometry ' ) , } def __init__ ( self , ** kwargs ) : self . srid = kwargs . pop ( 'srid' , None ) self . geom_type = kwargs . pop ( 'geom_type' , 'GEOMETRY' ) self . null = kwargs . pop ( 'null' , True ) super ( GeometryField , self ) . __init__ ( ** kwargs ) def clean ( self , value ) : if not value : if self . null and not self . required : return None else : raise forms . ValidationError ( self . error_messages [ 'no_geom' ] ) try : geom = GEOSGeometry ( value ) except : raise forms . ValidationError ( self . error_messages [ 'invalid_geom' ] ) if str ( geom . geom_type ) . upper ( ) != self . geom_type and not self . geom_type == 'GEOMETRY' : raise forms . ValidationError ( self . error_messages [ 'invalid_geom_type' ] ) if self . srid : if not geom . srid : geom . srid = self . srid elif self . srid != - 1 and self . srid != geom . srid : try : geom . transform ( self . srid ) except : raise forms . ValidationError ( self . error_messages [ 'transform_error' ] ) return geom
