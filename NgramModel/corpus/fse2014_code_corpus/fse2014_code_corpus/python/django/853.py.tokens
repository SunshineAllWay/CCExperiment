from __future__ import absolute_import from django . contrib . admin . tests import AdminSeleniumWebDriverTestCase from django . contrib . admin . helpers import InlineAdminForm from django . contrib . auth . models import User , Permission from django . contrib . contenttypes . models import ContentType from django . test import TestCase from . admin import InnerInline from . models import ( Holder , Inner , Holder2 , Inner2 , Holder3 , Inner3 , Person , OutfitItem , Fashionista , Teacher , Parent , Child , Author , Book , Profile , ProfileCollection ) class TestInline ( TestCase ) : urls = "regressiontests.admin_inlines.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : holder = Holder ( dummy = 13 ) holder . save ( ) Inner ( dummy = 42 , holder = holder ) . save ( ) self . change_url = '/admin/admin_inlines/holder/%i/' % holder . id result = self . client . login ( username = 'super' , password = 'secret' ) self . assertEqual ( result , True ) def tearDown ( self ) : self . client . logout ( ) def test_can_delete ( self ) : response = self . client . get ( self . change_url ) inner_formset = response . context [ 'inline_admin_formsets' ] [ 0 ] . formset expected = InnerInline . can_delete actual = inner_formset . can_delete self . assertEqual ( expected , actual , 'can_delete must be equal' ) def test_readonly_stacked_inline_label ( self ) : holder = Holder . objects . create ( dummy = 42 ) inner = Inner . objects . create ( holder = holder , dummy = 42 , readonly = '' ) response = self . client . get ( '/admin/admin_inlines/holder/%i/' % holder . id ) self . assertContains ( response , '<label>Inner readonly label:</label>' ) def test_many_to_many_inlines ( self ) : response = self . client . get ( '/admin/admin_inlines/author/add/' ) self . assertContains ( response , '<h2>Author-book relationships</h2>' ) self . assertContains ( response , 'Add another Author-Book Relationship' ) self . assertContains ( response , 'id="id_Author_books-TOTAL_FORMS"' ) def test_inline_primary ( self ) : person = Person . objects . create ( firstname = 'Imelda' ) item = OutfitItem . objects . create ( name = 'Shoes' ) data = { : 1 , : 0 , : 0 , : u'Save' , : person . id , : 0 , : item . id , } response = self . client . post ( '/admin/admin_inlines/fashionista/add/' , data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( len ( Fashionista . objects . filter ( person__firstname = 'Imelda' ) ) , 1 ) def test_tabular_non_field_errors ( self ) : data = { : 1 , : 0 , : 0 , : u'Save' , : 'a title' , : 'a different title' , } response = self . client . post ( '/admin/admin_inlines/titlecollection/add/' , data ) self . assertContains ( response , '<tr><td colspan="4"><ul class="errorlist"><li>The two titles must be the same</li></ul></td></tr>' ) def test_no_parent_callable_lookup ( self ) : response = self . client . get ( '/admin/admin_inlines/novel/add/' ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , '<div class="inline-group" id="chapter_set-group">' ) def test_callable_lookup ( self ) : response = self . client . get ( '/admin/admin_inlines/poll/add/' ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , '<div class="inline-group" id="question_set-group">' ) self . assertContains ( response , '<p>Callable in QuestionInline</p>' ) def test_help_text ( self ) : response = self . client . get ( '/admin/admin_inlines/holder4/add/' ) self . assertContains ( response , '<p class="help">Awesome stacked help text is awesome.</p>' , 4 ) self . assertContains ( response , '<img src="/static/admin/img/icon-unknown.gif" class="help help-tooltip" width="10" height="10" alt="(Awesome tabular help text is awesome.)" title="Awesome tabular help text is awesome." />' , 1 ) def test_non_related_name_inline ( self ) : response = self . client . get ( '/admin/admin_inlines/capofamiglia/add/' ) self . assertContains ( response , ) self . assertContains ( response , ) self . assertContains ( response , , html = True ) self . assertContains ( response , ) self . assertContains ( response , ) self . assertContains ( response , , html = True ) class TestInlineMedia ( TestCase ) : urls = "regressiontests.admin_inlines.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : result = self . client . login ( username = 'super' , password = 'secret' ) self . assertEqual ( result , True ) def tearDown ( self ) : self . client . logout ( ) def test_inline_media_only_base ( self ) : holder = Holder ( dummy = 13 ) holder . save ( ) Inner ( dummy = 42 , holder = holder ) . save ( ) change_url = '/admin/admin_inlines/holder/%i/' % holder . id response = self . client . get ( change_url ) self . assertContains ( response , 'my_awesome_admin_scripts.js' ) def test_inline_media_only_inline ( self ) : holder = Holder3 ( dummy = 13 ) holder . save ( ) Inner3 ( dummy = 42 , holder = holder ) . save ( ) change_url = '/admin/admin_inlines/holder3/%i/' % holder . id response = self . client . get ( change_url ) self . assertContains ( response , 'my_awesome_inline_scripts.js' ) def test_all_inline_media ( self ) : holder = Holder2 ( dummy = 13 ) holder . save ( ) Inner2 ( dummy = 42 , holder = holder ) . save ( ) change_url = '/admin/admin_inlines/holder2/%i/' % holder . id response = self . client . get ( change_url ) self . assertContains ( response , 'my_awesome_admin_scripts.js' ) self . assertContains ( response , 'my_awesome_inline_scripts.js' ) class TestInlineAdminForm ( TestCase ) : urls = "regressiontests.admin_inlines.urls" def test_immutable_content_type ( self ) : sally = Teacher . objects . create ( name = 'Sally' ) john = Parent . objects . create ( name = 'John' ) joe = Child . objects . create ( name = 'Joe' , teacher = sally , parent = john ) iaf = InlineAdminForm ( None , None , { } , { } , joe ) parent_ct = ContentType . objects . get_for_model ( Parent ) self . assertEqual ( iaf . original . content_type , parent_ct ) class TestInlinePermissions ( TestCase ) : urls = "regressiontests.admin_inlines.urls" def setUp ( self ) : self . user = User ( username = 'admin' ) self . user . is_staff = True self . user . is_active = True self . user . set_password ( 'secret' ) self . user . save ( ) self . author_ct = ContentType . objects . get_for_model ( Author ) self . holder_ct = ContentType . objects . get_for_model ( Holder2 ) self . book_ct = ContentType . objects . get_for_model ( Book ) self . inner_ct = ContentType . objects . get_for_model ( Inner2 ) permission = Permission . objects . get ( codename = 'add_author' , content_type = self . author_ct ) self . user . user_permissions . add ( permission ) permission = Permission . objects . get ( codename = 'change_author' , content_type = self . author_ct ) self . user . user_permissions . add ( permission ) permission = Permission . objects . get ( codename = 'add_holder2' , content_type = self . holder_ct ) self . user . user_permissions . add ( permission ) permission = Permission . objects . get ( codename = 'change_holder2' , content_type = self . holder_ct ) self . user . user_permissions . add ( permission ) author = Author . objects . create ( pk = 1 , name = u'The Author' ) book = author . books . create ( name = u'The inline Book' ) self . author_change_url = '/admin/admin_inlines/author/%i/' % author . id author_book_auto_m2m_intermediate = Author . books . through . objects . get ( author = author , book = book ) self . author_book_auto_m2m_intermediate_id = author_book_auto_m2m_intermediate . pk holder = Holder2 . objects . create ( dummy = 13 ) inner2 = Inner2 . objects . create ( dummy = 42 , holder = holder ) self . holder_change_url = '/admin/admin_inlines/holder2/%i/' % holder . id self . inner2_id = inner2 . id self . assertEqual ( self . client . login ( username = 'admin' , password = 'secret' ) , True ) def tearDown ( self ) : self . client . logout ( ) def test_inline_add_m2m_noperm ( self ) : response = self . client . get ( '/admin/admin_inlines/author/add/' ) self . assertNotContains ( response , '<h2>Author-book relationships</h2>' ) self . assertNotContains ( response , 'Add another Author-Book Relationship' ) self . assertNotContains ( response , 'id="id_Author_books-TOTAL_FORMS"' ) def test_inline_add_fk_noperm ( self ) : response = self . client . get ( '/admin/admin_inlines/holder2/add/' ) self . assertNotContains ( response , '<h2>Inner2s</h2>' ) self . assertNotContains ( response , 'Add another Inner2' ) self . assertNotContains ( response , 'id="id_inner2_set-TOTAL_FORMS"' ) def test_inline_change_m2m_noperm ( self ) : response = self . client . get ( self . author_change_url ) self . assertNotContains ( response , '<h2>Author-book relationships</h2>' ) self . assertNotContains ( response , 'Add another Author-Book Relationship' ) self . assertNotContains ( response , 'id="id_Author_books-TOTAL_FORMS"' ) def test_inline_change_fk_noperm ( self ) : response = self . client . get ( self . holder_change_url ) self . assertNotContains ( response , '<h2>Inner2s</h2>' ) self . assertNotContains ( response , 'Add another Inner2' ) self . assertNotContains ( response , 'id="id_inner2_set-TOTAL_FORMS"' ) def test_inline_add_m2m_add_perm ( self ) : permission = Permission . objects . get ( codename = 'add_book' , content_type = self . book_ct ) self . user . user_permissions . add ( permission ) response = self . client . get ( '/admin/admin_inlines/author/add/' ) self . assertNotContains ( response , '<h2>Author-book relationships</h2>' ) self . assertNotContains ( response , 'Add another Author-Book Relationship' ) self . assertNotContains ( response , 'id="id_Author_books-TOTAL_FORMS"' ) def test_inline_add_fk_add_perm ( self ) : permission = Permission . objects . get ( codename = 'add_inner2' , content_type = self . inner_ct ) self . user . user_permissions . add ( permission ) response = self . client . get ( '/admin/admin_inlines/holder2/add/' ) self . assertContains ( response , '<h2>Inner2s</h2>' ) self . assertContains ( response , 'Add another Inner2' ) self . assertContains ( response , 'value="3" id="id_inner2_set-TOTAL_FORMS"' ) def test_inline_change_m2m_add_perm ( self ) : permission = Permission . objects . get ( codename = 'add_book' , content_type = self . book_ct ) self . user . user_permissions . add ( permission ) response = self . client . get ( self . author_change_url ) self . assertNotContains ( response , '<h2>Author-book relationships</h2>' ) self . assertNotContains ( response , 'Add another Author-Book Relationship' ) self . assertNotContains ( response , 'id="id_Author_books-TOTAL_FORMS"' ) self . assertNotContains ( response , 'id="id_Author_books-0-DELETE"' ) def test_inline_change_m2m_change_perm ( self ) : permission = Permission . objects . get ( codename = 'change_book' , content_type = self . book_ct ) self . user . user_permissions . add ( permission ) response = self . client . get ( self . author_change_url ) self . assertContains ( response , '<h2>Author-book relationships</h2>' ) self . assertContains ( response , 'Add another Author-Book Relationship' ) self . assertContains ( response , 'value="4" id="id_Author_books-TOTAL_FORMS"' ) self . assertContains ( response , '<input type="hidden" name="Author_books-0-id" value="%i"' % self . author_book_auto_m2m_intermediate_id ) self . assertContains ( response , 'id="id_Author_books-0-DELETE"' ) def test_inline_change_fk_add_perm ( self ) : permission = Permission . objects . get ( codename = 'add_inner2' , content_type = self . inner_ct ) self . user . user_permissions . add ( permission ) response = self . client . get ( self . holder_change_url ) self . assertContains ( response , '<h2>Inner2s</h2>' ) self . assertContains ( response , 'Add another Inner2' ) self . assertContains ( response , 'value="3" id="id_inner2_set-TOTAL_FORMS"' ) self . assertNotContains ( response , '<input type="hidden" name="inner2_set-0-id" value="%i"' % self . inner2_id ) def test_inline_change_fk_change_perm ( self ) : permission = Permission . objects . get ( codename = 'change_inner2' , content_type = self . inner_ct ) self . user . user_permissions . add ( permission ) response = self . client . get ( self . holder_change_url ) self . assertContains ( response , '<h2>Inner2s</h2>' ) self . assertContains ( response , 'value="1" id="id_inner2_set-TOTAL_FORMS"' ) self . assertContains ( response , '<input type="hidden" name="inner2_set-0-id" value="%i"' % self . inner2_id ) self . assertContains ( response , 'value="0" id="id_inner2_set-MAX_NUM_FORMS"' ) def test_inline_change_fk_add_change_perm ( self ) : permission = Permission . objects . get ( codename = 'add_inner2' , content_type = self . inner_ct ) self . user . user_permissions . add ( permission ) permission = Permission . objects . get ( codename = 'change_inner2' , content_type = self . inner_ct ) self . user . user_permissions . add ( permission ) response = self . client . get ( self . holder_change_url ) self . assertContains ( response , '<h2>Inner2s</h2>' ) self . assertContains ( response , 'value="4" id="id_inner2_set-TOTAL_FORMS"' ) self . assertContains ( response , '<input type="hidden" name="inner2_set-0-id" value="%i"' % self . inner2_id ) def test_inline_change_fk_change_del_perm ( self ) : permission = Permission . objects . get ( codename = 'change_inner2' , content_type = self . inner_ct ) self . user . user_permissions . add ( permission ) permission = Permission . objects . get ( codename = 'delete_inner2' , content_type = self . inner_ct ) self . user . user_permissions . add ( permission ) response = self . client . get ( self . holder_change_url ) self . assertContains ( response , '<h2>Inner2s</h2>' ) self . assertContains ( response , 'value="1" id="id_inner2_set-TOTAL_FORMS"' ) self . assertContains ( response , '<input type="hidden" name="inner2_set-0-id" value="%i"' % self . inner2_id ) self . assertContains ( response , 'id="id_inner2_set-0-DELETE"' ) def test_inline_change_fk_all_perms ( self ) : permission = Permission . objects . get ( codename = 'add_inner2' , content_type = self . inner_ct ) self . user . user_permissions . add ( permission ) permission = Permission . objects . get ( codename = 'change_inner2' , content_type = self . inner_ct ) self . user . user_permissions . add ( permission ) permission = Permission . objects . get ( codename = 'delete_inner2' , content_type = self . inner_ct ) self . user . user_permissions . add ( permission ) response = self . client . get ( self . holder_change_url ) self . assertContains ( response , '<h2>Inner2s</h2>' ) self . assertContains ( response , 'value="4" id="id_inner2_set-TOTAL_FORMS"' ) self . assertContains ( response , '<input type="hidden" name="inner2_set-0-id" value="%i"' % self . inner2_id ) self . assertContains ( response , 'id="id_inner2_set-0-DELETE"' ) class SeleniumFirefoxTests ( AdminSeleniumWebDriverTestCase ) : webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver' fixtures = [ 'admin-views-users.xml' ] urls = "regressiontests.admin_inlines.urls" def test_add_inlines ( self ) : self . admin_login ( username = 'super' , password = 'secret' ) self . selenium . get ( '%s%s' % ( self . live_server_url , ) ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . failUnlessEqual ( self . selenium . find_element_by_css_selector ( ) . get_attribute ( 'id' ) , ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . selenium . find_element_by_link_text ( 'Add another Profile' ) . click ( ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 2 ) self . failUnlessEqual ( self . selenium . find_element_by_css_selector ( ) . get_attribute ( 'id' ) , 'profile_set-1' ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . selenium . find_element_by_link_text ( 'Add another Profile' ) . click ( ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 3 ) self . failUnlessEqual ( self . selenium . find_element_by_css_selector ( ) . get_attribute ( 'id' ) , 'profile_set-2' ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . selenium . find_element_by_name ( 'profile_set-0-first_name' ) . send_keys ( '0 first name 1' ) self . selenium . find_element_by_name ( 'profile_set-0-last_name' ) . send_keys ( '0 last name 2' ) self . selenium . find_element_by_name ( 'profile_set-1-first_name' ) . send_keys ( '1 first name 1' ) self . selenium . find_element_by_name ( 'profile_set-1-last_name' ) . send_keys ( '1 last name 2' ) self . selenium . find_element_by_name ( 'profile_set-2-first_name' ) . send_keys ( '2 first name 1' ) self . selenium . find_element_by_name ( 'profile_set-2-last_name' ) . send_keys ( '2 last name 2' ) self . selenium . find_element_by_xpath ( '//input[@value="Save"]' ) . click ( ) self . wait_loaded_tag ( 'body' ) self . assertEqual ( ProfileCollection . objects . all ( ) . count ( ) , 1 ) self . assertEqual ( Profile . objects . all ( ) . count ( ) , 3 ) def test_delete_inlines ( self ) : self . admin_login ( username = 'super' , password = 'secret' ) self . selenium . get ( '%s%s' % ( self . live_server_url , ) ) self . selenium . find_element_by_link_text ( 'Add another Profile' ) . click ( ) self . selenium . find_element_by_link_text ( 'Add another Profile' ) . click ( ) self . selenium . find_element_by_link_text ( 'Add another Profile' ) . click ( ) self . selenium . find_element_by_link_text ( 'Add another Profile' ) . click ( ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 5 ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . selenium . find_element_by_css_selector ( ) . click ( ) self . selenium . find_element_by_css_selector ( ) . click ( ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 3 ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 ) self . failUnlessEqual ( len ( self . selenium . find_elements_by_css_selector ( ) ) , 1 )
