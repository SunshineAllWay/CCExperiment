from __future__ import with_statement from django . conf import settings from django . core . context_processors import csrf from django . http import HttpRequest , HttpResponse from django . middleware . csrf import CsrfViewMiddleware , CSRF_KEY_LENGTH from django . template import RequestContext , Template from django . test import TestCase from django . views . decorators . csrf import csrf_exempt , requires_csrf_token , ensure_csrf_cookie def post_form_response ( ) : resp = HttpResponse ( content = u""" <html><body><h1>\u00a1Unicode!<form method="post"><input type="text" /></form></body></html> """ , mimetype = "text/html" ) return resp def post_form_view ( request ) : return post_form_response ( ) def token_view ( request ) : context = RequestContext ( request , processors = [ csrf ] ) template = Template ( "{% csrf_token %}" ) return HttpResponse ( template . render ( context ) ) def non_token_view_using_request_processor ( request ) : context = RequestContext ( request , processors = [ csrf ] ) template = Template ( "" ) return HttpResponse ( template . render ( context ) ) class TestingHttpRequest ( HttpRequest ) : def is_secure ( self ) : return getattr ( self , '_is_secure_override' , False ) class CsrfViewMiddlewareTest ( TestCase ) : _csrf_id_cookie = "<1>\xc2\xa1" _csrf_id = "1" def _get_GET_no_csrf_cookie_request ( self ) : return TestingHttpRequest ( ) def _get_GET_csrf_cookie_request ( self ) : req = TestingHttpRequest ( ) req . COOKIES [ settings . CSRF_COOKIE_NAME ] = self . _csrf_id_cookie return req def _get_POST_csrf_cookie_request ( self ) : req = self . _get_GET_csrf_cookie_request ( ) req . method = "POST" return req def _get_POST_no_csrf_cookie_request ( self ) : req = self . _get_GET_no_csrf_cookie_request ( ) req . method = "POST" return req def _get_POST_request_with_token ( self ) : req = self . _get_POST_csrf_cookie_request ( ) req . POST [ 'csrfmiddlewaretoken' ] = self . _csrf_id return req def _check_token_present ( self , response , csrf_id = None ) : self . assertContains ( response , "name='csrfmiddlewaretoken' value='%s'" % ( csrf_id or self . _csrf_id ) ) def test_process_view_token_too_long ( self ) : req = self . _get_GET_no_csrf_cookie_request ( ) req . COOKIES [ settings . CSRF_COOKIE_NAME ] = 'x' * 10000000 CsrfViewMiddleware ( ) . process_view ( req , token_view , ( ) , { } ) resp = token_view ( req ) resp2 = CsrfViewMiddleware ( ) . process_response ( req , resp ) csrf_cookie = resp2 . cookies . get ( settings . CSRF_COOKIE_NAME , False ) self . assertEqual ( len ( csrf_cookie . value ) , CSRF_KEY_LENGTH ) def test_process_response_get_token_used ( self ) : req = self . _get_GET_no_csrf_cookie_request ( ) with self . settings ( CSRF_COOKIE_NAME = 'myname' , CSRF_COOKIE_DOMAIN = '.example.com' , CSRF_COOKIE_PATH = '/test/' , CSRF_COOKIE_SECURE = True ) : CsrfViewMiddleware ( ) . process_view ( req , token_view , ( ) , { } ) resp = token_view ( req ) resp2 = CsrfViewMiddleware ( ) . process_response ( req , resp ) csrf_cookie = resp2 . cookies . get ( 'myname' , False ) self . assertNotEqual ( csrf_cookie , False ) self . assertEqual ( csrf_cookie [ 'domain' ] , '.example.com' ) self . assertEqual ( csrf_cookie [ 'secure' ] , True ) self . assertEqual ( csrf_cookie [ 'path' ] , '/test/' ) self . assertTrue ( 'Cookie' in resp2 . get ( 'Vary' , '' ) ) def test_process_response_get_token_not_used ( self ) : req = self . _get_GET_no_csrf_cookie_request ( ) CsrfViewMiddleware ( ) . process_view ( req , non_token_view_using_request_processor , ( ) , { } ) resp = non_token_view_using_request_processor ( req ) resp2 = CsrfViewMiddleware ( ) . process_response ( req , resp ) csrf_cookie = resp2 . cookies . get ( settings . CSRF_COOKIE_NAME , False ) self . assertEqual ( csrf_cookie , False ) def test_process_request_no_csrf_cookie ( self ) : req = self . _get_POST_no_csrf_cookie_request ( ) req2 = CsrfViewMiddleware ( ) . process_view ( req , post_form_view , ( ) , { } ) self . assertEqual ( 403 , req2 . status_code ) def test_process_request_csrf_cookie_no_token ( self ) : req = self . _get_POST_csrf_cookie_request ( ) req2 = CsrfViewMiddleware ( ) . process_view ( req , post_form_view , ( ) , { } ) self . assertEqual ( 403 , req2 . status_code ) def test_process_request_csrf_cookie_and_token ( self ) : req = self . _get_POST_request_with_token ( ) req2 = CsrfViewMiddleware ( ) . process_view ( req , post_form_view , ( ) , { } ) self . assertEqual ( None , req2 ) def test_process_request_csrf_cookie_no_token_exempt_view ( self ) : req = self . _get_POST_csrf_cookie_request ( ) req2 = CsrfViewMiddleware ( ) . process_view ( req , csrf_exempt ( post_form_view ) , ( ) , { } ) self . assertEqual ( None , req2 ) def test_csrf_token_in_header ( self ) : req = self . _get_POST_csrf_cookie_request ( ) req . META [ 'HTTP_X_CSRFTOKEN' ] = self . _csrf_id req2 = CsrfViewMiddleware ( ) . process_view ( req , post_form_view , ( ) , { } ) self . assertEqual ( None , req2 ) def test_put_and_delete_rejected ( self ) : req = TestingHttpRequest ( ) req . method = 'PUT' req2 = CsrfViewMiddleware ( ) . process_view ( req , post_form_view , ( ) , { } ) self . assertEqual ( 403 , req2 . status_code ) req = TestingHttpRequest ( ) req . method = 'DELETE' req2 = CsrfViewMiddleware ( ) . process_view ( req , post_form_view , ( ) , { } ) self . assertEqual ( 403 , req2 . status_code ) def test_put_and_delete_allowed ( self ) : req = self . _get_GET_csrf_cookie_request ( ) req . method = 'PUT' req . META [ 'HTTP_X_CSRFTOKEN' ] = self . _csrf_id req2 = CsrfViewMiddleware ( ) . process_view ( req , post_form_view , ( ) , { } ) self . assertEqual ( None , req2 ) req = self . _get_GET_csrf_cookie_request ( ) req . method = 'DELETE' req . META [ 'HTTP_X_CSRFTOKEN' ] = self . _csrf_id req2 = CsrfViewMiddleware ( ) . process_view ( req , post_form_view , ( ) , { } ) self . assertEqual ( None , req2 ) def test_token_node_no_csrf_cookie ( self ) : req = self . _get_GET_no_csrf_cookie_request ( ) resp = token_view ( req ) self . assertEqual ( u"" , resp . content ) def test_token_node_empty_csrf_cookie ( self ) : req = self . _get_GET_no_csrf_cookie_request ( ) req . COOKIES [ settings . CSRF_COOKIE_NAME ] = "" CsrfViewMiddleware ( ) . process_view ( req , token_view , ( ) , { } ) resp = token_view ( req ) self . assertNotEqual ( u"" , resp . content ) def test_token_node_with_csrf_cookie ( self ) : req = self . _get_GET_csrf_cookie_request ( ) CsrfViewMiddleware ( ) . process_view ( req , token_view , ( ) , { } ) resp = token_view ( req ) self . _check_token_present ( resp ) def test_get_token_for_exempt_view ( self ) : req = self . _get_GET_csrf_cookie_request ( ) CsrfViewMiddleware ( ) . process_view ( req , csrf_exempt ( token_view ) , ( ) , { } ) resp = token_view ( req ) self . _check_token_present ( resp ) def test_get_token_for_requires_csrf_token_view ( self ) : req = self . _get_GET_csrf_cookie_request ( ) resp = requires_csrf_token ( token_view ) ( req ) self . _check_token_present ( resp ) def test_token_node_with_new_csrf_cookie ( self ) : req = self . _get_GET_no_csrf_cookie_request ( ) CsrfViewMiddleware ( ) . process_view ( req , token_view , ( ) , { } ) resp = token_view ( req ) resp2 = CsrfViewMiddleware ( ) . process_response ( req , resp ) csrf_cookie = resp2 . cookies [ settings . CSRF_COOKIE_NAME ] self . _check_token_present ( resp , csrf_id = csrf_cookie . value ) def test_https_bad_referer ( self ) : req = self . _get_POST_request_with_token ( ) req . _is_secure_override = True req . META [ 'HTTP_HOST' ] = 'www.example.com' req . META [ 'HTTP_REFERER' ] = 'https://www.evil.org/somepage' req2 = CsrfViewMiddleware ( ) . process_view ( req , post_form_view , ( ) , { } ) self . assertNotEqual ( None , req2 ) self . assertEqual ( 403 , req2 . status_code ) def test_https_good_referer ( self ) : req = self . _get_POST_request_with_token ( ) req . _is_secure_override = True req . META [ 'HTTP_HOST' ] = 'www.example.com' req . META [ 'HTTP_REFERER' ] = 'https://www.example.com/somepage' req2 = CsrfViewMiddleware ( ) . process_view ( req , post_form_view , ( ) , { } ) self . assertEqual ( None , req2 ) def test_https_good_referer_2 ( self ) : req = self . _get_POST_request_with_token ( ) req . _is_secure_override = True req . META [ 'HTTP_HOST' ] = 'www.example.com' req . META [ 'HTTP_REFERER' ] = 'https://www.example.com' req2 = CsrfViewMiddleware ( ) . process_view ( req , post_form_view , ( ) , { } ) self . assertEqual ( None , req2 ) def test_ensures_csrf_cookie_no_middleware ( self ) : @ ensure_csrf_cookie def view ( request ) : return HttpResponse ( content = "" ) req = self . _get_GET_no_csrf_cookie_request ( ) resp = view ( req ) self . assertTrue ( resp . cookies . get ( settings . CSRF_COOKIE_NAME , False ) ) self . assertTrue ( 'Cookie' in resp . get ( 'Vary' , '' ) ) def test_ensures_csrf_cookie_with_middleware ( self ) : @ ensure_csrf_cookie def view ( request ) : return HttpResponse ( content = "" ) req = self . _get_GET_no_csrf_cookie_request ( ) CsrfViewMiddleware ( ) . process_view ( req , view , ( ) , { } ) resp = view ( req ) resp2 = CsrfViewMiddleware ( ) . process_response ( req , resp ) self . assertTrue ( resp2 . cookies . get ( settings . CSRF_COOKIE_NAME , False ) ) self . assertTrue ( 'Cookie' in resp2 . get ( 'Vary' , '' ) )
