from __future__ import with_statement , absolute_import from django . contrib import admin from django . contrib . admin . options import IncorrectLookupParameters from django . contrib . admin . views . main import ChangeList , SEARCH_VAR , ALL_VAR from django . contrib . auth . models import User from django . template import Context , Template from django . test import TestCase from django . test . client import RequestFactory from . admin import ( ChildAdmin , QuartetAdmin , BandAdmin , ChordsBandAdmin , GroupAdmin , ParentAdmin , DynamicListDisplayChildAdmin , DynamicListDisplayLinksChildAdmin , CustomPaginationAdmin , FilteredChildAdmin , CustomPaginator , site as custom_site , SwallowAdmin ) from . models import ( Child , Parent , Genre , Band , Musician , Group , Quartet , Membership , ChordsMusician , ChordsBand , Invitation , Swallow ) class ChangeListTests ( TestCase ) : urls = "regressiontests.admin_changelist.urls" def setUp ( self ) : self . factory = RequestFactory ( ) def _create_superuser ( self , username ) : return User . objects . create ( username = username , is_superuser = True ) def _mocked_authenticated_request ( self , url , user ) : request = self . factory . get ( url ) request . user = user return request def test_select_related_preserved ( self ) : m = ChildAdmin ( Child , admin . site ) request = self . factory . get ( '/child/' ) cl = ChangeList ( request , Child , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) self . assertEqual ( cl . query_set . query . select_related , { 'parent' : { 'name' : { } } } ) def test_result_list_empty_changelist_value ( self ) : new_child = Child . objects . create ( name = 'name' , parent = None ) request = self . factory . get ( '/child/' ) m = ChildAdmin ( Child , admin . site ) list_display = m . get_list_display ( request ) list_display_links = m . get_list_display_links ( request , list_display ) cl = ChangeList ( request , Child , list_display , list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) cl . formset = None template = Template ( '{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}' ) context = Context ( { 'cl' : cl } ) table_output = template . render ( context ) row_html = '<tbody><tr class="row1"><th><a href="%d/">name</a></th><td class="nowrap">(None)</td></tr></tbody>' % new_child . id self . assertFalse ( table_output . find ( row_html ) == - 1 , % table_output ) def test_result_list_html ( self ) : new_parent = Parent . objects . create ( name = 'parent' ) new_child = Child . objects . create ( name = 'name' , parent = new_parent ) request = self . factory . get ( '/child/' ) m = ChildAdmin ( Child , admin . site ) list_display = m . get_list_display ( request ) list_display_links = m . get_list_display_links ( request , list_display ) cl = ChangeList ( request , Child , list_display , list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) cl . formset = None template = Template ( '{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}' ) context = Context ( { 'cl' : cl } ) table_output = template . render ( context ) row_html = '<tbody><tr class="row1"><th><a href="%d/">name</a></th><td class="nowrap">Parent object</td></tr></tbody>' % new_child . id self . assertFalse ( table_output . find ( row_html ) == - 1 , % table_output ) def test_result_list_editable_html ( self ) : new_parent = Parent . objects . create ( name = 'parent' ) new_child = Child . objects . create ( name = 'name' , parent = new_parent ) request = self . factory . get ( '/child/' ) m = ChildAdmin ( Child , admin . site ) m . list_display = [ 'id' , 'name' , 'parent' ] m . list_display_links = [ 'id' ] m . list_editable = [ 'name' ] cl = ChangeList ( request , Child , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) FormSet = m . get_changelist_formset ( request ) cl . formset = FormSet ( queryset = cl . result_list ) template = Template ( '{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}' ) context = Context ( { 'cl' : cl } ) table_output = template . render ( context ) hiddenfields_div = '<div class="hiddenfields"><input type="hidden" name="form-0-id" value="%d" id="id_form-0-id" /></div>' % new_child . id self . assertFalse ( table_output . find ( hiddenfields_div ) == - 1 , % table_output ) editable_name_field = '<input name="form-0-name" value="name" class="vTextField" maxlength="30" type="text" id="id_form-0-name" />' self . assertFalse ( '<td>%s</td>' % editable_name_field == - 1 , % table_output ) def test_result_list_editable ( self ) : new_parent = Parent . objects . create ( name = 'parent' ) for i in range ( 200 ) : new_child = Child . objects . create ( name = 'name %s' % i , parent = new_parent ) request = self . factory . get ( '/child/' , data = { 'p' : - 1 } ) m = ChildAdmin ( Child , admin . site ) m . list_display = [ 'id' , 'name' , 'parent' ] m . list_display_links = [ 'id' ] m . list_editable = [ 'name' ] self . assertRaises ( IncorrectLookupParameters , lambda : ChangeList ( request , Child , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) ) def test_custom_paginator ( self ) : new_parent = Parent . objects . create ( name = 'parent' ) for i in range ( 200 ) : new_child = Child . objects . create ( name = 'name %s' % i , parent = new_parent ) request = self . factory . get ( '/child/' ) m = CustomPaginationAdmin ( Child , admin . site ) cl = ChangeList ( request , Child , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) cl . get_results ( request ) self . assertIsInstance ( cl . paginator , CustomPaginator ) def test_distinct_for_m2m_in_list_filter ( self ) : blues = Genre . objects . create ( name = 'Blues' ) band = Band . objects . create ( name = 'B.B. King Review' , nr_of_members = 11 ) band . genres . add ( blues ) band . genres . add ( blues ) m = BandAdmin ( Band , admin . site ) request = self . factory . get ( '/band/' , data = { 'genres' : blues . pk } ) cl = ChangeList ( request , Band , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) cl . get_results ( request ) self . assertEqual ( cl . result_count , 1 ) def test_distinct_for_through_m2m_in_list_filter ( self ) : lead = Musician . objects . create ( name = 'Vox' ) band = Group . objects . create ( name = 'The Hype' ) Membership . objects . create ( group = band , music = lead , role = 'lead voice' ) Membership . objects . create ( group = band , music = lead , role = 'bass player' ) m = GroupAdmin ( Group , admin . site ) request = self . factory . get ( '/group/' , data = { 'members' : lead . pk } ) cl = ChangeList ( request , Group , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) cl . get_results ( request ) self . assertEqual ( cl . result_count , 1 ) def test_distinct_for_inherited_m2m_in_list_filter ( self ) : lead = Musician . objects . create ( name = 'John' ) four = Quartet . objects . create ( name = 'The Beatles' ) Membership . objects . create ( group = four , music = lead , role = 'lead voice' ) Membership . objects . create ( group = four , music = lead , role = 'guitar player' ) m = QuartetAdmin ( Quartet , admin . site ) request = self . factory . get ( '/quartet/' , data = { 'members' : lead . pk } ) cl = ChangeList ( request , Quartet , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) cl . get_results ( request ) self . assertEqual ( cl . result_count , 1 ) def test_distinct_for_m2m_to_inherited_in_list_filter ( self ) : lead = ChordsMusician . objects . create ( name = 'Player A' ) three = ChordsBand . objects . create ( name = 'The Chords Trio' ) Invitation . objects . create ( band = three , player = lead , instrument = 'guitar' ) Invitation . objects . create ( band = three , player = lead , instrument = 'bass' ) m = ChordsBandAdmin ( ChordsBand , admin . site ) request = self . factory . get ( '/chordsband/' , data = { 'members' : lead . pk } ) cl = ChangeList ( request , ChordsBand , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) cl . get_results ( request ) self . assertEqual ( cl . result_count , 1 ) def test_distinct_for_non_unique_related_object_in_list_filter ( self ) : parent = Parent . objects . create ( name = 'Mary' ) Child . objects . create ( parent = parent , name = 'Daniel' ) Child . objects . create ( parent = parent , name = 'Daniel' ) m = ParentAdmin ( Parent , admin . site ) request = self . factory . get ( '/parent/' , data = { 'child__name' : 'Daniel' } ) cl = ChangeList ( request , Parent , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) self . assertEqual ( cl . query_set . count ( ) , 1 ) def test_distinct_for_non_unique_related_object_in_search_fields ( self ) : parent = Parent . objects . create ( name = 'Mary' ) Child . objects . create ( parent = parent , name = 'Danielle' ) Child . objects . create ( parent = parent , name = 'Daniel' ) m = ParentAdmin ( Parent , admin . site ) request = self . factory . get ( '/parent/' , data = { SEARCH_VAR : 'daniel' } ) cl = ChangeList ( request , Parent , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) self . assertEqual ( cl . query_set . count ( ) , 1 ) def test_pagination ( self ) : parent = Parent . objects . create ( name = 'anything' ) for i in range ( 30 ) : Child . objects . create ( name = 'name %s' % i , parent = parent ) Child . objects . create ( name = 'filtered %s' % i , parent = parent ) request = self . factory . get ( '/child/' ) m = ChildAdmin ( Child , admin . site ) cl = ChangeList ( request , Child , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) self . assertEqual ( cl . query_set . count ( ) , 60 ) self . assertEqual ( cl . paginator . count , 60 ) self . assertEqual ( cl . paginator . page_range , [ 1 , 2 , 3 , 4 , 5 , 6 ] ) m = FilteredChildAdmin ( Child , admin . site ) cl = ChangeList ( request , Child , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , m . list_max_show_all , m . list_editable , m ) self . assertEqual ( cl . query_set . count ( ) , 30 ) self . assertEqual ( cl . paginator . count , 30 ) self . assertEqual ( cl . paginator . page_range , [ 1 , 2 , 3 ] ) def test_dynamic_list_display ( self ) : parent = Parent . objects . create ( name = 'parent' ) for i in range ( 10 ) : Child . objects . create ( name = 'child %s' % i , parent = parent ) user_noparents = self . _create_superuser ( 'noparents' ) user_parents = self . _create_superuser ( 'parents' ) m = custom_site . _registry [ Child ] request = self . _mocked_authenticated_request ( '/child/' , user_noparents ) response = m . changelist_view ( request ) self . assertNotContains ( response , 'Parent object' ) list_display = m . get_list_display ( request ) list_display_links = m . get_list_display_links ( request , list_display ) self . assertEqual ( list_display , [ 'name' , 'age' ] ) self . assertEqual ( list_display_links , [ 'name' ] ) m = DynamicListDisplayChildAdmin ( Child , admin . site ) request = self . _mocked_authenticated_request ( '/child/' , user_parents ) response = m . changelist_view ( request ) self . assertContains ( response , 'Parent object' ) custom_site . unregister ( Child ) list_display = m . get_list_display ( request ) list_display_links = m . get_list_display_links ( request , list_display ) self . assertEqual ( list_display , ( 'parent' , 'name' , 'age' ) ) self . assertEqual ( list_display_links , [ 'parent' ] ) custom_site . register ( Child , ChildAdmin ) m = custom_site . _registry [ Child ] request = self . _mocked_authenticated_request ( '/child/' , user_noparents ) response = m . changelist_view ( request ) self . assertContains ( response , 'Parent object' ) def test_show_all ( self ) : parent = Parent . objects . create ( name = 'anything' ) for i in range ( 30 ) : Child . objects . create ( name = 'name %s' % i , parent = parent ) Child . objects . create ( name = 'filtered %s' % i , parent = parent ) request = self . factory . get ( '/child/' , data = { ALL_VAR : '' } ) m = ChildAdmin ( Child , admin . site ) cl = ChangeList ( request , Child , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , 200 , m . list_editable , m ) cl . get_results ( request ) self . assertEqual ( len ( cl . result_list ) , 60 ) m = ChildAdmin ( Child , admin . site ) cl = ChangeList ( request , Child , m . list_display , m . list_display_links , m . list_filter , m . date_hierarchy , m . search_fields , m . list_select_related , m . list_per_page , 30 , m . list_editable , m ) cl . get_results ( request ) self . assertEqual ( len ( cl . result_list ) , 10 ) def test_dynamic_list_display_links ( self ) : parent = Parent . objects . create ( name = 'parent' ) for i in range ( 1 , 10 ) : Child . objects . create ( id = i , name = 'child %s' % i , parent = parent , age = i ) m = DynamicListDisplayLinksChildAdmin ( Child , admin . site ) superuser = self . _create_superuser ( 'superuser' ) request = self . _mocked_authenticated_request ( '/child/' , superuser ) response = m . changelist_view ( request ) for i in range ( 1 , 10 ) : self . assertContains ( response , '<a href="%s/">%s</a>' % ( i , i ) ) list_display = m . get_list_display ( request ) list_display_links = m . get_list_display_links ( request , list_display ) self . assertEqual ( list_display , ( 'parent' , 'name' , 'age' ) ) self . assertEqual ( list_display_links , [ 'age' ] ) def test_tuple_list_display ( self ) : swallow = Swallow . objects . create ( origin = 'Africa' , load = '12.34' , speed = '22.2' ) model_admin = SwallowAdmin ( Swallow , admin . site ) superuser = self . _create_superuser ( 'superuser' ) request = self . _mocked_authenticated_request ( '/swallow/' , superuser ) response = model_admin . changelist_view ( request ) self . assertContains ( response , unicode ( swallow . origin ) ) self . assertContains ( response , unicode ( swallow . load ) ) self . assertContains ( response , unicode ( swallow . speed ) )
