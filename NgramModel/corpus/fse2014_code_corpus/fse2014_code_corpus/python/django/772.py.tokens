from __future__ import absolute_import from django . conf import settings from django . contrib import admin from django . contrib . admin . sites import AdminSite from django . contrib . contenttypes . generic import ( generic_inlineformset_factory , GenericTabularInline ) from django . forms . models import ModelForm from django . test import TestCase from . admin import MediaInline , MediaPermanentInline from . models import ( Episode , EpisodeExtra , EpisodeMaxNum , Media , EpisodePermanent , Category ) class GenericAdminViewTest ( TestCase ) : urls = "regressiontests.generic_inline_admin.urls" fixtures = [ 'users.xml' ] def setUp ( self ) : self . original_template_debug = settings . TEMPLATE_DEBUG settings . TEMPLATE_DEBUG = True self . client . login ( username = 'super' , password = 'secret' ) e = Episode . objects . create ( name = 'This Week in Django' ) self . episode_pk = e . pk m = Media ( content_object = e , url = 'http://example.com/podcast.mp3' ) m . save ( ) self . mp3_media_pk = m . pk m = Media ( content_object = e , url = 'http://example.com/logo.png' ) m . save ( ) self . png_media_pk = m . pk def tearDown ( self ) : self . client . logout ( ) settings . TEMPLATE_DEBUG = self . original_template_debug def testBasicAddGet ( self ) : response = self . client . get ( '/generic_inline_admin/admin/generic_inline_admin/episode/add/' ) self . assertEqual ( response . status_code , 200 ) def testBasicEditGet ( self ) : response = self . client . get ( '/generic_inline_admin/admin/generic_inline_admin/episode/%d/' % self . episode_pk ) self . assertEqual ( response . status_code , 200 ) def testBasicAddPost ( self ) : post_data = { : u"This Week in Django" , : u"1" , : u"0" , : u"0" , } response = self . client . post ( '/generic_inline_admin/admin/generic_inline_admin/episode/add/' , post_data ) self . assertEqual ( response . status_code , 302 ) def testBasicEditPost ( self ) : post_data = { : u"This Week in Django" , : u"3" , : u"2" , : u"0" , : u"%d" % self . mp3_media_pk , : u"http://example.com/podcast.mp3" , : u"%d" % self . png_media_pk , : u"http://example.com/logo.png" , : u"" , : u"" , } url = '/generic_inline_admin/admin/generic_inline_admin/episode/%d/' % self . episode_pk response = self . client . post ( url , post_data ) self . assertEqual ( response . status_code , 302 ) def testGenericInlineFormset ( self ) : EpisodeMediaFormSet = generic_inlineformset_factory ( Media , can_delete = False , exclude = [ 'description' , 'keywords' ] , extra = 3 ) e = Episode . objects . get ( name = 'This Week in Django' ) formset = EpisodeMediaFormSet ( instance = e ) self . assertEqual ( len ( formset . forms ) , 5 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , '<p><label for="id_generic_inline_admin-media-content_type-object_id-0-url">Url:</label> <input id="id_generic_inline_admin-media-content_type-object_id-0-url" type="text" name="generic_inline_admin-media-content_type-object_id-0-url" value="http://example.com/podcast.mp3" maxlength="200" /><input type="hidden" name="generic_inline_admin-media-content_type-object_id-0-id" value="%s" id="id_generic_inline_admin-media-content_type-object_id-0-id" /></p>' % self . mp3_media_pk ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , '<p><label for="id_generic_inline_admin-media-content_type-object_id-1-url">Url:</label> <input id="id_generic_inline_admin-media-content_type-object_id-1-url" type="text" name="generic_inline_admin-media-content_type-object_id-1-url" value="http://example.com/logo.png" maxlength="200" /><input type="hidden" name="generic_inline_admin-media-content_type-object_id-1-id" value="%s" id="id_generic_inline_admin-media-content_type-object_id-1-id" /></p>' % self . png_media_pk ) self . assertHTMLEqual ( formset . forms [ 2 ] . as_p ( ) , '<p><label for="id_generic_inline_admin-media-content_type-object_id-2-url">Url:</label> <input id="id_generic_inline_admin-media-content_type-object_id-2-url" type="text" name="generic_inline_admin-media-content_type-object_id-2-url" maxlength="200" /><input type="hidden" name="generic_inline_admin-media-content_type-object_id-2-id" id="id_generic_inline_admin-media-content_type-object_id-2-id" /></p>' ) formset = EpisodeMediaFormSet ( instance = e , queryset = Media . objects . order_by ( 'url' ) ) self . assertEqual ( len ( formset . forms ) , 5 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , '<p><label for="id_generic_inline_admin-media-content_type-object_id-0-url">Url:</label> <input id="id_generic_inline_admin-media-content_type-object_id-0-url" type="text" name="generic_inline_admin-media-content_type-object_id-0-url" value="http://example.com/logo.png" maxlength="200" /><input type="hidden" name="generic_inline_admin-media-content_type-object_id-0-id" value="%s" id="id_generic_inline_admin-media-content_type-object_id-0-id" /></p>' % self . png_media_pk ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , '<p><label for="id_generic_inline_admin-media-content_type-object_id-1-url">Url:</label> <input id="id_generic_inline_admin-media-content_type-object_id-1-url" type="text" name="generic_inline_admin-media-content_type-object_id-1-url" value="http://example.com/podcast.mp3" maxlength="200" /><input type="hidden" name="generic_inline_admin-media-content_type-object_id-1-id" value="%s" id="id_generic_inline_admin-media-content_type-object_id-1-id" /></p>' % self . mp3_media_pk ) self . assertHTMLEqual ( formset . forms [ 2 ] . as_p ( ) , '<p><label for="id_generic_inline_admin-media-content_type-object_id-2-url">Url:</label> <input id="id_generic_inline_admin-media-content_type-object_id-2-url" type="text" name="generic_inline_admin-media-content_type-object_id-2-url" maxlength="200" /><input type="hidden" name="generic_inline_admin-media-content_type-object_id-2-id" id="id_generic_inline_admin-media-content_type-object_id-2-id" /></p>' ) formset = EpisodeMediaFormSet ( instance = e , queryset = Media . objects . filter ( url__endswith = ".png" ) ) self . assertEqual ( len ( formset . forms ) , 4 ) self . assertHTMLEqual ( formset . forms [ 0 ] . as_p ( ) , '<p><label for="id_generic_inline_admin-media-content_type-object_id-0-url">Url:</label> <input id="id_generic_inline_admin-media-content_type-object_id-0-url" type="text" name="generic_inline_admin-media-content_type-object_id-0-url" value="http://example.com/logo.png" maxlength="200" /><input type="hidden" name="generic_inline_admin-media-content_type-object_id-0-id" value="%s" id="id_generic_inline_admin-media-content_type-object_id-0-id" /></p>' % self . png_media_pk ) self . assertHTMLEqual ( formset . forms [ 1 ] . as_p ( ) , '<p><label for="id_generic_inline_admin-media-content_type-object_id-1-url">Url:</label> <input id="id_generic_inline_admin-media-content_type-object_id-1-url" type="text" name="generic_inline_admin-media-content_type-object_id-1-url" maxlength="200" /><input type="hidden" name="generic_inline_admin-media-content_type-object_id-1-id" id="id_generic_inline_admin-media-content_type-object_id-1-id" /></p>' ) def testGenericInlineFormsetFactory ( self ) : inline_formset = generic_inlineformset_factory ( Media , exclude = ( 'url' , ) ) e = Episode . objects . get ( name = 'This Week in Django' ) formset = inline_formset ( instance = e ) self . assertTrue ( formset . get_queryset ( ) . ordered ) class GenericInlineAdminParametersTest ( TestCase ) : urls = "regressiontests.generic_inline_admin.urls" fixtures = [ 'users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def _create_object ( self , model ) : e = model . objects . create ( name = 'This Week in Django' ) Media . objects . create ( content_object = e , url = 'http://example.com/podcast.mp3' ) return e def testNoParam ( self ) : e = self . _create_object ( Episode ) response = self . client . get ( '/generic_inline_admin/admin/generic_inline_admin/episode/%s/' % e . pk ) formset = response . context [ 'inline_admin_formsets' ] [ 0 ] . formset self . assertEqual ( formset . total_form_count ( ) , 4 ) self . assertEqual ( formset . initial_form_count ( ) , 1 ) def testExtraParam ( self ) : e = self . _create_object ( EpisodeExtra ) response = self . client . get ( '/generic_inline_admin/admin/generic_inline_admin/episodeextra/%s/' % e . pk ) formset = response . context [ 'inline_admin_formsets' ] [ 0 ] . formset self . assertEqual ( formset . total_form_count ( ) , 1 ) self . assertEqual ( formset . initial_form_count ( ) , 1 ) def testMaxNumParam ( self ) : e = self . _create_object ( EpisodeMaxNum ) inline_form_data = '<input type="hidden" name="generic_inline_admin-media-content_type-object_id-TOTAL_FORMS" value="2" id="id_generic_inline_admin-media-content_type-object_id-TOTAL_FORMS" /><input type="hidden" name="generic_inline_admin-media-content_type-object_id-INITIAL_FORMS" value="1" id="id_generic_inline_admin-media-content_type-object_id-INITIAL_FORMS" />' response = self . client . get ( '/generic_inline_admin/admin/generic_inline_admin/episodemaxnum/%s/' % e . pk ) formset = response . context [ 'inline_admin_formsets' ] [ 0 ] . formset self . assertEqual ( formset . total_form_count ( ) , 2 ) self . assertEqual ( formset . initial_form_count ( ) , 1 ) class GenericInlineAdminWithUniqueTogetherTest ( TestCase ) : urls = "regressiontests.generic_inline_admin.urls" fixtures = [ 'users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def testAdd ( self ) : category_id = Category . objects . create ( name = 'male' ) . pk post_data = { : u"John Doe" , : u"1" , : u"0" , : u"0" , : "" , : "555-555-5555" , : "%s" % category_id , } response = self . client . get ( '/generic_inline_admin/admin/generic_inline_admin/contact/add/' ) self . assertEqual ( response . status_code , 200 ) response = self . client . post ( '/generic_inline_admin/admin/generic_inline_admin/contact/add/' , post_data ) self . assertEqual ( response . status_code , 302 ) class NoInlineDeletionTest ( TestCase ) : urls = "regressiontests.generic_inline_admin.urls" def test_no_deletion ( self ) : fake_site = object ( ) inline = MediaPermanentInline ( EpisodePermanent , fake_site ) fake_request = object ( ) formset = inline . get_formset ( fake_request ) self . assertFalse ( formset . can_delete ) class MockRequest ( object ) : pass class MockSuperUser ( object ) : def has_perm ( self , perm ) : return True request = MockRequest ( ) request . user = MockSuperUser ( ) class GenericInlineModelAdminTest ( TestCase ) : urls = "regressiontests.generic_inline_admin.urls" def setUp ( self ) : self . site = AdminSite ( ) def test_get_formset_kwargs ( self ) : media_inline = MediaInline ( Media , AdminSite ( ) ) formset = media_inline . get_formset ( request ) self . assertEqual ( formset . max_num , None ) self . assertEqual ( formset . can_order , False ) formset = media_inline . get_formset ( request , max_num = 100 , can_order = True ) self . assertEqual ( formset . max_num , 100 ) self . assertEqual ( formset . can_order , True ) def test_custom_form_meta_exclude_with_readonly ( self ) : class MediaForm ( ModelForm ) : class Meta : model = Media exclude = [ 'url' ] class MediaInline ( GenericTabularInline ) : readonly_fields = [ 'description' ] form = MediaForm model = Media class EpisodeAdmin ( admin . ModelAdmin ) : inlines = [ MediaInline ] ma = EpisodeAdmin ( Episode , self . site ) self . assertEqual ( list ( ma . get_formsets ( request ) ) [ 0 ] ( ) . forms [ 0 ] . fields . keys ( ) , [ 'keywords' , 'id' , 'DELETE' ] ) def test_custom_form_meta_exclude ( self ) : class MediaForm ( ModelForm ) : class Meta : model = Media exclude = [ 'url' ] class MediaInline ( GenericTabularInline ) : exclude = [ 'description' ] form = MediaForm model = Media class EpisodeAdmin ( admin . ModelAdmin ) : inlines = [ MediaInline ] ma = EpisodeAdmin ( Episode , self . site ) self . assertEqual ( list ( ma . get_formsets ( request ) ) [ 0 ] ( ) . forms [ 0 ] . fields . keys ( ) , [ 'url' , 'keywords' , 'id' , 'DELETE' ] ) class MediaInline ( GenericTabularInline ) : form = MediaForm model = Media class EpisodeAdmin ( admin . ModelAdmin ) : inlines = [ MediaInline ] ma = EpisodeAdmin ( Episode , self . site ) self . assertEqual ( list ( ma . get_formsets ( request ) ) [ 0 ] ( ) . forms [ 0 ] . fields . keys ( ) , [ 'description' , 'keywords' , 'id' , 'DELETE' ] )
