import hashlib from django . conf import settings from django . utils import importlib from django . utils . datastructures import SortedDict from django . utils . encoding import smart_str from django . core . exceptions import ImproperlyConfigured from django . utils . crypto import ( pbkdf2 , constant_time_compare , get_random_string ) from django . utils . translation import ugettext_noop as _ UNUSABLE_PASSWORD = '!' HASHERS = None PREFERRED_HASHER = None def is_password_usable ( encoded ) : return ( encoded is not None and encoded != UNUSABLE_PASSWORD ) def check_password ( password , encoded , setter = None , preferred = 'default' ) : if not password or not is_password_usable ( encoded ) : return False preferred = get_hasher ( preferred ) raw_password = password password = smart_str ( password ) encoded = smart_str ( encoded ) if len ( encoded ) == 32 and '$' not in encoded : hasher = get_hasher ( 'md5' ) else : algorithm = encoded . split ( '$' , 1 ) [ 0 ] hasher = get_hasher ( algorithm ) must_update = hasher . algorithm != preferred . algorithm is_correct = hasher . verify ( password , encoded ) if setter and is_correct and must_update : setter ( raw_password ) return is_correct def make_password ( password , salt = None , hasher = 'default' ) : if not password : return UNUSABLE_PASSWORD hasher = get_hasher ( hasher ) password = smart_str ( password ) if not salt : salt = hasher . salt ( ) salt = smart_str ( salt ) return hasher . encode ( password , salt ) def load_hashers ( ) : global HASHERS global PREFERRED_HASHER hashers = [ ] for backend in settings . PASSWORD_HASHERS : try : mod_path , cls_name = backend . rsplit ( '.' , 1 ) mod = importlib . import_module ( mod_path ) hasher_cls = getattr ( mod , cls_name ) except ( AttributeError , ImportError , ValueError ) : raise ImproperlyConfigured ( "hasher not found: %s" % backend ) hasher = hasher_cls ( ) if not getattr ( hasher , 'algorithm' ) : raise ImproperlyConfigured ( "hasher doesn't specify an " % backend ) hashers . append ( hasher ) HASHERS = dict ( [ ( hasher . algorithm , hasher ) for hasher in hashers ] ) PREFERRED_HASHER = hashers [ 0 ] def get_hasher ( algorithm = 'default' ) : if hasattr ( algorithm , 'algorithm' ) : return algorithm elif algorithm == 'default' : if PREFERRED_HASHER is None : load_hashers ( ) return PREFERRED_HASHER else : if HASHERS is None : load_hashers ( ) if algorithm not in HASHERS : raise ValueError ( "Unknown password hashing algorithm '%s'. " % algorithm ) return HASHERS [ algorithm ] def mask_hash ( hash , show = 6 , char = "*" ) : masked = hash [ : show ] masked += char * len ( hash [ show : ] ) return masked class BasePasswordHasher ( object ) : algorithm = None library = None def _load_library ( self ) : if self . library is not None : if isinstance ( self . library , ( tuple , list ) ) : name , mod_path = self . library else : name = mod_path = self . library try : module = importlib . import_module ( mod_path ) except ImportError : raise ValueError ( "Couldn't load %s password algorithm " % name ) return module raise ValueError ( "Hasher '%s' doesn't specify a library attribute" % self . __class__ ) def salt ( self ) : return get_random_string ( ) def verify ( self , password , encoded ) : raise NotImplementedError ( ) def encode ( self , password , salt ) : raise NotImplementedError ( ) def safe_summary ( self , encoded ) : raise NotImplementedError ( ) class PBKDF2PasswordHasher ( BasePasswordHasher ) : algorithm = "pbkdf2_sha256" iterations = 10000 digest = hashlib . sha256 def encode ( self , password , salt , iterations = None ) : assert password assert salt and '$' not in salt if not iterations : iterations = self . iterations hash = pbkdf2 ( password , salt , iterations , digest = self . digest ) hash = hash . encode ( 'base64' ) . strip ( ) return "%s$%d$%s$%s" % ( self . algorithm , iterations , salt , hash ) def verify ( self , password , encoded ) : algorithm , iterations , salt , hash = encoded . split ( '$' , 3 ) assert algorithm == self . algorithm encoded_2 = self . encode ( password , salt , int ( iterations ) ) return constant_time_compare ( encoded , encoded_2 ) def safe_summary ( self , encoded ) : algorithm , iterations , salt , hash = encoded . split ( '$' , 3 ) assert algorithm == self . algorithm return SortedDict ( [ ( _ ( 'algorithm' ) , algorithm ) , ( _ ( 'iterations' ) , iterations ) , ( _ ( 'salt' ) , mask_hash ( salt ) ) , ( _ ( 'hash' ) , mask_hash ( hash ) ) , ] ) class PBKDF2SHA1PasswordHasher ( PBKDF2PasswordHasher ) : algorithm = "pbkdf2_sha1" digest = hashlib . sha1 class BCryptPasswordHasher ( BasePasswordHasher ) : algorithm = "bcrypt" library = ( "py-bcrypt" , "bcrypt" ) rounds = 12 def salt ( self ) : bcrypt = self . _load_library ( ) return bcrypt . gensalt ( self . rounds ) def encode ( self , password , salt ) : bcrypt = self . _load_library ( ) data = bcrypt . hashpw ( password , salt ) return "%s$%s" % ( self . algorithm , data ) def verify ( self , password , encoded ) : algorithm , data = encoded . split ( '$' , 1 ) assert algorithm == self . algorithm bcrypt = self . _load_library ( ) return constant_time_compare ( data , bcrypt . hashpw ( password , data ) ) def safe_summary ( self , encoded ) : algorithm , empty , algostr , work_factor , data = encoded . split ( '$' , 4 ) assert algorithm == self . algorithm salt , checksum = data [ : 22 ] , data [ 22 : ] return SortedDict ( [ ( _ ( 'algorithm' ) , algorithm ) , ( _ ( 'work factor' ) , work_factor ) , ( _ ( 'salt' ) , mask_hash ( salt ) ) , ( _ ( 'checksum' ) , mask_hash ( checksum ) ) , ] ) class SHA1PasswordHasher ( BasePasswordHasher ) : algorithm = "sha1" def encode ( self , password , salt ) : assert password assert salt and '$' not in salt hash = hashlib . sha1 ( salt + password ) . hexdigest ( ) return "%s$%s$%s" % ( self . algorithm , salt , hash ) def verify ( self , password , encoded ) : algorithm , salt , hash = encoded . split ( '$' , 2 ) assert algorithm == self . algorithm encoded_2 = self . encode ( password , salt ) return constant_time_compare ( encoded , encoded_2 ) def safe_summary ( self , encoded ) : algorithm , salt , hash = encoded . split ( '$' , 2 ) assert algorithm == self . algorithm return SortedDict ( [ ( _ ( 'algorithm' ) , algorithm ) , ( _ ( 'salt' ) , mask_hash ( salt , show = 2 ) ) , ( _ ( 'hash' ) , mask_hash ( hash ) ) , ] ) class MD5PasswordHasher ( BasePasswordHasher ) : algorithm = "md5" def salt ( self ) : return '' def encode ( self , password , salt ) : return hashlib . md5 ( password ) . hexdigest ( ) def verify ( self , password , encoded ) : encoded_2 = self . encode ( password , '' ) return constant_time_compare ( encoded , encoded_2 ) def safe_summary ( self , encoded ) : return SortedDict ( [ ( _ ( 'algorithm' ) , self . algorithm ) , ( _ ( 'hash' ) , mask_hash ( encoded , show = 3 ) ) , ] ) class CryptPasswordHasher ( BasePasswordHasher ) : algorithm = "crypt" library = "crypt" def salt ( self ) : return get_random_string ( 2 ) def encode ( self , password , salt ) : crypt = self . _load_library ( ) assert len ( salt ) == 2 data = crypt . crypt ( password , salt ) return "%s$%s$%s" % ( self . algorithm , '' , data ) def verify ( self , password , encoded ) : crypt = self . _load_library ( ) algorithm , salt , data = encoded . split ( '$' , 2 ) assert algorithm == self . algorithm return constant_time_compare ( data , crypt . crypt ( password , data ) ) def safe_summary ( self , encoded ) : algorithm , salt , data = encoded . split ( '$' , 2 ) assert algorithm == self . algorithm return SortedDict ( [ ( _ ( 'algorithm' ) , algorithm ) , ( _ ( 'salt' ) , salt ) , ( _ ( 'hash' ) , mask_hash ( data , show = 3 ) ) , ] )
