""" Spanish-specific Form helpers """ from __future__ import absolute_import import re from django . contrib . localflavor . es . es_provinces import PROVINCE_CHOICES from django . contrib . localflavor . es . es_regions import REGION_CHOICES from django . core . validators import EMPTY_VALUES from django . forms import ValidationError from django . forms . fields import RegexField , Select from django . utils . translation import ugettext_lazy as _ class ESPostalCodeField ( RegexField ) : default_error_messages = { : _ ( 'Enter a valid postal code in the range and format 01XXX - 52XXX.' ) , } def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) : super ( ESPostalCodeField , self ) . __init__ ( , max_length , min_length , * args , ** kwargs ) class ESPhoneNumberField ( RegexField ) : default_error_messages = { : _ ( 'Enter a valid phone number in one of the formats 6XXXXXXXX, 8XXXXXXXX or 9XXXXXXXX.' ) , } def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) : super ( ESPhoneNumberField , self ) . __init__ ( r'^(6|7|8|9)\d{8}$' , max_length , min_length , * args , ** kwargs ) class ESIdentityCardNumberField ( RegexField ) : default_error_messages = { : _ ( 'Please enter a valid NIF, NIE, or CIF.' ) , : _ ( 'Please enter a valid NIF or NIE.' ) , : _ ( 'Invalid checksum for NIF.' ) , : _ ( 'Invalid checksum for NIE.' ) , : _ ( 'Invalid checksum for CIF.' ) , } def __init__ ( self , only_nif = False , max_length = None , min_length = None , * args , ** kwargs ) : self . only_nif = only_nif self . nif_control = 'TRWAGMYFPDXBNJZSQVHLCKE' self . cif_control = 'JABCDEFGHI' self . cif_types = 'ABCDEFGHKLMNPQS' self . nie_types = 'XT' id_card_re = re . compile ( r'^([%s]?)[ -]?(\d+)[ -]?([%s]?)$' % ( self . cif_types + self . nie_types , self . nif_control + self . cif_control ) , re . IGNORECASE ) super ( ESIdentityCardNumberField , self ) . __init__ ( id_card_re , max_length , min_length , error_message = self . default_error_messages [ 'invalid%s' % ( self . only_nif and '_only_nif' or '' ) ] , * args , ** kwargs ) def clean ( self , value ) : super ( ESIdentityCardNumberField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' nif_get_checksum = lambda d : self . nif_control [ int ( d ) % 23 ] value = value . upper ( ) . replace ( ' ' , '' ) . replace ( '-' , '' ) m = re . match ( r'^([%s]?)[ -]?(\d+)[ -]?([%s]?)$' % ( self . cif_types + self . nie_types , self . nif_control + self . cif_control ) , value ) letter1 , number , letter2 = m . groups ( ) if not letter1 and letter2 : if letter2 == nif_get_checksum ( number ) : return value else : raise ValidationError ( self . error_messages [ 'invalid_nif' ] ) elif letter1 in self . nie_types and letter2 : if letter2 == nif_get_checksum ( number ) : return value else : raise ValidationError ( self . error_messages [ 'invalid_nie' ] ) elif not self . only_nif and letter1 in self . cif_types and len ( number ) in [ 7 , 8 ] : if not letter2 : number , letter2 = number [ : - 1 ] , int ( number [ - 1 ] ) checksum = cif_get_checksum ( number ) if letter2 in ( checksum , self . cif_control [ checksum ] ) : return value else : raise ValidationError ( self . error_messages [ 'invalid_cif' ] ) else : raise ValidationError ( self . error_messages [ 'invalid' ] ) class ESCCCField ( RegexField ) : default_error_messages = { : _ ( 'Please enter a valid bank account number in format XXXX-XXXX-XX-XXXXXXXXXX.' ) , : _ ( 'Invalid checksum for bank account number.' ) , } def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) : super ( ESCCCField , self ) . __init__ ( r'^\d{4}[ -]?\d{4}[ -]?\d{2}[ -]?\d{10}$' , max_length , min_length , * args , ** kwargs ) def clean ( self , value ) : super ( ESCCCField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' control_str = [ 1 , 2 , 4 , 8 , 5 , 10 , 9 , 7 , 3 , 6 ] m = re . match ( r'^(\d{4})[ -]?(\d{4})[ -]?(\d{2})[ -]?(\d{10})$' , value ) entity , office , checksum , account = m . groups ( ) get_checksum = lambda d : str ( 11 - sum ( [ int ( digit ) * int ( control ) for digit , control in zip ( d , control_str ) ] ) % 11 ) . replace ( '10' , '1' ) . replace ( '11' , '0' ) if get_checksum ( '00' + entity + office ) + get_checksum ( account ) == checksum : return value else : raise ValidationError ( self . error_messages [ 'checksum' ] ) class ESRegionSelect ( Select ) : def __init__ ( self , attrs = None ) : super ( ESRegionSelect , self ) . __init__ ( attrs , choices = REGION_CHOICES ) class ESProvinceSelect ( Select ) : def __init__ ( self , attrs = None ) : super ( ESProvinceSelect , self ) . __init__ ( attrs , choices = PROVINCE_CHOICES ) def cif_get_checksum ( number ) : s1 = sum ( [ int ( digit ) for pos , digit in enumerate ( number ) if int ( pos ) % 2 ] ) s2 = sum ( [ sum ( [ int ( unit ) for unit in str ( int ( digit ) * 2 ) ] ) for pos , digit in enumerate ( number ) if not int ( pos ) % 2 ] ) return ( 10 - ( ( s1 + s2 ) % 10 ) ) % 10
