import os import errno import urlparse import itertools from datetime import datetime from django . conf import settings from django . core . exceptions import ImproperlyConfigured , SuspiciousOperation from django . core . files import locks , File from django . core . files . move import file_move_safe from django . utils . encoding import force_unicode , filepath_to_uri from django . utils . functional import LazyObject from django . utils . importlib import import_module from django . utils . text import get_valid_filename from django . utils . _os import safe_join , abspathu __all__ = ( 'Storage' , 'FileSystemStorage' , 'DefaultStorage' , 'default_storage' ) class Storage ( object ) : def open ( self , name , mode = 'rb' ) : return self . _open ( name , mode ) def save ( self , name , content ) : if name is None : name = content . name name = self . get_available_name ( name ) name = self . _save ( name , content ) return force_unicode ( name . replace ( '\\' , '/' ) ) def get_valid_name ( self , name ) : return get_valid_filename ( name ) def get_available_name ( self , name ) : dir_name , file_name = os . path . split ( name ) file_root , file_ext = os . path . splitext ( file_name ) count = itertools . count ( 1 ) while self . exists ( name ) : name = os . path . join ( dir_name , "%s_%s%s" % ( file_root , count . next ( ) , file_ext ) ) return name def path ( self , name ) : raise NotImplementedError ( "This backend doesn't support absolute paths." ) def delete ( self , name ) : raise NotImplementedError ( ) def exists ( self , name ) : raise NotImplementedError ( ) def listdir ( self , path ) : raise NotImplementedError ( ) def size ( self , name ) : raise NotImplementedError ( ) def url ( self , name ) : raise NotImplementedError ( ) def accessed_time ( self , name ) : raise NotImplementedError ( ) def created_time ( self , name ) : raise NotImplementedError ( ) def modified_time ( self , name ) : raise NotImplementedError ( ) class FileSystemStorage ( Storage ) : def __init__ ( self , location = None , base_url = None ) : if location is None : location = settings . MEDIA_ROOT self . base_location = location self . location = abspathu ( self . base_location ) if base_url is None : base_url = settings . MEDIA_URL self . base_url = base_url def _open ( self , name , mode = 'rb' ) : return File ( open ( self . path ( name ) , mode ) ) def _save ( self , name , content ) : full_path = self . path ( name ) directory = os . path . dirname ( full_path ) if not os . path . exists ( directory ) : try : os . makedirs ( directory ) except OSError , e : if e . errno != errno . EEXIST : raise if not os . path . isdir ( directory ) : raise IOError ( "%s exists and is not a directory." % directory ) while True : try : if hasattr ( content , 'temporary_file_path' ) : file_move_safe ( content . temporary_file_path ( ) , full_path ) content . close ( ) else : fd = os . open ( full_path , os . O_WRONLY | os . O_CREAT | os . O_EXCL | getattr ( os , 'O_BINARY' , 0 ) ) try : locks . lock ( fd , locks . LOCK_EX ) for chunk in content . chunks ( ) : os . write ( fd , chunk ) finally : locks . unlock ( fd ) os . close ( fd ) except OSError , e : if e . errno == errno . EEXIST : name = self . get_available_name ( name ) full_path = self . path ( name ) else : raise else : break if settings . FILE_UPLOAD_PERMISSIONS is not None : os . chmod ( full_path , settings . FILE_UPLOAD_PERMISSIONS ) return name def delete ( self , name ) : name = self . path ( name ) if os . path . exists ( name ) : try : os . remove ( name ) except OSError , e : if e . errno != errno . ENOENT : raise def exists ( self , name ) : return os . path . exists ( self . path ( name ) ) def listdir ( self , path ) : path = self . path ( path ) directories , files = [ ] , [ ] for entry in os . listdir ( path ) : if os . path . isdir ( os . path . join ( path , entry ) ) : directories . append ( entry ) else : files . append ( entry ) return directories , files def path ( self , name ) : try : path = safe_join ( self . location , name ) except ValueError : raise SuspiciousOperation ( "Attempted access to '%s' denied." % name ) return os . path . normpath ( path ) def size ( self , name ) : return os . path . getsize ( self . path ( name ) ) def url ( self , name ) : if self . base_url is None : raise ValueError ( "This file is not accessible via a URL." ) return urlparse . urljoin ( self . base_url , filepath_to_uri ( name ) ) def accessed_time ( self , name ) : return datetime . fromtimestamp ( os . path . getatime ( self . path ( name ) ) ) def created_time ( self , name ) : return datetime . fromtimestamp ( os . path . getctime ( self . path ( name ) ) ) def modified_time ( self , name ) : return datetime . fromtimestamp ( os . path . getmtime ( self . path ( name ) ) ) def get_storage_class ( import_path = None ) : if import_path is None : import_path = settings . DEFAULT_FILE_STORAGE try : dot = import_path . rindex ( '.' ) except ValueError : raise ImproperlyConfigured ( "%s isn't a storage module." % import_path ) module , classname = import_path [ : dot ] , import_path [ dot + 1 : ] try : mod = import_module ( module ) except ImportError , e : raise ImproperlyConfigured ( 'Error importing storage module %s: "%s"' % ( module , e ) ) try : return getattr ( mod , classname ) except AttributeError : raise ImproperlyConfigured ( 'Storage module "%s" does not define a "%s" class.' % ( module , classname ) ) class DefaultStorage ( LazyObject ) : def _setup ( self ) : self . _wrapped = get_storage_class ( ) ( ) default_storage = DefaultStorage ( )
