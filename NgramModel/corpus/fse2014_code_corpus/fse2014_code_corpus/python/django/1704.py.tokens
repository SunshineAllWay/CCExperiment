from django . contrib . gis . gdal . base import GDALBase from django . contrib . gis . gdal . error import OGRException , OGRIndexError from django . contrib . gis . gdal . field import Field from django . contrib . gis . gdal . geometries import OGRGeometry , OGRGeomType from django . contrib . gis . gdal . prototypes import ds as capi , geom as geom_api class Feature ( GDALBase ) : def __init__ ( self , feat , fdefn ) : if not feat or not fdefn : raise OGRException ( 'Cannot create OGR Feature, invalid pointer given.' ) self . ptr = feat self . _fdefn = fdefn def __del__ ( self ) : if self . _ptr : capi . destroy_feature ( self . _ptr ) def __getitem__ ( self , index ) : if isinstance ( index , basestring ) : i = self . index ( index ) else : if index < 0 or index > self . num_fields : raise OGRIndexError ( 'index out of range' ) i = index return Field ( self . ptr , i ) def __iter__ ( self ) : for i in xrange ( self . num_fields ) : yield self [ i ] def __len__ ( self ) : return self . num_fields def __str__ ( self ) : return 'Feature FID %d in Layer<%s>' % ( self . fid , self . layer_name ) def __eq__ ( self , other ) : return bool ( capi . feature_equal ( self . ptr , other . _ptr ) ) @ property def fid ( self ) : return capi . get_fid ( self . ptr ) @ property def layer_name ( self ) : return capi . get_feat_name ( self . _fdefn ) @ property def num_fields ( self ) : return capi . get_feat_field_count ( self . ptr ) @ property def fields ( self ) : return [ capi . get_field_name ( capi . get_field_defn ( self . _fdefn , i ) ) for i in xrange ( self . num_fields ) ] @ property def geom ( self ) : geom_ptr = capi . get_feat_geom_ref ( self . ptr ) return OGRGeometry ( geom_api . clone_geom ( geom_ptr ) ) @ property def geom_type ( self ) : return OGRGeomType ( capi . get_fd_geom_type ( self . _fdefn ) ) def get ( self , field ) : field_name = getattr ( field , 'name' , field ) return self [ field_name ] . value def index ( self , field_name ) : i = capi . get_field_index ( self . ptr , field_name ) if i < 0 : raise OGRIndexError ( 'invalid OFT field name given: "%s"' % field_name ) return i
