""" Interfaces for serializing Django objects. Usage:: from django.core import serializers json = serializers.serialize("json", some_query_set) objects = list(serializers.deserialize("json", json)) To add your own serializers, use the SERIALIZATION_MODULES setting:: SERIALIZATION_MODULES = { "csv" : "path.to.csv.serializer", "txt" : "path.to.txt.serializer", } """ from django . conf import settings from django . utils import importlib from django . core . serializers . base import SerializerDoesNotExist BUILTIN_SERIALIZERS = { : "django.core.serializers.xml_serializer" , : "django.core.serializers.python" , : "django.core.serializers.json" , } try : import yaml BUILTIN_SERIALIZERS [ "yaml" ] = "django.core.serializers.pyyaml" except ImportError : pass _serializers = { } def register_serializer ( format , serializer_module , serializers = None ) : if serializers is None and not _serializers : _load_serializers ( ) module = importlib . import_module ( serializer_module ) if serializers is None : _serializers [ format ] = module else : serializers [ format ] = module def unregister_serializer ( format ) : if not _serializers : _load_serializers ( ) if format not in _serializers : raise SerializerDoesNotExist ( format ) del _serializers [ format ] def get_serializer ( format ) : if not _serializers : _load_serializers ( ) if format not in _serializers : raise SerializerDoesNotExist ( format ) return _serializers [ format ] . Serializer def get_serializer_formats ( ) : if not _serializers : _load_serializers ( ) return _serializers . keys ( ) def get_public_serializer_formats ( ) : if not _serializers : _load_serializers ( ) return [ k for k , v in _serializers . iteritems ( ) if not v . Serializer . internal_use_only ] def get_deserializer ( format ) : if not _serializers : _load_serializers ( ) if format not in _serializers : raise SerializerDoesNotExist ( format ) return _serializers [ format ] . Deserializer def serialize ( format , queryset , ** options ) : s = get_serializer ( format ) ( ) s . serialize ( queryset , ** options ) return s . getvalue ( ) def deserialize ( format , stream_or_string , ** options ) : d = get_deserializer ( format ) return d ( stream_or_string , ** options ) def _load_serializers ( ) : global _serializers serializers = { } for format in BUILTIN_SERIALIZERS : register_serializer ( format , BUILTIN_SERIALIZERS [ format ] , serializers ) if hasattr ( settings , "SERIALIZATION_MODULES" ) : for format in settings . SERIALIZATION_MODULES : register_serializer ( format , settings . SERIALIZATION_MODULES [ format ] , serializers ) _serializers = serializers
