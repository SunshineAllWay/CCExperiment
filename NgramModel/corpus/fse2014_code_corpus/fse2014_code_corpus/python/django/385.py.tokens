from __future__ import absolute_import from django import forms from django . contrib import admin from django . contrib . admin . validation import validate , validate_inline from django . core . exceptions import ImproperlyConfigured from django . test import TestCase from . models import Song , Book , Album , TwoAlbumFKAndAnE , State , City class SongForm ( forms . ModelForm ) : pass class ValidFields ( admin . ModelAdmin ) : form = SongForm fields = [ 'title' ] class InvalidFields ( admin . ModelAdmin ) : form = SongForm fields = [ 'spam' ] class ValidationTestCase ( TestCase ) : def test_readonly_and_editable ( self ) : class SongAdmin ( admin . ModelAdmin ) : readonly_fields = [ "original_release" ] fieldsets = [ ( None , { : [ "title" , "original_release" ] , } ) , ] validate ( SongAdmin , Song ) def test_custom_modelforms_with_fields_fieldsets ( self ) : validate ( ValidFields , Song ) self . assertRaisesMessage ( ImproperlyConfigured , , validate , InvalidFields , Song ) def test_exclude_values ( self ) : class ExcludedFields1 ( admin . ModelAdmin ) : exclude = ( 'foo' ) self . assertRaisesMessage ( ImproperlyConfigured , , validate , ExcludedFields1 , Book ) def test_exclude_duplicate_values ( self ) : class ExcludedFields2 ( admin . ModelAdmin ) : exclude = ( 'name' , 'name' ) self . assertRaisesMessage ( ImproperlyConfigured , , validate , ExcludedFields2 , Book ) def test_exclude_in_inline ( self ) : class ExcludedFieldsInline ( admin . TabularInline ) : model = Song exclude = ( 'foo' ) class ExcludedFieldsAlbumAdmin ( admin . ModelAdmin ) : model = Album inlines = [ ExcludedFieldsInline ] self . assertRaisesMessage ( ImproperlyConfigured , , validate , ExcludedFieldsAlbumAdmin , Album ) def test_exclude_inline_model_admin ( self ) : class SongInline ( admin . StackedInline ) : model = Song exclude = [ 'album' ] class AlbumAdmin ( admin . ModelAdmin ) : model = Album inlines = [ SongInline ] self . assertRaisesMessage ( ImproperlyConfigured , , validate , AlbumAdmin , Album ) def test_app_label_in_admin_validation ( self ) : class RawIdNonexistingAdmin ( admin . ModelAdmin ) : raw_id_fields = ( 'nonexisting' , ) self . assertRaisesMessage ( ImproperlyConfigured , , validate , RawIdNonexistingAdmin , Album ) def test_fk_exclusion ( self ) : class TwoAlbumFKAndAnEInline ( admin . TabularInline ) : model = TwoAlbumFKAndAnE exclude = ( "e" , ) fk_name = "album1" validate_inline ( TwoAlbumFKAndAnEInline , None , Album ) def test_inline_self_validation ( self ) : class TwoAlbumFKAndAnEInline ( admin . TabularInline ) : model = TwoAlbumFKAndAnE self . assertRaisesMessage ( Exception , , validate_inline , TwoAlbumFKAndAnEInline , None , Album ) def test_inline_with_specified ( self ) : class TwoAlbumFKAndAnEInline ( admin . TabularInline ) : model = TwoAlbumFKAndAnE fk_name = "album1" validate_inline ( TwoAlbumFKAndAnEInline , None , Album ) def test_readonly ( self ) : class SongAdmin ( admin . ModelAdmin ) : readonly_fields = ( "title" , ) validate ( SongAdmin , Song ) def test_readonly_on_method ( self ) : def my_function ( obj ) : pass class SongAdmin ( admin . ModelAdmin ) : readonly_fields = ( my_function , ) validate ( SongAdmin , Song ) def test_readonly_on_modeladmin ( self ) : class SongAdmin ( admin . ModelAdmin ) : readonly_fields = ( "readonly_method_on_modeladmin" , ) def readonly_method_on_modeladmin ( self , obj ) : pass validate ( SongAdmin , Song ) def test_readonly_method_on_model ( self ) : class SongAdmin ( admin . ModelAdmin ) : readonly_fields = ( "readonly_method_on_model" , ) validate ( SongAdmin , Song ) def test_nonexistant_field ( self ) : class SongAdmin ( admin . ModelAdmin ) : readonly_fields = ( "title" , "nonexistant" ) self . assertRaisesMessage ( ImproperlyConfigured , , validate , SongAdmin , Song ) def test_nonexistant_field_on_inline ( self ) : class CityInline ( admin . TabularInline ) : model = City readonly_fields = [ 'i_dont_exist' ] self . assertRaisesMessage ( ImproperlyConfigured , , validate_inline , CityInline , None , State ) def test_extra ( self ) : class SongAdmin ( admin . ModelAdmin ) : def awesome_song ( self , instance ) : if instance . title == "Born to Run" : return "Best Ever!" return "Status unknown." validate ( SongAdmin , Song ) def test_readonly_lambda ( self ) : class SongAdmin ( admin . ModelAdmin ) : readonly_fields = ( lambda obj : "test" , ) validate ( SongAdmin , Song ) def test_graceful_m2m_fail ( self ) : class BookAdmin ( admin . ModelAdmin ) : fields = [ 'authors' ] self . assertRaisesMessage ( ImproperlyConfigured , , validate , BookAdmin , Book ) def test_cannot_include_through ( self ) : class FieldsetBookAdmin ( admin . ModelAdmin ) : fieldsets = ( ( 'Header 1' , { 'fields' : ( 'name' , ) } ) , ( 'Header 2' , { 'fields' : ( 'authors' , ) } ) , ) self . assertRaisesMessage ( ImproperlyConfigured , , validate , FieldsetBookAdmin , Book ) def test_nested_fields ( self ) : class NestedFieldsAdmin ( admin . ModelAdmin ) : fields = ( 'price' , ( 'name' , 'subtitle' ) ) validate ( NestedFieldsAdmin , Book ) def test_nested_fieldsets ( self ) : class NestedFieldsetAdmin ( admin . ModelAdmin ) : fieldsets = ( ( 'Main' , { 'fields' : ( 'price' , ( 'name' , 'subtitle' ) ) } ) , ) validate ( NestedFieldsetAdmin , Book ) def test_explicit_through_override ( self ) : class AuthorsInline ( admin . TabularInline ) : model = Book . authors . through class BookAdmin ( admin . ModelAdmin ) : inlines = [ AuthorsInline ] validate ( BookAdmin , Book ) def test_non_model_fields ( self ) : class SongForm ( forms . ModelForm ) : extra_data = forms . CharField ( ) class Meta : model = Song class FieldsOnFormOnlyAdmin ( admin . ModelAdmin ) : form = SongForm fields = [ 'title' , 'extra_data' ] validate ( FieldsOnFormOnlyAdmin , Song ) def test_non_model_first_field ( self ) : class SongForm ( forms . ModelForm ) : extra_data = forms . CharField ( ) class Meta : model = Song class FieldsOnFormOnlyAdmin ( admin . ModelAdmin ) : form = SongForm fields = [ 'extra_data' , 'title' ] validate ( FieldsOnFormOnlyAdmin , Song )
