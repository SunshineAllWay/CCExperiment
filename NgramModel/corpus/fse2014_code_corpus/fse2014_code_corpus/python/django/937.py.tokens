from django . http import HttpResponse from django . template import loader , Context , RequestContext class ContentNotRenderedError ( Exception ) : pass class SimpleTemplateResponse ( HttpResponse ) : rendering_attrs = [ 'template_name' , 'context_data' , '_post_render_callbacks' ] def __init__ ( self , template , context = None , mimetype = None , status = None , content_type = None ) : self . template_name = template self . context_data = context self . _post_render_callbacks = [ ] super ( SimpleTemplateResponse , self ) . __init__ ( '' , mimetype , status , content_type ) self . _is_rendered = False def __getstate__ ( self ) : obj_dict = self . __dict__ . copy ( ) if not self . _is_rendered : raise ContentNotRenderedError ( 'The response content must be ' ) for attr in self . rendering_attrs : if attr in obj_dict : del obj_dict [ attr ] return obj_dict def resolve_template ( self , template ) : if isinstance ( template , ( list , tuple ) ) : return loader . select_template ( template ) elif isinstance ( template , basestring ) : return loader . get_template ( template ) else : return template def resolve_context ( self , context ) : if isinstance ( context , Context ) : return context else : return Context ( context ) @ property def rendered_content ( self ) : template = self . resolve_template ( self . template_name ) context = self . resolve_context ( self . context_data ) content = template . render ( context ) return content def add_post_render_callback ( self , callback ) : if self . _is_rendered : callback ( self ) else : self . _post_render_callbacks . append ( callback ) def render ( self ) : retval = self if not self . _is_rendered : self . _set_content ( self . rendered_content ) for post_callback in self . _post_render_callbacks : newretval = post_callback ( retval ) if newretval is not None : retval = newretval return retval @ property def is_rendered ( self ) : return self . _is_rendered def __iter__ ( self ) : if not self . _is_rendered : raise ContentNotRenderedError ( 'The response content must be ' ) return super ( SimpleTemplateResponse , self ) . __iter__ ( ) def _get_content ( self ) : if not self . _is_rendered : raise ContentNotRenderedError ( 'The response content must be ' ) return super ( SimpleTemplateResponse , self ) . _get_content ( ) def _set_content ( self , value ) : super ( SimpleTemplateResponse , self ) . _set_content ( value ) self . _is_rendered = True content = property ( _get_content , _set_content ) class TemplateResponse ( SimpleTemplateResponse ) : rendering_attrs = SimpleTemplateResponse . rendering_attrs + [ '_request' , '_current_app' ] def __init__ ( self , request , template , context = None , mimetype = None , status = None , content_type = None , current_app = None ) : self . _request = request self . _current_app = current_app super ( TemplateResponse , self ) . __init__ ( template , context , mimetype , status , content_type ) def resolve_context ( self , context ) : if isinstance ( context , Context ) : return context return RequestContext ( self . _request , context , current_app = self . _current_app )
