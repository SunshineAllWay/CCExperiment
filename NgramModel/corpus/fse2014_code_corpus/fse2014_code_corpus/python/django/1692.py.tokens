""" DataSource is a wrapper for the OGR Data Source object, which provides an interface for reading vector geometry data from many different file formats (including ESRI shapefiles). When instantiating a DataSource object, use the filename of a GDAL-supported data source. For example, a SHP file or a TIGER/Line file from the government. The ds_driver keyword is used internally when a ctypes pointer is passed in directly. Example: ds = DataSource('/home/foo/bar.shp') for layer in ds: for feature in layer: # Getting the geometry for the feature. g = feature.geom # Getting the 'description' field for the feature. desc = feature['description'] # We can also increment through all of the fields # attached to this feature. for field in feature: # Get the name of the field (e.g. 'description') nm = field.name # Get the type (integer) of the field, e.g. 0 => OFTInteger t = field.type # Returns the value the field; OFTIntegers return ints, # OFTReal returns floats, all else returns string. val = field.value """ from ctypes import byref from django . contrib . gis . gdal . base import GDALBase from django . contrib . gis . gdal . driver import Driver from django . contrib . gis . gdal . error import OGRException , OGRIndexError from django . contrib . gis . gdal . layer import Layer from django . contrib . gis . gdal . prototypes import ds as capi class DataSource ( GDALBase ) : def __init__ ( self , ds_input , ds_driver = False , write = False ) : if write : self . _write = 1 else : self . _write = 0 if not capi . get_driver_count ( ) : capi . register_all ( ) if isinstance ( ds_input , basestring ) : ds_driver = Driver . ptr_type ( ) try : ds = capi . open_ds ( ds_input , self . _write , byref ( ds_driver ) ) except OGRException : raise OGRException ( 'Could not open the datasource at "%s"' % ds_input ) elif isinstance ( ds_input , self . ptr_type ) and isinstance ( ds_driver , Driver . ptr_type ) : ds = ds_input else : raise OGRException ( 'Invalid data source input type: %s' % type ( ds_input ) ) if bool ( ds ) : self . ptr = ds self . driver = Driver ( ds_driver ) else : raise OGRException ( 'Invalid data source file "%s"' % ds_input ) def __del__ ( self ) : if self . _ptr : capi . destroy_ds ( self . _ptr ) def __iter__ ( self ) : for i in xrange ( self . layer_count ) : yield self [ i ] def __getitem__ ( self , index ) : if isinstance ( index , basestring ) : l = capi . get_layer_by_name ( self . ptr , index ) if not l : raise OGRIndexError ( 'invalid OGR Layer name given: "%s"' % index ) elif isinstance ( index , int ) : if index < 0 or index >= self . layer_count : raise OGRIndexError ( 'index out of range' ) l = capi . get_layer ( self . _ptr , index ) else : raise TypeError ( 'Invalid index type: %s' % type ( index ) ) return Layer ( l , self ) def __len__ ( self ) : return self . layer_count def __str__ ( self ) : return '%s (%s)' % ( self . name , str ( self . driver ) ) @ property def layer_count ( self ) : return capi . get_layer_count ( self . _ptr ) @ property def name ( self ) : return capi . get_ds_name ( self . _ptr )
