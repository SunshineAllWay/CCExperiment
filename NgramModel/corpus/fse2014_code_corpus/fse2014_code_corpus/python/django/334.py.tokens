from __future__ import absolute_import from django . contrib . localflavor . mx . forms import ( MXZipCodeField , MXRFCField , MXStateSelect , MXCURPField ) from django . test import SimpleTestCase from . forms import MXPersonProfileForm class MXLocalFlavorTests ( SimpleTestCase ) : def setUp ( self ) : self . form = MXPersonProfileForm ( { : 'MIC' , : 'toma880125kv3' , : 'toma880125hmnrrn02' , : '58120' , } ) def test_get_display_methods ( self ) : place = self . form . save ( ) self . assertEqual ( place . get_state_display ( ) , u'Michoacán' ) def test_errors ( self ) : form = MXPersonProfileForm ( { : 'Invalid state' , : 'invalid rfc' , : 'invalid curp' , : 'xxx' , } ) self . assertFalse ( form . is_valid ( ) ) self . assertEqual ( form . errors [ 'state' ] , [ u'Select a valid choice. Invalid state is not one of the available choices.' ] ) self . assertEqual ( form . errors [ 'rfc' ] , [ u'Enter a valid RFC.' ] ) self . assertEqual ( form . errors [ 'curp' ] , [ u'Ensure this value has at least 18 characters (it has 12).' , u'Enter a valid CURP.' ] ) self . assertEqual ( form . errors [ 'zip_code' ] , [ u'Enter a valid zip code in the format XXXXX.' ] ) def test_field_blank_option ( self ) : state_select_html = """\ <select name="state" id="id_state"> <option value="">---------</option> <option value="AGU">Aguascalientes</option> <option value="BCN">Baja California</option> <option value="BCS">Baja California Sur</option> <option value="CAM">Campeche</option> <option value="CHH">Chihuahua</option> <option value="CHP">Chiapas</option> <option value="COA">Coahuila</option> <option value="COL">Colima</option> <option value="DIF">Distrito Federal</option> <option value="DUR">Durango</option> <option value="GRO">Guerrero</option> <option value="GUA">Guanajuato</option> <option value="HID">Hidalgo</option> <option value="JAL">Jalisco</option> <option value="MEX">Estado de México</option> <option value="MIC" selected="selected">Michoacán</option> <option value="MOR">Morelos</option> <option value="NAY">Nayarit</option> <option value="NLE">Nuevo León</option> <option value="OAX">Oaxaca</option> <option value="PUE">Puebla</option> <option value="QUE">Querétaro</option> <option value="ROO">Quintana Roo</option> <option value="SIN">Sinaloa</option> <option value="SLP">San Luis Potosí</option> <option value="SON">Sonora</option> <option value="TAB">Tabasco</option> <option value="TAM">Tamaulipas</option> <option value="TLA">Tlaxcala</option> <option value="VER">Veracruz</option> <option value="YUC">Yucatán</option> <option value="ZAC">Zacatecas</option> </select>""" self . assertHTMLEqual ( str ( self . form [ 'state' ] ) , state_select_html ) def test_MXStateSelect ( self ) : f = MXStateSelect ( ) out = u'''<select name="state"> <option value="AGU">Aguascalientes</option> <option value="BCN">Baja California</option> <option value="BCS">Baja California Sur</option> <option value="CAM">Campeche</option> <option value="CHH">Chihuahua</option> <option value="CHP">Chiapas</option> <option value="COA">Coahuila</option> <option value="COL">Colima</option> <option value="DIF">Distrito Federal</option> <option value="DUR">Durango</option> <option value="GRO">Guerrero</option> <option value="GUA">Guanajuato</option> <option value="HID">Hidalgo</option> <option value="JAL">Jalisco</option> <option value="MEX">Estado de México</option> <option value="MIC" selected="selected">Michoacán</option> <option value="MOR">Morelos</option> <option value="NAY">Nayarit</option> <option value="NLE">Nuevo León</option> <option value="OAX">Oaxaca</option> <option value="PUE">Puebla</option> <option value="QUE">Querétaro</option> <option value="ROO">Quintana Roo</option> <option value="SIN">Sinaloa</option> <option value="SLP">San Luis Potosí</option> <option value="SON">Sonora</option> <option value="TAB">Tabasco</option> <option value="TAM">Tamaulipas</option> <option value="TLA">Tlaxcala</option> <option value="VER">Veracruz</option> <option value="YUC">Yucatán</option> <option value="ZAC">Zacatecas</option> </select>''' self . assertHTMLEqual ( f . render ( 'state' , 'MIC' ) , out ) def test_MXZipCodeField ( self ) : error_format = [ u'Enter a valid zip code in the format XXXXX.' ] valid = { : u'58120' , : u'58502' , : u'59310' , : u'99999' , } invalid = { : error_format , : error_format , : error_format , : error_format , } self . assertFieldOutput ( MXZipCodeField , valid , invalid ) def test_MXRFCField ( self ) : error_format = [ u'Enter a valid RFC.' ] error_checksum = [ u'Invalid checksum for RFC.' ] valid = { : u'MOFN641205EX5' , : u'ICA060120873' , : u'EUCG751104RT0' , : u'GME08100195A' , : u'AA&060524KX5' , : u'CAÑ0708045P7' , : u'AAA000101AA9' , } invalid = { : error_format , : error_format , : error_format , : error_format , : error_format , : error_format , : error_format , : error_format , : error_checksum , : error_checksum , : error_checksum , : error_checksum , : error_checksum , : error_checksum , : error_checksum , : error_checksum , } self . assertFieldOutput ( MXRFCField , valid , invalid ) def test_MXCURPField ( self ) : error_format = [ u'Enter a valid CURP.' ] error_checksum = [ u'Invalid checksum for CURP.' ] valid = { : u'AAMG890608HDFLJL00' , : u'BAAD890419HMNRRV07' , : u'VIAA900930MMNCLL08' , : u'HEGR891009HMNRRD09' , : u'MARR890512HMNRMN09' , : u'MESJ890928HMNZNS00' , : u'BAAA890317HDFRLL03' , : u'TOMA880125HMNRRNO2' , : u'OOMG890727HMNRSR06' , : u'AAAA000101HDFCCC09' , } invalid = { : error_format , : error_format , : error_format , : error_format , : error_format , : error_format , : error_checksum , : error_checksum , : error_checksum , : error_checksum , : error_checksum , : error_checksum , : error_checksum , } self . assertFieldOutput ( MXCURPField , valid , invalid )
