""" termcolors.py """ color_names = ( 'black' , 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan' , 'white' ) foreground = dict ( [ ( color_names [ x ] , '3%s' % x ) for x in range ( 8 ) ] ) background = dict ( [ ( color_names [ x ] , '4%s' % x ) for x in range ( 8 ) ] ) RESET = '0' opt_dict = { 'bold' : '1' , 'underscore' : '4' , 'blink' : '5' , 'reverse' : '7' , 'conceal' : '8' } def colorize ( text = '' , opts = ( ) , ** kwargs ) : code_list = [ ] if text == '' and len ( opts ) == 1 and opts [ 0 ] == 'reset' : return '\x1b[%sm' % RESET for k , v in kwargs . iteritems ( ) : if k == 'fg' : code_list . append ( foreground [ v ] ) elif k == 'bg' : code_list . append ( background [ v ] ) for o in opts : if o in opt_dict : code_list . append ( opt_dict [ o ] ) if 'noreset' not in opts : text = text + '\x1b[%sm' % RESET return ( '\x1b[%sm' % ';' . join ( code_list ) ) + text def make_style ( opts = ( ) , ** kwargs ) : return lambda text : colorize ( text , opts , ** kwargs ) NOCOLOR_PALETTE = 'nocolor' DARK_PALETTE = 'dark' LIGHT_PALETTE = 'light' PALETTES = { NOCOLOR_PALETTE : { : { } , : { } , : { } , : { } , : { } , : { } , : { } , : { } , : { } , : { } , : { } , : { } , : { } , } , DARK_PALETTE : { : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , : { 'fg' : 'red' } , : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , : { 'fg' : 'green' } , : { 'fg' : 'yellow' } , : { 'opts' : ( 'bold' , ) } , : { 'opts' : ( 'bold' , ) } , : { } , : { 'fg' : 'green' } , : { 'fg' : 'cyan' } , : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , : { 'fg' : 'yellow' } , : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } , } , LIGHT_PALETTE : { : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , : { 'fg' : 'red' } , : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , : { 'fg' : 'green' } , : { 'fg' : 'blue' } , : { 'opts' : ( 'bold' , ) } , : { 'opts' : ( 'bold' , ) } , : { } , : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , : { 'fg' : 'green' } , : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , : { 'fg' : 'red' } , : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } , } } DEFAULT_PALETTE = DARK_PALETTE def parse_color_setting ( config_string ) : if not config_string : return PALETTES [ DEFAULT_PALETTE ] parts = config_string . lower ( ) . split ( ';' ) palette = PALETTES [ NOCOLOR_PALETTE ] . copy ( ) for part in parts : if part in PALETTES : palette . update ( PALETTES [ part ] ) elif '=' in part : definition = { } role , instructions = part . split ( '=' ) role = role . upper ( ) styles = instructions . split ( ',' ) styles . reverse ( ) colors = styles . pop ( ) . split ( '/' ) colors . reverse ( ) fg = colors . pop ( ) if fg in color_names : definition [ 'fg' ] = fg if colors and colors [ - 1 ] in color_names : definition [ 'bg' ] = colors [ - 1 ] opts = tuple ( s for s in styles if s in opt_dict . keys ( ) ) if opts : definition [ 'opts' ] = opts if role in PALETTES [ NOCOLOR_PALETTE ] and definition : palette [ role ] = definition if palette == PALETTES [ NOCOLOR_PALETTE ] : return None return palette
