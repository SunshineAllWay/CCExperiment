""" Formtools Preview application. """ from django . http import Http404 from django . shortcuts import render_to_response from django . template . context import RequestContext from django . utils . crypto import constant_time_compare from django . contrib . formtools . utils import form_hmac AUTO_ID = 'formtools_%s' class FormPreview ( object ) : preview_template = 'formtools/preview.html' form_template = 'formtools/form.html' def __init__ ( self , form ) : self . form , self . state = form , { } def __call__ ( self , request , * args , ** kwargs ) : stage = { '1' : 'preview' , '2' : 'post' } . get ( request . POST . get ( self . unused_name ( 'stage' ) ) , 'preview' ) self . parse_params ( * args , ** kwargs ) try : method = getattr ( self , stage + '_' + request . method . lower ( ) ) except AttributeError : raise Http404 return method ( request ) def unused_name ( self , name ) : while 1 : try : f = self . form . base_fields [ name ] except KeyError : break name += '_' return name def preview_get ( self , request ) : f = self . form ( auto_id = self . get_auto_id ( ) , initial = self . get_initial ( request ) ) return render_to_response ( self . form_template , self . get_context ( request , f ) , context_instance = RequestContext ( request ) ) def preview_post ( self , request ) : f = self . form ( request . POST , auto_id = self . get_auto_id ( ) ) context = self . get_context ( request , f ) if f . is_valid ( ) : self . process_preview ( request , f , context ) context [ 'hash_field' ] = self . unused_name ( 'hash' ) context [ 'hash_value' ] = self . security_hash ( request , f ) return render_to_response ( self . preview_template , context , context_instance = RequestContext ( request ) ) else : return render_to_response ( self . form_template , context , context_instance = RequestContext ( request ) ) def _check_security_hash ( self , token , request , form ) : expected = self . security_hash ( request , form ) return constant_time_compare ( token , expected ) def post_post ( self , request ) : f = self . form ( request . POST , auto_id = self . get_auto_id ( ) ) if f . is_valid ( ) : if not self . _check_security_hash ( request . POST . get ( self . unused_name ( 'hash' ) , '' ) , request , f ) : return self . failed_hash ( request ) return self . done ( request , f . cleaned_data ) else : return render_to_response ( self . form_template , self . get_context ( request , f ) , context_instance = RequestContext ( request ) ) def get_auto_id ( self ) : return AUTO_ID def get_initial ( self , request ) : return { } def get_context ( self , request , form ) : return { 'form' : form , 'stage_field' : self . unused_name ( 'stage' ) , 'state' : self . state } def parse_params ( self , * args , ** kwargs ) : pass def process_preview ( self , request , form , context ) : pass def security_hash ( self , request , form ) : return form_hmac ( form ) def failed_hash ( self , request ) : return self . preview_post ( request ) def done ( self , request , cleaned_data ) : raise NotImplementedError ( 'You must define a done() method on your %s subclass.' % self . __class__ . __name__ )
