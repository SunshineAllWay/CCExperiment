from __future__ import absolute_import import re from django . db import connection from django . db . utils import DatabaseError from django . contrib . gis import gdal from django . contrib . gis . geos import ( fromstr , GEOSGeometry , Point , LineString , LinearRing , Polygon , GeometryCollection ) from django . contrib . gis . tests . utils import ( no_mysql , no_oracle , no_spatialite , mysql , oracle , postgis , spatialite ) from django . test import TestCase from . models import Country , City , PennsylvaniaCity , State , Track if not spatialite : from . models import Feature , MinusOneSRID class GeoModelTest ( TestCase ) : def test01_fixtures ( self ) : self . assertEqual ( 2 , Country . objects . count ( ) ) self . assertEqual ( 8 , City . objects . count ( ) ) self . assertEqual ( 2 , State . objects . count ( ) ) def test02_proxy ( self ) : pnt = Point ( 0 , 0 ) nullcity = City ( name = 'NullCity' , point = pnt ) nullcity . save ( ) for bad in [ 5 , 2.0 , LineString ( ( 0 , 0 ) , ( 1 , 1 ) ) ] : try : nullcity . point = bad except TypeError : pass else : self . fail ( 'Should throw a TypeError' ) new = Point ( 5 , 23 ) nullcity . point = new self . assertEqual ( 4326 , nullcity . point . srid ) nullcity . save ( ) self . assertEqual ( new , City . objects . get ( name = 'NullCity' ) . point ) nullcity . point . x = 23 nullcity . point . y = 5 self . assertNotEqual ( Point ( 23 , 5 ) , City . objects . get ( name = 'NullCity' ) . point ) nullcity . save ( ) self . assertEqual ( Point ( 23 , 5 ) , City . objects . get ( name = 'NullCity' ) . point ) nullcity . delete ( ) shell = LinearRing ( ( 0 , 0 ) , ( 0 , 100 ) , ( 100 , 100 ) , ( 100 , 0 ) , ( 0 , 0 ) ) inner = LinearRing ( ( 40 , 40 ) , ( 40 , 60 ) , ( 60 , 60 ) , ( 60 , 40 ) , ( 40 , 40 ) ) ply = Polygon ( shell , inner ) nullstate = State ( name = 'NullState' , poly = ply ) self . assertEqual ( 4326 , nullstate . poly . srid ) nullstate . save ( ) ns = State . objects . get ( name = 'NullState' ) self . assertEqual ( ply , ns . poly ) if gdal . HAS_GDAL : self . assertEqual ( True , isinstance ( ns . poly . ogr , gdal . OGRGeometry ) ) self . assertEqual ( ns . poly . wkb , ns . poly . ogr . wkb ) self . assertEqual ( True , isinstance ( ns . poly . srs , gdal . SpatialReference ) ) self . assertEqual ( 'WGS 84' , ns . poly . srs . name ) new_inner = LinearRing ( ( 30 , 30 ) , ( 30 , 70 ) , ( 70 , 70 ) , ( 70 , 30 ) , ( 30 , 30 ) ) ns . poly [ 1 ] = new_inner ply [ 1 ] = new_inner self . assertEqual ( 4326 , ns . poly . srid ) ns . save ( ) self . assertEqual ( ply , State . objects . get ( name = 'NullState' ) . poly ) ns . delete ( ) def test03a_kml ( self ) : if not ( postgis or ( spatialite and connection . ops . kml ) ) : self . assertRaises ( NotImplementedError , State . objects . all ( ) . kml , field_name = 'poly' ) return qs = City . objects . all ( ) self . assertRaises ( TypeError , qs . kml , 'name' ) if connection . ops . spatial_version >= ( 1 , 3 , 3 ) : ref_kml = '<Point><coordinates>-104.609252,38.255001</coordinates></Point>' else : ref_kml = '<Point><coordinates>-104.609252,38.255001,0</coordinates></Point>' ptown1 = City . objects . kml ( field_name = 'point' , precision = 9 ) . get ( name = 'Pueblo' ) ptown2 = City . objects . kml ( precision = 9 ) . get ( name = 'Pueblo' ) for ptown in [ ptown1 , ptown2 ] : self . assertEqual ( ref_kml , ptown . kml ) def test03b_gml ( self ) : if mysql or ( spatialite and not connection . ops . gml ) : self . assertRaises ( NotImplementedError , Country . objects . all ( ) . gml , field_name = 'mpoly' ) return qs = City . objects . all ( ) self . assertRaises ( TypeError , qs . gml , field_name = 'name' ) ptown1 = City . objects . gml ( field_name = 'point' , precision = 9 ) . get ( name = 'Pueblo' ) ptown2 = City . objects . gml ( precision = 9 ) . get ( name = 'Pueblo' ) if oracle : gml_regex = re . compile ( r'^<gml:Point srsName="SDO:4326" xmlns:gml="http://www.opengis.net/gml"><gml:coordinates decimal="\." cs="," ts=" ">-104.60925\d+,38.25500\d+ </gml:coordinates></gml:Point>' ) elif spatialite : gml_regex = re . compile ( r'^<gml:Point SrsName="EPSG::4326"><gml:coordinates decimal="\." cs="," ts=" ">-104.609251\d+,38.255001</gml:coordinates></gml:Point>' ) else : gml_regex = re . compile ( r'^<gml:Point srsName="EPSG:4326"><gml:coordinates>-104\.60925\d+,38\.255001</gml:coordinates></gml:Point>' ) for ptown in [ ptown1 , ptown2 ] : self . assertTrue ( gml_regex . match ( ptown . gml ) ) def test03c_geojson ( self ) : if not connection . ops . geojson : self . assertRaises ( NotImplementedError , Country . objects . all ( ) . geojson , field_name = 'mpoly' ) return if connection . ops . spatial_version >= ( 1 , 4 , 0 ) : pueblo_json = '{"type":"Point","coordinates":[-104.609252,38.255001]}' houston_json = '{"type":"Point","crs":{"type":"name","properties":{"name":"EPSG:4326"}},"coordinates":[-95.363151,29.763374]}' victoria_json = '{"type":"Point","bbox":[-123.30519600,48.46261100,-123.30519600,48.46261100],"coordinates":[-123.305196,48.462611]}' chicago_json = '{"type":"Point","crs":{"type":"name","properties":{"name":"EPSG:4326"}},"bbox":[-87.65018,41.85039,-87.65018,41.85039],"coordinates":[-87.65018,41.85039]}' else : pueblo_json = '{"type":"Point","coordinates":[-104.60925200,38.25500100]}' houston_json = '{"type":"Point","crs":{"type":"EPSG","properties":{"EPSG":4326}},"coordinates":[-95.36315100,29.76337400]}' victoria_json = '{"type":"Point","bbox":[-123.30519600,48.46261100,-123.30519600,48.46261100],"coordinates":[-123.30519600,48.46261100]}' chicago_json = '{"type":"Point","crs":{"type":"EPSG","properties":{"EPSG":4326}},"bbox":[-87.65018,41.85039,-87.65018,41.85039],"coordinates":[-87.65018,41.85039]}' self . assertRaises ( TypeError , City . objects . geojson , precision = 'foo' ) self . assertEqual ( pueblo_json , City . objects . geojson ( ) . get ( name = 'Pueblo' ) . geojson ) self . assertEqual ( houston_json , City . objects . geojson ( crs = True , model_att = 'json' ) . get ( name = 'Houston' ) . json ) self . assertEqual ( victoria_json , City . objects . geojson ( bbox = True ) . get ( name = 'Victoria' ) . geojson ) self . assertEqual ( chicago_json , City . objects . geojson ( bbox = True , crs = True , precision = 5 ) . get ( name = 'Chicago' ) . geojson ) def test03d_svg ( self ) : if mysql or oracle : self . assertRaises ( NotImplementedError , City . objects . svg ) return self . assertRaises ( TypeError , City . objects . svg , precision = 'foo' ) svg1 = 'cx="-104.609252" cy="-38.255001"' svg2 = svg1 . replace ( 'c' , '' ) self . assertEqual ( svg1 , City . objects . svg ( ) . get ( name = 'Pueblo' ) . svg ) self . assertEqual ( svg2 , City . objects . svg ( relative = 5 ) . get ( name = 'Pueblo' ) . svg ) @ no_mysql def test04_transform ( self ) : htown = fromstr ( 'POINT(1947516.83115183 6322297.06040572)' , srid = 3084 ) ptown = fromstr ( 'POINT(992363.390841912 481455.395105533)' , srid = 2774 ) prec = 3 if not oracle : h = City . objects . transform ( htown . srid ) . get ( name = 'Houston' ) self . assertEqual ( 3084 , h . point . srid ) self . assertAlmostEqual ( htown . x , h . point . x , prec ) self . assertAlmostEqual ( htown . y , h . point . y , prec ) p1 = City . objects . transform ( ptown . srid , field_name = 'point' ) . get ( name = 'Pueblo' ) p2 = City . objects . transform ( srid = ptown . srid ) . get ( name = 'Pueblo' ) for p in [ p1 , p2 ] : self . assertEqual ( 2774 , p . point . srid ) self . assertAlmostEqual ( ptown . x , p . point . x , prec ) self . assertAlmostEqual ( ptown . y , p . point . y , prec ) @ no_mysql @ no_spatialite def test05_extent ( self ) : expected = ( - 96.8016128540039 , 29.7633724212646 , - 95.3631439208984 , 32.782058715820 ) qs = City . objects . filter ( name__in = ( 'Houston' , 'Dallas' ) ) extent = qs . extent ( ) for val , exp in zip ( extent , expected ) : self . assertAlmostEqual ( exp , val , 4 ) @ no_mysql @ no_oracle @ no_spatialite def test06_make_line ( self ) : self . assertRaises ( TypeError , State . objects . make_line ) self . assertRaises ( TypeError , Country . objects . make_line ) ref_line = GEOSGeometry ( 'LINESTRING(-95.363151 29.763374,-96.801611 32.782057,-97.521157 34.464642,174.783117 -41.315268,-104.609252 38.255001,-95.23506 38.971823,-87.650175 41.850385,-123.305196 48.462611)' , srid = 4326 ) self . assertEqual ( ref_line , City . objects . make_line ( ) ) @ no_mysql def test09_disjoint ( self ) : ptown = City . objects . get ( name = 'Pueblo' ) qs1 = City . objects . filter ( point__disjoint = ptown . point ) self . assertEqual ( 7 , qs1 . count ( ) ) qs2 = State . objects . filter ( poly__disjoint = ptown . point ) self . assertEqual ( 1 , qs2 . count ( ) ) self . assertEqual ( 'Kansas' , qs2 [ 0 ] . name ) def test10_contains_contained ( self ) : texas = Country . objects . get ( name = 'Texas' ) if not oracle : qs = City . objects . filter ( point__contained = texas . mpoly ) self . assertEqual ( 3 , qs . count ( ) ) cities = [ 'Houston' , 'Dallas' , 'Oklahoma City' ] for c in qs : self . assertEqual ( True , c . name in cities ) houston = City . objects . get ( name = 'Houston' ) wellington = City . objects . get ( name = 'Wellington' ) pueblo = City . objects . get ( name = 'Pueblo' ) okcity = City . objects . get ( name = 'Oklahoma City' ) lawrence = City . objects . get ( name = 'Lawrence' ) tx = Country . objects . get ( mpoly__contains = houston . point ) nz = Country . objects . get ( mpoly__contains = wellington . point . hex ) self . assertEqual ( 'Texas' , tx . name ) self . assertEqual ( 'New Zealand' , nz . name ) if not spatialite : ks = State . objects . get ( poly__contains = lawrence . point ) self . assertEqual ( 'Kansas' , ks . name ) self . assertEqual ( 0 , len ( Country . objects . filter ( mpoly__contains = pueblo . point ) ) ) self . assertEqual ( ( mysql and 1 ) or 0 , len ( Country . objects . filter ( mpoly__contains = okcity . point . wkt ) ) ) if not oracle : qs = Country . objects . filter ( mpoly__bbcontains = okcity . point ) self . assertEqual ( 1 , len ( qs ) ) self . assertEqual ( 'Texas' , qs [ 0 ] . name ) @ no_mysql def test11_lookup_insert_transform ( self ) : sa_4326 = 'POINT (-98.493183 29.424170)' wgs_pnt = fromstr ( sa_4326 , srid = 4326 ) if oracle : nad_wkt = 'POINT (300662.034646583 5416427.45974934)' nad_srid = 41157 else : nad_wkt = 'POINT (1645978.362408288754523 6276356.025927528738976)' nad_srid = 3084 nad_pnt = fromstr ( nad_wkt , srid = nad_srid ) if oracle : tx = Country . objects . get ( mpoly__contains = nad_pnt ) else : tx = Country . objects . get ( mpoly__intersects = nad_pnt ) self . assertEqual ( 'Texas' , tx . name ) sa = City . objects . create ( name = 'San Antonio' , point = nad_pnt ) sa = City . objects . get ( name = 'San Antonio' ) self . assertAlmostEqual ( wgs_pnt . x , sa . point . x , 6 ) self . assertAlmostEqual ( wgs_pnt . y , sa . point . y , 6 ) if not spatialite : m1 = MinusOneSRID ( geom = Point ( 17 , 23 , srid = 4326 ) ) m1 . save ( ) self . assertEqual ( - 1 , m1 . geom . srid ) @ no_mysql def test12_null_geometries ( self ) : State . objects . create ( name = 'Puerto Rico' ) nullqs = State . objects . filter ( poly__isnull = True ) validqs = State . objects . filter ( poly__isnull = False ) self . assertEqual ( 1 , len ( nullqs ) ) self . assertEqual ( 'Puerto Rico' , nullqs [ 0 ] . name ) self . assertEqual ( 2 , len ( validqs ) ) state_names = [ s . name for s in validqs ] self . assertEqual ( True , 'Colorado' in state_names ) self . assertEqual ( True , 'Kansas' in state_names ) nmi = State . objects . create ( name = 'Northern Mariana Islands' , poly = None ) self . assertEqual ( nmi . poly , None ) nmi . poly = 'POLYGON((0 0,1 0,1 1,1 0,0 0))' nmi . save ( ) State . objects . filter ( name = 'Northern Mariana Islands' ) . update ( poly = None ) self . assertEqual ( None , State . objects . get ( name = 'Northern Mariana Islands' ) . poly ) @ no_mysql @ no_oracle @ no_spatialite def test13_left_right ( self ) : co_border = State . objects . get ( name = 'Colorado' ) . poly ks_border = State . objects . get ( name = 'Kansas' ) . poly cities = [ 'Houston' , 'Dallas' , 'Oklahoma City' , , 'Chicago' , 'Wellington' ] qs = City . objects . filter ( point__right = co_border ) self . assertEqual ( 6 , len ( qs ) ) for c in qs : self . assertEqual ( True , c . name in cities ) cities = [ 'Chicago' , 'Wellington' ] qs = City . objects . filter ( point__right = ks_border ) self . assertEqual ( 2 , len ( qs ) ) for c in qs : self . assertEqual ( True , c . name in cities ) vic = City . objects . get ( point__left = co_border ) self . assertEqual ( 'Victoria' , vic . name ) cities = [ 'Pueblo' , 'Victoria' ] qs = City . objects . filter ( point__left = ks_border ) self . assertEqual ( 2 , len ( qs ) ) for c in qs : self . assertEqual ( True , c . name in cities ) def test14_equals ( self ) : pnt = fromstr ( 'POINT (-95.363151 29.763374)' , srid = 4326 ) c1 = City . objects . get ( point = pnt ) c2 = City . objects . get ( point__same_as = pnt ) c3 = City . objects . get ( point__equals = pnt ) for c in [ c1 , c2 , c3 ] : self . assertEqual ( 'Houston' , c . name ) @ no_mysql def test15_relate ( self ) : pnt1 = fromstr ( 'POINT (649287.0363174 4177429.4494686)' , srid = 2847 ) pnt2 = fromstr ( 'POINT(-98.4919715741052 29.4333344025053)' , srid = 4326 ) self . assertRaises ( ValueError , Country . objects . filter , mpoly__relate = ( 23 , 'foo' ) ) for bad_args , e in [ ( ( pnt1 , 0 ) , ValueError ) , ( ( pnt2 , 'T*T***FF*' , 0 ) , ValueError ) ] : qs = Country . objects . filter ( mpoly__relate = bad_args ) self . assertRaises ( e , qs . count ) if postgis or spatialite : contains_mask = 'T*T***FF*' within_mask = 'T*F**F***' intersects_mask = 'T********' elif oracle : contains_mask = 'contains' within_mask = 'inside' intersects_mask = 'overlapbdyintersect' self . assertEqual ( 'Texas' , Country . objects . get ( mpoly__relate = ( pnt1 , contains_mask ) ) . name ) self . assertEqual ( 'Texas' , Country . objects . get ( mpoly__relate = ( pnt2 , contains_mask ) ) . name ) ks = State . objects . get ( name = 'Kansas' ) self . assertEqual ( 'Lawrence' , City . objects . get ( point__relate = ( ks . poly , within_mask ) ) . name ) if not oracle : self . assertEqual ( 'Texas' , Country . objects . get ( mpoly__relate = ( pnt1 , intersects_mask ) ) . name ) self . assertEqual ( 'Texas' , Country . objects . get ( mpoly__relate = ( pnt2 , intersects_mask ) ) . name ) self . assertEqual ( 'Lawrence' , City . objects . get ( point__relate = ( ks . poly , intersects_mask ) ) . name ) def test16_createnull ( self ) : c = City ( ) self . assertEqual ( c . point , None ) @ no_mysql def test17_unionagg ( self ) : tx = Country . objects . get ( name = 'Texas' ) . mpoly union1 = fromstr ( 'MULTIPOINT(-96.801611 32.782057,-95.363151 29.763374)' ) union2 = fromstr ( 'MULTIPOINT(-96.801611 32.782057,-95.363151 29.763374)' ) qs = City . objects . filter ( point__within = tx ) self . assertRaises ( TypeError , qs . unionagg , 'name' ) u1 = qs . unionagg ( field_name = 'point' ) u2 = qs . order_by ( 'name' ) . unionagg ( ) tol = 0.00001 if oracle : union = union2 else : union = union1 self . assertEqual ( True , union . equals_exact ( u1 , tol ) ) self . assertEqual ( True , union . equals_exact ( u2 , tol ) ) qs = City . objects . filter ( name = 'NotACity' ) self . assertEqual ( None , qs . unionagg ( field_name = 'point' ) ) @ no_spatialite def test18_geometryfield ( self ) : Feature ( name = 'Point' , geom = Point ( 1 , 1 ) ) . save ( ) Feature ( name = 'LineString' , geom = LineString ( ( 0 , 0 ) , ( 1 , 1 ) , ( 5 , 5 ) ) ) . save ( ) Feature ( name = 'Polygon' , geom = Polygon ( LinearRing ( ( 0 , 0 ) , ( 0 , 5 ) , ( 5 , 5 ) , ( 5 , 0 ) , ( 0 , 0 ) ) ) ) . save ( ) Feature ( name = 'GeometryCollection' , geom = GeometryCollection ( Point ( 2 , 2 ) , LineString ( ( 0 , 0 ) , ( 2 , 2 ) ) , Polygon ( LinearRing ( ( 0 , 0 ) , ( 0 , 5 ) , ( 5 , 5 ) , ( 5 , 0 ) , ( 0 , 0 ) ) ) ) ) . save ( ) f_1 = Feature . objects . get ( name = 'Point' ) self . assertEqual ( True , isinstance ( f_1 . geom , Point ) ) self . assertEqual ( ( 1.0 , 1.0 ) , f_1 . geom . tuple ) f_2 = Feature . objects . get ( name = 'LineString' ) self . assertEqual ( True , isinstance ( f_2 . geom , LineString ) ) self . assertEqual ( ( ( 0.0 , 0.0 ) , ( 1.0 , 1.0 ) , ( 5.0 , 5.0 ) ) , f_2 . geom . tuple ) f_3 = Feature . objects . get ( name = 'Polygon' ) self . assertEqual ( True , isinstance ( f_3 . geom , Polygon ) ) f_4 = Feature . objects . get ( name = 'GeometryCollection' ) self . assertEqual ( True , isinstance ( f_4 . geom , GeometryCollection ) ) self . assertEqual ( f_3 . geom , f_4 . geom [ 2 ] ) @ no_mysql def test19_centroid ( self ) : qs = State . objects . exclude ( poly__isnull = True ) . centroid ( ) if oracle : tol = 0.1 elif spatialite : tol = 0.000001 else : tol = 0.000000001 for s in qs : self . assertEqual ( True , s . poly . centroid . equals_exact ( s . centroid , tol ) ) @ no_mysql def test20_pointonsurface ( self ) : if oracle : ref = { 'New Zealand' : fromstr ( 'POINT (174.616364 -36.100861)' , srid = 4326 ) , : fromstr ( 'POINT (-103.002434 36.500397)' , srid = 4326 ) , } elif postgis or spatialite : ref = { 'New Zealand' : Country . objects . get ( name = 'New Zealand' ) . mpoly . point_on_surface , : Country . objects . get ( name = 'Texas' ) . mpoly . point_on_surface } for c in Country . objects . point_on_surface ( ) : if spatialite : tol = 0.00001 else : tol = 0.000000001 self . assertEqual ( True , ref [ c . name ] . equals_exact ( c . point_on_surface , tol ) ) @ no_mysql @ no_oracle def test21_scale ( self ) : xfac , yfac = 2 , 3 tol = 5 qs = Country . objects . scale ( xfac , yfac , model_att = 'scaled' ) for c in qs : for p1 , p2 in zip ( c . mpoly , c . scaled ) : for r1 , r2 in zip ( p1 , p2 ) : for c1 , c2 in zip ( r1 . coords , r2 . coords ) : self . assertAlmostEqual ( c1 [ 0 ] * xfac , c2 [ 0 ] , tol ) self . assertAlmostEqual ( c1 [ 1 ] * yfac , c2 [ 1 ] , tol ) @ no_mysql @ no_oracle def test22_translate ( self ) : xfac , yfac = 5 , - 23 qs = Country . objects . translate ( xfac , yfac , model_att = 'translated' ) for c in qs : for p1 , p2 in zip ( c . mpoly , c . translated ) : for r1 , r2 in zip ( p1 , p2 ) : for c1 , c2 in zip ( r1 . coords , r2 . coords ) : self . assertAlmostEqual ( c1 [ 0 ] + xfac , c2 [ 0 ] , 5 ) self . assertAlmostEqual ( c1 [ 1 ] + yfac , c2 [ 1 ] , 5 ) @ no_mysql def test23_numgeom ( self ) : for c in Country . objects . num_geom ( ) : self . assertEqual ( 2 , c . num_geom ) for c in City . objects . filter ( point__isnull = False ) . num_geom ( ) : if postgis : self . assertEqual ( None , c . num_geom ) else : self . assertEqual ( 1 , c . num_geom ) @ no_mysql @ no_spatialite def test24_numpoints ( self ) : for c in Country . objects . num_points ( ) : self . assertEqual ( c . mpoly . num_points , c . num_points ) if not oracle : for c in City . objects . num_points ( ) : self . assertEqual ( 1 , c . num_points ) @ no_mysql def test25_geoset ( self ) : geom = Point ( 5 , 23 ) tol = 1 qs = Country . objects . all ( ) . difference ( geom ) . sym_difference ( geom ) . union ( geom ) if spatialite : qs = qs . exclude ( name = 'Texas' ) else : qs = qs . intersection ( geom ) for c in qs : if oracle : pass else : self . assertEqual ( c . mpoly . difference ( geom ) , c . difference ) if not spatialite : self . assertEqual ( c . mpoly . intersection ( geom ) , c . intersection ) self . assertEqual ( c . mpoly . sym_difference ( geom ) , c . sym_difference ) self . assertEqual ( c . mpoly . union ( geom ) , c . union ) @ no_mysql def test26_inherited_geofields ( self ) : mansfield = PennsylvaniaCity . objects . create ( name = 'Mansfield' , county = 'Tioga' , point = 'POINT(-77.071445 41.823881)' ) qs = PennsylvaniaCity . objects . transform ( 32128 ) self . assertEqual ( 1 , qs . count ( ) ) for pc in qs : self . assertEqual ( 32128 , pc . point . srid ) @ no_mysql @ no_oracle @ no_spatialite def test27_snap_to_grid ( self ) : for bad_args in ( ( ) , range ( 3 ) , range ( 5 ) ) : self . assertRaises ( ValueError , Country . objects . snap_to_grid , * bad_args ) for bad_args in ( ( '1.0' , ) , ( 1.0 , None ) , tuple ( map ( unicode , range ( 4 ) ) ) ) : self . assertRaises ( TypeError , Country . objects . snap_to_grid , * bad_args ) wkt = ( 'MULTIPOLYGON(((12.41580 43.95795,12.45055 43.97972,12.45389 43.98167,' ) sm = Country . objects . create ( name = 'San Marino' , mpoly = fromstr ( wkt ) ) tol = 0.000000001 ref = fromstr ( 'MULTIPOLYGON(((12.4 44,12.5 44,12.5 43.9,12.4 43.9,12.4 44)))' ) self . assertTrue ( ref . equals_exact ( Country . objects . snap_to_grid ( 0.1 ) . get ( name = 'San Marino' ) . snap_to_grid , tol ) ) ref = fromstr ( 'MULTIPOLYGON(((12.4 43.93,12.45 43.93,12.5 43.93,12.45 43.93,12.4 43.93)))' ) self . assertTrue ( ref . equals_exact ( Country . objects . snap_to_grid ( 0.05 , 0.23 ) . get ( name = 'San Marino' ) . snap_to_grid , tol ) ) ref = fromstr ( 'MULTIPOLYGON(((12.4 43.87,12.45 43.87,12.45 44.1,12.5 44.1,12.5 43.87,12.45 43.87,12.4 43.87)))' ) self . assertTrue ( ref . equals_exact ( Country . objects . snap_to_grid ( 0.05 , 0.23 , 0.5 , 0.17 ) . get ( name = 'San Marino' ) . snap_to_grid , tol ) ) @ no_mysql @ no_spatialite def test28_reverse ( self ) : coords = [ ( - 95.363151 , 29.763374 ) , ( - 95.448601 , 29.713803 ) ] Track . objects . create ( name = 'Foo' , line = LineString ( coords ) ) t = Track . objects . reverse_geom ( ) . get ( name = 'Foo' ) coords . reverse ( ) self . assertEqual ( tuple ( coords ) , t . reverse_geom . coords ) if oracle : self . assertRaises ( TypeError , State . objects . reverse_geom ) @ no_mysql @ no_oracle @ no_spatialite def test29_force_rhr ( self ) : rings = ( ( ( 0 , 0 ) , ( 5 , 0 ) , ( 0 , 5 ) , ( 0 , 0 ) ) , ( ( 1 , 1 ) , ( 1 , 3 ) , ( 3 , 1 ) , ( 1 , 1 ) ) , ) rhr_rings = ( ( ( 0 , 0 ) , ( 0 , 5 ) , ( 5 , 0 ) , ( 0 , 0 ) ) , ( ( 1 , 1 ) , ( 3 , 1 ) , ( 1 , 3 ) , ( 1 , 1 ) ) , ) State . objects . create ( name = 'Foo' , poly = Polygon ( * rings ) ) s = State . objects . force_rhr ( ) . get ( name = 'Foo' ) self . assertEqual ( rhr_rings , s . force_rhr . coords ) @ no_mysql @ no_oracle @ no_spatialite def test30_geohash ( self ) : if not connection . ops . geohash : return ref_hash = '9vk1mfq8jx0c8e0386z6' h1 = City . objects . geohash ( ) . get ( name = 'Houston' ) h2 = City . objects . geohash ( precision = 5 ) . get ( name = 'Houston' ) self . assertEqual ( ref_hash , h1 . geohash ) self . assertEqual ( ref_hash [ : 5 ] , h2 . geohash ) from . test_feeds import GeoFeedTest from . test_regress import GeoRegressionTests from . test_sitemaps import GeoSitemapTest
