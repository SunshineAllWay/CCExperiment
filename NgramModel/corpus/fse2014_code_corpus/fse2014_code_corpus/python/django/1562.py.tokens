from django . contrib . messages import constants from django . contrib . messages . storage import default_storage __all__ = ( , 'get_messages' , , 'set_level' , , 'info' , 'success' , 'warning' , 'error' , ) class MessageFailure ( Exception ) : pass def add_message ( request , level , message , extra_tags = '' , fail_silently = False ) : if hasattr ( request , '_messages' ) : return request . _messages . add ( level , message , extra_tags ) if not fail_silently : raise MessageFailure ( 'You cannot add messages without installing ' ) def get_messages ( request ) : if hasattr ( request , '_messages' ) : return request . _messages else : return [ ] def get_level ( request ) : if hasattr ( request , '_messages' ) : storage = request . _messages else : storage = default_storage ( request ) return storage . level def set_level ( request , level ) : if not hasattr ( request , '_messages' ) : return False request . _messages . level = level return True def debug ( request , message , extra_tags = '' , fail_silently = False ) : add_message ( request , constants . DEBUG , message , extra_tags = extra_tags , fail_silently = fail_silently ) def info ( request , message , extra_tags = '' , fail_silently = False ) : add_message ( request , constants . INFO , message , extra_tags = extra_tags , fail_silently = fail_silently ) def success ( request , message , extra_tags = '' , fail_silently = False ) : add_message ( request , constants . SUCCESS , message , extra_tags = extra_tags , fail_silently = fail_silently ) def warning ( request , message , extra_tags = '' , fail_silently = False ) : add_message ( request , constants . WARNING , message , extra_tags = extra_tags , fail_silently = fail_silently ) def error ( request , message , extra_tags = '' , fail_silently = False ) : add_message ( request , constants . ERROR , message , extra_tags = extra_tags , fail_silently = fail_silently )
