from __future__ import absolute_import , with_statement from datetime import date from django import forms from django . conf import settings from django . contrib . admin . options import ( ModelAdmin , TabularInline , InlineModelAdmin , HORIZONTAL , VERTICAL ) from django . contrib . admin . sites import AdminSite from django . contrib . admin . validation import validate from django . contrib . admin . widgets import AdminDateWidget , AdminRadioSelect from django . contrib . admin import ( SimpleListFilter , BooleanFieldListFilter ) from django . core . exceptions import ImproperlyConfigured from django . forms . models import BaseModelFormSet from django . forms . widgets import Select from django . test import TestCase from django . test . utils import override_settings from django . utils import unittest from . models import Band , Concert , ValidationTestModel , ValidationTestInlineModel class MockRequest ( object ) : pass class MockSuperUser ( object ) : def has_perm ( self , perm ) : return True request = MockRequest ( ) request . user = MockSuperUser ( ) class ModelAdminTests ( TestCase ) : def setUp ( self ) : self . band = Band . objects . create ( name = 'The Doors' , bio = '' , sign_date = date ( 1965 , 1 , 1 ) , ) self . site = AdminSite ( ) def test_default_fields ( self ) : ma = ModelAdmin ( Band , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'name' , 'bio' , 'sign_date' ] ) def test_default_fieldsets ( self ) : ma = ModelAdmin ( Band , self . site ) self . assertEqual ( ma . get_fieldsets ( request ) , [ ( None , { 'fields' : [ 'name' , 'bio' , 'sign_date' ] } ) ] ) self . assertEqual ( ma . get_fieldsets ( request , self . band ) , [ ( None , { 'fields' : [ 'name' , 'bio' , 'sign_date' ] } ) ] ) def test_field_arguments ( self ) : class BandAdmin ( ModelAdmin ) : fields = [ 'name' ] ma = BandAdmin ( Band , self . site ) self . assertEqual ( ma . get_fieldsets ( request ) , [ ( None , { 'fields' : [ 'name' ] } ) ] ) self . assertEqual ( ma . get_fieldsets ( request , self . band ) , [ ( None , { 'fields' : [ 'name' ] } ) ] ) def test_field_arguments_restricted_on_form ( self ) : class BandAdmin ( ModelAdmin ) : fields = [ 'name' ] ma = BandAdmin ( Band , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'name' ] ) self . assertEqual ( ma . get_form ( request , self . band ) . base_fields . keys ( ) , [ 'name' ] ) class BandAdmin ( ModelAdmin ) : fieldsets = [ ( None , { 'fields' : [ 'name' ] } ) ] ma = BandAdmin ( Band , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'name' ] ) self . assertEqual ( ma . get_form ( request , self . band ) . base_fields . keys ( ) , [ 'name' ] ) class BandAdmin ( ModelAdmin ) : exclude = [ 'bio' ] ma = BandAdmin ( Band , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'name' , 'sign_date' ] ) class BandAdmin ( ModelAdmin ) : exclude = ( 'bio' , ) ma = BandAdmin ( Band , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'name' , 'sign_date' ] ) class BandAdmin ( ModelAdmin ) : fields = [ 'name' , 'bio' ] exclude = [ 'bio' ] ma = BandAdmin ( Band , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'name' ] ) def test_custom_form_meta_exclude_with_readonly ( self ) : class AdminBandForm ( forms . ModelForm ) : class Meta : model = Band exclude = [ 'bio' ] class BandAdmin ( ModelAdmin ) : readonly_fields = [ 'name' ] form = AdminBandForm ma = BandAdmin ( Band , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'sign_date' , ] ) class AdminConcertForm ( forms . ModelForm ) : class Meta : model = Concert exclude = [ 'day' ] class ConcertInline ( TabularInline ) : readonly_fields = [ 'transport' ] form = AdminConcertForm fk_name = 'main_band' model = Concert class BandAdmin ( ModelAdmin ) : inlines = [ ConcertInline ] ma = BandAdmin ( Band , self . site ) self . assertEqual ( list ( ma . get_formsets ( request ) ) [ 0 ] ( ) . forms [ 0 ] . fields . keys ( ) , [ 'main_band' , 'opening_band' , 'id' , 'DELETE' , ] ) def test_custom_form_meta_exclude ( self ) : class AdminBandForm ( forms . ModelForm ) : class Meta : model = Band exclude = [ 'bio' ] class BandAdmin ( ModelAdmin ) : exclude = [ 'name' ] form = AdminBandForm ma = BandAdmin ( Band , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'bio' , 'sign_date' , ] ) class AdminConcertForm ( forms . ModelForm ) : class Meta : model = Concert exclude = [ 'day' ] class ConcertInline ( TabularInline ) : exclude = [ 'transport' ] form = AdminConcertForm fk_name = 'main_band' model = Concert class BandAdmin ( ModelAdmin ) : inlines = [ ConcertInline ] ma = BandAdmin ( Band , self . site ) self . assertEqual ( list ( ma . get_formsets ( request ) ) [ 0 ] ( ) . forms [ 0 ] . fields . keys ( ) , [ 'main_band' , 'opening_band' , 'day' , 'id' , 'DELETE' , ] ) def test_custom_form_validation ( self ) : class AdminBandForm ( forms . ModelForm ) : delete = forms . BooleanField ( ) class Meta : model = Band class BandAdmin ( ModelAdmin ) : form = AdminBandForm ma = BandAdmin ( Band , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'name' , 'bio' , 'sign_date' , 'delete' ] ) self . assertEqual ( type ( ma . get_form ( request ) . base_fields [ 'sign_date' ] . widget ) , AdminDateWidget ) def test_form_exclude_kwarg_override ( self ) : class AdminBandForm ( forms . ModelForm ) : class Meta : model = Band exclude = [ 'name' ] class BandAdmin ( ModelAdmin ) : exclude = [ 'sign_date' , ] form = AdminBandForm def get_form ( self , request , obj = None , ** kwargs ) : kwargs [ 'exclude' ] = [ 'bio' ] return super ( BandAdmin , self ) . get_form ( request , obj , ** kwargs ) ma = BandAdmin ( Band , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'name' , 'sign_date' , ] ) def test_formset_exclude_kwarg_override ( self ) : class AdminConcertForm ( forms . ModelForm ) : class Meta : model = Concert exclude = [ 'day' ] class ConcertInline ( TabularInline ) : exclude = [ 'transport' ] form = AdminConcertForm fk_name = 'main_band' model = Concert def get_formset ( self , request , obj = None , ** kwargs ) : kwargs [ 'exclude' ] = [ 'opening_band' ] return super ( ConcertInline , self ) . get_formset ( request , obj , ** kwargs ) class BandAdmin ( ModelAdmin ) : inlines = [ ConcertInline ] ma = BandAdmin ( Band , self . site ) self . assertEqual ( list ( ma . get_formsets ( request ) ) [ 0 ] ( ) . forms [ 0 ] . fields . keys ( ) , [ 'main_band' , 'day' , 'transport' , 'id' , 'DELETE' , ] ) def test_queryset_override ( self ) : band2 = Band ( name = 'The Beatles' , bio = '' , sign_date = date ( 1962 , 1 , 1 ) ) band2 . save ( ) class ConcertAdmin ( ModelAdmin ) : pass ma = ConcertAdmin ( Concert , self . site ) form = ma . get_form ( request ) ( ) self . assertHTMLEqual ( str ( form [ "main_band" ] ) , % ( band2 . id , self . band . id ) ) class AdminConcertForm ( forms . ModelForm ) : class Meta : model = Concert def __init__ ( self , * args , ** kwargs ) : super ( AdminConcertForm , self ) . __init__ ( * args , ** kwargs ) self . fields [ "main_band" ] . queryset = Band . objects . filter ( name = 'The Doors' ) class ConcertAdmin ( ModelAdmin ) : form = AdminConcertForm ma = ConcertAdmin ( Concert , self . site ) form = ma . get_form ( request ) ( ) self . assertHTMLEqual ( str ( form [ "main_band" ] ) , % self . band . id ) def test_regression_for_ticket_15820 ( self ) : class CustomConcertForm ( forms . ModelForm ) : class Meta : model = Concert fields = [ 'day' ] class ConcertInline ( TabularInline ) : model = Concert fk_name = 'main_band' def get_formset ( self , request , obj = None , ** kwargs ) : if obj : kwargs [ 'form' ] = CustomConcertForm return super ( ConcertInline , self ) . get_formset ( request , obj , ** kwargs ) class BandAdmin ( ModelAdmin ) : inlines = [ ConcertInline ] concert = Concert . objects . create ( main_band = self . band , opening_band = self . band , day = 1 ) ma = BandAdmin ( Band , self . site ) inline_instances = ma . get_inline_instances ( request ) fieldsets = list ( inline_instances [ 0 ] . get_fieldsets ( request ) ) self . assertEqual ( fieldsets [ 0 ] [ 1 ] [ 'fields' ] , [ 'main_band' , 'opening_band' , 'day' , 'transport' ] ) fieldsets = list ( inline_instances [ 0 ] . get_fieldsets ( request , inline_instances [ 0 ] . model ) ) self . assertEqual ( fieldsets [ 0 ] [ 1 ] [ 'fields' ] , [ 'day' ] ) def test_default_foreign_key_widget ( self ) : cma = ModelAdmin ( Concert , self . site ) cmafa = cma . get_form ( request ) self . assertEqual ( type ( cmafa . base_fields [ 'main_band' ] . widget . widget ) , Select ) self . assertEqual ( list ( cmafa . base_fields [ 'main_band' ] . widget . choices ) , [ ( u'' , u'---------' ) , ( self . band . id , u'The Doors' ) ] ) self . assertEqual ( type ( cmafa . base_fields [ 'opening_band' ] . widget . widget ) , Select ) self . assertEqual ( list ( cmafa . base_fields [ 'opening_band' ] . widget . choices ) , [ ( u'' , u'---------' ) , ( self . band . id , u'The Doors' ) ] ) self . assertEqual ( type ( cmafa . base_fields [ 'day' ] . widget ) , Select ) self . assertEqual ( list ( cmafa . base_fields [ 'day' ] . widget . choices ) , [ ( '' , '---------' ) , ( 1 , 'Fri' ) , ( 2 , 'Sat' ) ] ) self . assertEqual ( type ( cmafa . base_fields [ 'transport' ] . widget ) , Select ) self . assertEqual ( list ( cmafa . base_fields [ 'transport' ] . widget . choices ) , [ ( '' , '---------' ) , ( 1 , 'Plane' ) , ( 2 , 'Train' ) , ( 3 , 'Bus' ) ] ) def test_foreign_key_as_radio_field ( self ) : class ConcertAdmin ( ModelAdmin ) : radio_fields = { : HORIZONTAL , : VERTICAL , : VERTICAL , : HORIZONTAL , } cma = ConcertAdmin ( Concert , self . site ) cmafa = cma . get_form ( request ) self . assertEqual ( type ( cmafa . base_fields [ 'main_band' ] . widget . widget ) , AdminRadioSelect ) self . assertEqual ( cmafa . base_fields [ 'main_band' ] . widget . attrs , { 'class' : 'radiolist inline' } ) self . assertEqual ( list ( cmafa . base_fields [ 'main_band' ] . widget . choices ) , [ ( self . band . id , u'The Doors' ) ] ) self . assertEqual ( type ( cmafa . base_fields [ 'opening_band' ] . widget . widget ) , AdminRadioSelect ) self . assertEqual ( cmafa . base_fields [ 'opening_band' ] . widget . attrs , { 'class' : 'radiolist' } ) self . assertEqual ( list ( cmafa . base_fields [ 'opening_band' ] . widget . choices ) , [ ( u'' , u'None' ) , ( self . band . id , u'The Doors' ) ] ) self . assertEqual ( type ( cmafa . base_fields [ 'day' ] . widget ) , AdminRadioSelect ) self . assertEqual ( cmafa . base_fields [ 'day' ] . widget . attrs , { 'class' : 'radiolist' } ) self . assertEqual ( list ( cmafa . base_fields [ 'day' ] . widget . choices ) , [ ( 1 , 'Fri' ) , ( 2 , 'Sat' ) ] ) self . assertEqual ( type ( cmafa . base_fields [ 'transport' ] . widget ) , AdminRadioSelect ) self . assertEqual ( cmafa . base_fields [ 'transport' ] . widget . attrs , { 'class' : 'radiolist inline' } ) self . assertEqual ( list ( cmafa . base_fields [ 'transport' ] . widget . choices ) , [ ( '' , u'None' ) , ( 1 , 'Plane' ) , ( 2 , 'Train' ) , ( 3 , 'Bus' ) ] ) class AdminConcertForm ( forms . ModelForm ) : class Meta : model = Concert exclude = ( 'transport' , ) class ConcertAdmin ( ModelAdmin ) : form = AdminConcertForm ma = ConcertAdmin ( Concert , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'main_band' , 'opening_band' , 'day' ] ) class AdminConcertForm ( forms . ModelForm ) : extra = forms . CharField ( ) class Meta : model = Concert fields = [ 'extra' , 'transport' ] class ConcertAdmin ( ModelAdmin ) : form = AdminConcertForm ma = ConcertAdmin ( Concert , self . site ) self . assertEqual ( ma . get_form ( request ) . base_fields . keys ( ) , [ 'extra' , 'transport' ] ) class ConcertInline ( TabularInline ) : form = AdminConcertForm model = Concert fk_name = 'main_band' can_delete = True class BandAdmin ( ModelAdmin ) : inlines = [ ConcertInline ] ma = BandAdmin ( Band , self . site ) self . assertEqual ( list ( ma . get_formsets ( request ) ) [ 0 ] ( ) . forms [ 0 ] . fields . keys ( ) , [ 'extra' , 'transport' , 'id' , 'DELETE' , 'main_band' ] ) class ValidationTests ( unittest . TestCase ) : def test_validation_only_runs_in_debug ( self ) : try : settings . DEBUG = True class ValidationTestModelAdmin ( ModelAdmin ) : raw_id_fields = 10 site = AdminSite ( ) self . assertRaisesRegexp ( ImproperlyConfigured , , site . register , ValidationTestModel , ValidationTestModelAdmin , ) finally : settings . DEBUG = False site = AdminSite ( ) site . register ( ValidationTestModel , ValidationTestModelAdmin ) def test_raw_id_fields_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : raw_id_fields = 10 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : raw_id_fields = ( 'non_existent_field' , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : raw_id_fields = ( 'name' , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : raw_id_fields = ( 'users' , ) validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_fieldsets_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : fieldsets = 10 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : fieldsets = ( { } , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : fieldsets = ( ( ) , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : fieldsets = ( ( "General" , ( ) ) , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : fieldsets = ( ( "General" , { } ) , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : fieldsets = ( ( "General" , { "fields" : ( "non_existent_field" , ) } ) , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : fieldsets = ( ( "General" , { "fields" : ( "name" , ) } ) , ) validate ( ValidationTestModelAdmin , ValidationTestModel ) class ValidationTestModelAdmin ( ModelAdmin ) : fieldsets = ( ( "General" , { "fields" : ( "name" , ) } ) , ) fields = [ "name" , ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : fieldsets = [ ( None , { 'fields' : [ 'name' , 'name' ] } ) ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : fields = [ "name" , "name" ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) def test_form_validation ( self ) : class FakeForm ( object ) : pass class ValidationTestModelAdmin ( ModelAdmin ) : form = FakeForm self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) def test_fieldsets_with_custom_form_validation ( self ) : class BandAdmin ( ModelAdmin ) : fieldsets = ( ( 'Band' , { : ( 'non_existent_field' , ) } ) , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , BandAdmin , Band , ) class BandAdmin ( ModelAdmin ) : fieldsets = ( ( 'Band' , { : ( 'name' , ) } ) , ) validate ( BandAdmin , Band ) class AdminBandForm ( forms . ModelForm ) : class Meta : model = Band class BandAdmin ( ModelAdmin ) : form = AdminBandForm fieldsets = ( ( 'Band' , { : ( 'non_existent_field' , ) } ) , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , BandAdmin , Band , ) class AdminBandForm ( forms . ModelForm ) : delete = forms . BooleanField ( ) class Meta : model = Band class BandAdmin ( ModelAdmin ) : form = AdminBandForm fieldsets = ( ( 'Band' , { : ( 'name' , 'bio' , 'sign_date' , 'delete' ) } ) , ) validate ( BandAdmin , Band ) def test_filter_vertical_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : filter_vertical = 10 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : filter_vertical = ( "non_existent_field" , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : filter_vertical = ( "name" , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : filter_vertical = ( "users" , ) validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_filter_horizontal_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : filter_horizontal = 10 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : filter_horizontal = ( "non_existent_field" , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : filter_horizontal = ( "name" , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : filter_horizontal = ( "users" , ) validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_radio_fields_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : radio_fields = ( ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : radio_fields = { "non_existent_field" : None } self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : radio_fields = { "name" : None } self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : radio_fields = { "state" : None } self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : radio_fields = { "state" : VERTICAL } validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_prepopulated_fields_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : prepopulated_fields = ( ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : prepopulated_fields = { "non_existent_field" : None } self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : prepopulated_fields = { "slug" : ( "non_existent_field" , ) } self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : prepopulated_fields = { "users" : ( "name" , ) } self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : prepopulated_fields = { "slug" : ( "name" , ) } validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_list_display_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : list_display = 10 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : list_display = ( 'non_existent_field' , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : list_display = ( 'users' , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) def a_callable ( obj ) : pass class ValidationTestModelAdmin ( ModelAdmin ) : def a_method ( self , obj ) : pass list_display = ( 'name' , 'decade_published_in' , 'a_method' , a_callable ) validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_list_display_links_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : list_display_links = 10 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : list_display_links = ( 'non_existent_field' , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : list_display_links = ( 'name' , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) def a_callable ( obj ) : pass class ValidationTestModelAdmin ( ModelAdmin ) : def a_method ( self , obj ) : pass list_display = ( 'name' , 'decade_published_in' , 'a_method' , a_callable ) list_display_links = ( 'name' , 'decade_published_in' , 'a_method' , a_callable ) validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_list_filter_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : list_filter = 10 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : list_filter = ( 'non_existent_field' , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class RandomClass ( object ) : pass class ValidationTestModelAdmin ( ModelAdmin ) : list_filter = ( RandomClass , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : list_filter = ( ( 'is_active' , RandomClass ) , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class AwesomeFilter ( SimpleListFilter ) : def get_title ( self ) : return 'awesomeness' def get_choices ( self , request ) : return ( ( 'bit' , 'A bit awesome' ) , ( 'very' , 'Very awesome' ) , ) def get_query_set ( self , cl , qs ) : return qs class ValidationTestModelAdmin ( ModelAdmin ) : list_filter = ( ( 'is_active' , AwesomeFilter ) , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : list_filter = ( BooleanFieldListFilter , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : list_filter = ( 'is_active' , AwesomeFilter , ( 'is_active' , BooleanFieldListFilter ) , 'no' ) validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_list_per_page_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : list_per_page = 'hello' self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : list_per_page = 100 validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_max_show_all_allowed_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : list_max_show_all = 'hello' self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : list_max_show_all = 200 validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_search_fields_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : search_fields = 10 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) def test_date_hierarchy_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : date_hierarchy = 'non_existent_field' self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : date_hierarchy = 'name' self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : date_hierarchy = 'pub_date' validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_ordering_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : ordering = 10 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : ordering = ( 'non_existent_field' , ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : ordering = ( '?' , 'name' ) self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : ordering = ( '?' , ) validate ( ValidationTestModelAdmin , ValidationTestModel ) class ValidationTestModelAdmin ( ModelAdmin ) : ordering = ( 'band__name' , ) validate ( ValidationTestModelAdmin , ValidationTestModel ) class ValidationTestModelAdmin ( ModelAdmin ) : ordering = ( 'name' , ) validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_list_select_related_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : list_select_related = 1 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : list_select_related = False validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_save_as_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : save_as = 1 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : save_as = True validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_save_on_top_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : save_on_top = 1 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestModelAdmin ( ModelAdmin ) : save_on_top = True validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_inlines_validation ( self ) : class ValidationTestModelAdmin ( ModelAdmin ) : inlines = 10 self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestInline ( object ) : pass class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestInline ( TabularInline ) : pass class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class SomethingBad ( object ) : pass class ValidationTestInline ( TabularInline ) : model = SomethingBad class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestInline ( TabularInline ) : model = ValidationTestInlineModel class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_fields_validation ( self ) : class ValidationTestInline ( TabularInline ) : model = ValidationTestInlineModel fields = 10 class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestInline ( TabularInline ) : model = ValidationTestInlineModel fields = ( "non_existent_field" , ) class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) def test_fk_name_validation ( self ) : class ValidationTestInline ( TabularInline ) : model = ValidationTestInlineModel fk_name = "non_existent_field" class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestInline ( TabularInline ) : model = ValidationTestInlineModel fk_name = "parent" class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_extra_validation ( self ) : class ValidationTestInline ( TabularInline ) : model = ValidationTestInlineModel extra = "hello" class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestInline ( TabularInline ) : model = ValidationTestInlineModel extra = 2 class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_max_num_validation ( self ) : class ValidationTestInline ( TabularInline ) : model = ValidationTestInlineModel max_num = "hello" class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class ValidationTestInline ( TabularInline ) : model = ValidationTestInlineModel max_num = 2 class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] validate ( ValidationTestModelAdmin , ValidationTestModel ) def test_formset_validation ( self ) : class FakeFormSet ( object ) : pass class ValidationTestInline ( TabularInline ) : model = ValidationTestInlineModel formset = FakeFormSet class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] self . assertRaisesRegexp ( ImproperlyConfigured , , validate , ValidationTestModelAdmin , ValidationTestModel , ) class RealModelFormSet ( BaseModelFormSet ) : pass class ValidationTestInline ( TabularInline ) : model = ValidationTestInlineModel formset = RealModelFormSet class ValidationTestModelAdmin ( ModelAdmin ) : inlines = [ ValidationTestInline ] validate ( ValidationTestModelAdmin , ValidationTestModel )
