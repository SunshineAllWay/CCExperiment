from __future__ import with_statement , absolute_import from django . test import TestCase from . models import Reporter , Article class ManyToOneNullTests ( TestCase ) : def setUp ( self ) : self . r = Reporter ( name = 'John Smith' ) self . r . save ( ) self . a = Article ( headline = "First" , reporter = self . r ) self . a . save ( ) self . a2 = self . r . article_set . create ( headline = "Second" ) self . a3 = Article ( headline = "Third" , reporter = None ) self . a3 . save ( ) self . r2 = Reporter ( name = 'Paul Jones' ) self . r2 . save ( ) self . a4 = self . r2 . article_set . create ( headline = 'Fourth' ) def test_get_related ( self ) : self . assertEqual ( self . a . reporter . id , self . r . id ) r = self . a . reporter self . assertEqual ( r . id , self . r . id ) def test_created_via_related_set ( self ) : self . assertEqual ( self . a2 . reporter . id , self . r . id ) def test_related_set ( self ) : self . assertQuerysetEqual ( self . r . article_set . all ( ) , [ '<Article: First>' , '<Article: Second>' ] ) self . assertQuerysetEqual ( self . r . article_set . filter ( headline__startswith = 'Fir' ) , [ '<Article: First>' ] ) self . assertEqual ( self . r . article_set . count ( ) , 2 ) def test_created_without_related ( self ) : self . assertEqual ( self . a3 . reporter , None ) a3 = Article . objects . get ( pk = self . a3 . pk ) self . assertRaises ( AttributeError , getattr , a3 . reporter , 'id' ) self . assertEqual ( a3 . reporter , None ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__isnull = True ) , [ '<Article: Third>' ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter = None ) , [ '<Article: Third>' ] ) self . assertQuerysetEqual ( self . r . article_set . all ( ) , [ '<Article: First>' , '<Article: Second>' ] ) self . r . article_set . add ( a3 ) self . assertQuerysetEqual ( self . r . article_set . all ( ) , [ '<Article: First>' , '<Article: Second>' , '<Article: Third>' ] ) self . r . article_set . remove ( a3 ) self . assertQuerysetEqual ( self . r . article_set . all ( ) , [ '<Article: First>' , '<Article: Second>' ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__isnull = True ) , [ '<Article: Third>' ] ) def test_remove_from_wrong_set ( self ) : self . assertQuerysetEqual ( self . r2 . article_set . all ( ) , [ '<Article: Fourth>' ] ) self . assertRaises ( Reporter . DoesNotExist , self . r . article_set . remove , self . a4 ) self . assertQuerysetEqual ( self . r2 . article_set . all ( ) , [ '<Article: Fourth>' ] ) def test_assign_clear_related_set ( self ) : self . r2 . article_set = [ self . a2 , self . a3 ] self . assertQuerysetEqual ( self . r2 . article_set . all ( ) , [ '<Article: Second>' , '<Article: Third>' ] ) self . r . article_set . clear ( ) self . assertQuerysetEqual ( self . r . article_set . all ( ) , [ ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__isnull = True ) , [ '<Article: First>' , '<Article: Fourth>' ] ) def test_clear_efficiency ( self ) : r = Reporter . objects . create ( ) for _ in xrange ( 3 ) : r . article_set . create ( ) with self . assertNumQueries ( 1 ) : r . article_set . clear ( )
