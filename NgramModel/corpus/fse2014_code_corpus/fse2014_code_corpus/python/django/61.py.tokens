from __future__ import with_statement , absolute_import import shutil import tempfile from django . core . cache import cache from django . core . files import File from django . core . files . base import ContentFile from django . core . files . uploadedfile import SimpleUploadedFile from django . test import TestCase from . models import Storage , temp_storage , temp_storage_location class FileTests ( TestCase ) : def tearDown ( self ) : shutil . rmtree ( temp_storage_location ) def test_files ( self ) : temp_storage . save ( 'tests/default.txt' , ContentFile ( 'default content' ) ) self . assertRaises ( AttributeError , lambda : Storage . normal ) obj1 = Storage ( ) self . assertEqual ( obj1 . normal . name , "" ) self . assertRaises ( ValueError , lambda : obj1 . normal . size ) obj1 . normal . save ( "django_test.txt" , ContentFile ( "content" ) ) self . assertEqual ( obj1 . normal . name , "tests/django_test.txt" ) self . assertEqual ( obj1 . normal . size , 7 ) self . assertEqual ( obj1 . normal . read ( ) , "content" ) obj1 . normal . close ( ) obj1 . normal = SimpleUploadedFile ( "assignment.txt" , "content" ) dirs , files = temp_storage . listdir ( "tests" ) self . assertEqual ( dirs , [ ] ) self . assertEqual ( sorted ( files ) , [ "default.txt" , "django_test.txt" ] ) obj1 . save ( ) dirs , files = temp_storage . listdir ( "tests" ) self . assertEqual ( sorted ( files ) , [ "assignment.txt" , "default.txt" , "django_test.txt" ] ) obj1 . normal . open ( ) self . assertEqual ( obj1 . normal . read ( 3 ) , "con" ) self . assertEqual ( obj1 . normal . read ( ) , "tent" ) self . assertEqual ( list ( obj1 . normal . chunks ( chunk_size = 2 ) ) , [ "co" , "nt" , "en" , "t" ] ) obj1 . normal . close ( ) obj2 = Storage ( ) obj2 . normal . save ( "django_test.txt" , ContentFile ( "more content" ) ) self . assertEqual ( obj2 . normal . name , "tests/django_test_1.txt" ) self . assertEqual ( obj2 . normal . size , 12 ) cache . set ( "obj1" , obj1 ) cache . set ( "obj2" , obj2 ) self . assertEqual ( cache . get ( "obj2" ) . normal . name , "tests/django_test_1.txt" ) obj2 . delete ( ) obj2 . normal . save ( "django_test.txt" , ContentFile ( "more content" ) ) self . assertEqual ( obj2 . normal . name , "tests/django_test_2.txt" ) objs = [ Storage ( ) for i in range ( 3 ) ] for o in objs : o . normal . save ( "multiple_files.txt" , ContentFile ( "Same Content" ) ) self . assertEqual ( [ o . normal . name for o in objs ] , [ "tests/multiple_files.txt" , "tests/multiple_files_1.txt" , "tests/multiple_files_2.txt" ] ) for o in objs : o . delete ( ) obj3 = Storage . objects . create ( ) self . assertEqual ( obj3 . default . name , "tests/default.txt" ) self . assertEqual ( obj3 . default . read ( ) , "default content" ) obj3 . default . close ( ) obj3 . delete ( ) obj3 = Storage ( ) self . assertEqual ( obj3 . default . read ( ) , "default content" ) obj3 . default . close ( ) obj4 = Storage ( ) obj4 . random . save ( "random_file" , ContentFile ( "random content" ) ) self . assertTrue ( obj4 . random . name . endswith ( "/random_file" ) ) obj1 . normal . delete ( ) obj2 . normal . delete ( ) obj3 . default . delete ( ) obj4 . random . delete ( ) def test_context_manager ( self ) : orig_file = tempfile . TemporaryFile ( ) base_file = File ( orig_file ) with base_file as f : self . assertIs ( base_file , f ) self . assertFalse ( f . closed ) self . assertTrue ( f . closed ) self . assertTrue ( orig_file . closed )
