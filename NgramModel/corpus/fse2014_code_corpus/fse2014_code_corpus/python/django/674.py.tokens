""" Regression tests for Model inheritance behavior. """ from __future__ import absolute_import import datetime from operator import attrgetter from django . test import TestCase from . models import ( Place , Restaurant , ItalianRestaurant , ParkingLot , ParkingLot2 , ParkingLot3 , Supplier , Wholesaler , Child , SelfRefParent , SelfRefChild , ArticleWithAuthor , M2MChild , QualityControl , DerivedM , Person , BirthdayParty , BachelorParty , MessyBachelorParty , InternalCertificationAudit , BusStation , TrainStation ) class ModelInheritanceTest ( TestCase ) : def test_model_inheritance ( self ) : place1 = Place ( name = "Guido's House of Pasta" , address = '944 W. Fullerton' ) place1 . save_base ( raw = True ) restaurant = Restaurant ( place_ptr = place1 , serves_hot_dogs = True , serves_pizza = False ) restaurant . save_base ( raw = True ) italian_restaurant = ItalianRestaurant ( restaurant_ptr = restaurant , serves_gnocchi = True ) italian_restaurant . save_base ( raw = True ) place2 = Place ( name = 'Main St' , address = '111 Main St' ) place2 . save_base ( raw = True ) park = ParkingLot ( parent = place2 , capacity = 100 ) park . save_base ( raw = True ) places = list ( Place . objects . all ( ) ) self . assertEqual ( places , [ place1 , place2 ] ) dicts = list ( Restaurant . objects . values ( 'name' , 'serves_hot_dogs' ) ) self . assertEqual ( dicts , [ { : u"Guido's House of Pasta" , : True } ] ) dicts = list ( ItalianRestaurant . objects . values ( , 'serves_hot_dogs' , 'serves_gnocchi' ) ) self . assertEqual ( dicts , [ { : u"Guido's House of Pasta" , : True , : True , } ] ) dicts = list ( ParkingLot . objects . values ( 'name' , 'capacity' ) ) self . assertEqual ( dicts , [ { : 100 , : u'Main St' , } ] ) place1 . name = "Guido's All New House of Pasta" place1 . save_base ( raw = True ) restaurant . serves_hot_dogs = False restaurant . save_base ( raw = True ) italian_restaurant . serves_gnocchi = False italian_restaurant . save_base ( raw = True ) place2 . name = 'Derelict lot' place2 . save_base ( raw = True ) park . capacity = 50 park . save_base ( raw = True ) places = list ( Place . objects . all ( ) ) self . assertEqual ( places , [ place2 , place1 ] ) self . assertEqual ( places [ 0 ] . name , 'Derelict lot' ) self . assertEqual ( places [ 1 ] . name , "Guido's All New House of Pasta" ) dicts = list ( Restaurant . objects . values ( 'name' , 'serves_hot_dogs' ) ) self . assertEqual ( dicts , [ { : u"Guido's All New House of Pasta" , : False , } ] ) dicts = list ( ItalianRestaurant . objects . values ( , 'serves_hot_dogs' , 'serves_gnocchi' ) ) self . assertEqual ( dicts , [ { : u"Guido's All New House of Pasta" , : False , : False , } ] ) dicts = list ( ParkingLot . objects . values ( 'name' , 'capacity' ) ) self . assertEqual ( dicts , [ { : 50 , : u'Derelict lot' , } ] ) italian_restaurant . name = "Lorenzo's Pasta Hut" italian_restaurant . save_base ( raw = True ) dicts = list ( ItalianRestaurant . objects . values ( , 'serves_hot_dogs' , 'serves_gnocchi' ) ) self . assertEqual ( dicts , [ { : u"Guido's All New House of Pasta" , : False , : False , } ] ) def test_issue_7105 ( self ) : obj = Child . objects . create ( name = 'child' , created = datetime . datetime ( 2008 , 6 , 26 , 17 , 0 , 0 ) ) dates = list ( Child . objects . dates ( 'created' , 'month' ) ) self . assertEqual ( dates , [ datetime . datetime ( 2008 , 6 , 1 , 0 , 0 ) ] ) def test_issue_7276 ( self ) : place1 = Place ( name = "Guido's House of Pasta" , address = '944 W. Fullerton' ) place1 . save_base ( raw = True ) restaurant = Restaurant ( place_ptr = place1 , serves_hot_dogs = True , serves_pizza = False ) restaurant . save_base ( raw = True ) italian_restaurant = ItalianRestaurant ( restaurant_ptr = restaurant , serves_gnocchi = True ) italian_restaurant . save_base ( raw = True ) ident = ItalianRestaurant . objects . all ( ) [ 0 ] . id self . assertEqual ( Place . objects . get ( pk = ident ) , place1 ) xx = Restaurant . objects . create ( name = 'a' , address = 'xx' , serves_hot_dogs = True , serves_pizza = False ) Restaurant . objects . all ( ) . delete ( ) self . assertRaises ( Place . DoesNotExist , Place . objects . get , pk = ident ) self . assertRaises ( ItalianRestaurant . DoesNotExist , ItalianRestaurant . objects . get , pk = ident ) def test_issue_6755 ( self ) : r = Restaurant ( serves_pizza = False ) r . save ( ) self . assertEqual ( r . id , r . place_ptr_id ) orig_id = r . id r = Restaurant ( place_ptr_id = orig_id , serves_pizza = True ) r . save ( ) self . assertEqual ( r . id , orig_id ) self . assertEqual ( r . id , r . place_ptr_id ) def test_issue_7488 ( self ) : suppliers = Supplier . objects . filter ( restaurant = Restaurant ( name = 'xx' , address = 'yy' ) ) suppliers = list ( suppliers ) self . assertEqual ( suppliers , [ ] ) def test_issue_11764 ( self ) : wholesalers = list ( Wholesaler . objects . all ( ) . select_related ( ) ) self . assertEqual ( wholesalers , [ ] ) def test_issue_7853 ( self ) : obj = SelfRefChild . objects . create ( child_data = 37 , parent_data = 42 ) obj . delete ( ) def test_get_next_previous_by_date ( self ) : c1 = ArticleWithAuthor ( headline = 'ArticleWithAuthor 1' , author = "Person 1" , pub_date = datetime . datetime ( 2005 , 8 , 1 , 3 , 0 ) ) c1 . save ( ) c2 = ArticleWithAuthor ( headline = 'ArticleWithAuthor 2' , author = "Person 2" , pub_date = datetime . datetime ( 2005 , 8 , 1 , 10 , 0 ) ) c2 . save ( ) c3 = ArticleWithAuthor ( headline = 'ArticleWithAuthor 3' , author = "Person 3" , pub_date = datetime . datetime ( 2005 , 8 , 2 ) ) c3 . save ( ) self . assertEqual ( c1 . get_next_by_pub_date ( ) , c2 ) self . assertEqual ( c2 . get_next_by_pub_date ( ) , c3 ) self . assertRaises ( ArticleWithAuthor . DoesNotExist , c3 . get_next_by_pub_date ) self . assertEqual ( c3 . get_previous_by_pub_date ( ) , c2 ) self . assertEqual ( c2 . get_previous_by_pub_date ( ) , c1 ) self . assertRaises ( ArticleWithAuthor . DoesNotExist , c1 . get_previous_by_pub_date ) def test_inherited_fields ( self ) : m2mchildren = list ( M2MChild . objects . filter ( articles__isnull = False ) ) self . assertEqual ( m2mchildren , [ ] ) qs = ArticleWithAuthor . objects . order_by ( 'pub_date' , 'pk' ) sql = qs . query . get_compiler ( qs . db ) . as_sql ( ) [ 0 ] fragment = sql [ sql . find ( 'ORDER BY' ) : ] pos = fragment . find ( 'pub_date' ) self . assertEqual ( fragment . find ( 'pub_date' , pos + 1 ) , - 1 ) def test_queryset_update_on_parent_model ( self ) : article = ArticleWithAuthor . objects . create ( author = "fred" , headline = "Hey there!" , pub_date = datetime . datetime ( 2009 , 3 , 1 , 8 , 0 , 0 ) ) update = ArticleWithAuthor . objects . filter ( author = "fred" ) . update ( headline = "Oh, no!" ) self . assertEqual ( update , 1 ) update = ArticleWithAuthor . objects . filter ( pk = article . pk ) . update ( headline = "Oh, no!" ) self . assertEqual ( update , 1 ) derivedm1 = DerivedM . objects . create ( customPK = 44 , base_name = "b1" , derived_name = "d1" ) self . assertEqual ( derivedm1 . customPK , 44 ) self . assertEqual ( derivedm1 . base_name , 'b1' ) self . assertEqual ( derivedm1 . derived_name , 'd1' ) derivedms = list ( DerivedM . objects . all ( ) ) self . assertEqual ( derivedms , [ derivedm1 ] ) def test_use_explicit_o2o_to_parent_as_pk ( self ) : self . assertEqual ( ParkingLot2 . _meta . pk . name , "parent" ) self . assertEqual ( ParkingLot3 . _meta . pk . name , "primary_key" ) self . assertEqual ( ParkingLot3 . _meta . get_ancestor_link ( Place ) . name , ) def test_all_fields_from_abstract_base_class ( self ) : QualityControl . objects . create ( headline = "Problems in Django" , pub_date = datetime . datetime . now ( ) , quality = 10 , assignee = "adrian" ) def test_abstract_base_class_m2m_relation_inheritance ( self ) : p1 = Person . objects . create ( name = 'Alice' ) p2 = Person . objects . create ( name = 'Bob' ) p3 = Person . objects . create ( name = 'Carol' ) p4 = Person . objects . create ( name = 'Dave' ) birthday = BirthdayParty . objects . create ( name = 'Birthday party for Alice' ) birthday . attendees = [ p1 , p3 ] bachelor = BachelorParty . objects . create ( name = 'Bachelor party for Bob' ) bachelor . attendees = [ p2 , p4 ] parties = list ( p1 . birthdayparty_set . all ( ) ) self . assertEqual ( parties , [ birthday ] ) parties = list ( p1 . bachelorparty_set . all ( ) ) self . assertEqual ( parties , [ ] ) parties = list ( p2 . bachelorparty_set . all ( ) ) self . assertEqual ( parties , [ bachelor ] ) self . assertFalse ( hasattr ( p2 , 'messybachelorparty_set' ) ) messy = MessyBachelorParty . objects . create ( name = 'Bachelor party for Dave' ) messy . attendees = [ p4 ] messy_parent = messy . bachelorparty_ptr parties = list ( p4 . bachelorparty_set . all ( ) ) self . assertEqual ( parties , [ bachelor , messy_parent ] ) def test_abstract_verbose_name_plural_inheritance ( self ) : self . assertEqual ( InternalCertificationAudit . _meta . verbose_name_plural , ) def test_inherited_nullable_exclude ( self ) : obj = SelfRefChild . objects . create ( child_data = 37 , parent_data = 42 ) self . assertQuerysetEqual ( SelfRefParent . objects . exclude ( self_data = 72 ) , [ obj . pk ] , attrgetter ( "pk" ) ) self . assertQuerysetEqual ( SelfRefChild . objects . exclude ( self_data = 72 ) , [ obj . pk ] , attrgetter ( "pk" ) ) def test_concrete_abstract_concrete_pk ( self ) : self . assertEqual ( len ( [ field for field in BusStation . _meta . local_fields if field . primary_key ] ) , 1 ) self . assertEqual ( len ( [ field for field in TrainStation . _meta . local_fields if field . primary_key ] ) , 1 ) self . assertIs ( BusStation . _meta . pk . model , BusStation ) self . assertIs ( TrainStation . _meta . pk . model , TrainStation )
