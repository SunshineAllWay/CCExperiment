from __future__ import absolute_import import os from django . db import connections from django . test import TestCase from django . contrib . gis . gdal import Driver from django . contrib . gis . geometry . test_data import TEST_DATA from django . contrib . gis . utils . ogrinspect import ogrinspect from . models import AllOGRFields class OGRInspectTest ( TestCase ) : def test_poly ( self ) : shp_file = os . path . join ( TEST_DATA , 'test_poly' , 'test_poly.shp' ) model_def = ogrinspect ( shp_file , 'MyModel' ) expected = [ , , , , , , , , , ] self . assertEqual ( model_def , '\n' . join ( expected ) ) def test_date_field ( self ) : shp_file = os . path . join ( TEST_DATA , 'cities' , 'cities.shp' ) model_def = ogrinspect ( shp_file , 'City' ) expected = [ , , , , , , , , , , ] self . assertEqual ( model_def , '\n' . join ( expected ) ) def test_time_field ( self ) : if not connections [ 'default' ] . ops . postgis : return ogr_db = get_ogr_db_string ( ) if not ogr_db : return model_def = ogrinspect ( ogr_db , 'Measurement' , layer_key = AllOGRFields . _meta . db_table , decimal = [ 'f_decimal' ] ) expected = [ , , , , , , , , , , , , , ] self . assertEqual ( model_def , '\n' . join ( expected ) ) def get_ogr_db_string ( ) : db = connections . databases [ 'default' ] drivers = { : ( 'PostgreSQL' , 'PG' ) , } drv_name , db_str = drivers [ db [ 'ENGINE' ] ] try : Driver ( drv_name ) except : return None params = [ "dbname='%s'" % db [ 'NAME' ] ] def add ( key , template ) : value = db . get ( key , None ) if value : params . append ( template % value ) add ( 'HOST' , "host='%s'" ) add ( 'PORT' , "port='%s'" ) add ( 'USER' , "user='%s'" ) add ( 'PASSWORD' , "password='%s'" ) return '%s:%s' % ( db_str , ' ' . join ( params ) )
