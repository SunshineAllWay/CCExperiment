""" Form classes """ from __future__ import absolute_import import copy from django . core . exceptions import ValidationError from django . forms . fields import Field , FileField from django . forms . util import flatatt , ErrorDict , ErrorList from django . forms . widgets import Media , media_property , TextInput , Textarea from django . utils . datastructures import SortedDict from django . utils . html import conditional_escape from django . utils . encoding import StrAndUnicode , smart_unicode , force_unicode from django . utils . safestring import mark_safe __all__ = ( 'BaseForm' , 'Form' ) NON_FIELD_ERRORS = '__all__' def pretty_name ( name ) : if not name : return u'' return name . replace ( '_' , ' ' ) . capitalize ( ) def get_declared_fields ( bases , attrs , with_base_fields = True ) : fields = [ ( field_name , attrs . pop ( field_name ) ) for field_name , obj in attrs . items ( ) if isinstance ( obj , Field ) ] fields . sort ( key = lambda x : x [ 1 ] . creation_counter ) if with_base_fields : for base in bases [ : : - 1 ] : if hasattr ( base , 'base_fields' ) : fields = base . base_fields . items ( ) + fields else : for base in bases [ : : - 1 ] : if hasattr ( base , 'declared_fields' ) : fields = base . declared_fields . items ( ) + fields return SortedDict ( fields ) class DeclarativeFieldsMetaclass ( type ) : def __new__ ( cls , name , bases , attrs ) : attrs [ 'base_fields' ] = get_declared_fields ( bases , attrs ) new_class = super ( DeclarativeFieldsMetaclass , cls ) . __new__ ( cls , name , bases , attrs ) if 'media' not in attrs : new_class . media = media_property ( new_class ) return new_class class BaseForm ( StrAndUnicode ) : def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None , initial = None , error_class = ErrorList , label_suffix = ':' , empty_permitted = False ) : self . is_bound = data is not None or files is not None self . data = data or { } self . files = files or { } self . auto_id = auto_id self . prefix = prefix self . initial = initial or { } self . error_class = error_class self . label_suffix = label_suffix self . empty_permitted = empty_permitted self . _errors = None self . _changed_data = None self . fields = copy . deepcopy ( self . base_fields ) def __unicode__ ( self ) : return self . as_table ( ) def __iter__ ( self ) : for name in self . fields : yield self [ name ] def __getitem__ ( self , name ) : try : field = self . fields [ name ] except KeyError : raise KeyError ( 'Key %r not found in Form' % name ) return BoundField ( self , field , name ) def _get_errors ( self ) : if self . _errors is None : self . full_clean ( ) return self . _errors errors = property ( _get_errors ) def is_valid ( self ) : return self . is_bound and not bool ( self . errors ) def add_prefix ( self , field_name ) : return self . prefix and ( '%s-%s' % ( self . prefix , field_name ) ) or field_name def add_initial_prefix ( self , field_name ) : return u'initial-%s' % self . add_prefix ( field_name ) def _html_output ( self , normal_row , error_row , row_ender , help_text_html , errors_on_separate_row ) : top_errors = self . non_field_errors ( ) output , hidden_fields = [ ] , [ ] for name , field in self . fields . items ( ) : html_class_attr = '' bf = self [ name ] bf_errors = self . error_class ( [ conditional_escape ( error ) for error in bf . errors ] ) if bf . is_hidden : if bf_errors : top_errors . extend ( [ u'(Hidden field %s) %s' % ( name , force_unicode ( e ) ) for e in bf_errors ] ) hidden_fields . append ( unicode ( bf ) ) else : css_classes = bf . css_classes ( ) if css_classes : html_class_attr = ' class="%s"' % css_classes if errors_on_separate_row and bf_errors : output . append ( error_row % force_unicode ( bf_errors ) ) if bf . label : label = conditional_escape ( force_unicode ( bf . label ) ) if self . label_suffix : if label [ - 1 ] not in ':?.!' : label += self . label_suffix label = bf . label_tag ( label ) or '' else : label = '' if field . help_text : help_text = help_text_html % force_unicode ( field . help_text ) else : help_text = u'' output . append ( normal_row % { : force_unicode ( bf_errors ) , : force_unicode ( label ) , : unicode ( bf ) , : help_text , : html_class_attr } ) if top_errors : output . insert ( 0 , error_row % force_unicode ( top_errors ) ) if hidden_fields : str_hidden = u'' . join ( hidden_fields ) if output : last_row = output [ - 1 ] if not last_row . endswith ( row_ender ) : last_row = ( normal_row % { 'errors' : '' , 'label' : '' , : '' , 'help_text' : '' , : html_class_attr } ) output . append ( last_row ) output [ - 1 ] = last_row [ : - len ( row_ender ) ] + str_hidden + row_ender else : output . append ( str_hidden ) return mark_safe ( u'\n' . join ( output ) ) def as_table ( self ) : return self . _html_output ( normal_row = u'<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' , error_row = u'<tr><td colspan="2">%s</td></tr>' , row_ender = u'</td></tr>' , help_text_html = u'<br /><span class="helptext">%s</span>' , errors_on_separate_row = False ) def as_ul ( self ) : return self . _html_output ( normal_row = u'<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' , error_row = u'<li>%s</li>' , row_ender = '</li>' , help_text_html = u' <span class="helptext">%s</span>' , errors_on_separate_row = False ) def as_p ( self ) : return self . _html_output ( normal_row = u'<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' , error_row = u'%s' , row_ender = '</p>' , help_text_html = u' <span class="helptext">%s</span>' , errors_on_separate_row = True ) def non_field_errors ( self ) : return self . errors . get ( NON_FIELD_ERRORS , self . error_class ( ) ) def _raw_value ( self , fieldname ) : field = self . fields [ fieldname ] prefix = self . add_prefix ( fieldname ) return field . widget . value_from_datadict ( self . data , self . files , prefix ) def full_clean ( self ) : self . _errors = ErrorDict ( ) if not self . is_bound : return self . cleaned_data = { } if self . empty_permitted and not self . has_changed ( ) : return self . _clean_fields ( ) self . _clean_form ( ) self . _post_clean ( ) if self . _errors : del self . cleaned_data def _clean_fields ( self ) : for name , field in self . fields . items ( ) : value = field . widget . value_from_datadict ( self . data , self . files , self . add_prefix ( name ) ) try : if isinstance ( field , FileField ) : initial = self . initial . get ( name , field . initial ) value = field . clean ( value , initial ) else : value = field . clean ( value ) self . cleaned_data [ name ] = value if hasattr ( self , 'clean_%s' % name ) : value = getattr ( self , 'clean_%s' % name ) ( ) self . cleaned_data [ name ] = value except ValidationError , e : self . _errors [ name ] = self . error_class ( e . messages ) if name in self . cleaned_data : del self . cleaned_data [ name ] def _clean_form ( self ) : try : self . cleaned_data = self . clean ( ) except ValidationError , e : self . _errors [ NON_FIELD_ERRORS ] = self . error_class ( e . messages ) def _post_clean ( self ) : pass def clean ( self ) : return self . cleaned_data def has_changed ( self ) : return bool ( self . changed_data ) def _get_changed_data ( self ) : if self . _changed_data is None : self . _changed_data = [ ] for name , field in self . fields . items ( ) : prefixed_name = self . add_prefix ( name ) data_value = field . widget . value_from_datadict ( self . data , self . files , prefixed_name ) if not field . show_hidden_initial : initial_value = self . initial . get ( name , field . initial ) else : initial_prefixed_name = self . add_initial_prefix ( name ) hidden_widget = field . hidden_widget ( ) initial_value = hidden_widget . value_from_datadict ( self . data , self . files , initial_prefixed_name ) if field . widget . _has_changed ( initial_value , data_value ) : self . _changed_data . append ( name ) return self . _changed_data changed_data = property ( _get_changed_data ) def _get_media ( self ) : media = Media ( ) for field in self . fields . values ( ) : media = media + field . widget . media return media media = property ( _get_media ) def is_multipart ( self ) : for field in self . fields . values ( ) : if field . widget . needs_multipart_form : return True return False def hidden_fields ( self ) : return [ field for field in self if field . is_hidden ] def visible_fields ( self ) : return [ field for field in self if not field . is_hidden ] class Form ( BaseForm ) : __metaclass__ = DeclarativeFieldsMetaclass class BoundField ( StrAndUnicode ) : def __init__ ( self , form , field , name ) : self . form = form self . field = field self . name = name self . html_name = form . add_prefix ( name ) self . html_initial_name = form . add_initial_prefix ( name ) self . html_initial_id = form . add_initial_prefix ( self . auto_id ) if self . field . label is None : self . label = pretty_name ( name ) else : self . label = self . field . label self . help_text = field . help_text or '' def __unicode__ ( self ) : if self . field . show_hidden_initial : return self . as_widget ( ) + self . as_hidden ( only_initial = True ) return self . as_widget ( ) def __iter__ ( self ) : for subwidget in self . field . widget . subwidgets ( self . html_name , self . value ( ) ) : yield subwidget def __len__ ( self ) : return len ( list ( self . __iter__ ( ) ) ) def __getitem__ ( self , idx ) : return list ( self . __iter__ ( ) ) [ idx ] def _errors ( self ) : return self . form . errors . get ( self . name , self . form . error_class ( ) ) errors = property ( _errors ) def as_widget ( self , widget = None , attrs = None , only_initial = False ) : if not widget : widget = self . field . widget attrs = attrs or { } auto_id = self . auto_id if auto_id and 'id' not in attrs and 'id' not in widget . attrs : if not only_initial : attrs [ 'id' ] = auto_id else : attrs [ 'id' ] = self . html_initial_id if not only_initial : name = self . html_name else : name = self . html_initial_name return widget . render ( name , self . value ( ) , attrs = attrs ) def as_text ( self , attrs = None , ** kwargs ) : return self . as_widget ( TextInput ( ) , attrs , ** kwargs ) def as_textarea ( self , attrs = None , ** kwargs ) : return self . as_widget ( Textarea ( ) , attrs , ** kwargs ) def as_hidden ( self , attrs = None , ** kwargs ) : return self . as_widget ( self . field . hidden_widget ( ) , attrs , ** kwargs ) def _data ( self ) : return self . field . widget . value_from_datadict ( self . form . data , self . form . files , self . html_name ) data = property ( _data ) def value ( self ) : if not self . form . is_bound : data = self . form . initial . get ( self . name , self . field . initial ) if callable ( data ) : data = data ( ) else : data = self . field . bound_data ( self . data , self . form . initial . get ( self . name , self . field . initial ) ) return self . field . prepare_value ( data ) def label_tag ( self , contents = None , attrs = None ) : contents = contents or conditional_escape ( self . label ) widget = self . field . widget id_ = widget . attrs . get ( 'id' ) or self . auto_id if id_ : attrs = attrs and flatatt ( attrs ) or '' contents = u'<label for="%s"%s>%s</label>' % ( widget . id_for_label ( id_ ) , attrs , unicode ( contents ) ) return mark_safe ( contents ) def css_classes ( self , extra_classes = None ) : if hasattr ( extra_classes , 'split' ) : extra_classes = extra_classes . split ( ) extra_classes = set ( extra_classes or [ ] ) if self . errors and hasattr ( self . form , 'error_css_class' ) : extra_classes . add ( self . form . error_css_class ) if self . field . required and hasattr ( self . form , 'required_css_class' ) : extra_classes . add ( self . form . required_css_class ) return ' ' . join ( extra_classes ) def _is_hidden ( self ) : return self . field . widget . is_hidden is_hidden = property ( _is_hidden ) def _auto_id ( self ) : auto_id = self . form . auto_id if auto_id and '%s' in smart_unicode ( auto_id ) : return smart_unicode ( auto_id ) % self . html_name elif auto_id : return self . html_name return '' auto_id = property ( _auto_id ) def _id_for_label ( self ) : widget = self . field . widget id_ = widget . attrs . get ( 'id' ) or self . auto_id return widget . id_for_label ( id_ ) id_for_label = property ( _id_for_label )
