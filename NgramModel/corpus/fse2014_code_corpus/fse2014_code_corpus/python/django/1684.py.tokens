""" Error checking functions for GEOS ctypes prototype functions. """ import os from ctypes import c_void_p , string_at , CDLL from django . contrib . gis . geos . error import GEOSException from django . contrib . gis . geos . libgeos import GEOS_VERSION from django . contrib . gis . geos . prototypes . threadsafe import GEOSFunc if GEOS_VERSION >= ( 3 , 1 , 1 ) : free = GEOSFunc ( 'GEOSFree' ) free . argtypes = [ c_void_p ] free . restype = None else : if os . name == 'nt' : libc = CDLL ( 'msvcrt' ) else : libc = CDLL ( None ) free = libc . free def last_arg_byref ( args ) : return args [ - 1 ] . _obj . value def check_dbl ( result , func , cargs ) : if result != 1 : return None return last_arg_byref ( cargs ) def check_geom ( result , func , cargs ) : if not result : raise GEOSException ( 'Error encountered checking Geometry returned from GEOS C function "%s".' % func . __name__ ) return result def check_minus_one ( result , func , cargs ) : if result == - 1 : raise GEOSException ( 'Error encountered in GEOS C function "%s".' % func . __name__ ) else : return result def check_predicate ( result , func , cargs ) : val = ord ( result ) if val == 1 : return True elif val == 0 : return False else : raise GEOSException ( 'Error encountered on GEOS C predicate function "%s".' % func . __name__ ) def check_sized_string ( result , func , cargs ) : if not result : raise GEOSException ( 'Invalid string pointer returned by GEOS C function "%s"' % func . __name__ ) s = string_at ( result , last_arg_byref ( cargs ) ) free ( result ) return s def check_string ( result , func , cargs ) : if not result : raise GEOSException ( 'Error encountered checking string return value in GEOS C function "%s".' % func . __name__ ) s = string_at ( result ) free ( result ) return s def check_zero ( result , func , cargs ) : if result == 0 : raise GEOSException ( 'Error encountered in GEOS C function "%s".' % func . __name__ ) else : return result
