""" 39. Testing using the Test Client The test client is a class that can act like a simple browser for testing purposes. It allows the user to compose GET and POST requests, and obtain the response that the server gave to those requests. The server Response objects are annotated with the details of the contexts and templates that were rendered during the process of serving the request. ``Client`` objects are stateful - they will retain cookie (and thus session) details for the lifetime of the ``Client`` instance. This is not intended as a replacement for Twill, Selenium, or other browser automation frameworks - it is here to allow testing against the contexts and templates produced by a view, rather than the HTML rendered to the end-user. """ from __future__ import absolute_import from django . conf import settings from django . core import mail from django . test import Client , TestCase , RequestFactory from . views import get_view class ClientTest ( TestCase ) : fixtures = [ 'testdata.json' ] def test_get_view ( self ) : data = { 'var' : u'\xf2' } response = self . client . get ( '/test_client/get_view/' , data ) self . assertContains ( response , 'This is a test' ) self . assertEqual ( response . context [ 'var' ] , u'\xf2' ) self . assertEqual ( response . templates [ 0 ] . name , 'GET Template' ) def test_get_post_view ( self ) : response = self . client . get ( '/test_client/post_view/' , { } ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . templates [ 0 ] . name , 'Empty GET Template' ) self . assertTemplateUsed ( response , 'Empty GET Template' ) self . assertTemplateNotUsed ( response , 'Empty POST Template' ) def test_empty_post ( self ) : response = self . client . post ( '/test_client/post_view/' , { } ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . templates [ 0 ] . name , 'Empty POST Template' ) self . assertTemplateNotUsed ( response , 'Empty GET Template' ) self . assertTemplateUsed ( response , 'Empty POST Template' ) def test_post ( self ) : post_data = { : 37 } response = self . client . post ( '/test_client/post_view/' , post_data ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . context [ 'data' ] , '37' ) self . assertEqual ( response . templates [ 0 ] . name , 'POST Template' ) self . assertTrue ( 'Data received' in response . content ) def test_response_headers ( self ) : response = self . client . get ( "/test_client/header_view/" ) self . assertEqual ( response [ 'X-DJANGO-TEST' ] , 'Slartibartfast' ) def test_raw_post ( self ) : test_doc = """<?xml version="1.0" encoding="utf-8"?><library><book><title>Blink</title><author>Malcolm Gladwell</author></book></library>""" response = self . client . post ( "/test_client/raw_post_view/" , test_doc , content_type = "text/xml" ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . templates [ 0 ] . name , "Book template" ) self . assertEqual ( response . content , "Blink - Malcolm Gladwell" ) def test_redirect ( self ) : response = self . client . get ( '/test_client/redirect_view/' ) self . assertRedirects ( response , '/test_client/get_view/' ) host = 'django.testserver' client_providing_host = Client ( HTTP_HOST = host ) response = client_providing_host . get ( '/test_client/redirect_view/' ) self . assertRedirects ( response , '/test_client/get_view/' , host = host ) def test_redirect_with_query ( self ) : response = self . client . get ( '/test_client/redirect_view/' , { 'var' : 'value' } ) self . assertRedirects ( response , 'http://testserver/test_client/get_view/?var=value' ) def test_permanent_redirect ( self ) : response = self . client . get ( '/test_client/permanent_redirect_view/' ) self . assertRedirects ( response , 'http://testserver/test_client/get_view/' , status_code = 301 ) client_providing_host = Client ( HTTP_HOST = 'django.testserver' ) response = client_providing_host . get ( '/test_client/permanent_redirect_view/' ) self . assertRedirects ( response , 'http://django.testserver/test_client/get_view/' , status_code = 301 ) def test_temporary_redirect ( self ) : response = self . client . get ( '/test_client/temporary_redirect_view/' ) self . assertRedirects ( response , 'http://testserver/test_client/get_view/' , status_code = 302 ) def test_redirect_to_strange_location ( self ) : response = self . client . get ( '/test_client/double_redirect_view/' ) self . assertRedirects ( response , 'http://testserver/test_client/permanent_redirect_view/' , target_status_code = 301 ) def test_follow_redirect ( self ) : response = self . client . get ( '/test_client/double_redirect_view/' , follow = True ) self . assertRedirects ( response , 'http://testserver/test_client/get_view/' , status_code = 302 , target_status_code = 200 ) self . assertEqual ( len ( response . redirect_chain ) , 2 ) def test_redirect_http ( self ) : response = self . client . get ( '/test_client/http_redirect_view/' , follow = True ) self . assertFalse ( response . test_was_secure_request ) def test_redirect_https ( self ) : response = self . client . get ( '/test_client/https_redirect_view/' , follow = True ) self . assertTrue ( response . test_was_secure_request ) def test_notfound_response ( self ) : response = self . client . get ( '/test_client/bad_view/' ) self . assertContains ( response , 'MAGIC' , status_code = 404 ) def test_valid_form ( self ) : post_data = { : 'Hello World' , : 'foo@example.com' , : 37 , : 'b' , : ( 'b' , 'c' , 'e' ) } response = self . client . post ( '/test_client/form_view/' , post_data ) self . assertEqual ( response . status_code , 200 ) self . assertTemplateUsed ( response , "Valid POST Template" ) def test_valid_form_with_hints ( self ) : hints = { : 'Hello World' , : ( 'b' , 'c' , 'e' ) } response = self . client . get ( '/test_client/form_view/' , data = hints ) self . assertEqual ( response . status_code , 200 ) self . assertTemplateUsed ( response , "Form GET Template" ) self . assertContains ( response , 'Select a valid choice.' , 0 ) def test_incomplete_data_form ( self ) : post_data = { : 'Hello World' , : 37 } response = self . client . post ( '/test_client/form_view/' , post_data ) self . assertContains ( response , 'This field is required.' , 3 ) self . assertEqual ( response . status_code , 200 ) self . assertTemplateUsed ( response , "Invalid POST Template" ) self . assertFormError ( response , 'form' , 'email' , 'This field is required.' ) self . assertFormError ( response , 'form' , 'single' , 'This field is required.' ) self . assertFormError ( response , 'form' , 'multi' , 'This field is required.' ) def test_form_error ( self ) : post_data = { : 'Hello World' , : 'not an email address' , : 37 , : 'b' , : ( 'b' , 'c' , 'e' ) } response = self . client . post ( '/test_client/form_view/' , post_data ) self . assertEqual ( response . status_code , 200 ) self . assertTemplateUsed ( response , "Invalid POST Template" ) self . assertFormError ( response , 'form' , 'email' , 'Enter a valid e-mail address.' ) def test_valid_form_with_template ( self ) : post_data = { : 'Hello World' , : 'foo@example.com' , : 37 , : 'b' , : ( 'b' , 'c' , 'e' ) } response = self . client . post ( '/test_client/form_view_with_template/' , post_data ) self . assertContains ( response , 'POST data OK' ) self . assertTemplateUsed ( response , "form_view.html" ) self . assertTemplateUsed ( response , 'base.html' ) self . assertTemplateNotUsed ( response , "Valid POST Template" ) def test_incomplete_data_form_with_template ( self ) : post_data = { : 'Hello World' , : 37 } response = self . client . post ( '/test_client/form_view_with_template/' , post_data ) self . assertContains ( response , 'POST data has errors' ) self . assertTemplateUsed ( response , 'form_view.html' ) self . assertTemplateUsed ( response , 'base.html' ) self . assertTemplateNotUsed ( response , "Invalid POST Template" ) self . assertFormError ( response , 'form' , 'email' , 'This field is required.' ) self . assertFormError ( response , 'form' , 'single' , 'This field is required.' ) self . assertFormError ( response , 'form' , 'multi' , 'This field is required.' ) def test_form_error_with_template ( self ) : post_data = { : 'Hello World' , : 'not an email address' , : 37 , : 'b' , : ( 'b' , 'c' , 'e' ) } response = self . client . post ( '/test_client/form_view_with_template/' , post_data ) self . assertContains ( response , 'POST data has errors' ) self . assertTemplateUsed ( response , "form_view.html" ) self . assertTemplateUsed ( response , 'base.html' ) self . assertTemplateNotUsed ( response , "Invalid POST Template" ) self . assertFormError ( response , 'form' , 'email' , 'Enter a valid e-mail address.' ) def test_unknown_page ( self ) : response = self . client . get ( '/test_client/unknown_view/' ) self . assertEqual ( response . status_code , 404 ) def test_url_parameters ( self ) : response = self . client . get ( '/test_client/unknown_view/;some-parameter' ) self . assertEqual ( response . request [ 'PATH_INFO' ] , '/test_client/unknown_view/;some-parameter' ) def test_view_with_login ( self ) : response = self . client . get ( '/test_client/login_protected_view/' ) self . assertRedirects ( response , 'http://testserver/accounts/login/?next=/test_client/login_protected_view/' ) login = self . client . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) response = self . client . get ( '/test_client/login_protected_view/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . context [ 'user' ] . username , 'testclient' ) def test_view_with_method_login ( self ) : response = self . client . get ( '/test_client/login_protected_method_view/' ) self . assertRedirects ( response , 'http://testserver/accounts/login/?next=/test_client/login_protected_method_view/' ) login = self . client . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) response = self . client . get ( '/test_client/login_protected_method_view/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . context [ 'user' ] . username , 'testclient' ) def test_view_with_login_and_custom_redirect ( self ) : response = self . client . get ( '/test_client/login_protected_view_custom_redirect/' ) self . assertRedirects ( response , 'http://testserver/accounts/login/?redirect_to=/test_client/login_protected_view_custom_redirect/' ) login = self . client . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) response = self . client . get ( '/test_client/login_protected_view_custom_redirect/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . context [ 'user' ] . username , 'testclient' ) def test_view_with_bad_login ( self ) : login = self . client . login ( username = 'otheruser' , password = 'nopassword' ) self . assertFalse ( login ) def test_view_with_inactive_login ( self ) : login = self . client . login ( username = 'inactive' , password = 'password' ) self . assertFalse ( login ) def test_logout ( self ) : self . client . login ( username = 'testclient' , password = 'password' ) response = self . client . get ( '/test_client/login_protected_view/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . context [ 'user' ] . username , 'testclient' ) self . client . logout ( ) response = self . client . get ( '/test_client/login_protected_view/' ) self . assertRedirects ( response , 'http://testserver/accounts/login/?next=/test_client/login_protected_view/' ) def test_view_with_permissions ( self ) : response = self . client . get ( '/test_client/permission_protected_view/' ) self . assertRedirects ( response , 'http://testserver/accounts/login/?next=/test_client/permission_protected_view/' ) login = self . client . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) response = self . client . get ( '/test_client/permission_protected_view/' ) self . assertRedirects ( response , 'http://testserver/accounts/login/?next=/test_client/permission_protected_view/' ) def test_view_with_permissions_exception ( self ) : response = self . client . get ( '/test_client/permission_protected_view_exception/' ) self . assertEquals ( response . status_code , 403 ) login = self . client . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) response = self . client . get ( '/test_client/permission_protected_view_exception/' ) self . assertEquals ( response . status_code , 403 ) def test_view_with_method_permissions ( self ) : response = self . client . get ( '/test_client/permission_protected_method_view/' ) self . assertRedirects ( response , 'http://testserver/accounts/login/?next=/test_client/permission_protected_method_view/' ) login = self . client . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) response = self . client . get ( '/test_client/permission_protected_method_view/' ) self . assertRedirects ( response , 'http://testserver/accounts/login/?next=/test_client/permission_protected_method_view/' ) def test_session_modifying_view ( self ) : try : self . client . session [ 'tobacconist' ] self . fail ( "Shouldn't have a session value" ) except KeyError : pass from django . contrib . sessions . models import Session response = self . client . post ( '/test_client/session_view/' ) self . assertEqual ( self . client . session [ 'tobacconist' ] , 'hovercraft' ) def test_view_with_exception ( self ) : self . assertRaises ( KeyError , self . client . get , "/test_client/broken_view/" ) try : self . client . get ( '/test_client/broken_view/' ) self . fail ( 'Should raise an error' ) except KeyError : pass def test_mail_sending ( self ) : response = self . client . get ( '/test_client/mail_sending_view/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( len ( mail . outbox ) , 1 ) self . assertEqual ( mail . outbox [ 0 ] . subject , 'Test message' ) self . assertEqual ( mail . outbox [ 0 ] . body , 'This is a test email' ) self . assertEqual ( mail . outbox [ 0 ] . from_email , 'from@example.com' ) self . assertEqual ( mail . outbox [ 0 ] . to [ 0 ] , 'first@example.com' ) self . assertEqual ( mail . outbox [ 0 ] . to [ 1 ] , 'second@example.com' ) def test_mass_mail_sending ( self ) : response = self . client . get ( '/test_client/mass_mail_sending_view/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( len ( mail . outbox ) , 2 ) self . assertEqual ( mail . outbox [ 0 ] . subject , 'First Test message' ) self . assertEqual ( mail . outbox [ 0 ] . body , 'This is the first test email' ) self . assertEqual ( mail . outbox [ 0 ] . from_email , 'from@example.com' ) self . assertEqual ( mail . outbox [ 0 ] . to [ 0 ] , 'first@example.com' ) self . assertEqual ( mail . outbox [ 0 ] . to [ 1 ] , 'second@example.com' ) self . assertEqual ( mail . outbox [ 1 ] . subject , 'Second Test message' ) self . assertEqual ( mail . outbox [ 1 ] . body , 'This is the second test email' ) self . assertEqual ( mail . outbox [ 1 ] . from_email , 'from@example.com' ) self . assertEqual ( mail . outbox [ 1 ] . to [ 0 ] , 'second@example.com' ) self . assertEqual ( mail . outbox [ 1 ] . to [ 1 ] , 'third@example.com' ) class CSRFEnabledClientTests ( TestCase ) : def setUp ( self ) : self . old_MIDDLEWARE_CLASSES = settings . MIDDLEWARE_CLASSES csrf_middleware_class = 'django.middleware.csrf.CsrfViewMiddleware' if csrf_middleware_class not in settings . MIDDLEWARE_CLASSES : settings . MIDDLEWARE_CLASSES += ( csrf_middleware_class , ) def tearDown ( self ) : settings . MIDDLEWARE_CLASSES = self . old_MIDDLEWARE_CLASSES def test_csrf_enabled_client ( self ) : csrf_client = Client ( enforce_csrf_checks = True ) response = self . client . post ( '/test_client/post_view/' , { } ) self . assertEqual ( response . status_code , 200 ) response = csrf_client . post ( '/test_client/post_view/' , { } ) self . assertEqual ( response . status_code , 403 ) class CustomTestClient ( Client ) : i_am_customized = "Yes" class CustomTestClientTest ( TestCase ) : client_class = CustomTestClient def test_custom_test_client ( self ) : self . assertEqual ( hasattr ( self . client , "i_am_customized" ) , True ) class RequestFactoryTest ( TestCase ) : def test_request_factory ( self ) : factory = RequestFactory ( ) request = factory . get ( '/somewhere/' ) response = get_view ( request ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , 'This is a test' )
