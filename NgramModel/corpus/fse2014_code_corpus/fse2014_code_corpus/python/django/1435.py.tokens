from __future__ import absolute_import from django import http from django . conf import settings from django . contrib import comments from django . contrib . comments import signals from django . contrib . comments . views . utils import next_redirect , confirmation_view from django . core . exceptions import ObjectDoesNotExist , ValidationError from django . db import models from django . shortcuts import render_to_response from django . template import RequestContext from django . template . loader import render_to_string from django . utils . html import escape from django . views . decorators . csrf import csrf_protect from django . views . decorators . http import require_POST class CommentPostBadRequest ( http . HttpResponseBadRequest ) : def __init__ ( self , why ) : super ( CommentPostBadRequest , self ) . __init__ ( ) if settings . DEBUG : self . content = render_to_string ( "comments/400-debug.html" , { "why" : why } ) @ csrf_protect @ require_POST def post_comment ( request , next = None , using = None ) : data = request . POST . copy ( ) if request . user . is_authenticated ( ) : if not data . get ( 'name' , '' ) : data [ "name" ] = request . user . get_full_name ( ) or request . user . username if not data . get ( 'email' , '' ) : data [ "email" ] = request . user . email next = data . get ( "next" , next ) ctype = data . get ( "content_type" ) object_pk = data . get ( "object_pk" ) if ctype is None or object_pk is None : return CommentPostBadRequest ( "Missing content_type or object_pk field." ) try : model = models . get_model ( * ctype . split ( "." , 1 ) ) target = model . _default_manager . using ( using ) . get ( pk = object_pk ) except TypeError : return CommentPostBadRequest ( % escape ( ctype ) ) except AttributeError : return CommentPostBadRequest ( % escape ( ctype ) ) except ObjectDoesNotExist : return CommentPostBadRequest ( % ( escape ( ctype ) , escape ( object_pk ) ) ) except ( ValueError , ValidationError ) , e : return CommentPostBadRequest ( % ( escape ( ctype ) , escape ( object_pk ) , e . __class__ . __name__ ) ) preview = "preview" in data form = comments . get_form ( ) ( target , data = data ) if form . security_errors ( ) : return CommentPostBadRequest ( % escape ( str ( form . security_errors ( ) ) ) ) if form . errors or preview : template_list = [ % ( model . _meta . app_label , model . _meta . module_name ) , % model . _meta . app_label , % ( model . _meta . app_label , model . _meta . module_name ) , % model . _meta . app_label , , ] return render_to_response ( template_list , { : form . data . get ( "comment" , "" ) , : form , : next , } , RequestContext ( request , { } ) ) comment = form . get_comment_object ( ) comment . ip_address = request . META . get ( "REMOTE_ADDR" , None ) if request . user . is_authenticated ( ) : comment . user = request . user responses = signals . comment_will_be_posted . send ( sender = comment . __class__ , comment = comment , request = request ) for ( receiver , response ) in responses : if response == False : return CommentPostBadRequest ( % receiver . __name__ ) comment . save ( ) signals . comment_was_posted . send ( sender = comment . __class__ , comment = comment , request = request ) return next_redirect ( data , next , comment_done , c = comment . _get_pk_val ( ) ) comment_done = confirmation_view ( template = "comments/posted.html" , doc = """Display a "comment was posted" success page.""" )
