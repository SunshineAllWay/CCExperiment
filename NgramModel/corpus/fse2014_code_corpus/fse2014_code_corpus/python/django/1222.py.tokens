""" A class for storing a tree graph. Primarily used for filter constructs in the ORM. """ import copy class Node ( object ) : default = 'DEFAULT' def __init__ ( self , children = None , connector = None , negated = False ) : self . children = children and children [ : ] or [ ] self . connector = connector or self . default self . subtree_parents = [ ] self . negated = negated def _new_instance ( cls , children = None , connector = None , negated = False ) : obj = Node ( children , connector , negated ) obj . __class__ = cls return obj _new_instance = classmethod ( _new_instance ) def __str__ ( self ) : if self . negated : return '(NOT (%s: %s))' % ( self . connector , ', ' . join ( [ str ( c ) for c in self . children ] ) ) return '(%s: %s)' % ( self . connector , ', ' . join ( [ str ( c ) for c in self . children ] ) ) def __deepcopy__ ( self , memodict ) : obj = Node ( connector = self . connector , negated = self . negated ) obj . __class__ = self . __class__ obj . children = copy . deepcopy ( self . children , memodict ) obj . subtree_parents = copy . deepcopy ( self . subtree_parents , memodict ) return obj def __len__ ( self ) : return len ( self . children ) def __nonzero__ ( self ) : return bool ( self . children ) def __contains__ ( self , other ) : return other in self . children def add ( self , node , conn_type ) : if node in self . children and conn_type == self . connector : return if len ( self . children ) < 2 : self . connector = conn_type if self . connector == conn_type : if isinstance ( node , Node ) and ( node . connector == conn_type or len ( node ) == 1 ) : self . children . extend ( node . children ) else : self . children . append ( node ) else : obj = self . _new_instance ( self . children , self . connector , self . negated ) self . connector = conn_type self . children = [ obj , node ] def negate ( self ) : self . children = [ self . _new_instance ( self . children , self . connector , not self . negated ) ] self . connector = self . default def start_subtree ( self , conn_type ) : if len ( self . children ) == 1 : self . connector = conn_type elif self . connector != conn_type : self . children = [ self . _new_instance ( self . children , self . connector , self . negated ) ] self . connector = conn_type self . negated = False self . subtree_parents . append ( self . __class__ ( self . children , self . connector , self . negated ) ) self . connector = self . default self . negated = False self . children = [ ] def end_subtree ( self ) : obj = self . subtree_parents . pop ( ) node = self . __class__ ( self . children , self . connector ) self . connector = obj . connector self . negated = obj . negated self . children = obj . children self . children . append ( node )
