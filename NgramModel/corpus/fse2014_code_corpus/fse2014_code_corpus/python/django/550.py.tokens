""" Regression tests for the Test Client, especially the customized assertions. """ import os import warnings from django . conf import settings from django . core . exceptions import SuspiciousOperation from django . core . urlresolvers import reverse from django . template import ( TemplateDoesNotExist , TemplateSyntaxError , Context , Template , loader ) import django . template . context from django . test import Client , TestCase from django . test . client import encode_file , RequestFactory from django . test . utils import ContextList , override_settings from django . template . response import SimpleTemplateResponse from django . http import HttpResponse class AssertContainsTests ( TestCase ) : def setUp ( self ) : self . old_templates = settings . TEMPLATE_DIRS settings . TEMPLATE_DIRS = ( os . path . join ( os . path . dirname ( __file__ ) , 'templates' ) , ) def tearDown ( self ) : settings . TEMPLATE_DIRS = self . old_templates def test_contains ( self ) : response = self . client . get ( '/test_client_regress/no_template_view/' ) self . assertNotContains ( response , 'never' ) self . assertContains ( response , 'never' , 0 ) self . assertContains ( response , 'once' ) self . assertContains ( response , 'once' , 1 ) self . assertContains ( response , 'twice' ) self . assertContains ( response , 'twice' , 2 ) try : self . assertContains ( response , 'text' , status_code = 999 ) except AssertionError , e : self . assertIn ( "Couldn't retrieve content: Response code was 200 (expected 999)" , str ( e ) ) try : self . assertContains ( response , 'text' , status_code = 999 , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Couldn't retrieve content: Response code was 200 (expected 999)" , str ( e ) ) try : self . assertNotContains ( response , 'text' , status_code = 999 ) except AssertionError , e : self . assertIn ( "Couldn't retrieve content: Response code was 200 (expected 999)" , str ( e ) ) try : self . assertNotContains ( response , 'text' , status_code = 999 , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Couldn't retrieve content: Response code was 200 (expected 999)" , str ( e ) ) try : self . assertNotContains ( response , 'once' ) except AssertionError , e : self . assertIn ( "Response should not contain 'once'" , str ( e ) ) try : self . assertNotContains ( response , 'once' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Response should not contain 'once'" , str ( e ) ) try : self . assertContains ( response , 'never' , 1 ) except AssertionError , e : self . assertIn ( "Found 0 instances of 'never' in response (expected 1)" , str ( e ) ) try : self . assertContains ( response , 'never' , 1 , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Found 0 instances of 'never' in response (expected 1)" , str ( e ) ) try : self . assertContains ( response , 'once' , 0 ) except AssertionError , e : self . assertIn ( "Found 1 instances of 'once' in response (expected 0)" , str ( e ) ) try : self . assertContains ( response , 'once' , 0 , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Found 1 instances of 'once' in response (expected 0)" , str ( e ) ) try : self . assertContains ( response , 'once' , 2 ) except AssertionError , e : self . assertIn ( "Found 1 instances of 'once' in response (expected 2)" , str ( e ) ) try : self . assertContains ( response , 'once' , 2 , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Found 1 instances of 'once' in response (expected 2)" , str ( e ) ) try : self . assertContains ( response , 'twice' , 1 ) except AssertionError , e : self . assertIn ( "Found 2 instances of 'twice' in response (expected 1)" , str ( e ) ) try : self . assertContains ( response , 'twice' , 1 , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Found 2 instances of 'twice' in response (expected 1)" , str ( e ) ) try : self . assertContains ( response , 'thrice' ) except AssertionError , e : self . assertIn ( "Couldn't find 'thrice' in response" , str ( e ) ) try : self . assertContains ( response , 'thrice' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Couldn't find 'thrice' in response" , str ( e ) ) try : self . assertContains ( response , 'thrice' , 3 ) except AssertionError , e : self . assertIn ( "Found 0 instances of 'thrice' in response (expected 3)" , str ( e ) ) try : self . assertContains ( response , 'thrice' , 3 , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Found 0 instances of 'thrice' in response (expected 3)" , str ( e ) ) def test_unicode_contains ( self ) : r = self . client . get ( '/test_client_regress/check_unicode/' ) self . assertContains ( r , u'さかき' ) self . assertContains ( r , '\xe5\xb3\xa0' . decode ( 'utf-8' ) ) def test_unicode_not_contains ( self ) : r = self . client . get ( '/test_client_regress/check_unicode/' ) self . assertNotContains ( r , u'はたけ' ) self . assertNotContains ( r , '\xe3\x81\xaf\xe3\x81\x9f\xe3\x81\x91' . decode ( 'utf-8' ) ) def test_assert_contains_renders_template_response ( self ) : response = SimpleTemplateResponse ( Template ( 'Hello' ) , status = 200 ) self . assertContains ( response , 'Hello' ) def test_assert_contains_using_non_template_response ( self ) : response = HttpResponse ( 'Hello' ) self . assertContains ( response , 'Hello' ) def test_assert_not_contains_renders_template_response ( self ) : response = SimpleTemplateResponse ( Template ( 'Hello' ) , status = 200 ) self . assertNotContains ( response , 'Bye' ) def test_assert_not_contains_using_non_template_response ( self ) : response = HttpResponse ( 'Hello' ) self . assertNotContains ( response , 'Bye' ) class AssertTemplateUsedTests ( TestCase ) : fixtures = [ 'testdata.json' ] def test_no_context ( self ) : response = self . client . get ( '/test_client_regress/no_template_view/' ) self . assertTemplateNotUsed ( response , 'GET Template' ) try : self . assertTemplateUsed ( response , 'GET Template' ) except AssertionError , e : self . assertIn ( "No templates used to render the response" , str ( e ) ) try : self . assertTemplateUsed ( response , 'GET Template' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: No templates used to render the response" , str ( e ) ) def test_single_context ( self ) : response = self . client . get ( '/test_client/post_view/' , { } ) try : self . assertTemplateNotUsed ( response , 'Empty GET Template' ) except AssertionError , e : self . assertIn ( "Template 'Empty GET Template' was used unexpectedly in rendering the response" , str ( e ) ) try : self . assertTemplateNotUsed ( response , 'Empty GET Template' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Template 'Empty GET Template' was used unexpectedly in rendering the response" , str ( e ) ) try : self . assertTemplateUsed ( response , 'Empty POST Template' ) except AssertionError , e : self . assertIn ( "Template 'Empty POST Template' was not a template used to render the response. Actual template(s) used: Empty GET Template" , str ( e ) ) try : self . assertTemplateUsed ( response , 'Empty POST Template' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Template 'Empty POST Template' was not a template used to render the response. Actual template(s) used: Empty GET Template" , str ( e ) ) def test_multiple_context ( self ) : post_data = { : 'Hello World' , : 'foo@example.com' , : 37 , : 'b' , : ( 'b' , 'c' , 'e' ) } response = self . client . post ( '/test_client/form_view_with_template/' , post_data ) self . assertContains ( response , 'POST data OK' ) try : self . assertTemplateNotUsed ( response , "form_view.html" ) except AssertionError , e : self . assertIn ( "Template 'form_view.html' was used unexpectedly in rendering the response" , str ( e ) ) try : self . assertTemplateNotUsed ( response , 'base.html' ) except AssertionError , e : self . assertIn ( "Template 'base.html' was used unexpectedly in rendering the response" , str ( e ) ) try : self . assertTemplateUsed ( response , "Valid POST Template" ) except AssertionError , e : self . assertIn ( "Template 'Valid POST Template' was not a template used to render the response. Actual template(s) used: form_view.html, base.html" , str ( e ) ) class AssertRedirectsTests ( TestCase ) : def test_redirect_page ( self ) : response = self . client . get ( '/test_client/permanent_redirect_view/' ) try : self . assertRedirects ( response , '/test_client/get_view/' ) except AssertionError , e : self . assertIn ( "Response didn't redirect as expected: Response code was 301 (expected 302)" , str ( e ) ) try : self . assertRedirects ( response , '/test_client/get_view/' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Response didn't redirect as expected: Response code was 301 (expected 302)" , str ( e ) ) def test_lost_query ( self ) : response = self . client . get ( '/test_client/redirect_view/' , { 'var' : 'value' } ) try : self . assertRedirects ( response , '/test_client/get_view/' ) except AssertionError , e : self . assertIn ( "Response redirected to 'http://testserver/test_client/get_view/?var=value', expected 'http://testserver/test_client/get_view/'" , str ( e ) ) try : self . assertRedirects ( response , '/test_client/get_view/' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Response redirected to 'http://testserver/test_client/get_view/?var=value', expected 'http://testserver/test_client/get_view/'" , str ( e ) ) def test_incorrect_target ( self ) : response = self . client . get ( '/test_client/permanent_redirect_view/' ) try : self . assertRedirects ( response , '/test_client/some_view/' ) except AssertionError , e : self . assertIn ( "Response didn't redirect as expected: Response code was 301 (expected 302)" , str ( e ) ) def test_target_page ( self ) : response = self . client . get ( '/test_client/double_redirect_view/' ) try : self . assertRedirects ( response , 'http://testserver/test_client/permanent_redirect_view/' ) except AssertionError , e : self . assertIn ( "Couldn't retrieve redirection page '/test_client/permanent_redirect_view/': response code was 301 (expected 200)" , str ( e ) ) try : self . assertRedirects ( response , 'http://testserver/test_client/permanent_redirect_view/' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Couldn't retrieve redirection page '/test_client/permanent_redirect_view/': response code was 301 (expected 200)" , str ( e ) ) def test_redirect_chain ( self ) : response = self . client . get ( '/test_client_regress/redirects/further/more/' , { } , follow = True ) self . assertRedirects ( response , '/test_client_regress/no_template_view/' , status_code = 301 , target_status_code = 200 ) self . assertEqual ( len ( response . redirect_chain ) , 1 ) self . assertEqual ( response . redirect_chain [ 0 ] , ( 'http://testserver/test_client_regress/no_template_view/' , 301 ) ) def test_multiple_redirect_chain ( self ) : response = self . client . get ( '/test_client_regress/redirects/' , { } , follow = True ) self . assertRedirects ( response , '/test_client_regress/no_template_view/' , status_code = 301 , target_status_code = 200 ) self . assertEqual ( len ( response . redirect_chain ) , 3 ) self . assertEqual ( response . redirect_chain [ 0 ] , ( 'http://testserver/test_client_regress/redirects/further/' , 301 ) ) self . assertEqual ( response . redirect_chain [ 1 ] , ( 'http://testserver/test_client_regress/redirects/further/more/' , 301 ) ) self . assertEqual ( response . redirect_chain [ 2 ] , ( 'http://testserver/test_client_regress/no_template_view/' , 301 ) ) def test_redirect_chain_to_non_existent ( self ) : response = self . client . get ( '/test_client_regress/redirect_to_non_existent_view2/' , { } , follow = True ) self . assertRedirects ( response , '/test_client_regress/non_existent_view/' , status_code = 301 , target_status_code = 404 ) def test_redirect_chain_to_self ( self ) : response = self . client . get ( '/test_client_regress/redirect_to_self/' , { } , follow = True ) self . assertRedirects ( response , '/test_client_regress/redirect_to_self/' , status_code = 301 , target_status_code = 301 ) self . assertEqual ( len ( response . redirect_chain ) , 2 ) def test_circular_redirect ( self ) : response = self . client . get ( '/test_client_regress/circular_redirect_1/' , { } , follow = True ) self . assertRedirects ( response , '/test_client_regress/circular_redirect_2/' , status_code = 301 , target_status_code = 301 ) self . assertEqual ( len ( response . redirect_chain ) , 4 ) def test_redirect_chain_post ( self ) : response = self . client . post ( '/test_client_regress/redirects/' , { 'nothing' : 'to_send' } , follow = True ) self . assertRedirects ( response , , 301 , 200 ) self . assertEqual ( len ( response . redirect_chain ) , 3 ) def test_redirect_chain_head ( self ) : response = self . client . head ( '/test_client_regress/redirects/' , { 'nothing' : 'to_send' } , follow = True ) self . assertRedirects ( response , , 301 , 200 ) self . assertEqual ( len ( response . redirect_chain ) , 3 ) def test_redirect_chain_options ( self ) : response = self . client . options ( '/test_client_regress/redirects/' , { 'nothing' : 'to_send' } , follow = True ) self . assertRedirects ( response , , 301 , 200 ) self . assertEqual ( len ( response . redirect_chain ) , 3 ) def test_redirect_chain_put ( self ) : response = self . client . put ( '/test_client_regress/redirects/' , { 'nothing' : 'to_send' } , follow = True ) self . assertRedirects ( response , , 301 , 200 ) self . assertEqual ( len ( response . redirect_chain ) , 3 ) def test_redirect_chain_delete ( self ) : response = self . client . delete ( '/test_client_regress/redirects/' , { 'nothing' : 'to_send' } , follow = True ) self . assertRedirects ( response , , 301 , 200 ) self . assertEqual ( len ( response . redirect_chain ) , 3 ) def test_redirect_to_different_host ( self ) : response = self . client . get ( '/test_client_regress/redirect_other_host/' , follow = True ) self . assertRedirects ( response , , status_code = 301 , target_status_code = 200 ) self . assertEqual ( response . request . get ( 'wsgi.url_scheme' ) , 'https' ) self . assertEqual ( response . request . get ( 'SERVER_NAME' ) , 'otherserver' ) self . assertEqual ( response . request . get ( 'SERVER_PORT' ) , '8443' ) def test_redirect_chain_on_non_redirect_page ( self ) : response = self . client . get ( '/test_client/get_view/' , follow = True ) try : self . assertRedirects ( response , '/test_client/get_view/' ) except AssertionError , e : self . assertIn ( "Response didn't redirect as expected: Response code was 200 (expected 302)" , str ( e ) ) try : self . assertRedirects ( response , '/test_client/get_view/' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Response didn't redirect as expected: Response code was 200 (expected 302)" , str ( e ) ) def test_redirect_on_non_redirect_page ( self ) : response = self . client . get ( '/test_client/get_view/' ) try : self . assertRedirects ( response , '/test_client/get_view/' ) except AssertionError , e : self . assertIn ( "Response didn't redirect as expected: Response code was 200 (expected 302)" , str ( e ) ) try : self . assertRedirects ( response , '/test_client/get_view/' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: Response didn't redirect as expected: Response code was 200 (expected 302)" , str ( e ) ) class AssertFormErrorTests ( TestCase ) : def test_unknown_form ( self ) : post_data = { : 'Hello World' , : 'not an email address' , : 37 , : 'b' , : ( 'b' , 'c' , 'e' ) } response = self . client . post ( '/test_client/form_view/' , post_data ) self . assertEqual ( response . status_code , 200 ) self . assertTemplateUsed ( response , "Invalid POST Template" ) try : self . assertFormError ( response , 'wrong_form' , 'some_field' , 'Some error.' ) except AssertionError , e : self . assertIn ( "The form 'wrong_form' was not used to render the response" , str ( e ) ) try : self . assertFormError ( response , 'wrong_form' , 'some_field' , 'Some error.' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: The form 'wrong_form' was not used to render the response" , str ( e ) ) def test_unknown_field ( self ) : post_data = { : 'Hello World' , : 'not an email address' , : 37 , : 'b' , : ( 'b' , 'c' , 'e' ) } response = self . client . post ( '/test_client/form_view/' , post_data ) self . assertEqual ( response . status_code , 200 ) self . assertTemplateUsed ( response , "Invalid POST Template" ) try : self . assertFormError ( response , 'form' , 'some_field' , 'Some error.' ) except AssertionError , e : self . assertIn ( "The form 'form' in context 0 does not contain the field 'some_field'" , str ( e ) ) try : self . assertFormError ( response , 'form' , 'some_field' , 'Some error.' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: The form 'form' in context 0 does not contain the field 'some_field'" , str ( e ) ) def test_noerror_field ( self ) : post_data = { : 'Hello World' , : 'not an email address' , : 37 , : 'b' , : ( 'b' , 'c' , 'e' ) } response = self . client . post ( '/test_client/form_view/' , post_data ) self . assertEqual ( response . status_code , 200 ) self . assertTemplateUsed ( response , "Invalid POST Template" ) try : self . assertFormError ( response , 'form' , 'value' , 'Some error.' ) except AssertionError , e : self . assertIn ( "The field 'value' on form 'form' in context 0 contains no errors" , str ( e ) ) try : self . assertFormError ( response , 'form' , 'value' , 'Some error.' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: The field 'value' on form 'form' in context 0 contains no errors" , str ( e ) ) def test_unknown_error ( self ) : post_data = { : 'Hello World' , : 'not an email address' , : 37 , : 'b' , : ( 'b' , 'c' , 'e' ) } response = self . client . post ( '/test_client/form_view/' , post_data ) self . assertEqual ( response . status_code , 200 ) self . assertTemplateUsed ( response , "Invalid POST Template" ) try : self . assertFormError ( response , 'form' , 'email' , 'Some error.' ) except AssertionError , e : self . assertIn ( "The field 'email' on form 'form' in context 0 does not contain the error 'Some error.' (actual errors: [u'Enter a valid e-mail address.'])" , str ( e ) ) try : self . assertFormError ( response , 'form' , 'email' , 'Some error.' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: The field 'email' on form 'form' in context 0 does not contain the error 'Some error.' (actual errors: [u'Enter a valid e-mail address.'])" , str ( e ) ) def test_unknown_nonfield_error ( self ) : post_data = { : 'Hello World' , : 'not an email address' , : 37 , : 'b' , : ( 'b' , 'c' , 'e' ) } response = self . client . post ( '/test_client/form_view/' , post_data ) self . assertEqual ( response . status_code , 200 ) self . assertTemplateUsed ( response , "Invalid POST Template" ) try : self . assertFormError ( response , 'form' , None , 'Some error.' ) except AssertionError , e : self . assertIn ( "The form 'form' in context 0 does not contain the non-field error 'Some error.' (actual errors: )" , str ( e ) ) try : self . assertFormError ( response , 'form' , None , 'Some error.' , msg_prefix = 'abc' ) except AssertionError , e : self . assertIn ( "abc: The form 'form' in context 0 does not contain the non-field error 'Some error.' (actual errors: )" , str ( e ) ) class LoginTests ( TestCase ) : fixtures = [ 'testdata' ] def test_login_different_client ( self ) : c = Client ( ) login = c . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) response = c . get ( "/test_client_regress/login_protected_redirect_view/" ) self . assertRedirects ( response , "http://testserver/test_client_regress/get_view/" ) class SessionEngineTests ( TestCase ) : fixtures = [ 'testdata' ] def setUp ( self ) : self . old_SESSION_ENGINE = settings . SESSION_ENGINE settings . SESSION_ENGINE = 'regressiontests.test_client_regress.session' def tearDown ( self ) : settings . SESSION_ENGINE = self . old_SESSION_ENGINE def test_login ( self ) : login = self . client . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) response = self . client . get ( "/test_client/login_protected_view/" ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . context [ 'user' ] . username , 'testclient' ) class NoSessionsAppInstalled ( SessionEngineTests ) : @ override_settings ( INSTALLED_APPS = tuple ( filter ( lambda a : a != 'django.contrib.sessions' , settings . INSTALLED_APPS ) ) ) def test_session ( self ) : response = self . client . get ( '/test_client_regress/set_session/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( self . client . session [ 'session_var' ] , 'YES' ) class URLEscapingTests ( TestCase ) : def test_simple_argument_get ( self ) : response = self . client . get ( reverse ( 'arg_view' , args = [ 'Slartibartfast' ] ) ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'Howdy, Slartibartfast' ) def test_argument_with_space_get ( self ) : response = self . client . get ( reverse ( 'arg_view' , args = [ 'Arthur Dent' ] ) ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'Hi, Arthur' ) def test_simple_argument_post ( self ) : response = self . client . post ( reverse ( 'arg_view' , args = [ 'Slartibartfast' ] ) ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'Howdy, Slartibartfast' ) def test_argument_with_space_post ( self ) : response = self . client . post ( reverse ( 'arg_view' , args = [ 'Arthur Dent' ] ) ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'Hi, Arthur' ) class ExceptionTests ( TestCase ) : fixtures = [ 'testdata.json' ] def test_exception_cleared ( self ) : login = self . client . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) try : response = self . client . get ( "/test_client_regress/staff_only/" ) self . fail ( "General users should not be able to visit this page" ) except SuspiciousOperation : pass login = self . client . login ( username = 'staff' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) try : self . client . get ( "/test_client_regress/staff_only/" ) except SuspiciousOperation : self . fail ( "Staff should be able to visit this page" ) class TemplateExceptionTests ( TestCase ) : def setUp ( self ) : if loader . template_source_loaders is not None : for template_loader in loader . template_source_loaders : if hasattr ( template_loader , 'reset' ) : template_loader . reset ( ) self . old_templates = settings . TEMPLATE_DIRS settings . TEMPLATE_DIRS = ( ) def tearDown ( self ) : settings . TEMPLATE_DIRS = self . old_templates def test_no_404_template ( self ) : try : response = self . client . get ( "/no_such_view/" ) self . fail ( "Should get error about missing template" ) except TemplateDoesNotExist : pass def test_bad_404_template ( self ) : settings . TEMPLATE_DIRS = ( os . path . join ( os . path . dirname ( __file__ ) , 'bad_templates' ) , ) try : response = self . client . get ( "/no_such_view/" ) self . fail ( "Should get error about syntax error in template" ) except TemplateSyntaxError : pass class UrlconfSubstitutionTests ( TestCase ) : urls = 'regressiontests.test_client_regress.urls' def test_urlconf_was_changed ( self ) : url = reverse ( 'arg_view' , args = [ 'somename' ] ) self . assertEqual ( url , '/arg_view/somename/' ) class zzUrlconfSubstitutionTests ( TestCase ) : def test_urlconf_was_reverted ( self ) : url = reverse ( 'arg_view' , args = [ 'somename' ] ) self . assertEqual ( url , '/test_client_regress/arg_view/somename/' ) class ContextTests ( TestCase ) : fixtures = [ 'testdata' ] def test_single_context ( self ) : response = self . client . get ( "/test_client_regress/request_data/" , data = { 'foo' : 'whiz' } ) self . assertEqual ( response . context . __class__ , Context ) self . assertTrue ( 'get-foo' in response . context ) self . assertEqual ( response . context [ 'get-foo' ] , 'whiz' ) self . assertEqual ( response . context [ 'request-foo' ] , 'whiz' ) self . assertEqual ( response . context [ 'data' ] , 'sausage' ) try : response . context [ 'does-not-exist' ] self . fail ( 'Should not be able to retrieve non-existent key' ) except KeyError , e : self . assertEqual ( e . args [ 0 ] , 'does-not-exist' ) def test_inherited_context ( self ) : response = self . client . get ( "/test_client_regress/request_data_extended/" , data = { 'foo' : 'whiz' } ) self . assertEqual ( response . context . __class__ , ContextList ) self . assertEqual ( len ( response . context ) , 2 ) self . assertTrue ( 'get-foo' in response . context ) self . assertEqual ( response . context [ 'get-foo' ] , 'whiz' ) self . assertEqual ( response . context [ 'request-foo' ] , 'whiz' ) self . assertEqual ( response . context [ 'data' ] , 'bacon' ) try : response . context [ 'does-not-exist' ] self . fail ( 'Should not be able to retrieve non-existent key' ) except KeyError , e : self . assertEqual ( e . args [ 0 ] , 'does-not-exist' ) def test_15368 ( self ) : try : django . template . context . _standard_context_processors = ( lambda request : { 'path' : request . special_path } , ) response = self . client . get ( "/test_client_regress/request_context_view/" ) self . assertContains ( response , 'Path: /test_client_regress/request_context_view/' ) finally : django . template . context . _standard_context_processors = None class SessionTests ( TestCase ) : fixtures = [ 'testdata.json' ] def test_session ( self ) : response = self . client . get ( '/test_client_regress/check_session/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'NO' ) response = self . client . get ( '/test_client_regress/set_session/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'set_session' ) response = self . client . get ( '/test_client_regress/check_session/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'YES' ) login = self . client . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) response = self . client . get ( '/test_client_regress/check_session/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'YES' ) def test_logout ( self ) : self . client . logout ( ) login = self . client . login ( username = 'testclient' , password = 'password' ) self . assertTrue ( login , 'Could not log in' ) self . client . logout ( ) self . client . logout ( ) class RequestMethodTests ( TestCase ) : def test_get ( self ) : response = self . client . get ( '/test_client_regress/request_methods/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'request method: GET' ) def test_post ( self ) : response = self . client . post ( '/test_client_regress/request_methods/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'request method: POST' ) def test_head ( self ) : response = self . client . head ( '/test_client_regress/request_methods/' ) self . assertEqual ( response . status_code , 200 ) self . assertNotEqual ( response . content , 'request method: HEAD' ) self . assertEqual ( response . content , '' ) def test_options ( self ) : response = self . client . options ( '/test_client_regress/request_methods/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'request method: OPTIONS' ) def test_put ( self ) : response = self . client . put ( '/test_client_regress/request_methods/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'request method: PUT' ) def test_delete ( self ) : response = self . client . delete ( '/test_client_regress/request_methods/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'request method: DELETE' ) class RequestMethodStringDataTests ( TestCase ) : def test_post ( self ) : data = u'{"test": "json"}' response = self . client . post ( '/test_client_regress/request_methods/' , data = data , content_type = 'application/json' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'request method: POST' ) def test_put ( self ) : data = u'{"test": "json"}' response = self . client . put ( '/test_client_regress/request_methods/' , data = data , content_type = 'application/json' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . content , 'request method: PUT' ) class QueryStringTests ( TestCase ) : def test_get_like_requests ( self ) : for method_name in ( 'get' , 'head' , 'options' ) : method = getattr ( self . client , method_name ) response = method ( "/test_client_regress/request_data/" , data = { 'foo' : 'whiz' } ) self . assertEqual ( response . context [ 'get-foo' ] , 'whiz' ) self . assertEqual ( response . context [ 'request-foo' ] , 'whiz' ) response = method ( "/test_client_regress/request_data/?foo=whiz" ) self . assertEqual ( response . context [ 'get-foo' ] , 'whiz' ) self . assertEqual ( response . context [ 'request-foo' ] , 'whiz' ) response = method ( "/test_client_regress/request_data/?foo=whiz" , data = { 'foo' : 'bang' } ) self . assertEqual ( response . context [ 'get-foo' ] , 'bang' ) self . assertEqual ( response . context [ 'request-foo' ] , 'bang' ) response = method ( "/test_client_regress/request_data/?foo=whiz" , data = { 'bar' : 'bang' } ) self . assertEqual ( response . context [ 'get-foo' ] , None ) self . assertEqual ( response . context [ 'get-bar' ] , 'bang' ) self . assertEqual ( response . context [ 'request-foo' ] , None ) self . assertEqual ( response . context [ 'request-bar' ] , 'bang' ) def test_post_like_requests ( self ) : response = self . client . post ( "/test_client_regress/request_data/" , data = { 'foo' : 'whiz' } ) self . assertEqual ( response . context [ 'get-foo' ] , None ) self . assertEqual ( response . context [ 'post-foo' ] , 'whiz' ) response = self . client . post ( "/test_client_regress/request_data/?foo=whiz" ) self . assertEqual ( response . context [ 'get-foo' ] , 'whiz' ) self . assertEqual ( response . context [ 'post-foo' ] , None ) self . assertEqual ( response . context [ 'request-foo' ] , 'whiz' ) response = self . client . post ( "/test_client_regress/request_data/?foo=whiz" , data = { 'foo' : 'bang' } ) self . assertEqual ( response . context [ 'get-foo' ] , 'whiz' ) self . assertEqual ( response . context [ 'post-foo' ] , 'bang' ) self . assertEqual ( response . context [ 'request-foo' ] , 'bang' ) response = self . client . post ( "/test_client_regress/request_data/?foo=whiz" , data = { 'bar' : 'bang' } ) self . assertEqual ( response . context [ 'get-foo' ] , 'whiz' ) self . assertEqual ( response . context [ 'get-bar' ] , None ) self . assertEqual ( response . context [ 'post-foo' ] , None ) self . assertEqual ( response . context [ 'post-bar' ] , 'bang' ) self . assertEqual ( response . context [ 'request-foo' ] , 'whiz' ) self . assertEqual ( response . context [ 'request-bar' ] , 'bang' ) class UnicodePayloadTests ( TestCase ) : def test_simple_unicode_payload ( self ) : json = u'{"english": "mountain pass"}' response = self . client . post ( "/test_client_regress/parse_unicode_json/" , json , content_type = "application/json" ) self . assertEqual ( response . content , json ) response = self . client . put ( "/test_client_regress/parse_unicode_json/" , json , content_type = "application/json" ) self . assertEqual ( response . content , json ) def test_unicode_payload_utf8 ( self ) : json = u'{"dog": "собака"}' response = self . client . post ( "/test_client_regress/parse_unicode_json/" , json , content_type = "application/json; charset=utf-8" ) self . assertEqual ( response . content , json . encode ( 'utf-8' ) ) response = self . client . put ( "/test_client_regress/parse_unicode_json/" , json , content_type = "application/json; charset=utf-8" ) self . assertEqual ( response . content , json . encode ( 'utf-8' ) ) def test_unicode_payload_utf16 ( self ) : json = u'{"dog": "собака"}' response = self . client . post ( "/test_client_regress/parse_unicode_json/" , json , content_type = "application/json; charset=utf-16" ) self . assertEqual ( response . content , json . encode ( 'utf-16' ) ) response = self . client . put ( "/test_client_regress/parse_unicode_json/" , json , content_type = "application/json; charset=utf-16" ) self . assertEqual ( response . content , json . encode ( 'utf-16' ) ) def test_unicode_payload_non_utf ( self ) : json = u'{"dog": "собака"}' response = self . client . post ( "/test_client_regress/parse_unicode_json/" , json , content_type = "application/json; charset=koi8-r" ) self . assertEqual ( response . content , json . encode ( 'koi8-r' ) ) response = self . client . put ( "/test_client_regress/parse_unicode_json/" , json , content_type = "application/json; charset=koi8-r" ) self . assertEqual ( response . content , json . encode ( 'koi8-r' ) ) class DummyFile ( object ) : def __init__ ( self , filename ) : self . name = filename def read ( self ) : return 'TEST_FILE_CONTENT' class UploadedFileEncodingTest ( TestCase ) : def test_file_encoding ( self ) : encoded_file = encode_file ( 'TEST_BOUNDARY' , 'TEST_KEY' , DummyFile ( 'test_name.bin' ) ) self . assertEqual ( '--TEST_BOUNDARY' , encoded_file [ 0 ] ) self . assertEqual ( 'Content-Disposition: form-data; name="TEST_KEY"; filename="test_name.bin"' , encoded_file [ 1 ] ) self . assertEqual ( 'TEST_FILE_CONTENT' , encoded_file [ - 1 ] ) def test_guesses_content_type_on_file_encoding ( self ) : self . assertEqual ( 'Content-Type: application/octet-stream' , encode_file ( 'IGNORE' , 'IGNORE' , DummyFile ( "file.bin" ) ) [ 2 ] ) self . assertEqual ( 'Content-Type: text/plain' , encode_file ( 'IGNORE' , 'IGNORE' , DummyFile ( "file.txt" ) ) [ 2 ] ) self . assertIn ( encode_file ( 'IGNORE' , 'IGNORE' , DummyFile ( "file.zip" ) ) [ 2 ] , ( , , , , ) ) self . assertEqual ( 'Content-Type: application/octet-stream' , encode_file ( 'IGNORE' , 'IGNORE' , DummyFile ( "file.unknown" ) ) [ 2 ] ) class RequestHeadersTest ( TestCase ) : def test_client_headers ( self ) : response = self . client . get ( "/test_client_regress/check_headers/" , HTTP_X_ARG_CHECK = 'Testing 123' ) self . assertEqual ( response . content , "HTTP_X_ARG_CHECK: Testing 123" ) self . assertEqual ( response . status_code , 200 ) def test_client_headers_redirect ( self ) : response = self . client . get ( "/test_client_regress/check_headers_redirect/" , follow = True , HTTP_X_ARG_CHECK = 'Testing 123' ) self . assertEqual ( response . content , "HTTP_X_ARG_CHECK: Testing 123" ) self . assertRedirects ( response , '/test_client_regress/check_headers/' , status_code = 301 , target_status_code = 200 ) class ResponseTemplateDeprecationTests ( TestCase ) : def setUp ( self ) : self . save_warnings_state ( ) warnings . filterwarnings ( 'ignore' , category = DeprecationWarning ) def tearDown ( self ) : self . restore_warnings_state ( ) def test_response_template_data ( self ) : response = self . client . get ( "/test_client_regress/request_data/" , data = { 'foo' : 'whiz' } ) self . assertEqual ( response . template . __class__ , Template ) self . assertEqual ( response . template . name , 'base.html' ) def test_response_no_template ( self ) : response = self . client . get ( "/test_client_regress/request_methods/" ) self . assertEqual ( response . template , None ) class ReadLimitedStreamTest ( TestCase ) : def test_body_from_empty_request ( self ) : self . assertEquals ( self . client . get ( "/test_client_regress/body/" ) . content , '' ) def test_read_from_empty_request ( self ) : self . assertEquals ( self . client . get ( "/test_client_regress/read_all/" ) . content , '' ) def test_read_numbytes_from_empty_request ( self ) : self . assertEquals ( self . client . get ( "/test_client_regress/read_buffer/" ) . content , '' ) def test_read_from_nonempty_request ( self ) : payload = 'foobar' self . assertEquals ( self . client . put ( "/test_client_regress/read_all/" , data = payload , content_type = 'text/plain' ) . content , payload ) def test_read_numbytes_from_nonempty_request ( self ) : payload = 'foobar' self . assertEquals ( self . client . put ( "/test_client_regress/read_buffer/" , data = payload , content_type = 'text/plain' ) . content , payload ) class RequestFactoryStateTest ( TestCase ) : def setUp ( self ) : self . factory = RequestFactory ( ) def common_test_that_should_always_pass ( self ) : request = self . factory . get ( '/' ) request . session = { } self . assertFalse ( hasattr ( request , 'user' ) ) def test_request ( self ) : self . common_test_that_should_always_pass ( ) def test_request_after_client ( self ) : self . client . get ( '/' ) self . common_test_that_should_always_pass ( ) def test_request_after_client_2 ( self ) : self . common_test_that_should_always_pass ( ) class RequestFactoryEnvironmentTests ( TestCase ) : def setUp ( self ) : self . factory = RequestFactory ( ) def test_should_set_correct_env_variables ( self ) : request = self . factory . get ( '/path/' ) self . assertEqual ( request . META . get ( 'REMOTE_ADDR' ) , '127.0.0.1' ) self . assertEqual ( request . META . get ( 'SERVER_NAME' ) , 'testserver' ) self . assertEqual ( request . META . get ( 'SERVER_PORT' ) , '80' ) self . assertEqual ( request . META . get ( 'SERVER_PROTOCOL' ) , 'HTTP/1.1' ) self . assertEqual ( request . META . get ( 'SCRIPT_NAME' ) + request . META . get ( 'PATH_INFO' ) , '/path/' )
