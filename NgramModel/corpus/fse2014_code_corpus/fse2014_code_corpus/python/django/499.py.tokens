from __future__ import with_statement , absolute_import import os import re import datetime import urlparse from django . conf import settings from django . core import mail from django . core . exceptions import SuspiciousOperation from django . core . files import temp as tempfile from django . core . urlresolvers import reverse from django . contrib . admin . helpers import ACTION_CHECKBOX_NAME from django . contrib . admin . models import LogEntry , DELETION from django . contrib . admin . sites import LOGIN_FORM_KEY from django . contrib . admin . util import quote from django . contrib . admin . views . main import IS_POPUP_VAR from django . contrib . auth import REDIRECT_FIELD_NAME , admin from django . contrib . auth . models import Group , User , Permission , UNUSABLE_PASSWORD from django . contrib . contenttypes . models import ContentType from django . forms . util import ErrorList from django . template import context as context_module from django . template . response import TemplateResponse from django . test import TestCase from django . utils import formats , translation , unittest from django . utils . cache import get_max_age from django . utils . encoding import iri_to_uri from django . utils . html import escape from django . utils . http import urlencode from django . test . utils import override_settings from . models import ( Article , BarAccount , CustomArticle , EmptyModel , FooAccount , Gallery , ModelWithStringPrimaryKey , Person , Persona , Picture , Podcast , Section , Subscriber , Vodcast , Language , Collector , Widget , Grommet , DooHickey , FancyDoodad , Whatsit , Category , Post , Plot , FunkyTag , Chapter , Book , Promo , WorkHour , Employee , Question , Answer , Inquisition , Actor , FoodDelivery , RowLevelChangePermissionModel , Paper , CoverLetter , Story , OtherStory , ComplexSortedPerson , Parent , Child , AdminOrderedField , AdminOrderedModelMethod , AdminOrderedAdminMethod , AdminOrderedCallable , Report ) ERROR_MESSAGE = "Please enter the correct username and password \ for a staff account. Note that both fields are case-sensitive." class AdminViewBasicTest ( TestCase ) : fixtures = [ 'admin-views-users.xml' , 'admin-views-colors.xml' , , 'admin-views-books.xml' ] urlbit = 'admin' urls = "regressiontests.admin_views.urls" def setUp ( self ) : self . old_USE_I18N = settings . USE_I18N self . old_USE_L10N = settings . USE_L10N self . old_LANGUAGE_CODE = settings . LANGUAGE_CODE self . client . login ( username = 'super' , password = 'secret' ) settings . USE_I18N = True def tearDown ( self ) : settings . USE_I18N = self . old_USE_I18N settings . USE_L10N = self . old_USE_L10N settings . LANGUAGE_CODE = self . old_LANGUAGE_CODE self . client . logout ( ) formats . reset_format_cache ( ) def testTrailingSlashRequired ( self ) : request = self . client . get ( '/test_admin/%s/admin_views/article/add' % self . urlbit ) self . assertRedirects ( request , % self . urlbit , status_code = 301 ) def testBasicAddGet ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/section/add/' % self . urlbit ) self . assertIsInstance ( response , TemplateResponse ) self . assertEqual ( response . status_code , 200 ) def testAddWithGETArgs ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/section/add/' % self . urlbit , { 'name' : 'My Section' } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( in response . content , ) def testBasicEditGet ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/section/1/' % self . urlbit ) self . assertIsInstance ( response , TemplateResponse ) self . assertEqual ( response . status_code , 200 ) def testBasicEditGetStringPK ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/section/abc/' % self . urlbit ) self . assertEqual ( response . status_code , 404 ) def testBasicAddPost ( self ) : post_data = { : u"Another Section" , : u"3" , : u"0" , : u"0" , } response = self . client . post ( '/test_admin/%s/admin_views/section/add/' % self . urlbit , post_data ) self . assertEqual ( response . status_code , 302 ) def testPopupAddPost ( self ) : post_data = { : u'1' , : u'title with a new\nline' , : u'some content' , : u'2010-09-10' , : u'14:55:39' , } response = self . client . post ( '/test_admin/%s/admin_views/article/add/' % self . urlbit , post_data ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , 'dismissAddAnotherPopup' ) self . assertContains ( response , 'title with a new\u000Aline' ) inline_post_data = { : u"Test section" , : u"6" , : u"3" , : u"0" , : u"1" , : u"Norske bostaver æøå skaper problemer" , : u"&lt;p&gt;Middle content&lt;/p&gt;" , : u"2008-03-18" , : u"11:54:58" , : u"1" , : u"2" , : u"Need a title." , : u"&lt;p&gt;Oldest content&lt;/p&gt;" , : u"2000-03-18" , : u"11:54:58" , : u"3" , : u"Need a title." , : u"&lt;p&gt;Newest content&lt;/p&gt;" , : u"2009-03-18" , : u"11:54:58" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , } def testBasicEditPost ( self ) : response = self . client . post ( '/test_admin/%s/admin_views/section/1/' % self . urlbit , self . inline_post_data ) self . assertEqual ( response . status_code , 302 ) def testEditSaveAs ( self ) : post_data = self . inline_post_data . copy ( ) post_data . update ( { : u'Save+as+new' , : u"1" , : u"1" , : u"1" , : u"1" , : u"1" , } ) response = self . client . post ( '/test_admin/%s/admin_views/section/1/' % self . urlbit , post_data ) self . assertEqual ( response . status_code , 302 ) def testChangeListSortingCallable ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/article/' % self . urlbit , { 'o' : 2 } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( response . content . index ( 'Oldest content' ) < response . content . index ( 'Middle content' ) and response . content . index ( 'Middle content' ) < response . content . index ( 'Newest content' ) , ) def testChangeListSortingModel ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/article/' % self . urlbit , { 'o' : '-3' } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( response . content . index ( 'Newest content' ) < response . content . index ( 'Middle content' ) and response . content . index ( 'Middle content' ) < response . content . index ( 'Oldest content' ) , ) def testChangeListSortingModelAdmin ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/article/' % self . urlbit , { 'o' : '4' } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( response . content . index ( 'Oldest content' ) < response . content . index ( 'Middle content' ) and response . content . index ( 'Middle content' ) < response . content . index ( 'Newest content' ) , ) def testChangeListSortingMultiple ( self ) : p1 = Person . objects . create ( name = "Chris" , gender = 1 , alive = True ) p2 = Person . objects . create ( name = "Chris" , gender = 2 , alive = True ) p3 = Person . objects . create ( name = "Bob" , gender = 1 , alive = True ) link = '<a href="%s/' response = self . client . get ( '/test_admin/admin/admin_views/person/' , { 'o' : '1.2' } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( response . content . index ( link % p3 . id ) < response . content . index ( link % p1 . id ) and response . content . index ( link % p1 . id ) < response . content . index ( link % p2 . id ) ) response = self . client . get ( '/test_admin/admin/admin_views/person/' , { 'o' : '-2.1' } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( response . content . index ( link % p2 . id ) < response . content . index ( link % p3 . id ) and response . content . index ( link % p3 . id ) < response . content . index ( link % p1 . id ) ) def testChangeListSortingPreserveQuerySetOrdering ( self ) : p1 = Person . objects . create ( name = "Amy" , gender = 1 , alive = True , age = 80 ) p2 = Person . objects . create ( name = "Bob" , gender = 1 , alive = True , age = 70 ) p3 = Person . objects . create ( name = "Chris" , gender = 2 , alive = False , age = 60 ) link = '<a href="%s/' response = self . client . get ( '/test_admin/admin/admin_views/person/' , { } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( response . content . index ( link % p3 . id ) < response . content . index ( link % p2 . id ) and response . content . index ( link % p2 . id ) < response . content . index ( link % p1 . id ) ) def testChangeListSortingModelMeta ( self ) : l1 = Language . objects . create ( iso = 'ur' , name = 'Urdu' ) l2 = Language . objects . create ( iso = 'ar' , name = 'Arabic' ) link = '<a href="%s/' response = self . client . get ( '/test_admin/admin/admin_views/language/' , { } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( response . content . index ( link % l2 . pk ) < response . content . index ( link % l1 . pk ) ) response = self . client . get ( '/test_admin/admin/admin_views/language/' , { 'o' : '-1' } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( response . content . index ( link % l1 . pk ) < response . content . index ( link % l2 . pk ) ) def testChangeListSortingOverrideModelAdmin ( self ) : dt = datetime . datetime . now ( ) p1 = Podcast . objects . create ( name = "A" , release_date = dt ) p2 = Podcast . objects . create ( name = "B" , release_date = dt - datetime . timedelta ( 10 ) ) link = '<a href="%s/' response = self . client . get ( '/test_admin/admin/admin_views/podcast/' , { } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( response . content . index ( link % p1 . pk ) < response . content . index ( link % p2 . pk ) ) def testMultipleSortSameField ( self ) : dt = datetime . datetime . now ( ) p1 = Podcast . objects . create ( name = "A" , release_date = dt ) p2 = Podcast . objects . create ( name = "B" , release_date = dt - datetime . timedelta ( 10 ) ) link = '<a href="%s/' response = self . client . get ( '/test_admin/admin/admin_views/podcast/' , { } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( response . content . index ( link % p1 . pk ) < response . content . index ( link % p2 . pk ) ) p1 = ComplexSortedPerson . objects . create ( name = "Bob" , age = 10 ) p2 = ComplexSortedPerson . objects . create ( name = "Amy" , age = 20 ) link = '<a href="%s/' response = self . client . get ( '/test_admin/admin/admin_views/complexsortedperson/' , { } ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , '<th scope="col"' , count = 5 ) self . assertContains ( response , 'Name' ) self . assertContains ( response , 'Colored name' ) self . assertTrue ( response . content . index ( 'Name' ) < response . content . index ( 'Colored name' ) ) self . assertTrue ( response . content . index ( link % p2 . id ) < response . content . index ( link % p1 . id ) ) def testSortIndicatorsAdminOrder ( self ) : models = [ ( AdminOrderedField , 'adminorderedfield' ) , ( AdminOrderedModelMethod , 'adminorderedmodelmethod' ) , ( AdminOrderedAdminMethod , 'adminorderedadminmethod' ) , ( AdminOrderedCallable , 'adminorderedcallable' ) ] for model , url in models : a1 = model . objects . create ( stuff = 'The Last Item' , order = 3 ) a2 = model . objects . create ( stuff = 'The First Item' , order = 1 ) a3 = model . objects . create ( stuff = 'The Middle Item' , order = 2 ) response = self . client . get ( '/test_admin/admin/admin_views/%s/' % url , { } ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , '<th scope="col"' , count = 3 , msg_prefix = url ) self . assertEqual ( response . context [ 'cl' ] . get_ordering_field_columns ( ) , { 2 : 'asc' } ) self . assertTrue ( response . content . index ( 'The First Item' ) < response . content . index ( 'The Middle Item' ) < response . content . index ( 'The Last Item' ) ) def testLimitedFilter ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/thing/' % self . urlbit ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( in response . content , ) self . assertFalse ( in response . content , ) def testRelationSpanningFilters ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/chapterxtra1/' % self . urlbit ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , '<div id="changelist-filter">' ) filters = { : dict ( values = [ c . id for c in Chapter . objects . all ( ) ] , test = lambda obj , value : obj . chap . id == value ) , : dict ( values = [ c . title for c in Chapter . objects . all ( ) ] , test = lambda obj , value : obj . chap . title == value ) , : dict ( values = [ b . id for b in Book . objects . all ( ) ] , test = lambda obj , value : obj . chap . book . id == value ) , : dict ( values = [ b . name for b in Book . objects . all ( ) ] , test = lambda obj , value : obj . chap . book . name == value ) , : dict ( values = [ p . id for p in Promo . objects . all ( ) ] , test = lambda obj , value : obj . chap . book . promo_set . filter ( id = value ) . exists ( ) ) , : dict ( values = [ p . name for p in Promo . objects . all ( ) ] , test = lambda obj , value : obj . chap . book . promo_set . filter ( name = value ) . exists ( ) ) , } for filter_path , params in filters . items ( ) : for value in params [ 'values' ] : query_string = urlencode ( { filter_path : value } ) self . assertContains ( response , '<a href="?%s">' % query_string ) filtered_response = self . client . get ( % ( self . urlbit , query_string ) ) self . assertEqual ( filtered_response . status_code , 200 ) for obj in filtered_response . context [ 'cl' ] . query_set . all ( ) : self . assertTrue ( params [ 'test' ] ( obj , value ) ) def testIncorrectLookupParameters ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/thing/' % self . urlbit , { 'notarealfield' : '5' } ) self . assertRedirects ( response , '/test_admin/%s/admin_views/thing/?e=1' % self . urlbit ) response = self . client . get ( '/test_admin/%s/admin_views/thing/' % self . urlbit , { 'notarealfield__whatever' : '5' } ) self . assertRedirects ( response , '/test_admin/%s/admin_views/thing/?e=1' % self . urlbit ) response = self . client . get ( '/test_admin/%s/admin_views/thing/' % self . urlbit , { 'color__id__exact' : 'StringNotInteger!' } ) self . assertRedirects ( response , '/test_admin/%s/admin_views/thing/?e=1' % self . urlbit ) def testIsNullLookups ( self ) : Article . objects . create ( title = "I Could Go Anywhere" , content = "Versatile" , date = datetime . datetime . now ( ) ) response = self . client . get ( '/test_admin/%s/admin_views/article/' % self . urlbit ) self . assertTrue ( '4 articles' in response . content , '"4 articles" missing from response' ) response = self . client . get ( '/test_admin/%s/admin_views/article/' % self . urlbit , { 'section__isnull' : 'false' } ) self . assertTrue ( '3 articles' in response . content , '"3 articles" missing from response' ) response = self . client . get ( '/test_admin/%s/admin_views/article/' % self . urlbit , { 'section__isnull' : 'true' } ) self . assertTrue ( '1 article' in response . content , '"1 article" missing from response' ) def testLogoutAndPasswordChangeURLs ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/article/' % self . urlbit ) self . assertFalse ( '<a href="/test_admin/%s/logout/">' % self . urlbit not in response . content ) self . assertFalse ( '<a href="/test_admin/%s/password_change/">' % self . urlbit not in response . content ) def testNamedGroupFieldChoicesChangeList ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/fabric/' % self . urlbit ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( in response . content and in response . content , ) def testNamedGroupFieldChoicesFilter ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/fabric/' % self . urlbit ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( in response . content , ) self . assertTrue ( in response . content and in response . content , ) def testChangeListNullBooleanDisplay ( self ) : Post . objects . create ( public = None ) response = self . client . get ( "/test_admin/admin/admin_views/post/" ) self . assertTrue ( 'icon-unknown.gif' in response . content ) def testI18NLanguageNonEnglishDefault ( self ) : with self . settings ( LANGUAGE_CODE = 'fr' ) : with translation . override ( 'en-us' ) : response = self . client . get ( '/test_admin/admin/jsi18n/' ) self . assertNotContains ( response , 'Choisir une heure' ) def testI18NLanguageNonEnglishFallback ( self ) : with self . settings ( LANGUAGE_CODE = 'fr' ) : with translation . override ( 'none' ) : response = self . client . get ( '/test_admin/admin/jsi18n/' ) self . assertContains ( response , 'Choisir une heure' ) def testL10NDeactivated ( self ) : with self . settings ( LANGUAGE_CODE = 'ru' , USE_L10N = False ) : with translation . override ( 'none' ) : response = self . client . get ( '/test_admin/admin/jsi18n/' ) self . assertNotContains ( response , '%d.%m.%Y %H:%M:%S' ) self . assertContains ( response , '%Y-%m-%d %H:%M:%S' ) def test_disallowed_filtering ( self ) : self . assertRaises ( SuspiciousOperation , self . client . get , "/test_admin/admin/admin_views/album/?owner__email__startswith=fuzzy" ) try : self . client . get ( "/test_admin/admin/admin_views/thing/?color__value__startswith=red" ) self . client . get ( "/test_admin/admin/admin_views/thing/?color__value=red" ) except SuspiciousOperation : self . fail ( "Filters are allowed if explicitly included in list_filter" ) try : self . client . get ( "/test_admin/admin/admin_views/person/?age__gt=30" ) except SuspiciousOperation : self . fail ( "Filters should be allowed if they involve a local field without the need to whitelist them in list_filter or date_hierarchy." ) e1 = Employee . objects . create ( name = 'Anonymous' , gender = 1 , age = 22 , alive = True , code = '123' ) e2 = Employee . objects . create ( name = 'Visitor' , gender = 2 , age = 19 , alive = True , code = '124' ) WorkHour . objects . create ( datum = datetime . datetime . now ( ) , employee = e1 ) WorkHour . objects . create ( datum = datetime . datetime . now ( ) , employee = e2 ) response = self . client . get ( "/test_admin/admin/admin_views/workhour/" ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , 'employee__person_ptr__exact' ) response = self . client . get ( "/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d" % e1 . pk ) self . assertEqual ( response . status_code , 200 ) def test_allowed_filtering_15103 ( self ) : try : self . client . get ( "/test_admin/admin/admin_views/inquisition/?leader__name=Palin&leader__age=27" ) except SuspiciousOperation : self . fail ( "Filters should be allowed if they are defined on a ForeignKey pointing to this model" ) class AdminViewFormUrlTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ "admin-views-users.xml" ] urlbit = "admin3" def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def testChangeFormUrlHasCorrectValue ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/section/1/' % self . urlbit ) self . assertTrue ( 'form_url' in response . context , msg = 'form_url not present in response.context' ) self . assertEqual ( response . context [ 'form_url' ] , 'pony' ) def test_filter_with_custom_template ( self ) : template_dirs = settings . TEMPLATE_DIRS + ( os . path . join ( os . path . dirname ( __file__ ) , 'templates' ) , ) with self . settings ( TEMPLATE_DIRS = template_dirs ) : response = self . client . get ( "/test_admin/admin/admin_views/color2/" ) self . assertTrue ( 'custom_filter_template.html' in [ t . name for t in response . templates ] ) class AdminJavaScriptTest ( AdminViewBasicTest ) : urls = "regressiontests.admin_views.urls" def testSingleWidgetFirsFieldFocus ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/picture/add/' % self . urlbit ) self . assertContains ( response , ) def testMultiWidgetFirsFieldFocus ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/reservation/add/' % self . urlbit ) self . assertContains ( response , ) def test_js_minified_only_if_debug_is_false ( self ) : with override_settings ( DEBUG = False ) : response = self . client . get ( % self . urlbit ) self . assertNotContains ( response , 'jquery.js' ) self . assertContains ( response , 'jquery.min.js' ) self . assertNotContains ( response , 'prepopulate.js' ) self . assertContains ( response , 'prepopulate.min.js' ) self . assertNotContains ( response , 'actions.js' ) self . assertContains ( response , 'actions.min.js' ) self . assertNotContains ( response , 'collapse.js' ) self . assertContains ( response , 'collapse.min.js' ) self . assertNotContains ( response , 'inlines.js' ) self . assertContains ( response , 'inlines.min.js' ) with override_settings ( DEBUG = True ) : response = self . client . get ( % self . urlbit ) self . assertContains ( response , 'jquery.js' ) self . assertNotContains ( response , 'jquery.min.js' ) self . assertContains ( response , 'prepopulate.js' ) self . assertNotContains ( response , 'prepopulate.min.js' ) self . assertContains ( response , 'actions.js' ) self . assertNotContains ( response , 'actions.min.js' ) self . assertContains ( response , 'collapse.js' ) self . assertNotContains ( response , 'collapse.min.js' ) self . assertContains ( response , 'inlines.js' ) self . assertNotContains ( response , 'inlines.min.js' ) class SaveAsTests ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' , 'admin-views-person.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_save_as_duplication ( self ) : post_data = { '_saveasnew' : '' , 'name' : 'John M' , 'gender' : 1 , 'age' : 42 } response = self . client . post ( '/test_admin/admin/admin_views/person/1/' , post_data ) self . assertEqual ( len ( Person . objects . filter ( name = 'John M' ) ) , 1 ) self . assertEqual ( len ( Person . objects . filter ( id = 1 ) ) , 1 ) def test_save_as_display ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/person/1/' ) self . assertTrue ( response . context [ 'save_as' ] ) post_data = { '_saveasnew' : '' , 'name' : 'John M' , 'gender' : 3 , 'alive' : 'checked' } response = self . client . post ( '/test_admin/admin/admin_views/person/1/' , post_data ) self . assertEqual ( response . context [ 'form_url' ] , '/test_admin/admin/admin_views/person/add/' ) class CustomModelAdminTest ( AdminViewBasicTest ) : urls = "regressiontests.admin_views.urls" urlbit = "admin2" def testCustomAdminSiteLoginForm ( self ) : self . client . logout ( ) response = self . client . get ( '/test_admin/admin2/' ) self . assertIsInstance ( response , TemplateResponse ) self . assertEqual ( response . status_code , 200 ) login = self . client . post ( '/test_admin/admin2/' , { REDIRECT_FIELD_NAME : '/test_admin/admin2/' , LOGIN_FORM_KEY : 1 , : 'customform' , : 'secret' , } ) self . assertIsInstance ( login , TemplateResponse ) self . assertEqual ( login . status_code , 200 ) self . assertContains ( login , 'custom form error' ) def testCustomAdminSiteLoginTemplate ( self ) : self . client . logout ( ) request = self . client . get ( '/test_admin/admin2/' ) self . assertIsInstance ( request , TemplateResponse ) self . assertTemplateUsed ( request , 'custom_admin/login.html' ) self . assertTrue ( 'Hello from a custom login template' in request . content ) def testCustomAdminSiteLogoutTemplate ( self ) : request = self . client . get ( '/test_admin/admin2/logout/' ) self . assertIsInstance ( request , TemplateResponse ) self . assertTemplateUsed ( request , 'custom_admin/logout.html' ) self . assertTrue ( 'Hello from a custom logout template' in request . content ) def testCustomAdminSiteIndexViewAndTemplate ( self ) : request = self . client . get ( '/test_admin/admin2/' ) self . assertIsInstance ( request , TemplateResponse ) self . assertTemplateUsed ( request , 'custom_admin/index.html' ) self . assertTrue ( 'Hello from a custom index template *bar*' in request . content ) def testCustomAdminSitePasswordChangeTemplate ( self ) : request = self . client . get ( '/test_admin/admin2/password_change/' ) self . assertIsInstance ( request , TemplateResponse ) self . assertTemplateUsed ( request , 'custom_admin/password_change_form.html' ) self . assertTrue ( 'Hello from a custom password change form template' in request . content ) def testCustomAdminSitePasswordChangeDoneTemplate ( self ) : request = self . client . get ( '/test_admin/admin2/password_change/done/' ) self . assertIsInstance ( request , TemplateResponse ) self . assertTemplateUsed ( request , 'custom_admin/password_change_done.html' ) self . assertTrue ( 'Hello from a custom password change done template' in request . content ) def testCustomAdminSiteView ( self ) : self . client . login ( username = 'super' , password = 'secret' ) response = self . client . get ( '/test_admin/%s/my_view/' % self . urlbit ) self . assertTrue ( response . content == "Django is a magical pony!" , response . content ) def get_perm ( Model , perm ) : ct = ContentType . objects . get_for_model ( Model ) return Permission . objects . get ( content_type = ct , codename = perm ) class AdminViewPermissionsTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : opts = Article . _meta add_user = User . objects . get ( username = 'adduser' ) add_user . user_permissions . add ( get_perm ( Article , opts . get_add_permission ( ) ) ) change_user = User . objects . get ( username = 'changeuser' ) change_user . user_permissions . add ( get_perm ( Article , opts . get_change_permission ( ) ) ) delete_user = User . objects . get ( username = 'deleteuser' ) delete_user . user_permissions . add ( get_perm ( Article , opts . get_delete_permission ( ) ) ) delete_user . user_permissions . add ( get_perm ( Section , Section . _meta . get_delete_permission ( ) ) ) self . super_login = { REDIRECT_FIELD_NAME : '/test_admin/admin/' , LOGIN_FORM_KEY : 1 , : 'super' , : 'secret' , } self . super_email_login = { REDIRECT_FIELD_NAME : '/test_admin/admin/' , LOGIN_FORM_KEY : 1 , : 'super@example.com' , : 'secret' , } self . super_email_bad_login = { REDIRECT_FIELD_NAME : '/test_admin/admin/' , LOGIN_FORM_KEY : 1 , : 'super@example.com' , : 'notsecret' , } self . adduser_login = { REDIRECT_FIELD_NAME : '/test_admin/admin/' , LOGIN_FORM_KEY : 1 , : 'adduser' , : 'secret' , } self . changeuser_login = { REDIRECT_FIELD_NAME : '/test_admin/admin/' , LOGIN_FORM_KEY : 1 , : 'changeuser' , : 'secret' , } self . deleteuser_login = { REDIRECT_FIELD_NAME : '/test_admin/admin/' , LOGIN_FORM_KEY : 1 , : 'deleteuser' , : 'secret' , } self . joepublic_login = { REDIRECT_FIELD_NAME : '/test_admin/admin/' , LOGIN_FORM_KEY : 1 , : 'joepublic' , : 'secret' , } self . no_username_login = { REDIRECT_FIELD_NAME : '/test_admin/admin/' , LOGIN_FORM_KEY : 1 , : 'secret' , } def testLogin ( self ) : request = self . client . get ( '/test_admin/admin/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/' , self . super_login ) self . assertRedirects ( login , '/test_admin/admin/' ) self . assertFalse ( login . context ) self . client . get ( '/test_admin/admin/logout/' ) request = self . client . get ( '/test_admin/admin/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/' , self . super_email_login ) self . assertContains ( login , "Your e-mail address is not your username" ) login = self . client . post ( '/test_admin/admin/' , self . super_email_bad_login ) self . assertContains ( login , ERROR_MESSAGE ) new_user = User ( username = 'jondoe' , password = 'secret' , email = 'super@example.com' ) new_user . save ( ) login = self . client . post ( '/test_admin/admin/' , self . super_email_login ) self . assertContains ( login , ERROR_MESSAGE ) request = self . client . get ( '/test_admin/admin/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/' , self . adduser_login ) self . assertRedirects ( login , '/test_admin/admin/' ) self . assertFalse ( login . context ) self . client . get ( '/test_admin/admin/logout/' ) request = self . client . get ( '/test_admin/admin/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/' , self . changeuser_login ) self . assertRedirects ( login , '/test_admin/admin/' ) self . assertFalse ( login . context ) self . client . get ( '/test_admin/admin/logout/' ) request = self . client . get ( '/test_admin/admin/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/' , self . deleteuser_login ) self . assertRedirects ( login , '/test_admin/admin/' ) self . assertFalse ( login . context ) self . client . get ( '/test_admin/admin/logout/' ) request = self . client . get ( '/test_admin/admin/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/' , self . joepublic_login ) self . assertEqual ( login . status_code , 200 ) self . assertContains ( login , ERROR_MESSAGE ) request = self . client . get ( '/test_admin/admin/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/' , self . no_username_login ) self . assertEqual ( login . status_code , 200 ) form = login . context [ 0 ] . get ( 'form' ) self . assertEqual ( form . errors [ 'username' ] [ 0 ] , 'This field is required.' ) def testLoginSuccessfullyRedirectsToOriginalUrl ( self ) : request = self . client . get ( '/test_admin/admin/' ) self . assertEqual ( request . status_code , 200 ) query_string = 'the-answer=42' redirect_url = '/test_admin/admin/?%s' % query_string new_next = { REDIRECT_FIELD_NAME : redirect_url } login = self . client . post ( '/test_admin/admin/' , dict ( self . super_login , ** new_next ) , QUERY_STRING = query_string ) self . assertRedirects ( login , redirect_url ) def testAddView ( self ) : add_dict = { 'title' : 'Døm ikke' , : '<p>great article</p>' , : '2008-03-18' , 'date_1' : '10:54:39' , : 1 } self . client . get ( '/test_admin/admin/' ) self . client . post ( '/test_admin/admin/' , self . changeuser_login ) self . assertEqual ( self . client . session . test_cookie_worked ( ) , False ) request = self . client . get ( '/test_admin/admin/admin_views/article/add/' ) self . assertEqual ( request . status_code , 403 ) post = self . client . post ( '/test_admin/admin/admin_views/article/add/' , add_dict ) self . assertEqual ( post . status_code , 403 ) self . assertEqual ( Article . objects . all ( ) . count ( ) , 3 ) self . client . get ( '/test_admin/admin/logout/' ) self . client . get ( '/test_admin/admin/' ) self . client . post ( '/test_admin/admin/' , self . adduser_login ) addpage = self . client . get ( '/test_admin/admin/admin_views/article/add/' ) self . assertEqual ( addpage . status_code , 200 ) change_list_link = '&rsaquo; <a href="/test_admin/admin/admin_views/article/">Articles</a>' self . assertFalse ( change_list_link in addpage . content , ) post = self . client . post ( '/test_admin/admin/admin_views/article/add/' , add_dict ) self . assertRedirects ( post , '/test_admin/admin/' ) self . assertEqual ( Article . objects . all ( ) . count ( ) , 4 ) self . assertEqual ( len ( mail . outbox ) , 1 ) self . assertEqual ( mail . outbox [ 0 ] . subject , 'Greetings from a created object' ) self . client . get ( '/test_admin/admin/logout/' ) self . client . get ( '/test_admin/admin/' ) self . client . post ( '/test_admin/admin/' , self . super_login ) addpage = self . client . get ( '/test_admin/admin/admin_views/article/add/' ) self . assertEqual ( addpage . status_code , 200 ) self . assertFalse ( change_list_link not in addpage . content , ) post = self . client . post ( '/test_admin/admin/admin_views/article/add/' , add_dict ) self . assertRedirects ( post , '/test_admin/admin/admin_views/article/' ) self . assertEqual ( Article . objects . all ( ) . count ( ) , 5 ) self . client . get ( '/test_admin/admin/logout/' ) login = self . client . login ( username = 'joepublic' , password = 'secret' ) self . client . get ( '/test_admin/admin/' ) self . client . post ( '/test_admin/admin/' , self . super_login ) self . assertEqual ( self . client . session . test_cookie_worked ( ) , False ) def testChangeView ( self ) : change_dict = { 'title' : 'Ikke fordømt' , : '<p>edited article</p>' , : '2008-03-18' , 'date_1' : '10:54:39' , : 1 } self . client . get ( '/test_admin/admin/' ) self . client . post ( '/test_admin/admin/' , self . adduser_login ) request = self . client . get ( '/test_admin/admin/admin_views/article/' ) self . assertEqual ( request . status_code , 403 ) request = self . client . get ( '/test_admin/admin/admin_views/article/1/' ) self . assertEqual ( request . status_code , 403 ) post = self . client . post ( '/test_admin/admin/admin_views/article/1/' , change_dict ) self . assertEqual ( post . status_code , 403 ) self . client . get ( '/test_admin/admin/logout/' ) self . client . get ( '/test_admin/admin/' ) self . client . post ( '/test_admin/admin/' , self . changeuser_login ) request = self . client . get ( '/test_admin/admin/admin_views/article/' ) self . assertEqual ( request . status_code , 200 ) request = self . client . get ( '/test_admin/admin/admin_views/article/1/' ) self . assertEqual ( request . status_code , 200 ) post = self . client . post ( '/test_admin/admin/admin_views/article/1/' , change_dict ) self . assertRedirects ( post , '/test_admin/admin/admin_views/article/' ) self . assertEqual ( Article . objects . get ( pk = 1 ) . content , '<p>edited article</p>' ) change_dict [ 'title' ] = '' post = self . client . post ( '/test_admin/admin/admin_views/article/1/' , change_dict ) self . assertEqual ( request . status_code , 200 ) self . assertTrue ( 'Please correct the error below.' in post . content , ) change_dict [ 'content' ] = '' post = self . client . post ( '/test_admin/admin/admin_views/article/1/' , change_dict ) self . assertEqual ( request . status_code , 200 ) self . assertTrue ( 'Please correct the errors below.' in post . content , ) self . client . get ( '/test_admin/admin/logout/' ) RowLevelChangePermissionModel . objects . create ( id = 1 , name = "odd id" ) RowLevelChangePermissionModel . objects . create ( id = 2 , name = "even id" ) for login_dict in [ self . super_login , self . changeuser_login , self . adduser_login , self . deleteuser_login ] : self . client . post ( '/test_admin/admin/' , login_dict ) request = self . client . get ( '/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/' ) self . assertEqual ( request . status_code , 403 ) request = self . client . post ( '/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/' , { 'name' : 'changed' } ) self . assertEqual ( RowLevelChangePermissionModel . objects . get ( id = 1 ) . name , 'odd id' ) self . assertEqual ( request . status_code , 403 ) request = self . client . get ( '/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/' ) self . assertEqual ( request . status_code , 200 ) request = self . client . post ( '/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/' , { 'name' : 'changed' } ) self . assertEqual ( RowLevelChangePermissionModel . objects . get ( id = 2 ) . name , 'changed' ) self . assertRedirects ( request , '/test_admin/admin/' ) self . client . get ( '/test_admin/admin/logout/' ) for login_dict in [ self . joepublic_login , self . no_username_login ] : self . client . post ( '/test_admin/admin/' , login_dict ) request = self . client . get ( '/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/' ) self . assertEqual ( request . status_code , 200 ) self . assertContains ( request , 'login-form' ) request = self . client . post ( '/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/' , { 'name' : 'changed' } ) self . assertEqual ( RowLevelChangePermissionModel . objects . get ( id = 1 ) . name , 'odd id' ) self . assertEqual ( request . status_code , 200 ) self . assertContains ( request , 'login-form' ) request = self . client . get ( '/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/' ) self . assertEqual ( request . status_code , 200 ) self . assertContains ( request , 'login-form' ) request = self . client . post ( '/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/' , { 'name' : 'changed again' } ) self . assertEqual ( RowLevelChangePermissionModel . objects . get ( id = 2 ) . name , 'changed' ) self . assertEqual ( request . status_code , 200 ) self . assertContains ( request , 'login-form' ) self . client . get ( '/test_admin/admin/logout/' ) def testConditionallyShowAddSectionLink ( self ) : url = '/test_admin/admin/admin_views/article/add/' add_link_text = ' class="add-another"' self . client . get ( '/test_admin/admin/' ) self . client . post ( '/test_admin/admin/' , self . adduser_login ) response = self . client . get ( url ) self . assertNotContains ( response , add_link_text ) add_user = User . objects . get ( username = 'adduser' ) perm = get_perm ( Section , Section . _meta . get_add_permission ( ) ) add_user . user_permissions . add ( perm ) response = self . client . get ( url ) self . assertContains ( response , add_link_text ) def testCustomModelAdminTemplates ( self ) : self . client . get ( '/test_admin/admin/' ) self . client . post ( '/test_admin/admin/' , self . super_login ) request = self . client . get ( '/test_admin/admin/admin_views/customarticle/' ) self . assertEqual ( request . status_code , 200 ) self . assertTrue ( "var hello = 'Hello!';" in request . content ) self . assertTemplateUsed ( request , 'custom_admin/change_list.html' ) request = self . client . get ( '/test_admin/admin/admin_views/customarticle/add/' ) self . assertTemplateUsed ( request , 'custom_admin/add_form.html' ) post = self . client . post ( '/test_admin/admin/admin_views/customarticle/add/' , { : '<p>great article</p>' , : '2008-03-18' , : '10:54:39' } ) self . assertRedirects ( post , '/test_admin/admin/admin_views/customarticle/' ) self . assertEqual ( CustomArticle . objects . all ( ) . count ( ) , 1 ) article_pk = CustomArticle . objects . all ( ) [ 0 ] . pk request = self . client . get ( '/test_admin/admin/admin_views/customarticle/%d/' % article_pk ) self . assertTemplateUsed ( request , 'custom_admin/change_form.html' ) request = self . client . get ( '/test_admin/admin/admin_views/customarticle/%d/delete/' % article_pk ) self . assertTemplateUsed ( request , 'custom_admin/delete_confirmation.html' ) request = self . client . post ( '/test_admin/admin/admin_views/customarticle/' , data = { : 0 , : [ 'delete_selected' ] , : [ '1' ] , } ) self . assertTemplateUsed ( request , 'custom_admin/delete_selected_confirmation.html' ) request = self . client . get ( '/test_admin/admin/admin_views/customarticle/%d/history/' % article_pk ) self . assertTemplateUsed ( request , 'custom_admin/object_history.html' ) self . client . get ( '/test_admin/admin/logout/' ) def testDeleteView ( self ) : delete_dict = { 'post' : 'yes' } self . client . get ( '/test_admin/admin/' ) self . client . post ( '/test_admin/admin/' , self . adduser_login ) request = self . client . get ( '/test_admin/admin/admin_views/article/1/delete/' ) self . assertEqual ( request . status_code , 403 ) post = self . client . post ( '/test_admin/admin/admin_views/article/1/delete/' , delete_dict ) self . assertEqual ( post . status_code , 403 ) self . assertEqual ( Article . objects . all ( ) . count ( ) , 3 ) self . client . get ( '/test_admin/admin/logout/' ) self . client . get ( '/test_admin/admin/' ) self . client . post ( '/test_admin/admin/' , self . deleteuser_login ) response = self . client . get ( '/test_admin/admin/admin_views/section/1/delete/' ) self . assertContains ( response , "admin_views/article/1/" ) response = self . client . get ( '/test_admin/admin/admin_views/article/1/delete/' ) self . assertEqual ( response . status_code , 200 ) post = self . client . post ( '/test_admin/admin/admin_views/article/1/delete/' , delete_dict ) self . assertRedirects ( post , '/test_admin/admin/' ) self . assertEqual ( Article . objects . all ( ) . count ( ) , 2 ) self . assertEqual ( len ( mail . outbox ) , 1 ) self . assertEqual ( mail . outbox [ 0 ] . subject , 'Greetings from a deleted object' ) article_ct = ContentType . objects . get_for_model ( Article ) logged = LogEntry . objects . get ( content_type = article_ct , action_flag = DELETION ) self . assertEqual ( logged . object_id , u'1' ) self . client . get ( '/test_admin/admin/logout/' ) def testDisabledPermissionsWhenLoggedIn ( self ) : self . client . login ( username = 'super' , password = 'secret' ) superuser = User . objects . get ( username = 'super' ) superuser . is_active = False superuser . save ( ) response = self . client . get ( '/test_admin/admin/' ) self . assertContains ( response , 'id="login-form"' ) self . assertNotContains ( response , 'Log out' ) response = self . client . get ( '/test_admin/admin/secure-view/' ) self . assertContains ( response , 'id="login-form"' ) class AdminViewsNoUrlTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : opts = Report . _meta change_user = User . objects . get ( username = 'changeuser' ) change_user . user_permissions . add ( get_perm ( Report , opts . get_change_permission ( ) ) ) self . changeuser_login = { REDIRECT_FIELD_NAME : '/test_admin/admin/' , LOGIN_FORM_KEY : 1 , : 'changeuser' , : 'secret' , } def test_no_standard_modeladmin_urls ( self ) : self . client . get ( '/test_admin/admin/' ) self . client . post ( '/test_admin/admin/' , self . changeuser_login ) r = self . client . get ( '/test_admin/admin/' ) self . assertEqual ( r . status_code , 200 ) self . client . get ( '/test_admin/admin/logout/' ) class AdminViewDeletedObjectsTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' , 'deleted-objects.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_nesting ( self ) : pattern = re . compile ( r"""<li>Plot: <a href=".+/admin_views/plot/1/">World Domination</a>\s*<ul>\s*<li>Plot details: <a href=".+/admin_views/plotdetails/1/">almost finished</a>""" ) response = self . client . get ( '/test_admin/admin/admin_views/villain/%s/delete/' % quote ( 1 ) ) self . assertTrue ( pattern . search ( response . content ) ) def test_cyclic ( self ) : one = """<li>Cyclic one: <a href="/test_admin/admin/admin_views/cyclicone/1/">I am recursive</a>""" two = """<li>Cyclic two: <a href="/test_admin/admin/admin_views/cyclictwo/1/">I am recursive too</a>""" response = self . client . get ( '/test_admin/admin/admin_views/cyclicone/%s/delete/' % quote ( 1 ) ) self . assertContains ( response , one , 1 ) self . assertContains ( response , two , 1 ) def test_perms_needed ( self ) : self . client . logout ( ) delete_user = User . objects . get ( username = 'deleteuser' ) delete_user . user_permissions . add ( get_perm ( Plot , Plot . _meta . get_delete_permission ( ) ) ) self . assertTrue ( self . client . login ( username = 'deleteuser' , password = 'secret' ) ) response = self . client . get ( '/test_admin/admin/admin_views/plot/%s/delete/' % quote ( 1 ) ) self . assertContains ( response , "your account doesn't have permission to delete the following types of objects" ) self . assertContains ( response , "<li>plot details</li>" ) def test_protected ( self ) : q = Question . objects . create ( question = "Why?" ) a1 = Answer . objects . create ( question = q , answer = "Because." ) a2 = Answer . objects . create ( question = q , answer = "Yes." ) response = self . client . get ( "/test_admin/admin/admin_views/question/%s/delete/" % quote ( q . pk ) ) self . assertContains ( response , "would require deleting the following protected related objects" ) self . assertContains ( response , '<li>Answer: <a href="/test_admin/admin/admin_views/answer/%s/">Because.</a></li>' % a1 . pk ) self . assertContains ( response , '<li>Answer: <a href="/test_admin/admin/admin_views/answer/%s/">Yes.</a></li>' % a2 . pk ) def test_not_registered ( self ) : should_contain = """<li>Secret hideout: underground bunker""" response = self . client . get ( '/test_admin/admin/admin_views/villain/%s/delete/' % quote ( 1 ) ) self . assertContains ( response , should_contain , 1 ) def test_multiple_fkeys_to_same_model ( self ) : should_contain = """<li>Plot: <a href="/test_admin/admin/admin_views/plot/1/">World Domination</a>""" response = self . client . get ( '/test_admin/admin/admin_views/villain/%s/delete/' % quote ( 1 ) ) self . assertContains ( response , should_contain ) response = self . client . get ( '/test_admin/admin/admin_views/villain/%s/delete/' % quote ( 2 ) ) self . assertContains ( response , should_contain ) def test_multiple_fkeys_to_same_instance ( self ) : should_contain = """<li>Plot: <a href="/test_admin/admin/admin_views/plot/2/">World Peace</a></li>""" response = self . client . get ( '/test_admin/admin/admin_views/villain/%s/delete/' % quote ( 2 ) ) self . assertContains ( response , should_contain , 1 ) def test_inheritance ( self ) : should_contain = [ , , , ] response = self . client . get ( '/test_admin/admin/admin_views/villain/%s/delete/' % quote ( 3 ) ) for should in should_contain : self . assertContains ( response , should , 1 ) response = self . client . get ( '/test_admin/admin/admin_views/supervillain/%s/delete/' % quote ( 3 ) ) for should in should_contain : self . assertContains ( response , should , 1 ) def test_generic_relations ( self ) : plot = Plot . objects . get ( pk = 3 ) tag = FunkyTag . objects . create ( content_object = plot , name = 'hott' ) should_contain = """<li>Funky tag: hott""" response = self . client . get ( '/test_admin/admin/admin_views/plot/%s/delete/' % quote ( 3 ) ) self . assertContains ( response , should_contain ) class AdminViewStringPrimaryKeyTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' , 'string-primary-key.xml' ] def __init__ ( self , * args ) : super ( AdminViewStringPrimaryKeyTest , self ) . __init__ ( * args ) self . pk = """abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 -_.!~*'() ;/?:@&=+$, <>#%" {}|\^[]`""" def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) content_type_pk = ContentType . objects . get_for_model ( ModelWithStringPrimaryKey ) . pk LogEntry . objects . log_action ( 100 , content_type_pk , self . pk , self . pk , 2 , change_message = '' ) def tearDown ( self ) : self . client . logout ( ) def test_get_history_view ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/modelwithstringprimarykey/%s/history/' % quote ( self . pk ) ) self . assertContains ( response , escape ( self . pk ) ) self . assertEqual ( response . status_code , 200 ) def test_get_change_view ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote ( self . pk ) ) self . assertContains ( response , escape ( self . pk ) ) self . assertEqual ( response . status_code , 200 ) def test_changelist_to_changeform_link ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/modelwithstringprimarykey/' ) should_contain = """<th><a href="%s/">%s</a></th></tr>""" % ( quote ( self . pk ) , escape ( self . pk ) ) self . assertContains ( response , should_contain ) def test_recentactions_link ( self ) : response = self . client . get ( '/test_admin/admin/' ) should_contain = """<a href="admin_views/modelwithstringprimarykey/%s/">%s</a>""" % ( quote ( self . pk ) , escape ( self . pk ) ) self . assertContains ( response , should_contain ) def test_recentactions_without_content_type ( self ) : response = self . client . get ( '/test_admin/admin/' ) should_contain = """<a href="admin_views/modelwithstringprimarykey/%s/">%s</a>""" % ( quote ( self . pk ) , escape ( self . pk ) ) self . assertContains ( response , should_contain ) should_contain = "Model with string primary key" self . assertContains ( response , should_contain ) logentry = LogEntry . objects . get ( content_type__name__iexact = should_contain ) logentry . content_type = None logentry . save ( ) counted_presence_before = response . content . count ( should_contain ) response = self . client . get ( '/test_admin/admin/' ) counted_presence_after = response . content . count ( should_contain ) self . assertEqual ( counted_presence_before - 1 , counted_presence_after ) def test_deleteconfirmation_link ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/modelwithstringprimarykey/%s/delete/' % quote ( self . pk ) ) should_contain = """/%s/">%s</a>""" % ( iri_to_uri ( quote ( self . pk ) ) , escape ( self . pk ) ) self . assertContains ( response , should_contain ) def test_url_conflicts_with_add ( self ) : add_model = ModelWithStringPrimaryKey ( id = "i have something to add" ) add_model . save ( ) response = self . client . get ( '/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote ( add_model . pk ) ) should_contain = """<h1>Change model with string primary key</h1>""" self . assertContains ( response , should_contain ) def test_url_conflicts_with_delete ( self ) : delete_model = ModelWithStringPrimaryKey ( id = "delete" ) delete_model . save ( ) response = self . client . get ( '/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote ( delete_model . pk ) ) should_contain = """<h1>Change model with string primary key</h1>""" self . assertContains ( response , should_contain ) def test_url_conflicts_with_history ( self ) : history_model = ModelWithStringPrimaryKey ( id = "history" ) history_model . save ( ) response = self . client . get ( '/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote ( history_model . pk ) ) should_contain = """<h1>Change model with string primary key</h1>""" self . assertContains ( response , should_contain ) class SecureViewTests ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . super_login = { LOGIN_FORM_KEY : 1 , REDIRECT_FIELD_NAME : '/test_admin/admin/secure-view/' , : 'super' , : 'secret' , } self . super_email_login = { LOGIN_FORM_KEY : 1 , REDIRECT_FIELD_NAME : '/test_admin/admin/secure-view/' , : 'super@example.com' , : 'secret' , } self . super_email_bad_login = { LOGIN_FORM_KEY : 1 , REDIRECT_FIELD_NAME : '/test_admin/admin/secure-view/' , : 'super@example.com' , : 'notsecret' , } self . adduser_login = { LOGIN_FORM_KEY : 1 , REDIRECT_FIELD_NAME : '/test_admin/admin/secure-view/' , : 'adduser' , : 'secret' , } self . changeuser_login = { LOGIN_FORM_KEY : 1 , REDIRECT_FIELD_NAME : '/test_admin/admin/secure-view/' , : 'changeuser' , : 'secret' , } self . deleteuser_login = { LOGIN_FORM_KEY : 1 , REDIRECT_FIELD_NAME : '/test_admin/admin/secure-view/' , : 'deleteuser' , : 'secret' , } self . joepublic_login = { LOGIN_FORM_KEY : 1 , REDIRECT_FIELD_NAME : '/test_admin/admin/secure-view/' , : 'joepublic' , : 'secret' , } def tearDown ( self ) : self . client . logout ( ) def test_secure_view_shows_login_if_not_logged_in ( self ) : response = self . client . get ( '/test_admin/admin/secure-view/' ) self . assertTemplateUsed ( response , 'admin/login.html' ) def test_secure_view_login_successfully_redirects_to_original_url ( self ) : request = self . client . get ( '/test_admin/admin/secure-view/' ) self . assertEqual ( request . status_code , 200 ) query_string = 'the-answer=42' redirect_url = '/test_admin/admin/secure-view/?%s' % query_string new_next = { REDIRECT_FIELD_NAME : redirect_url } login = self . client . post ( '/test_admin/admin/secure-view/' , dict ( self . super_login , ** new_next ) , QUERY_STRING = query_string ) self . assertRedirects ( login , redirect_url ) def test_staff_member_required_decorator_works_as_per_admin_login ( self ) : request = self . client . get ( '/test_admin/admin/secure-view/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/secure-view/' , self . super_login ) self . assertRedirects ( login , '/test_admin/admin/secure-view/' ) self . assertFalse ( login . context ) self . client . get ( '/test_admin/admin/logout/' ) self . assertEqual ( self . client . session . test_cookie_worked ( ) , False ) request = self . client . get ( '/test_admin/admin/secure-view/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/secure-view/' , self . super_email_login ) self . assertContains ( login , "Your e-mail address is not your username" ) login = self . client . post ( '/test_admin/admin/secure-view/' , self . super_email_bad_login ) self . assertContains ( login , ERROR_MESSAGE ) new_user = User ( username = 'jondoe' , password = 'secret' , email = 'super@example.com' ) new_user . save ( ) login = self . client . post ( '/test_admin/admin/secure-view/' , self . super_email_login ) self . assertContains ( login , ERROR_MESSAGE ) request = self . client . get ( '/test_admin/admin/secure-view/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/secure-view/' , self . adduser_login ) self . assertRedirects ( login , '/test_admin/admin/secure-view/' ) self . assertFalse ( login . context ) self . client . get ( '/test_admin/admin/logout/' ) request = self . client . get ( '/test_admin/admin/secure-view/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/secure-view/' , self . changeuser_login ) self . assertRedirects ( login , '/test_admin/admin/secure-view/' ) self . assertFalse ( login . context ) self . client . get ( '/test_admin/admin/logout/' ) request = self . client . get ( '/test_admin/admin/secure-view/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/secure-view/' , self . deleteuser_login ) self . assertRedirects ( login , '/test_admin/admin/secure-view/' ) self . assertFalse ( login . context ) self . client . get ( '/test_admin/admin/logout/' ) request = self . client . get ( '/test_admin/admin/secure-view/' ) self . assertEqual ( request . status_code , 200 ) login = self . client . post ( '/test_admin/admin/secure-view/' , self . joepublic_login ) self . assertEqual ( login . status_code , 200 ) self . assertContains ( login , ERROR_MESSAGE ) login = self . client . login ( username = 'joepublic' , password = 'secret' ) self . client . get ( '/test_admin/admin/secure-view/' ) self . client . post ( '/test_admin/admin/secure-view/' , self . super_login ) self . assertEqual ( self . client . session . test_cookie_worked ( ) , False ) def test_shortcut_view_only_available_to_staff ( self ) : user_ctype = ContentType . objects . get_for_model ( User ) user = User . objects . get ( username = 'super' ) shortcut_url = "/test_admin/admin/r/%s/%s/" % ( user_ctype . pk , user . pk ) response = self . client . get ( shortcut_url , follow = False ) self . assertTemplateUsed ( response , 'admin/login.html' ) self . client . login ( username = 'super' , password = 'secret' ) response = self . client . get ( shortcut_url , follow = False ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( response [ 'Location' ] , 'http://example.com/users/super/' ) class AdminViewUnicodeTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-unicode.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def testUnicodeEdit ( self ) : post_data = { : u"Test lærdommer" , : u"6" , : u"3" , : u"0" , : u"1" , : u"Norske bostaver æøå skaper problemer" , : u"&lt;p&gt;Svært frustrerende med UnicodeDecodeError&lt;/p&gt;" , : u"2" , : u"Kjærlighet." , : u"&lt;p&gt;La kjærligheten til de lidende seire.&lt;/p&gt;" , : u"3" , : u"Need a title." , : u"&lt;p&gt;Newest content&lt;/p&gt;" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , : u"" , } response = self . client . post ( '/test_admin/admin/admin_views/book/1/' , post_data ) self . assertEqual ( response . status_code , 302 ) def testUnicodeDelete ( self ) : delete_dict = { 'post' : 'yes' } response = self . client . get ( '/test_admin/admin/admin_views/book/1/delete/' ) self . assertEqual ( response . status_code , 200 ) response = self . client . post ( '/test_admin/admin/admin_views/book/1/delete/' , delete_dict ) self . assertRedirects ( response , '/test_admin/admin/admin_views/book/' ) class AdminViewListEditable ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' , 'admin-views-person.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_inheritance ( self ) : Podcast . objects . create ( name = "This Week in Django" , release_date = datetime . date . today ( ) ) response = self . client . get ( '/test_admin/admin/admin_views/podcast/' ) self . assertEqual ( response . status_code , 200 ) def test_inheritance_2 ( self ) : Vodcast . objects . create ( name = "This Week in Django" , released = True ) response = self . client . get ( '/test_admin/admin/admin_views/vodcast/' ) self . assertEqual ( response . status_code , 200 ) def test_custom_pk ( self ) : Language . objects . create ( iso = 'en' , name = 'English' , english_name = 'English' ) response = self . client . get ( '/test_admin/admin/admin_views/language/' ) self . assertEqual ( response . status_code , 200 ) def test_changelist_input_html ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/person/' ) self . assertEqual ( response . content . count ( "<input" ) , 18 ) self . assertEqual ( response . content . count ( "<select" ) , 4 ) def test_post_messages ( self ) : data = { : "3" , : "3" , : "0" , : "1" , : "1" , : "2" , : "2" , : "checked" , : "1" , : "3" , : "Save" , } response = self . client . post ( '/test_admin/admin/admin_views/person/' , data , follow = True ) self . assertEqual ( len ( response . context [ 'messages' ] ) , 1 ) def test_post_submission ( self ) : data = { : "3" , : "3" , : "0" , : "1" , : "1" , : "2" , : "2" , : "checked" , : "1" , : "3" , : "Save" , } self . client . post ( '/test_admin/admin/admin_views/person/' , data ) self . assertEqual ( Person . objects . get ( name = "John Mauchly" ) . alive , False ) self . assertEqual ( Person . objects . get ( name = "Grace Hopper" ) . gender , 2 ) data = { : "2" , : "2" , : "0" , : "1" , : "1" , : "checked" , : "3" , : "1" , : "checked" , : "Save" , } self . client . post ( '/test_admin/admin/admin_views/person/?gender__exact=1' , data ) self . assertEqual ( Person . objects . get ( name = "John Mauchly" ) . alive , True ) data = { : "1" , : "1" , : "0" , : "1" , : "1" , : "Save" , } self . client . post ( '/test_admin/admin/admin_views/person/?q=john' , data ) self . assertEqual ( Person . objects . get ( name = "John Mauchly" ) . alive , False ) def test_non_field_errors ( self ) : fd1 = FoodDelivery . objects . create ( reference = '123' , driver = 'bill' , restaurant = 'thai' ) fd2 = FoodDelivery . objects . create ( reference = '456' , driver = 'bill' , restaurant = 'india' ) fd3 = FoodDelivery . objects . create ( reference = '789' , driver = 'bill' , restaurant = 'pizza' ) data = { : "3" , : "3" , : "0" , : str ( fd1 . id ) , : "123" , : "bill" , : "thai" , : str ( fd2 . id ) , : "456" , : "bill" , : "thai" , : str ( fd3 . id ) , : "789" , : "bill" , : "pizza" , : "Save" , } response = self . client . post ( '/test_admin/admin/admin_views/fooddelivery/' , data ) self . assertContains ( response , '<tr><td colspan="4"><ul class="errorlist"><li>Food delivery with this Driver and Restaurant already exists.</li></ul></td></tr>' , 1 , html = True ) data = { : "3" , : "3" , : "0" , : str ( fd1 . id ) , : "123" , : "bill" , : "thai" , : str ( fd2 . id ) , : "456" , : "bill" , : "thai" , : str ( fd3 . id ) , : "789" , : "bill" , : "thai" , : "Save" , } response = self . client . post ( '/test_admin/admin/admin_views/fooddelivery/' , data ) self . assertContains ( response , '<tr><td colspan="4"><ul class="errorlist"><li>Food delivery with this Driver and Restaurant already exists.</li></ul></td></tr>' , 2 , html = True ) def test_non_form_errors ( self ) : data = { : "1" , : "1" , : "0" , : "2" , : "1" , : "2" , : "Save" , } response = self . client . post ( '/test_admin/admin/admin_views/person/' , data ) self . assertContains ( response , "Grace is not a Zombie" ) def test_non_form_errors_is_errorlist ( self ) : data = { : "1" , : "1" , : "0" , : "2" , : "1" , : "2" , : "Save" , } response = self . client . post ( '/test_admin/admin/admin_views/person/' , data ) non_form_errors = response . context [ 'cl' ] . formset . non_form_errors ( ) self . assertTrue ( isinstance ( non_form_errors , ErrorList ) ) self . assertEqual ( str ( non_form_errors ) , str ( ErrorList ( [ "Grace is not a Zombie" ] ) ) ) def test_list_editable_ordering ( self ) : collector = Collector . objects . create ( id = 1 , name = "Frederick Clegg" ) Category . objects . create ( id = 1 , order = 1 , collector = collector ) Category . objects . create ( id = 2 , order = 2 , collector = collector ) Category . objects . create ( id = 3 , order = 0 , collector = collector ) Category . objects . create ( id = 4 , order = 0 , collector = collector ) data = { : "4" , : "4" , : "0" , : "14" , : "1" , : "1" , : "13" , : "2" , : "1" , : "1" , : "3" , : "1" , : "0" , : "4" , : "1" , : "Save" , } response = self . client . post ( '/test_admin/admin/admin_views/category/' , data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Category . objects . get ( id = 1 ) . order , 14 ) self . assertEqual ( Category . objects . get ( id = 2 ) . order , 13 ) self . assertEqual ( Category . objects . get ( id = 3 ) . order , 1 ) self . assertEqual ( Category . objects . get ( id = 4 ) . order , 0 ) def test_list_editable_action_submit ( self ) : data = { : "3" , : "3" , : "0" , : "1" , : "1" , : "2" , : "2" , : "checked" , : "1" , : "3" , : "0" , : [ u'3' ] , : [ u'' , u'delete_selected' ] , } self . client . post ( '/test_admin/admin/admin_views/person/' , data ) self . assertEqual ( Person . objects . get ( name = "John Mauchly" ) . alive , True ) self . assertEqual ( Person . objects . get ( name = "Grace Hopper" ) . gender , 1 ) def test_list_editable_action_choices ( self ) : data = { : "3" , : "3" , : "0" , : "1" , : "1" , : "2" , : "2" , : "checked" , : "1" , : "3" , : "Save" , : [ u'1' ] , : [ u'' , u'delete_selected' ] , } self . client . post ( '/test_admin/admin/admin_views/person/' , data ) self . assertEqual ( Person . objects . get ( name = "John Mauchly" ) . alive , False ) self . assertEqual ( Person . objects . get ( name = "Grace Hopper" ) . gender , 2 ) def test_list_editable_popup ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/person/' ) self . assertNotEqual ( response . context [ 'cl' ] . list_editable , ( ) ) response = self . client . get ( '/test_admin/admin/admin_views/person/?%s' % IS_POPUP_VAR ) self . assertEqual ( response . context [ 'cl' ] . list_editable , ( ) ) def test_pk_hidden_fields ( self ) : story1 = Story . objects . create ( title = 'The adventures of Guido' , content = 'Once upon a time in Djangoland...' ) story2 = Story . objects . create ( title = 'Crouching Tiger, Hidden Python' , content = 'The Python was sneaking into...' ) response = self . client . get ( '/test_admin/admin/admin_views/story/' ) self . assertContains ( response , 'id="id_form-0-id"' , 1 ) self . assertContains ( response , 'id="id_form-1-id"' , 1 ) self . assertContains ( response , '<div class="hiddenfields">\n<input type="hidden" name="form-0-id" value="%d" id="id_form-0-id" /><input type="hidden" name="form-1-id" value="%d" id="id_form-1-id" />\n</div>' % ( story2 . id , story1 . id ) , html = True ) self . assertContains ( response , '<td>%d</td>' % story1 . id , 1 ) self . assertContains ( response , '<td>%d</td>' % story2 . id , 1 ) def test_pk_hidden_fields_with_list_display_links ( self ) : story1 = OtherStory . objects . create ( title = 'The adventures of Guido' , content = 'Once upon a time in Djangoland...' ) story2 = OtherStory . objects . create ( title = 'Crouching Tiger, Hidden Python' , content = 'The Python was sneaking into...' ) response = self . client . get ( '/test_admin/admin/admin_views/otherstory/' ) self . assertContains ( response , 'id="id_form-0-id"' , 1 ) self . assertContains ( response , 'id="id_form-1-id"' , 1 ) self . assertContains ( response , '<div class="hiddenfields">\n<input type="hidden" name="form-0-id" value="%d" id="id_form-0-id" /><input type="hidden" name="form-1-id" value="%d" id="id_form-1-id" />\n</div>' % ( story2 . id , story1 . id ) , html = True ) self . assertContains ( response , '<th><a href="%d/">%d</a></th>' % ( story1 . id , story1 . id ) , 1 ) self . assertContains ( response , '<th><a href="%d/">%d</a></th>' % ( story2 . id , story2 . id ) , 1 ) class AdminSearchTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users' , 'multiple-child-classes' , ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_search_on_sibling_models ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/recommendation/?q=bar' ) self . assertContains ( response , "\n1 recommendation\n" ) def test_with_fk_to_field ( self ) : from django . contrib . admin . views . main import TO_FIELD_VAR response = self . client . get ( '/test_admin/admin/auth/user/?q=joe&%s=username' % TO_FIELD_VAR ) self . assertContains ( response , "\n1 user\n" ) self . assertContains ( response , '<input type="hidden" name="t" value="username"/>' , html = True ) def test_exact_matches ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/recommendation/?q=bar' ) self . assertContains ( response , "\n1 recommendation\n" ) response = self . client . get ( '/test_admin/admin/admin_views/recommendation/?q=ba' ) self . assertContains ( response , "\n0 recommendations\n" ) def test_beginning_matches ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/person/?q=Gui' ) self . assertContains ( response , "\n1 person\n" ) self . assertContains ( response , "Guido" ) response = self . client . get ( '/test_admin/admin/admin_views/person/?q=uido' ) self . assertContains ( response , "\n0 persons\n" ) self . assertNotContains ( response , "Guido" ) class AdminInheritedInlinesTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' , ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def testInline ( self ) : foo_user = u"foo username" bar_user = u"bar username" name_re = re . compile ( 'name="(.*?)"' ) response = self . client . get ( '/test_admin/admin/admin_views/persona/add/' ) names = name_re . findall ( response . content ) self . assertEqual ( len ( names ) , len ( set ( names ) ) ) post_data = { : u"Test Name" , : u"1" , : u"0" , : u"0" , : foo_user , : u"1" , : u"0" , : u"0" , : bar_user , } response = self . client . post ( '/test_admin/admin/admin_views/persona/add/' , post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Persona . objects . count ( ) , 1 ) self . assertEqual ( FooAccount . objects . count ( ) , 1 ) self . assertEqual ( BarAccount . objects . count ( ) , 1 ) self . assertEqual ( FooAccount . objects . all ( ) [ 0 ] . username , foo_user ) self . assertEqual ( BarAccount . objects . all ( ) [ 0 ] . username , bar_user ) self . assertEqual ( Persona . objects . all ( ) [ 0 ] . accounts . count ( ) , 2 ) persona_id = Persona . objects . all ( ) [ 0 ] . id foo_id = FooAccount . objects . all ( ) [ 0 ] . id bar_id = BarAccount . objects . all ( ) [ 0 ] . id response = self . client . get ( '/test_admin/admin/admin_views/persona/%d/' % persona_id ) names = name_re . findall ( response . content ) self . assertEqual ( len ( names ) , len ( set ( names ) ) ) post_data = { : u"Test Name" , : "2" , : u"1" , : u"0" , : "%s-1" % foo_user , : str ( foo_id ) , : str ( persona_id ) , : u"2" , : u"1" , : u"0" , : "%s-1" % bar_user , : str ( bar_id ) , : str ( persona_id ) , } response = self . client . post ( '/test_admin/admin/admin_views/persona/%d/' % persona_id , post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Persona . objects . count ( ) , 1 ) self . assertEqual ( FooAccount . objects . count ( ) , 1 ) self . assertEqual ( BarAccount . objects . count ( ) , 1 ) self . assertEqual ( FooAccount . objects . all ( ) [ 0 ] . username , "%s-1" % foo_user ) self . assertEqual ( BarAccount . objects . all ( ) [ 0 ] . username , "%s-1" % bar_user ) self . assertEqual ( Persona . objects . all ( ) [ 0 ] . accounts . count ( ) , 2 ) class AdminActionsTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' , 'admin-views-actions.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_model_admin_custom_action ( self ) : action_data = { ACTION_CHECKBOX_NAME : [ 1 ] , : 'mail_admin' , : 0 , } response = self . client . post ( '/test_admin/admin/admin_views/subscriber/' , action_data ) self . assertEqual ( len ( mail . outbox ) , 1 ) self . assertEqual ( mail . outbox [ 0 ] . subject , 'Greetings from a ModelAdmin action' ) def test_model_admin_default_delete_action ( self ) : action_data = { ACTION_CHECKBOX_NAME : [ 1 , 2 ] , : 'delete_selected' , : 0 , } delete_confirmation_data = { ACTION_CHECKBOX_NAME : [ 1 , 2 ] , : 'delete_selected' , : 'yes' , } confirmation = self . client . post ( '/test_admin/admin/admin_views/subscriber/' , action_data ) self . assertIsInstance ( confirmation , TemplateResponse ) self . assertContains ( confirmation , "Are you sure you want to delete the selected subscribers?" ) self . assertTrue ( confirmation . content . count ( ACTION_CHECKBOX_NAME ) == 2 ) response = self . client . post ( '/test_admin/admin/admin_views/subscriber/' , delete_confirmation_data ) self . assertEqual ( Subscriber . objects . count ( ) , 0 ) def test_non_localized_pk ( self ) : self . old_USE_THOUSAND_SEPARATOR = settings . USE_THOUSAND_SEPARATOR self . old_USE_L10N = settings . USE_L10N settings . USE_THOUSAND_SEPARATOR = True settings . USE_L10N = True subscriber = Subscriber . objects . get ( id = 1 ) subscriber . id = 9999 subscriber . save ( ) action_data = { ACTION_CHECKBOX_NAME : [ 9999 , 2 ] , : 'delete_selected' , : 0 , } response = self . client . post ( '/test_admin/admin/admin_views/subscriber/' , action_data ) self . assertTemplateUsed ( response , 'admin/delete_selected_confirmation.html' ) self . assertTrue ( 'value="9999"' in response . content and 'value="2"' in response . content ) settings . USE_THOUSAND_SEPARATOR = self . old_USE_THOUSAND_SEPARATOR settings . USE_L10N = self . old_USE_L10N def test_model_admin_default_delete_action_protected ( self ) : q1 = Question . objects . create ( question = "Why?" ) a1 = Answer . objects . create ( question = q1 , answer = "Because." ) a2 = Answer . objects . create ( question = q1 , answer = "Yes." ) q2 = Question . objects . create ( question = "Wherefore?" ) action_data = { ACTION_CHECKBOX_NAME : [ q1 . pk , q2 . pk ] , : 'delete_selected' , : 0 , } response = self . client . post ( "/test_admin/admin/admin_views/question/" , action_data ) self . assertContains ( response , "would require deleting the following protected related objects" ) self . assertContains ( response , '<li>Answer: <a href="/test_admin/admin/admin_views/answer/%s/">Because.</a></li>' % a1 . pk , html = True ) self . assertContains ( response , '<li>Answer: <a href="/test_admin/admin/admin_views/answer/%s/">Yes.</a></li>' % a2 . pk , html = True ) def test_custom_function_mail_action ( self ) : action_data = { ACTION_CHECKBOX_NAME : [ 1 ] , : 'external_mail' , : 0 , } response = self . client . post ( '/test_admin/admin/admin_views/externalsubscriber/' , action_data ) self . assertEqual ( len ( mail . outbox ) , 1 ) self . assertEqual ( mail . outbox [ 0 ] . subject , 'Greetings from a function action' ) def test_custom_function_action_with_redirect ( self ) : action_data = { ACTION_CHECKBOX_NAME : [ 1 ] , : 'redirect_to' , : 0 , } response = self . client . post ( '/test_admin/admin/admin_views/externalsubscriber/' , action_data ) self . assertEqual ( response . status_code , 302 ) def test_default_redirect ( self ) : action_data = { ACTION_CHECKBOX_NAME : [ 1 ] , : 'external_mail' , : 0 , } url = '/test_admin/admin/admin_views/externalsubscriber/?o=1' response = self . client . post ( url , action_data ) self . assertRedirects ( response , url ) def test_actions_ordering ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/externalsubscriber/' ) self . assertContains ( response , '''<label>Action: <select name="action"> <option value="" selected="selected">---------</option> <option value="delete_selected">Delete selected external subscribers</option> <option value="redirect_to">Redirect to (Awesome action)</option> <option value="external_mail">External mail (Another awesome action)</option> </select>''' , html = True ) def test_model_without_action ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/oldsubscriber/' ) self . assertEqual ( response . context [ "action_form" ] , None ) self . assertTrue ( not in response . content , ) self . assertTrue ( 'action-checkbox-column' not in response . content , ) def test_model_without_action_still_has_jquery ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/oldsubscriber/' ) self . assertEqual ( response . context [ "action_form" ] , None ) self . assertTrue ( 'jquery.min.js' in response . content , ) def test_action_column_class ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/subscriber/' ) self . assertNotEqual ( response . context [ "action_form" ] , None ) self . assertTrue ( 'action-checkbox-column' in response . content , ) def test_multiple_actions_form ( self ) : action_data = { ACTION_CHECKBOX_NAME : [ 1 ] , : [ 'external_mail' , 'delete_selected' ] , : 0 } response = self . client . post ( '/test_admin/admin/admin_views/externalsubscriber/' , action_data ) self . assertEqual ( len ( mail . outbox ) , 1 ) self . assertEqual ( mail . outbox [ 0 ] . subject , 'Greetings from a function action' ) def test_user_message_on_none_selected ( self ) : action_data = { ACTION_CHECKBOX_NAME : [ ] , : 'delete_selected' , : 0 , } response = self . client . post ( '/test_admin/admin/admin_views/subscriber/' , action_data ) msg = """Items must be selected in order to perform actions on them. No items have been changed.""" self . assertContains ( response , msg ) self . assertEqual ( Subscriber . objects . count ( ) , 2 ) def test_user_message_on_no_action ( self ) : action_data = { ACTION_CHECKBOX_NAME : [ 1 , 2 ] , : '' , : 0 , } response = self . client . post ( '/test_admin/admin/admin_views/subscriber/' , action_data ) msg = """No action selected.""" self . assertContains ( response , msg ) self . assertEqual ( Subscriber . objects . count ( ) , 2 ) def test_selection_counter ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/subscriber/' ) self . assertContains ( response , '0 of 2 selected' ) def test_popup_actions ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/subscriber/' ) self . assertNotEquals ( response . context [ "action_form" ] , None ) response = self . client . get ( % IS_POPUP_VAR ) self . assertEqual ( response . context [ "action_form" ] , None ) class TestCustomChangeList ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] urlbit = 'admin' def setUp ( self ) : result = self . client . login ( username = 'super' , password = 'secret' ) self . assertEqual ( result , True ) def tearDown ( self ) : self . client . logout ( ) def test_custom_changelist ( self ) : post_data = { "name" : u"First Gadget" } response = self . client . post ( '/test_admin/%s/admin_views/gadget/add/' % self . urlbit , post_data ) self . assertEqual ( response . status_code , 302 ) response = self . client . get ( '/test_admin/%s/admin_views/gadget/' % self . urlbit ) response = self . client . get ( '/test_admin/%s/admin_views/gadget/' % self . urlbit ) self . assertEqual ( response . status_code , 200 ) self . assertNotContains ( response , 'First Gadget' ) class TestInlineNotEditable ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : result = self . client . login ( username = 'super' , password = 'secret' ) self . assertEqual ( result , True ) def tearDown ( self ) : self . client . logout ( ) def test ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/parent/add/' ) self . assertEqual ( response . status_code , 200 ) class AdminCustomQuerysetTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) self . pks = [ EmptyModel . objects . create ( ) . id for i in range ( 3 ) ] def test_changelist_view ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/emptymodel/' ) for i in self . pks : if i > 1 : self . assertContains ( response , 'Primary key = %s' % i ) else : self . assertNotContains ( response , 'Primary key = %s' % i ) def test_change_view ( self ) : for i in self . pks : response = self . client . get ( '/test_admin/admin/admin_views/emptymodel/%s/' % i ) if i > 1 : self . assertEqual ( response . status_code , 200 ) else : self . assertEqual ( response . status_code , 404 ) def test_add_model_modeladmin_only_qs ( self ) : p = Paper . objects . create ( title = u"My Paper Title" ) self . assertEqual ( Paper . objects . count ( ) , 1 ) response = self . client . get ( '/test_admin/admin/admin_views/paper/%s/' % p . pk ) self . assertEqual ( response . status_code , 200 ) post_data = { : u"My Modified Paper Title" , : "Save" , } response = self . client . post ( '/test_admin/admin/admin_views/paper/%s/' % p . pk , post_data , follow = True ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , '<li class="info">The paper &quot;Paper_Deferred_author object&quot; was changed successfully.</li>' , html = True ) cl = CoverLetter . objects . create ( author = u"John Doe" ) self . assertEqual ( CoverLetter . objects . count ( ) , 1 ) response = self . client . get ( '/test_admin/admin/admin_views/coverletter/%s/' % cl . pk ) self . assertEqual ( response . status_code , 200 ) post_data = { : u"John Doe II" , : "Save" , } response = self . client . post ( '/test_admin/admin/admin_views/coverletter/%s/' % cl . pk , post_data , follow = True ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , '<li class="info">The cover letter &quot;John Doe II&quot; was changed successfully.</li>' , html = True ) class AdminInlineFileUploadTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' , 'admin-views-actions.xml' ] urlbit = 'admin' def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) tdir = tempfile . gettempdir ( ) file1 = tempfile . NamedTemporaryFile ( suffix = ".file1" , dir = tdir ) file1 . write ( 'a' * ( 2 ** 21 ) ) filename = file1 . name file1 . close ( ) self . gallery = Gallery ( name = "Test Gallery" ) self . gallery . save ( ) self . picture = Picture ( name = "Test Picture" , image = filename , gallery = self . gallery ) self . picture . save ( ) def tearDown ( self ) : self . client . logout ( ) def test_inline_file_upload_edit_validation_error_post ( self ) : post_data = { : u"Test Gallery" , : u"2" , : u"1" , : u"0" , : unicode ( self . picture . id ) , : unicode ( self . gallery . id ) , : "Test Picture" , : "" , : "" , : str ( self . gallery . id ) , : "Test Picture 2" , : "" , } response = self . client . post ( '/test_admin/%s/admin_views/gallery/%d/' % ( self . urlbit , self . gallery . id ) , post_data ) self . assertTrue ( response . _container [ 0 ] . find ( "Currently:" ) > - 1 ) class AdminInlineTests ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . post_data = { : u"Test Name" , : "3" , : u"0" , : u"0" , : "" , : "1" , : "" , : "" , : "1" , : "" , : "" , : "1" , : "" , : "3" , : u"0" , : u"0" , : "1" , : "" , : "" , : "1" , : "" , : "" , : "1" , : "" , : "" , : "3" , : u"0" , : u"0" , : "" , : "1" , : "" , : "" , : "1" , : "" , : "" , : "1" , : "" , : "3" , : u"0" , : u"0" , : "1" , : "" , : "" , : "1" , : "" , : "" , : "1" , : "" , : "" , : "3" , : u"0" , : u"0" , : "" , : "1" , : "" , : "on" , : "" , : "1" , : "" , : "on" , : "" , : "1" , : "" , : "on" , : "3" , : "0" , : "0" , : "" , : "" , : "1" , : "" , : "" , : "1" , : "" , : "" , : "1" , } result = self . client . login ( username = 'super' , password = 'secret' ) self . assertEqual ( result , True ) self . collector = Collector ( pk = 1 , name = 'John Fowles' ) self . collector . save ( ) def tearDown ( self ) : self . client . logout ( ) def test_simple_inline ( self ) : self . post_data [ 'widget_set-0-name' ] = "Widget 1" collector_url = '/test_admin/admin/admin_views/collector/%d/' % self . collector . pk response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Widget . objects . count ( ) , 1 ) self . assertEqual ( Widget . objects . all ( ) [ 0 ] . name , "Widget 1" ) widget_id = Widget . objects . all ( ) [ 0 ] . id response = self . client . get ( collector_url ) self . assertContains ( response , 'name="widget_set-0-id"' ) self . post_data [ 'widget_set-INITIAL_FORMS' ] = "1" self . post_data [ 'widget_set-0-id' ] = str ( widget_id ) self . post_data [ 'widget_set-0-name' ] = "Widget 1" response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Widget . objects . count ( ) , 1 ) self . assertEqual ( Widget . objects . all ( ) [ 0 ] . name , "Widget 1" ) self . post_data [ 'widget_set-INITIAL_FORMS' ] = "1" self . post_data [ 'widget_set-0-id' ] = str ( widget_id ) self . post_data [ 'widget_set-0-name' ] = "Widget 1 Updated" response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Widget . objects . count ( ) , 1 ) self . assertEqual ( Widget . objects . all ( ) [ 0 ] . name , "Widget 1 Updated" ) def test_explicit_autofield_inline ( self ) : self . post_data [ 'grommet_set-0-name' ] = "Grommet 1" collector_url = '/test_admin/admin/admin_views/collector/%d/' % self . collector . pk response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Grommet . objects . count ( ) , 1 ) self . assertEqual ( Grommet . objects . all ( ) [ 0 ] . name , "Grommet 1" ) response = self . client . get ( collector_url ) self . assertContains ( response , 'name="grommet_set-0-code"' ) self . post_data [ 'grommet_set-INITIAL_FORMS' ] = "1" self . post_data [ 'grommet_set-0-code' ] = str ( Grommet . objects . all ( ) [ 0 ] . code ) self . post_data [ 'grommet_set-0-name' ] = "Grommet 1" response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Grommet . objects . count ( ) , 1 ) self . assertEqual ( Grommet . objects . all ( ) [ 0 ] . name , "Grommet 1" ) self . post_data [ 'grommet_set-INITIAL_FORMS' ] = "1" self . post_data [ 'grommet_set-0-code' ] = str ( Grommet . objects . all ( ) [ 0 ] . code ) self . post_data [ 'grommet_set-0-name' ] = "Grommet 1 Updated" response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Grommet . objects . count ( ) , 1 ) self . assertEqual ( Grommet . objects . all ( ) [ 0 ] . name , "Grommet 1 Updated" ) def test_char_pk_inline ( self ) : self . post_data [ 'doohickey_set-0-code' ] = "DH1" self . post_data [ 'doohickey_set-0-name' ] = "Doohickey 1" collector_url = '/test_admin/admin/admin_views/collector/%d/' % self . collector . pk response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( DooHickey . objects . count ( ) , 1 ) self . assertEqual ( DooHickey . objects . all ( ) [ 0 ] . name , "Doohickey 1" ) response = self . client . get ( collector_url ) self . assertContains ( response , 'name="doohickey_set-0-code"' ) self . post_data [ 'doohickey_set-INITIAL_FORMS' ] = "1" self . post_data [ 'doohickey_set-0-code' ] = "DH1" self . post_data [ 'doohickey_set-0-name' ] = "Doohickey 1" response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( DooHickey . objects . count ( ) , 1 ) self . assertEqual ( DooHickey . objects . all ( ) [ 0 ] . name , "Doohickey 1" ) self . post_data [ 'doohickey_set-INITIAL_FORMS' ] = "1" self . post_data [ 'doohickey_set-0-code' ] = "DH1" self . post_data [ 'doohickey_set-0-name' ] = "Doohickey 1 Updated" response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( DooHickey . objects . count ( ) , 1 ) self . assertEqual ( DooHickey . objects . all ( ) [ 0 ] . name , "Doohickey 1 Updated" ) def test_integer_pk_inline ( self ) : self . post_data [ 'whatsit_set-0-index' ] = "42" self . post_data [ 'whatsit_set-0-name' ] = "Whatsit 1" response = self . client . post ( '/test_admin/admin/admin_views/collector/1/' , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Whatsit . objects . count ( ) , 1 ) self . assertEqual ( Whatsit . objects . all ( ) [ 0 ] . name , "Whatsit 1" ) response = self . client . get ( '/test_admin/admin/admin_views/collector/1/' ) self . assertContains ( response , 'name="whatsit_set-0-index"' ) self . post_data [ 'whatsit_set-INITIAL_FORMS' ] = "1" self . post_data [ 'whatsit_set-0-index' ] = "42" self . post_data [ 'whatsit_set-0-name' ] = "Whatsit 1" response = self . client . post ( '/test_admin/admin/admin_views/collector/1/' , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Whatsit . objects . count ( ) , 1 ) self . assertEqual ( Whatsit . objects . all ( ) [ 0 ] . name , "Whatsit 1" ) self . post_data [ 'whatsit_set-INITIAL_FORMS' ] = "1" self . post_data [ 'whatsit_set-0-index' ] = "42" self . post_data [ 'whatsit_set-0-name' ] = "Whatsit 1 Updated" response = self . client . post ( '/test_admin/admin/admin_views/collector/1/' , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Whatsit . objects . count ( ) , 1 ) self . assertEqual ( Whatsit . objects . all ( ) [ 0 ] . name , "Whatsit 1 Updated" ) def test_inherited_inline ( self ) : self . post_data [ 'fancydoodad_set-0-name' ] = "Fancy Doodad 1" collector_url = '/test_admin/admin/admin_views/collector/%d/' % self . collector . pk response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( FancyDoodad . objects . count ( ) , 1 ) self . assertEqual ( FancyDoodad . objects . all ( ) [ 0 ] . name , "Fancy Doodad 1" ) doodad_pk = FancyDoodad . objects . all ( ) [ 0 ] . pk response = self . client . get ( collector_url ) self . assertContains ( response , 'name="fancydoodad_set-0-doodad_ptr"' ) self . post_data [ 'fancydoodad_set-INITIAL_FORMS' ] = "1" self . post_data [ 'fancydoodad_set-0-doodad_ptr' ] = str ( doodad_pk ) self . post_data [ 'fancydoodad_set-0-name' ] = "Fancy Doodad 1" response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( FancyDoodad . objects . count ( ) , 1 ) self . assertEqual ( FancyDoodad . objects . all ( ) [ 0 ] . name , "Fancy Doodad 1" ) self . post_data [ 'fancydoodad_set-INITIAL_FORMS' ] = "1" self . post_data [ 'fancydoodad_set-0-doodad_ptr' ] = str ( doodad_pk ) self . post_data [ 'fancydoodad_set-0-name' ] = "Fancy Doodad 1 Updated" response = self . client . post ( collector_url , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( FancyDoodad . objects . count ( ) , 1 ) self . assertEqual ( FancyDoodad . objects . all ( ) [ 0 ] . name , "Fancy Doodad 1 Updated" ) def test_ordered_inline ( self ) : Category . objects . create ( id = 1 , order = 1 , collector = self . collector ) Category . objects . create ( id = 2 , order = 2 , collector = self . collector ) Category . objects . create ( id = 3 , order = 0 , collector = self . collector ) Category . objects . create ( id = 4 , order = 0 , collector = self . collector ) self . post_data . update ( { : "Frederick Clegg" , : "7" , : "4" , : "0" , : "14" , : "1" , : "1" , : "13" , : "2" , : "1" , : "1" , : "3" , : "1" , : "0" , : "4" , : "1" , : "" , : "" , : "1" , : "" , : "" , : "1" , : "" , : "" , : "1" , } ) response = self . client . post ( '/test_admin/admin/admin_views/collector/1/' , self . post_data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( self . collector . category_set . count ( ) , 4 ) self . assertEqual ( Category . objects . get ( id = 1 ) . order , 14 ) self . assertEqual ( Category . objects . get ( id = 2 ) . order , 13 ) self . assertEqual ( Category . objects . get ( id = 3 ) . order , 1 ) self . assertEqual ( Category . objects . get ( id = 4 ) . order , 0 ) class NeverCacheTests ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' , 'admin-views-colors.xml' , 'admin-views-fabrics.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def testAdminIndex ( self ) : response = self . client . get ( '/test_admin/admin/' ) self . assertEqual ( get_max_age ( response ) , 0 ) def testAppIndex ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/' ) self . assertEqual ( get_max_age ( response ) , 0 ) def testModelIndex ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/fabric/' ) self . assertEqual ( get_max_age ( response ) , 0 ) def testModelAdd ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/fabric/add/' ) self . assertEqual ( get_max_age ( response ) , 0 ) def testModelView ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/section/1/' ) self . assertEqual ( get_max_age ( response ) , 0 ) def testModelHistory ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/section/1/history/' ) self . assertEqual ( get_max_age ( response ) , 0 ) def testModelDelete ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/section/1/delete/' ) self . assertEqual ( get_max_age ( response ) , 0 ) def testLogin ( self ) : self . client . logout ( ) response = self . client . get ( '/test_admin/admin/' ) self . assertEqual ( get_max_age ( response ) , 0 ) def testLogout ( self ) : response = self . client . get ( '/test_admin/admin/logout/' ) self . assertEqual ( get_max_age ( response ) , 0 ) def testPasswordChange ( self ) : self . client . logout ( ) response = self . client . get ( '/test_admin/password_change/' ) self . assertEqual ( get_max_age ( response ) , None ) def testPasswordChangeDone ( self ) : response = self . client . get ( '/test_admin/admin/password_change/done/' ) self . assertEqual ( get_max_age ( response ) , None ) def testJsi18n ( self ) : response = self . client . get ( '/test_admin/admin/jsi18n/' ) self . assertEqual ( get_max_age ( response ) , None ) class PrePopulatedTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_prepopulated_on ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/prepopulatedpost/add/' ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , "id: '#id_slug'," ) self . assertContains ( response , "field['dependency_ids'].push('#id_title');" ) self . assertContains ( response , "id: '#id_prepopulatedsubpost_set-0-subslug'," ) def test_prepopulated_off ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/prepopulatedpost/1/' ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , "A Long Title" ) self . assertNotContains ( response , "id: '#id_slug'" ) self . assertNotContains ( response , "field['dependency_ids'].push('#id_title');" ) self . assertNotContains ( response , "id: '#id_prepopulatedsubpost_set-0-subslug'," ) @ override_settings ( USE_THOUSAND_SEPARATOR = True , USE_L10N = True ) def test_prepopulated_maxlength_localized ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/prepopulatedpostlargeslug/add/' ) self . assertContains ( response , "maxLength: 1000" ) class ReadonlyTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_readonly_get ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/post/add/' ) self . assertEqual ( response . status_code , 200 ) self . assertNotContains ( response , 'name="posted"' ) self . assertEqual ( response . content . count ( "<input" ) , 14 ) self . assertContains ( response , formats . localize ( datetime . date . today ( ) ) ) self . assertContains ( response , ) self . assertContains ( response , "Very awesome." ) self . assertContains ( response , "Unkown coolness." ) self . assertContains ( response , "foo" ) self . assertContains ( response , formats . localize ( datetime . date . today ( ) - datetime . timedelta ( days = 7 ) ) ) self . assertContains ( response , '<div class="form-row field-coolness">' ) self . assertContains ( response , '<div class="form-row field-awesomeness_level">' ) self . assertContains ( response , '<div class="form-row field-posted">' ) self . assertContains ( response , '<div class="form-row field-value">' ) self . assertContains ( response , '<div class="form-row">' ) self . assertContains ( response , '<p class="help">' , 3 ) self . assertContains ( response , '<p class="help">Some help text for the title (with unicode ŠĐĆŽćžšđ)</p>' , html = True ) self . assertContains ( response , '<p class="help">Some help text for the content (with unicode ŠĐĆŽćžšđ)</p>' , html = True ) self . assertContains ( response , '<p class="help">Some help text for the date (with unicode ŠĐĆŽćžšđ)</p>' , html = True ) p = Post . objects . create ( title = "I worked on readonly_fields" , content = "Its good stuff" ) response = self . client . get ( '/test_admin/admin/admin_views/post/%d/' % p . pk ) self . assertContains ( response , "%d amount of cool" % p . pk ) def test_readonly_post ( self ) : data = { : "Django Got Readonly Fields" , : "This is an incredible development." , : "1" , : "0" , : "0" , } response = self . client . post ( '/test_admin/admin/admin_views/post/add/' , data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Post . objects . count ( ) , 1 ) p = Post . objects . get ( ) self . assertEqual ( p . posted , datetime . date . today ( ) ) data [ "posted" ] = "10-8-1990" response = self . client . post ( '/test_admin/admin/admin_views/post/add/' , data ) self . assertEqual ( response . status_code , 302 ) self . assertEqual ( Post . objects . count ( ) , 2 ) p = Post . objects . order_by ( '-id' ) [ 0 ] self . assertEqual ( p . posted , datetime . date . today ( ) ) def test_readonly_manytomany ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/pizza/add/' ) self . assertEqual ( response . status_code , 200 ) def test_user_password_change_limited_queryset ( self ) : su = User . objects . filter ( is_superuser = True ) [ 0 ] response = self . client . get ( '/test_admin/admin2/auth/user/%s/password/' % su . pk ) self . assertEquals ( response . status_code , 404 ) class RawIdFieldsTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_limit_choices_to ( self ) : actor = Actor . objects . create ( name = "Palin" , age = 27 ) inquisition1 = Inquisition . objects . create ( expected = True , leader = actor , country = "England" ) inquisition2 = Inquisition . objects . create ( expected = False , leader = actor , country = "Spain" ) response = self . client . get ( '/test_admin/admin/admin_views/sketch/add/' ) m = re . search ( r'<a href="([^"]*)"[^>]* id="lookup_id_inquisition"' , response . content ) self . assertTrue ( m ) popup_url = m . groups ( ) [ 0 ] . replace ( "&amp;" , "&" ) popup_url = urlparse . urljoin ( response . request [ 'PATH_INFO' ] , popup_url ) response2 = self . client . get ( popup_url ) self . assertContains ( response2 , "Spain" ) self . assertNotContains ( response2 , "England" ) class UserAdminTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_save_button ( self ) : user_count = User . objects . count ( ) response = self . client . post ( '/test_admin/admin/auth/user/add/' , { : 'newuser' , : 'newpassword' , : 'newpassword' , } ) new_user = User . objects . order_by ( '-id' ) [ 0 ] self . assertRedirects ( response , '/test_admin/admin/auth/user/%s/' % new_user . pk ) self . assertEqual ( User . objects . count ( ) , user_count + 1 ) self . assertNotEqual ( new_user . password , UNUSABLE_PASSWORD ) def test_save_continue_editing_button ( self ) : user_count = User . objects . count ( ) response = self . client . post ( '/test_admin/admin/auth/user/add/' , { : 'newuser' , : 'newpassword' , : 'newpassword' , : '1' , } ) new_user = User . objects . order_by ( '-id' ) [ 0 ] self . assertRedirects ( response , '/test_admin/admin/auth/user/%s/' % new_user . pk ) self . assertEqual ( User . objects . count ( ) , user_count + 1 ) self . assertNotEqual ( new_user . password , UNUSABLE_PASSWORD ) def test_password_mismatch ( self ) : response = self . client . post ( '/test_admin/admin/auth/user/add/' , { : 'newuser' , : 'newpassword' , : 'mismatch' , } ) self . assertEqual ( response . status_code , 200 ) adminform = response . context [ 'adminform' ] self . assertTrue ( 'password' not in adminform . form . errors ) self . assertEqual ( adminform . form . errors [ 'password2' ] , [ u"The two password fields didn't match." ] ) def test_user_fk_popup ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/album/add/' ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , '/test_admin/admin/auth/user/add' ) self . assertContains ( response , 'class="add-another" id="add_id_owner" onclick="return showAddAnotherPopup(this);"' ) response = self . client . get ( '/test_admin/admin/auth/user/add/?_popup=1' ) self . assertEqual ( response . status_code , 200 ) self . assertNotContains ( response , 'name="_continue"' ) self . assertNotContains ( response , 'name="_addanother"' ) data = { : 'newuser' , : 'newpassword' , : 'newpassword' , : '1' , : '1' , } response = self . client . post ( '/test_admin/admin/auth/user/add/?_popup=1' , data , follow = True ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , 'dismissAddAnotherPopup' ) def test_save_add_another_button ( self ) : user_count = User . objects . count ( ) response = self . client . post ( '/test_admin/admin/auth/user/add/' , { : 'newuser' , : 'newpassword' , : 'newpassword' , : '1' , } ) new_user = User . objects . order_by ( '-id' ) [ 0 ] self . assertRedirects ( response , '/test_admin/admin/auth/user/add/' ) self . assertEqual ( User . objects . count ( ) , user_count + 1 ) self . assertNotEqual ( new_user . password , UNUSABLE_PASSWORD ) def test_user_permission_performance ( self ) : u = User . objects . all ( ) [ 0 ] ContentType . objects . clear_cache ( ) with self . assertNumQueries ( 8 ) : response = self . client . get ( '/test_admin/admin/auth/user/%s/' % u . pk ) self . assertEqual ( response . status_code , 200 ) def test_form_url_present_in_context ( self ) : u = User . objects . all ( ) [ 0 ] response = self . client . get ( '/test_admin/admin3/auth/user/%s/password/' % u . pk ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . context [ 'form_url' ] , 'pony' ) class GroupAdminTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_save_button ( self ) : group_count = Group . objects . count ( ) response = self . client . post ( '/test_admin/admin/auth/group/add/' , { : 'newgroup' , } ) new_group = Group . objects . order_by ( '-id' ) [ 0 ] self . assertRedirects ( response , '/test_admin/admin/auth/group/' ) self . assertEqual ( Group . objects . count ( ) , group_count + 1 ) def test_group_permission_performance ( self ) : g = Group . objects . create ( name = "test_group" ) with self . assertNumQueries ( 6 ) : response = self . client . get ( '/test_admin/admin/auth/group/%s/' % g . pk ) self . assertEqual ( response . status_code , 200 ) class CSSTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_css_classes ( self ) : response = self . client . get ( '/test_admin/admin/admin_views/post/add/' ) self . assertContains ( response , 'class="form-row field-title"' ) self . assertContains ( response , 'class="form-row field-content"' ) self . assertContains ( response , 'class="form-row field-public"' ) self . assertContains ( response , 'class="form-row field-awesomeness_level"' ) self . assertContains ( response , 'class="form-row field-coolness"' ) self . assertContains ( response , 'class="form-row field-value"' ) self . assertContains ( response , 'class="form-row"' ) self . assertContains ( response , '<td class="field-url">' ) self . assertContains ( response , '<td class="field-posted">' ) try : import docutils except ImportError : docutils = None class AdminDocsTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_tags ( self ) : response = self . client . get ( '/test_admin/admin/doc/tags/' ) self . assertContains ( response , "<h2>Built-in tags</h2>" , count = 2 , html = True ) self . assertContains ( response , '<h3 id="built_in-autoescape">autoescape</h3>' , html = True ) self . assertContains ( response , '<li><a href="#built_in-autoescape">autoescape</a></li>' , html = True ) self . assertContains ( response , '<h3 id="flatpages-get_flatpages">get_flatpages</h3>' , html = True ) self . assertContains ( response , '<li><a href="#flatpages-get_flatpages">get_flatpages</a></li>' , html = True ) self . assertContains ( response , "<h2>admin_list</h2>" , count = 2 , html = True ) self . assertContains ( response , '<h3 id="admin_list-admin_actions">admin_actions</h3>' , html = True ) self . assertContains ( response , '<li><a href="#admin_list-admin_actions">admin_actions</a></li>' , html = True ) def test_filters ( self ) : response = self . client . get ( '/test_admin/admin/doc/filters/' ) self . assertContains ( response , "<h2>Built-in filters</h2>" , count = 2 , html = True ) self . assertContains ( response , '<h3 id="built_in-add">add</h3>' , html = True ) self . assertContains ( response , '<li><a href="#built_in-add">add</a></li>' , html = True ) AdminDocsTest = unittest . skipUnless ( docutils , "no docutils installed." ) ( AdminDocsTest ) class ValidXHTMLTests ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] urlbit = 'admin' def setUp ( self ) : self . _context_processors = None self . _use_i18n , settings . USE_I18N = settings . USE_I18N , False if 'django.core.context_processors.i18n' in settings . TEMPLATE_CONTEXT_PROCESSORS : self . _context_processors = settings . TEMPLATE_CONTEXT_PROCESSORS cp = list ( settings . TEMPLATE_CONTEXT_PROCESSORS ) cp . remove ( 'django.core.context_processors.i18n' ) settings . TEMPLATE_CONTEXT_PROCESSORS = tuple ( cp ) context_module . _standard_context_processors = None self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) if self . _context_processors is not None : settings . TEMPLATE_CONTEXT_PROCESSORS = self . _context_processors context_module . _standard_context_processors = None settings . USE_I18N = self . _use_i18n def testLangNamePresent ( self ) : response = self . client . get ( '/test_admin/%s/admin_views/' % self . urlbit ) self . assertFalse ( ' lang=""' in response . content ) self . assertFalse ( ' xml:lang=""' in response . content ) class DateHierarchyTests ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) self . old_USE_THOUSAND_SEPARATOR = settings . USE_THOUSAND_SEPARATOR self . old_USE_L10N = settings . USE_L10N settings . USE_THOUSAND_SEPARATOR = True settings . USE_L10N = True def tearDown ( self ) : settings . USE_THOUSAND_SEPARATOR = self . old_USE_THOUSAND_SEPARATOR settings . USE_L10N = self . old_USE_L10N formats . reset_format_cache ( ) def assert_non_localized_year ( self , response , year ) : self . assertNotContains ( response , formats . number_format ( year ) ) def assert_contains_year_link ( self , response , date ) : self . assertContains ( response , '?release_date__year=%d"' % ( date . year , ) ) def assert_contains_month_link ( self , response , date ) : self . assertContains ( response , '?release_date__year=%d&amp;release_date__month=%d"' % ( date . year , date . month ) ) def assert_contains_day_link ( self , response , date ) : self . assertContains ( response , '?release_date__year=%d&amp;' % ( date . year , date . month , date . day ) ) def test_empty ( self ) : response = self . client . get ( reverse ( 'admin:admin_views_podcast_changelist' ) ) self . assertNotContains ( response , 'release_date__year=' ) self . assertNotContains ( response , 'release_date__month=' ) self . assertNotContains ( response , 'release_date__day=' ) def test_single ( self ) : DATE = datetime . date ( 2000 , 6 , 30 ) Podcast . objects . create ( release_date = DATE ) url = reverse ( 'admin:admin_views_podcast_changelist' ) response = self . client . get ( url ) self . assert_contains_day_link ( response , DATE ) self . assert_non_localized_year ( response , 2000 ) def test_within_month ( self ) : DATES = ( datetime . date ( 2000 , 6 , 30 ) , datetime . date ( 2000 , 6 , 15 ) , datetime . date ( 2000 , 6 , 3 ) ) for date in DATES : Podcast . objects . create ( release_date = date ) url = reverse ( 'admin:admin_views_podcast_changelist' ) response = self . client . get ( url ) for date in DATES : self . assert_contains_day_link ( response , date ) self . assert_non_localized_year ( response , 2000 ) def test_within_year ( self ) : DATES = ( datetime . date ( 2000 , 1 , 30 ) , datetime . date ( 2000 , 3 , 15 ) , datetime . date ( 2000 , 5 , 3 ) ) for date in DATES : Podcast . objects . create ( release_date = date ) url = reverse ( 'admin:admin_views_podcast_changelist' ) response = self . client . get ( url ) self . assertNotContains ( response , 'release_date__day=' ) for date in DATES : self . assert_contains_month_link ( response , date ) self . assert_non_localized_year ( response , 2000 ) def test_multiple_years ( self ) : DATES = ( datetime . date ( 2001 , 1 , 30 ) , datetime . date ( 2003 , 3 , 15 ) , datetime . date ( 2005 , 5 , 3 ) ) for date in DATES : Podcast . objects . create ( release_date = date ) response = self . client . get ( reverse ( 'admin:admin_views_podcast_changelist' ) ) self . assertNotContains ( response , 'release_date__day=' ) self . assertNotContains ( response , 'release_date__month=' ) for date in DATES : self . assert_contains_year_link ( response , date ) for date in DATES : url = '%s?release_date__year=%d' % ( reverse ( 'admin:admin_views_podcast_changelist' ) , date . year ) response = self . client . get ( url ) self . assert_contains_month_link ( response , date ) self . assert_non_localized_year ( response , 2000 ) self . assert_non_localized_year ( response , 2003 ) self . assert_non_localized_year ( response , 2005 ) url = '%s?release_date__year=%d&release_date__month=%d' % ( reverse ( 'admin:admin_views_podcast_changelist' ) , date . year , date . month ) response = self . client . get ( url ) self . assert_contains_day_link ( response , date ) self . assert_non_localized_year ( response , 2000 ) self . assert_non_localized_year ( response , 2003 ) self . assert_non_localized_year ( response , 2005 ) class AdminCustomSaveRelatedTests ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def test_should_be_able_to_edit_related_objects_on_add_view ( self ) : post = { : '3' , : '0' , : 'Josh Stone' , : 'Paul' , : 'Catherine' , } response = self . client . post ( '/test_admin/admin/admin_views/parent/add/' , post ) self . assertEqual ( 1 , Parent . objects . count ( ) ) self . assertEqual ( 2 , Child . objects . count ( ) ) children_names = list ( Child . objects . order_by ( 'name' ) . values_list ( 'name' , flat = True ) ) self . assertEqual ( 'Josh Stone' , Parent . objects . latest ( 'id' ) . name ) self . assertEqual ( [ u'Catherine Stone' , u'Paul Stone' ] , children_names ) def test_should_be_able_to_edit_related_objects_on_change_view ( self ) : parent = Parent . objects . create ( name = 'Josh Stone' ) paul = Child . objects . create ( parent = parent , name = 'Paul' ) catherine = Child . objects . create ( parent = parent , name = 'Catherine' ) post = { : '5' , : '2' , : 'Josh Stone' , : 'Paul' , : paul . id , : 'Catherine' , : catherine . id , } response = self . client . post ( '/test_admin/admin/admin_views/parent/%s/' % parent . id , post ) children_names = list ( Child . objects . order_by ( 'name' ) . values_list ( 'name' , flat = True ) ) self . assertEqual ( 'Josh Stone' , Parent . objects . latest ( 'id' ) . name ) self . assertEqual ( [ u'Catherine Stone' , u'Paul Stone' ] , children_names ) def test_should_be_able_to_edit_related_objects_on_changelist_view ( self ) : parent = Parent . objects . create ( name = 'Josh Rock' ) paul = Child . objects . create ( parent = parent , name = 'Paul' ) catherine = Child . objects . create ( parent = parent , name = 'Catherine' ) post = { : '1' , : '1' , : '0' , : parent . id , : 'Josh Stone' , : 'Save' } response = self . client . post ( '/test_admin/admin/admin_views/parent/' , post ) children_names = list ( Child . objects . order_by ( 'name' ) . values_list ( 'name' , flat = True ) ) self . assertEqual ( 'Josh Stone' , Parent . objects . latest ( 'id' ) . name ) self . assertEqual ( [ u'Catherine Stone' , u'Paul Stone' ] , children_names ) class AdminViewLogoutTest ( TestCase ) : urls = "regressiontests.admin_views.urls" fixtures = [ 'admin-views-users.xml' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def test_client_logout_url_can_be_used_to_login ( self ) : response = self . client . get ( '/test_admin/admin/logout/' ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . template_name , 'registration/logged_out.html' ) self . assertEqual ( response . request [ 'PATH_INFO' ] , '/test_admin/admin/logout/' ) response = self . client . get ( '/test_admin/admin/logout/' ) self . assertEqual ( response . status_code , 302 ) response = self . client . get ( '/test_admin/admin/logout/' , follow = True ) self . assertEqual ( response . status_code , 200 ) self . assertEqual ( response . template_name , 'admin/login.html' ) self . assertEqual ( response . request [ 'PATH_INFO' ] , '/test_admin/admin/' ) self . assertContains ( response , '<input type="hidden" name="next" value="/test_admin/admin/" />' )
