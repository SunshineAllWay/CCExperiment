""" Tests for django.core.servers. """ import os from urlparse import urljoin import urllib2 import django from django . conf import settings from django . core . exceptions import ImproperlyConfigured from django . test import TestCase , LiveServerTestCase from django . core . handlers . wsgi import WSGIHandler from django . core . servers . basehttp import AdminMediaHandler , WSGIServerException from django . test . utils import override_settings from . models import Person class AdminMediaHandlerTests ( TestCase ) : def setUp ( self ) : self . admin_media_url = urljoin ( settings . STATIC_URL , 'admin/' ) self . admin_media_file_path = os . path . abspath ( os . path . join ( django . __path__ [ 0 ] , 'contrib' , 'admin' , 'static' , 'admin' ) ) self . handler = AdminMediaHandler ( WSGIHandler ( ) ) def test_media_urls ( self ) : data = ( ( '%scss/base.css' % self . admin_media_url , ( 'css' , 'base.css' ) ) , ) bad_data = ( ) if os . sep == '/' : data += ( ( '%s\\css/base.css' % self . admin_media_url , ( '\\css' , 'base.css' ) ) , ) bad_data += ( % self . admin_media_url , % self . admin_media_url , % self . admin_media_url , ) elif os . sep == '\\' : bad_data += ( % self . admin_media_url , % self . admin_media_url , % self . admin_media_url , % self . admin_media_url ) for url , path_tuple in data : try : output = self . handler . file_path ( url ) except ValueError : self . fail ( "Got a ValueError exception, but wasn't expecting" % url ) rel_path = os . path . join ( * path_tuple ) desired = os . path . join ( self . admin_media_file_path , rel_path ) self . assertEqual ( os . path . normcase ( output ) , os . path . normcase ( desired ) , % ( output , desired , url ) ) for url in bad_data : try : output = self . handler . file_path ( url ) except ValueError : continue self . fail ( 'URL: %s should have caused a ValueError exception.' % url ) TEST_ROOT = os . path . dirname ( __file__ ) TEST_SETTINGS = { : '/media/' , : os . path . join ( TEST_ROOT , 'media' ) , : '/static/' , : os . path . join ( TEST_ROOT , 'static' ) , } class LiveServerBase ( LiveServerTestCase ) : urls = 'regressiontests.servers.urls' fixtures = [ 'testdata.json' ] @ classmethod def setUpClass ( cls ) : cls . settings_override = override_settings ( ** TEST_SETTINGS ) cls . settings_override . enable ( ) super ( LiveServerBase , cls ) . setUpClass ( ) @ classmethod def tearDownClass ( cls ) : cls . settings_override . disable ( ) super ( LiveServerBase , cls ) . tearDownClass ( ) def urlopen ( self , url ) : return urllib2 . urlopen ( self . live_server_url + url ) class LiveServerAddress ( LiveServerBase ) : @ classmethod def setUpClass ( cls ) : address_predefined = 'DJANGO_LIVE_TEST_SERVER_ADDRESS' in os . environ old_address = os . environ . get ( 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ) cls . raises_exception ( 'localhost' , ImproperlyConfigured ) cls . raises_exception ( 'blahblahblah:8081' , WSGIServerException ) cls . raises_exception ( 'localhost:8081,' , ImproperlyConfigured ) cls . raises_exception ( 'localhost:8081,blah' , ImproperlyConfigured ) cls . raises_exception ( 'localhost:8081-' , ImproperlyConfigured ) cls . raises_exception ( 'localhost:8081-blah' , ImproperlyConfigured ) cls . raises_exception ( 'localhost:8081-8082-8083' , ImproperlyConfigured ) old_STATIC_URL = TEST_SETTINGS [ 'STATIC_URL' ] TEST_SETTINGS [ 'STATIC_URL' ] = None cls . raises_exception ( 'localhost:8081' , ImproperlyConfigured ) TEST_SETTINGS [ 'STATIC_URL' ] = old_STATIC_URL if address_predefined : os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] = old_address else : del os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] @ classmethod def raises_exception ( cls , address , exception ) : os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] = address try : super ( LiveServerAddress , cls ) . setUpClass ( ) raise Exception ( "The line above should have raised an exception" ) except exception : pass def test_test_test ( self ) : pass class LiveServerViews ( LiveServerBase ) : def test_404 ( self ) : try : self . urlopen ( '/' ) except urllib2 . HTTPError , err : self . assertEquals ( err . code , 404 , 'Expected 404 response' ) else : self . fail ( 'Expected 404 response' ) def test_view ( self ) : f = self . urlopen ( '/example_view/' ) self . assertEquals ( f . read ( ) , 'example view' ) def test_static_files ( self ) : f = self . urlopen ( '/static/example_static_file.txt' ) self . assertEquals ( f . read ( ) , 'example static file\n' ) def test_media_files ( self ) : f = self . urlopen ( '/media/example_media_file.txt' ) self . assertEquals ( f . read ( ) , 'example media file\n' ) class LiveServerDatabase ( LiveServerBase ) : def test_fixtures_loaded ( self ) : f = self . urlopen ( '/model_view/' ) self . assertEquals ( f . read ( ) . splitlines ( ) , [ 'jane' , 'robert' ] ) def test_database_writes ( self ) : self . urlopen ( '/create_model_instance/' ) names = [ person . name for person in Person . objects . all ( ) ] self . assertEquals ( names , [ 'jane' , 'robert' , 'emily' ] )
