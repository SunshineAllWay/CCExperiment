from django . db . backends . creation import BaseDatabaseCreation class DatabaseCreation ( BaseDatabaseCreation ) : data_types = { : 'integer AUTO_INCREMENT' , : 'bool' , : 'varchar(%(max_length)s)' , : 'varchar(%(max_length)s)' , : 'date' , : 'datetime' , : 'numeric(%(max_digits)s, %(decimal_places)s)' , : 'varchar(%(max_length)s)' , : 'varchar(%(max_length)s)' , : 'double precision' , : 'integer' , : 'bigint' , : 'char(15)' , : 'char(39)' , : 'bool' , : 'integer' , : 'integer UNSIGNED' , : 'smallint UNSIGNED' , : 'varchar(%(max_length)s)' , : 'smallint' , : 'longtext' , : 'time' , } def sql_table_creation_suffix ( self ) : suffix = [ ] if self . connection . settings_dict [ 'TEST_CHARSET' ] : suffix . append ( 'CHARACTER SET %s' % self . connection . settings_dict [ 'TEST_CHARSET' ] ) if self . connection . settings_dict [ 'TEST_COLLATION' ] : suffix . append ( 'COLLATE %s' % self . connection . settings_dict [ 'TEST_COLLATION' ] ) return ' ' . join ( suffix ) def sql_for_inline_foreign_key_references ( self , field , known_models , style ) : return [ ] , True def sql_for_inline_many_to_many_references ( self , model , field , style ) : from django . db import models opts = model . _meta qn = self . connection . ops . quote_name table_output = [ % ( style . SQL_FIELD ( qn ( field . m2m_column_name ( ) ) ) , style . SQL_COLTYPE ( models . ForeignKey ( model ) . db_type ( connection = self . connection ) ) , style . SQL_KEYWORD ( 'NOT NULL' ) ) , % ( style . SQL_FIELD ( qn ( field . m2m_reverse_name ( ) ) ) , style . SQL_COLTYPE ( models . ForeignKey ( field . rel . to ) . db_type ( connection = self . connection ) ) , style . SQL_KEYWORD ( 'NOT NULL' ) ) ] deferred = [ ( field . m2m_db_table ( ) , field . m2m_column_name ( ) , opts . db_table , opts . pk . column ) , ( field . m2m_db_table ( ) , field . m2m_reverse_name ( ) , field . rel . to . _meta . db_table , field . rel . to . _meta . pk . column ) ] return table_output , deferred
