from __future__ import absolute_import from datetime import datetime from operator import attrgetter from django . test import TestCase from . models import Article , ArticlePKOrdering class OrderingTests ( TestCase ) : def test_basic ( self ) : a1 = Article . objects . create ( headline = "Article 1" , pub_date = datetime ( 2005 , 7 , 26 ) ) a2 = Article . objects . create ( headline = "Article 2" , pub_date = datetime ( 2005 , 7 , 27 ) ) a3 = Article . objects . create ( headline = "Article 3" , pub_date = datetime ( 2005 , 7 , 27 ) ) a4 = Article . objects . create ( headline = "Article 4" , pub_date = datetime ( 2005 , 7 , 28 ) ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , , , ] , attrgetter ( "headline" ) ) self . assertQuerysetEqual ( Article . objects . order_by ( "headline" ) , [ , , , , ] , attrgetter ( "headline" ) ) self . assertQuerysetEqual ( Article . objects . order_by ( "pub_date" , "-headline" ) , [ , , , , ] , attrgetter ( "headline" ) ) self . assertQuerysetEqual ( Article . objects . order_by ( "id" ) , [ , , , , ] , attrgetter ( "headline" ) ) self . assertQuerysetEqual ( Article . objects . order_by ( "id" ) . order_by ( "-headline" ) , [ , , , , ] , attrgetter ( "headline" ) ) self . assertQuerysetEqual ( Article . objects . order_by ( "headline" ) [ : 2 ] , [ , , ] , attrgetter ( "headline" ) ) self . assertQuerysetEqual ( Article . objects . order_by ( "headline" ) [ 1 : 3 ] , [ , , ] , attrgetter ( "headline" ) ) self . assertEqual ( Article . objects . all ( ) [ 0 ] , a4 ) self . assertEqual ( len ( list ( Article . objects . order_by ( "?" ) ) ) , 4 ) self . assertQuerysetEqual ( Article . objects . all ( ) . reverse ( ) [ : 2 ] , [ , , ] , attrgetter ( "headline" ) ) self . assertQuerysetEqual ( Article . objects . extra ( select = { "foo" : "pub_date" } , order_by = [ "foo" , "headline" ] ) , [ , , , , ] , attrgetter ( "headline" ) ) self . assertQuerysetEqual ( Article . objects . extra ( select = { "order" : "pub_date" } , order_by = [ "order" , "headline" ] ) , [ , , , , ] , attrgetter ( "headline" ) ) def test_order_by_pk ( self ) : a1 = ArticlePKOrdering . objects . create ( pk = 1 , headline = "Article 1" , pub_date = datetime ( 2005 , 7 , 26 ) ) a2 = ArticlePKOrdering . objects . create ( pk = 2 , headline = "Article 2" , pub_date = datetime ( 2005 , 7 , 27 ) ) a3 = ArticlePKOrdering . objects . create ( pk = 3 , headline = "Article 3" , pub_date = datetime ( 2005 , 7 , 27 ) ) a4 = ArticlePKOrdering . objects . create ( pk = 4 , headline = "Article 4" , pub_date = datetime ( 2005 , 7 , 28 ) ) self . assertQuerysetEqual ( ArticlePKOrdering . objects . all ( ) , [ , , , , ] , attrgetter ( "headline" ) )
