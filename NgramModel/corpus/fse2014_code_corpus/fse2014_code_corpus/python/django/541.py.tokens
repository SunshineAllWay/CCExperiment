from __future__ import absolute_import from django . test import TestCase from django . core . exceptions import FieldError from . models import Poll , Choice , OuterA , Inner , OuterB class NullQueriesTests ( TestCase ) : def test_none_as_null ( self ) : p1 = Poll ( question = 'Why?' ) p1 . save ( ) c1 = Choice ( poll = p1 , choice = 'Because.' ) c1 . save ( ) c2 = Choice ( poll = p1 , choice = 'Why Not?' ) c2 . save ( ) self . assertQuerysetEqual ( Choice . objects . filter ( choice__exact = None ) , [ ] ) self . assertQuerysetEqual ( Choice . objects . exclude ( choice = None ) . order_by ( 'id' ) , [ , ] ) self . assertRaises ( FieldError , Choice . objects . filter , foo__exact = None ) self . assertRaises ( ValueError , Choice . objects . filter , id__gt = None ) self . assertRaises ( ValueError , Choice . objects . filter , foo__gt = None ) p2 = Poll ( question = "How?" ) self . assertEqual ( repr ( p2 . choice_set . all ( ) ) , '[]' ) def test_reverse_relations ( self ) : obj = OuterA . objects . create ( ) self . assertQuerysetEqual ( OuterA . objects . filter ( inner__second = None ) , [ '<OuterA: OuterA object>' ] ) self . assertQuerysetEqual ( OuterA . objects . filter ( inner__second__data = None ) , [ '<OuterA: OuterA object>' ] ) inner_obj = Inner . objects . create ( first = obj ) self . assertQuerysetEqual ( Inner . objects . filter ( first__inner__second = None ) , [ '<Inner: Inner object>' ] ) objB = OuterB . objects . create ( data = "reverse" ) self . assertQuerysetEqual ( OuterB . objects . filter ( inner__isnull = False ) , [ ] ) Inner . objects . create ( first = obj ) self . assertQuerysetEqual ( OuterB . objects . exclude ( inner__isnull = False ) , [ '<OuterB: OuterB object>' ] )
