from __future__ import absolute_import from django . test import TestCase from . models import Author , Publisher class GetOrCreateTests ( TestCase ) : def test_related ( self ) : p = Publisher . objects . create ( name = "Acme Publishing" ) book , created = p . books . get_or_create ( name = "The Book of Ed & Fred" ) self . assertTrue ( created ) self . assertEqual ( p . books . count ( ) , 1 ) book , created = p . books . get_or_create ( name = "The Book of Ed & Fred" ) self . assertFalse ( created ) self . assertEqual ( p . books . count ( ) , 1 ) ed , created = book . authors . get_or_create ( name = "Ed" ) self . assertTrue ( created ) self . assertEqual ( book . authors . count ( ) , 1 ) ed , created = book . authors . get_or_create ( name = "Ed" ) self . assertFalse ( created ) self . assertEqual ( book . authors . count ( ) , 1 ) fred , created = book . authors . get_or_create ( name = "Fred" ) self . assertTrue ( created ) self . assertEqual ( book . authors . count ( ) , 2 ) Author . objects . create ( name = "Ted" ) self . assertEqual ( Author . objects . count ( ) , 3 ) self . assertEqual ( book . authors . count ( ) , 2 ) _ , created = ed . books . get_or_create ( name = "Ed's Recipes" , publisher = p ) self . assertTrue ( created ) self . assertEqual ( ed . books . count ( ) , 2 ) self . assertEqual ( fred . books . count ( ) , 1 ) _ , created = ed . books . get_or_create ( name = 'The Great Book of Ed' , publisher_id = p . id ) self . assertTrue ( created ) _ , created = ed . books . get_or_create ( name = 'The Great Book of Ed' , publisher_id = p . id ) self . assertFalse ( created ) self . assertEqual ( p . books . count ( ) , 3 )
