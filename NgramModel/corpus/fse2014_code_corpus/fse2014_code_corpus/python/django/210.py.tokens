from __future__ import absolute_import , with_statement from copy import deepcopy from datetime import datetime from django . core . exceptions import MultipleObjectsReturned from django . test import TestCase from . models import Article , Reporter class ManyToOneTests ( TestCase ) : def setUp ( self ) : self . r = Reporter ( first_name = 'John' , last_name = 'Smith' , email = 'john@example.com' ) self . r . save ( ) self . r2 = Reporter ( first_name = 'Paul' , last_name = 'Jones' , email = 'paul@example.com' ) self . r2 . save ( ) self . a = Article ( id = None , headline = "This is a test" , pub_date = datetime ( 2005 , 7 , 27 ) , reporter = self . r ) self . a . save ( ) def test_get ( self ) : r = self . a . reporter self . assertEqual ( r . id , self . r . id ) self . assertEqual ( ( r . first_name , self . r . last_name ) , ( 'John' , 'Smith' ) ) def test_create ( self ) : a3 = Article ( id = None , headline = "Third article" , pub_date = datetime ( 2005 , 7 , 27 ) , reporter_id = self . r . id ) a3 . save ( ) self . assertEqual ( a3 . reporter . id , self . r . id ) a4 = Article ( id = None , headline = "Fourth article" , pub_date = datetime ( 2005 , 7 , 27 ) , reporter_id = str ( self . r . id ) ) a4 . save ( ) self . assertEqual ( repr ( a4 . reporter ) , "<Reporter: John Smith>" ) def test_add ( self ) : new_article = self . r . article_set . create ( headline = "John's second story" , pub_date = datetime ( 2005 , 7 , 29 ) ) self . assertEqual ( repr ( new_article ) , "<Article: John's second story>" ) self . assertEqual ( new_article . reporter . id , self . r . id ) new_article2 = Article ( headline = "Paul's story" , pub_date = datetime ( 2006 , 1 , 17 ) ) self . r . article_set . add ( new_article2 ) self . assertEqual ( new_article2 . reporter . id , self . r . id ) self . assertQuerysetEqual ( self . r . article_set . all ( ) , [ , , , ] ) self . r2 . article_set . add ( new_article2 ) self . assertEqual ( new_article2 . reporter . id , self . r2 . id ) self . assertQuerysetEqual ( self . r2 . article_set . all ( ) , [ "<Article: Paul's story>" ] ) with self . assertRaisesRegexp ( TypeError , "'Article' instance expected, got <Reporter.*" ) : self . r . article_set . add ( self . r2 ) self . assertQuerysetEqual ( self . r . article_set . all ( ) , [ , , ] ) def test_assign ( self ) : new_article = self . r . article_set . create ( headline = "John's second story" , pub_date = datetime ( 2005 , 7 , 29 ) ) new_article2 = self . r2 . article_set . create ( headline = "Paul's story" , pub_date = datetime ( 2006 , 1 , 17 ) ) new_article2 . reporter = self . r new_article2 . save ( ) self . assertEqual ( repr ( new_article2 . reporter ) , "<Reporter: John Smith>" ) self . assertEqual ( new_article2 . reporter . id , self . r . id ) self . assertQuerysetEqual ( self . r . article_set . all ( ) , [ , , , ] ) self . assertQuerysetEqual ( self . r2 . article_set . all ( ) , [ ] ) self . r2 . article_set = [ new_article , new_article2 ] self . assertQuerysetEqual ( self . r . article_set . all ( ) , [ "<Article: This is a test>" ] ) self . assertQuerysetEqual ( self . r2 . article_set . all ( ) , [ , , ] ) self . r . article_set = [ new_article ] self . assertQuerysetEqual ( self . r . article_set . all ( ) , [ , , ] ) self . assertQuerysetEqual ( self . r2 . article_set . all ( ) , [ "<Article: Paul's story>" ] ) self . assertFalse ( hasattr ( self . r2 . article_set , 'remove' ) ) self . assertFalse ( hasattr ( self . r2 . article_set , 'clear' ) ) def test_selects ( self ) : new_article = self . r . article_set . create ( headline = "John's second story" , pub_date = datetime ( 2005 , 7 , 29 ) ) new_article2 = self . r2 . article_set . create ( headline = "Paul's story" , pub_date = datetime ( 2006 , 1 , 17 ) ) self . assertQuerysetEqual ( self . r . article_set . all ( ) , [ , , ] ) self . assertQuerysetEqual ( self . r . article_set . filter ( headline__startswith = 'This' ) , [ "<Article: This is a test>" ] ) self . assertEqual ( self . r . article_set . count ( ) , 2 ) self . assertEqual ( self . r2 . article_set . count ( ) , 1 ) self . assertQuerysetEqual ( Article . objects . filter ( id__exact = self . a . id ) , [ "<Article: This is a test>" ] ) self . assertQuerysetEqual ( Article . objects . filter ( pk = self . a . id ) , [ "<Article: This is a test>" ] ) self . assertQuerysetEqual ( Article . objects . filter ( headline__startswith = 'This' ) , [ "<Article: This is a test>" ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__first_name__exact = 'John' ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__first_name = 'John' ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__first_name__exact = 'John' , reporter__last_name__exact = 'Smith' ) , [ , , ] ) queryset = Article . objects . filter ( reporter__first_name__exact = 'John' , reporter__last_name__exact = 'Smith' ) self . assertNumQueries ( 1 , list , queryset ) self . assertEqual ( queryset . query . get_compiler ( queryset . db ) . as_sql ( ) [ 0 ] . count ( 'INNER JOIN' ) , 1 ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__first_name__exact = 'John' ) . extra ( where = [ "many_to_one_reporter.last_name='Smith'" ] ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__first_name__exact = 'John' ) . extra ( where = [ "many_to_one_reporter.last_name='%s'" % u'Smith' ] ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__id__exact = self . r . id ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__pk = self . r . id ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter = self . r . id ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter = self . r ) , [ , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__in = [ self . r . id , self . r2 . id ] ) . distinct ( ) , [ , , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__in = [ self . r , self . r2 ] ) . distinct ( ) , [ , , , ] ) self . assertQuerysetEqual ( Article . objects . filter ( reporter__in = Reporter . objects . filter ( first_name = 'John' ) . values ( 'pk' ) . query ) . distinct ( ) , [ , , ] ) def test_reverse_selects ( self ) : a3 = Article . objects . create ( id = None , headline = "Third article" , pub_date = datetime ( 2005 , 7 , 27 ) , reporter_id = self . r . id ) a4 = Article . objects . create ( id = None , headline = "Fourth article" , pub_date = datetime ( 2005 , 7 , 27 ) , reporter_id = str ( self . r . id ) ) self . assertQuerysetEqual ( Reporter . objects . filter ( id__exact = self . r . id ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( pk = self . r . id ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( first_name__startswith = 'John' ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article__id__exact = self . a . id ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article__pk = self . a . id ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article = self . a . id ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article = self . a ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article__in = [ self . a . id , a3 . id ] ) . distinct ( ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article__in = [ self . a . id , a3 ] ) . distinct ( ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article__in = [ self . a , a3 ] ) . distinct ( ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article__headline__startswith = 'T' ) , [ "<Reporter: John Smith>" , "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article__headline__startswith = 'T' ) . distinct ( ) , [ "<Reporter: John Smith>" ] ) self . assertEqual ( Reporter . objects . filter ( article__headline__startswith = 'T' ) . count ( ) , 2 ) self . assertEqual ( Reporter . objects . filter ( article__headline__startswith = 'T' ) . distinct ( ) . count ( ) , 1 ) self . assertQuerysetEqual ( Reporter . objects . filter ( article__reporter__first_name__startswith = 'John' ) , [ , , , ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article__reporter__first_name__startswith = 'John' ) . distinct ( ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article__reporter__exact = self . r ) . distinct ( ) , [ "<Reporter: John Smith>" ] ) self . assertQuerysetEqual ( Reporter . objects . filter ( article__reporter = self . r ) . distinct ( ) , [ "<Reporter: John Smith>" ] ) d = { 'reporter__first_name' : u'John' , 'reporter__last_name' : u'Smith' } self . assertEqual ( [ d ] , list ( Article . objects . filter ( reporter = self . r ) . distinct ( ) . order_by ( ) . values ( 'reporter__first_name' , 'reporter__last_name' ) ) ) def test_select_related ( self ) : r1 = Reporter . objects . create ( first_name = 'Mike' , last_name = 'Royko' , email = 'royko@suntimes.com' ) r2 = Reporter . objects . create ( first_name = 'John' , last_name = 'Kass' , email = 'jkass@tribune.com' ) a1 = Article . objects . create ( headline = 'First' , pub_date = datetime ( 1980 , 4 , 23 ) , reporter = r1 ) a2 = Article . objects . create ( headline = 'Second' , pub_date = datetime ( 1980 , 4 , 23 ) , reporter = r2 ) self . assertEqual ( list ( Article . objects . select_related ( ) . dates ( 'pub_date' , 'day' ) ) , [ datetime ( 1980 , 4 , 23 , 0 , 0 ) , datetime ( 2005 , 7 , 27 , 0 , 0 ) , ] ) self . assertEqual ( list ( Article . objects . select_related ( ) . dates ( 'pub_date' , 'month' ) ) , [ datetime ( 1980 , 4 , 1 , 0 , 0 ) , datetime ( 2005 , 7 , 1 , 0 , 0 ) , ] ) self . assertEqual ( list ( Article . objects . select_related ( ) . dates ( 'pub_date' , 'year' ) ) , [ datetime ( 1980 , 1 , 1 , 0 , 0 ) , datetime ( 2005 , 1 , 1 , 0 , 0 ) , ] ) def test_delete ( self ) : new_article = self . r . article_set . create ( headline = "John's second story" , pub_date = datetime ( 2005 , 7 , 29 ) ) new_article2 = self . r2 . article_set . create ( headline = "Paul's story" , pub_date = datetime ( 2006 , 1 , 17 ) ) a3 = Article . objects . create ( id = None , headline = "Third article" , pub_date = datetime ( 2005 , 7 , 27 ) , reporter_id = self . r . id ) a4 = Article . objects . create ( id = None , headline = "Fourth article" , pub_date = datetime ( 2005 , 7 , 27 ) , reporter_id = str ( self . r . id ) ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , , , , ] ) self . assertQuerysetEqual ( Reporter . objects . order_by ( 'first_name' ) , [ , , ] ) self . r2 . delete ( ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ , , , , ] ) self . assertQuerysetEqual ( Reporter . objects . order_by ( 'first_name' ) , [ "<Reporter: John Smith>" ] ) Reporter . objects . filter ( article__headline__startswith = 'This' ) . delete ( ) self . assertQuerysetEqual ( Reporter . objects . all ( ) , [ ] ) self . assertQuerysetEqual ( Article . objects . all ( ) , [ ] ) def test_regression_12876 ( self ) : self . r . cached_query = Article . objects . filter ( reporter = self . r ) self . assertEqual ( repr ( deepcopy ( self . r ) ) , "<Reporter: John Smith>" ) def test_explicit_fk ( self ) : a2 , created = Article . objects . get_or_create ( id = None , headline = "John's second test" , pub_date = datetime ( 2011 , 5 , 7 ) , reporter_id = self . r . id ) self . assertTrue ( created ) self . assertEqual ( a2 . reporter . id , self . r . id ) self . assertQuerysetEqual ( Article . objects . filter ( reporter_id__exact = self . r . id ) , [ , , ] ) a3 = Article . objects . create ( id = None , headline = "Paul's commentary" , pub_date = datetime ( 2011 , 5 , 7 ) , reporter_id = self . r2 . id ) self . assertEqual ( a3 . reporter . id , self . r2 . id ) self . assertRaises ( MultipleObjectsReturned , Article . objects . get , reporter_id = self . r . id ) self . assertEqual ( repr ( a3 ) , repr ( Article . objects . get ( reporter_id = self . r2 . id , pub_date = datetime ( 2011 , 5 , 7 ) ) ) ) def test_manager_class_caching ( self ) : r1 = Reporter . objects . create ( first_name = 'Mike' ) r2 = Reporter . objects . create ( first_name = 'John' ) self . assertTrue ( r1 . article_set . __class__ is r1 . article_set . __class__ ) self . assertTrue ( r1 . article_set . __class__ is r2 . article_set . __class__ )
