""" Built-in, globally-available admin actions. """ from django . core . exceptions import PermissionDenied from django . contrib . admin import helpers from django . contrib . admin . util import get_deleted_objects , model_ngettext from django . db import router from django . template . response import TemplateResponse from django . utils . encoding import force_unicode from django . utils . translation import ugettext_lazy , ugettext as _ def delete_selected ( modeladmin , request , queryset ) : opts = modeladmin . model . _meta app_label = opts . app_label if not modeladmin . has_delete_permission ( request ) : raise PermissionDenied using = router . db_for_write ( modeladmin . model ) deletable_objects , perms_needed , protected = get_deleted_objects ( queryset , opts , request . user , modeladmin . admin_site , using ) if request . POST . get ( 'post' ) : if perms_needed : raise PermissionDenied n = queryset . count ( ) if n : for obj in queryset : obj_display = force_unicode ( obj ) modeladmin . log_deletion ( request , obj , obj_display ) queryset . delete ( ) modeladmin . message_user ( request , _ ( "Successfully deleted %(count)d %(items)s." ) % { : n , "items" : model_ngettext ( modeladmin . opts , n ) } ) return None if len ( queryset ) == 1 : objects_name = force_unicode ( opts . verbose_name ) else : objects_name = force_unicode ( opts . verbose_name_plural ) if perms_needed or protected : title = _ ( "Cannot delete %(name)s" ) % { "name" : objects_name } else : title = _ ( "Are you sure?" ) context = { : title , : objects_name , : [ deletable_objects ] , : queryset , : perms_needed , : protected , : opts , : app_label , : helpers . ACTION_CHECKBOX_NAME , } return TemplateResponse ( request , modeladmin . delete_selected_confirmation_template or [ % ( app_label , opts . object_name . lower ( ) ) , % app_label , ] , context , current_app = modeladmin . admin_site . name ) delete_selected . short_description = ugettext_lazy ( "Delete selected %(verbose_name_plural)s" )
