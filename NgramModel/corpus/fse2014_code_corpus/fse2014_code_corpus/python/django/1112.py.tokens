""" Module for abstract serializer/unserializer base classes. """ from StringIO import StringIO from django . db import models from django . utils . encoding import smart_unicode class SerializerDoesNotExist ( KeyError ) : pass class SerializationError ( Exception ) : pass class DeserializationError ( Exception ) : pass class Serializer ( object ) : internal_use_only = False def serialize ( self , queryset , ** options ) : self . options = options self . stream = options . pop ( "stream" , StringIO ( ) ) self . selected_fields = options . pop ( "fields" , None ) self . use_natural_keys = options . pop ( "use_natural_keys" , False ) self . start_serialization ( ) for obj in queryset : self . start_object ( obj ) for field in obj . _meta . local_fields : if field . serialize : if field . rel is None : if self . selected_fields is None or field . attname in self . selected_fields : self . handle_field ( obj , field ) else : if self . selected_fields is None or field . attname [ : - 3 ] in self . selected_fields : self . handle_fk_field ( obj , field ) for field in obj . _meta . many_to_many : if field . serialize : if self . selected_fields is None or field . attname in self . selected_fields : self . handle_m2m_field ( obj , field ) self . end_object ( obj ) self . end_serialization ( ) return self . getvalue ( ) def start_serialization ( self ) : raise NotImplementedError def end_serialization ( self ) : pass def start_object ( self , obj ) : raise NotImplementedError def end_object ( self , obj ) : pass def handle_field ( self , obj , field ) : raise NotImplementedError def handle_fk_field ( self , obj , field ) : raise NotImplementedError def handle_m2m_field ( self , obj , field ) : raise NotImplementedError def getvalue ( self ) : if callable ( getattr ( self . stream , 'getvalue' , None ) ) : return self . stream . getvalue ( ) class Deserializer ( object ) : def __init__ ( self , stream_or_string , ** options ) : self . options = options if isinstance ( stream_or_string , basestring ) : self . stream = StringIO ( stream_or_string ) else : self . stream = stream_or_string models . get_apps ( ) def __iter__ ( self ) : return self def next ( self ) : raise NotImplementedError class DeserializedObject ( object ) : def __init__ ( self , obj , m2m_data = None ) : self . object = obj self . m2m_data = m2m_data def __repr__ ( self ) : return "<DeserializedObject: %s.%s(pk=%s)>" % ( self . object . _meta . app_label , self . object . _meta . object_name , self . object . pk ) def save ( self , save_m2m = True , using = None ) : models . Model . save_base ( self . object , using = using , raw = True ) if self . m2m_data and save_m2m : for accessor_name , object_list in self . m2m_data . items ( ) : setattr ( self . object , accessor_name , object_list ) self . m2m_data = None
