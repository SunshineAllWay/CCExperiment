import unittest from django . utils import text class TestUtilsText ( unittest . TestCase ) : def test_truncate_chars ( self ) : truncator = text . Truncator ( ) self . assertEqual ( u'The quick brown fox jumped over the lazy dog.' , truncator . chars ( 100 ) ) , self . assertEqual ( u'The quick brown fox ...' , truncator . chars ( 23 ) ) , self . assertEqual ( u'The quick brown fo.....' , truncator . chars ( 23 , '.....' ) ) , nfc = text . Truncator ( u'o\xfco\xfco\xfco\xfc' ) nfd = text . Truncator ( u'ou\u0308ou\u0308ou\u0308ou\u0308' ) self . assertEqual ( u'oüoüoüoü' , nfc . chars ( 8 ) ) self . assertEqual ( u'oüoüoüoü' , nfd . chars ( 8 ) ) self . assertEqual ( u'oü...' , nfc . chars ( 5 ) ) self . assertEqual ( u'oü...' , nfd . chars ( 5 ) ) truncator = text . Truncator ( u'-B\u030AB\u030A----8' ) self . assertEqual ( u'-B\u030A...' , truncator . chars ( 5 ) ) self . assertEqual ( u'-B\u030AB\u030A-...' , truncator . chars ( 7 ) ) self . assertEqual ( u'-B\u030AB\u030A----8' , truncator . chars ( 8 ) ) truncator = text . Truncator ( u'-----' ) self . assertEqual ( u'---B\u030A' , truncator . chars ( 4 , u'B\u030A' ) ) self . assertEqual ( u'-----' , truncator . chars ( 5 , u'B\u030A' ) ) self . assertEqual ( u'...' , text . Truncator ( u'asdf' ) . chars ( 1 ) ) def test_truncate_words ( self ) : truncator = text . Truncator ( u'The quick brown fox jumped over the lazy ' ) self . assertEqual ( u'The quick brown fox jumped over the lazy dog.' , truncator . words ( 10 ) ) self . assertEqual ( u'The quick brown fox...' , truncator . words ( 4 ) ) self . assertEqual ( u'The quick brown fox[snip]' , truncator . words ( 4 , '[snip]' ) ) def test_truncate_html_words ( self ) : truncator = text . Truncator ( '<p><strong><em>The quick brown fox jumped ' ) self . assertEqual ( u'<p><strong><em>The quick brown fox jumped over the ' , truncator . words ( 10 , html = True ) ) self . assertEqual ( u'<p><strong><em>The quick brown fox...</em>' , truncator . words ( 4 , html = True ) ) self . assertEqual ( u'<p><strong><em>The quick brown fox....</em>' , truncator . words ( 4 , '....' , html = True ) ) self . assertEqual ( u'<p><strong><em>The quick brown fox</em></strong>' , truncator . words ( 4 , '' , html = True ) ) truncator = text . Truncator ( '<p>The quick <a href="xyz.html"\n' ) self . assertEqual ( u'<p>The quick <a href="xyz.html"\n' , truncator . words ( 3 , '...' , html = True ) ) def test_old_truncate_words ( self ) : self . assertEqual ( u'The quick brown fox jumped over the lazy dog.' , text . truncate_words ( u'The quick brown fox jumped over the lazy dog.' , 10 ) ) self . assertEqual ( u'The quick brown fox ...' , text . truncate_words ( 'The quick brown fox jumped over the lazy dog.' , 4 ) ) self . assertEqual ( u'The quick brown fox ....' , text . truncate_words ( 'The quick brown fox jumped over the lazy dog.' , 4 , '....' ) ) def test_old_truncate_html_words ( self ) : self . assertEqual ( u'<p><strong><em>The quick brown fox jumped over the lazy dog.</em></strong></p>' , text . truncate_html_words ( '<p><strong><em>The quick brown fox jumped over the lazy dog.</em></strong></p>' , 10 ) ) self . assertEqual ( u'<p><strong><em>The quick brown fox ...</em></strong></p>' , text . truncate_html_words ( '<p><strong><em>The quick brown fox jumped over the lazy dog.</em></strong></p>' , 4 ) ) self . assertEqual ( u'<p><strong><em>The quick brown fox ....</em></strong></p>' , text . truncate_html_words ( '<p><strong><em>The quick brown fox jumped over the lazy dog.</em></strong></p>' , 4 , '....' ) ) self . assertEqual ( u'<p><strong><em>The quick brown fox</em></strong></p>' , text . truncate_html_words ( '<p><strong><em>The quick brown fox jumped over the lazy dog.</em></strong></p>' , 4 , None ) ) def test_wrap ( self ) : digits = '1234 67 9' self . assertEqual ( text . wrap ( digits , 100 ) , u'1234 67 9' ) self . assertEqual ( text . wrap ( digits , 9 ) , u'1234 67 9' ) self . assertEqual ( text . wrap ( digits , 8 ) , u'1234 67\n9' ) self . assertEqual ( text . wrap ( 'short\na long line' , 7 ) , ) self . assertEqual ( text . wrap ( 'do-not-break-long-words please? ok' , 8 ) , ) long_word = 'l%sng' % ( 'o' * 20 ) self . assertEqual ( text . wrap ( long_word , 20 ) , long_word ) self . assertEqual ( text . wrap ( 'a %s word' % long_word , 10 ) , % long_word )
