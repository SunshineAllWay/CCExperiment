from warnings import warn from django . core . exceptions import ImproperlyConfigured from django . utils . importlib import import_module from django . contrib . auth . signals import user_logged_in , user_logged_out SESSION_KEY = '_auth_user_id' BACKEND_SESSION_KEY = '_auth_user_backend' REDIRECT_FIELD_NAME = 'next' def load_backend ( path ) : i = path . rfind ( '.' ) module , attr = path [ : i ] , path [ i + 1 : ] try : mod = import_module ( module ) except ImportError , e : raise ImproperlyConfigured ( 'Error importing authentication backend %s: "%s"' % ( path , e ) ) except ValueError , e : raise ImproperlyConfigured ( 'Error importing authentication backends. Is AUTHENTICATION_BACKENDS a correctly defined list or tuple?' ) try : cls = getattr ( mod , attr ) except AttributeError : raise ImproperlyConfigured ( 'Module "%s" does not define a "%s" authentication backend' % ( module , attr ) ) if not hasattr ( cls , 'supports_inactive_user' ) : warn ( "Authentication backends without a `supports_inactive_user` attribute are deprecated. Please define it in %s." % cls , DeprecationWarning ) cls . supports_inactive_user = False return cls ( ) def get_backends ( ) : from django . conf import settings backends = [ ] for backend_path in settings . AUTHENTICATION_BACKENDS : backends . append ( load_backend ( backend_path ) ) if not backends : raise ImproperlyConfigured ( 'No authentication backends have been defined. Does AUTHENTICATION_BACKENDS contain anything?' ) return backends def authenticate ( ** credentials ) : for backend in get_backends ( ) : try : user = backend . authenticate ( ** credentials ) except TypeError : continue if user is None : continue user . backend = "%s.%s" % ( backend . __module__ , backend . __class__ . __name__ ) return user def login ( request , user ) : if user is None : user = request . user if SESSION_KEY in request . session : if request . session [ SESSION_KEY ] != user . id : request . session . flush ( ) else : request . session . cycle_key ( ) request . session [ SESSION_KEY ] = user . id request . session [ BACKEND_SESSION_KEY ] = user . backend if hasattr ( request , 'user' ) : request . user = user user_logged_in . send ( sender = user . __class__ , request = request , user = user ) def logout ( request ) : user = getattr ( request , 'user' , None ) if hasattr ( user , 'is_authenticated' ) and not user . is_authenticated ( ) : user = None user_logged_out . send ( sender = user . __class__ , request = request , user = user ) request . session . flush ( ) if hasattr ( request , 'user' ) : from django . contrib . auth . models import AnonymousUser request . user = AnonymousUser ( ) def get_user ( request ) : from django . contrib . auth . models import AnonymousUser try : user_id = request . session [ SESSION_KEY ] backend_path = request . session [ BACKEND_SESSION_KEY ] backend = load_backend ( backend_path ) user = backend . get_user ( user_id ) or AnonymousUser ( ) except KeyError : user = AnonymousUser ( ) return user
