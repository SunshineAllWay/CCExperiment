""" Canada-specific Form helpers """ from __future__ import absolute_import import re from django . core . validators import EMPTY_VALUES from django . forms import ValidationError from django . forms . fields import Field , CharField , Select from django . utils . encoding import smart_unicode from django . utils . translation import ugettext_lazy as _ phone_digits_re = re . compile ( r'^(?:1-?)?(\d{3})[-\.]?(\d{3})[-\.]?(\d{4})$' ) sin_re = re . compile ( r"^(\d{3})-(\d{3})-(\d{3})$" ) class CAPostalCodeField ( CharField ) : default_error_messages = { : _ ( u'Enter a postal code in the format XXX XXX.' ) , } postcode_regex = re . compile ( r'^([ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ]) *(\d[ABCEGHJKLMNPRSTVWXYZ]\d)$' ) def clean ( self , value ) : value = super ( CAPostalCodeField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' postcode = value . upper ( ) . strip ( ) m = self . postcode_regex . match ( postcode ) if not m : raise ValidationError ( self . default_error_messages [ 'invalid' ] ) return "%s %s" % ( m . group ( 1 ) , m . group ( 2 ) ) class CAPhoneNumberField ( Field ) : default_error_messages = { : u'Phone numbers must be in XXX-XXX-XXXX format.' , } def clean ( self , value ) : super ( CAPhoneNumberField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' value = re . sub ( '(\(|\)|\s+)' , '' , smart_unicode ( value ) ) m = phone_digits_re . search ( value ) if m : return u'%s-%s-%s' % ( m . group ( 1 ) , m . group ( 2 ) , m . group ( 3 ) ) raise ValidationError ( self . error_messages [ 'invalid' ] ) class CAProvinceField ( Field ) : default_error_messages = { : u'Enter a Canadian province or territory.' , } def clean ( self , value ) : super ( CAProvinceField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' try : value = value . strip ( ) . lower ( ) except AttributeError : pass else : from django . contrib . localflavor . ca . ca_provinces import PROVINCES_NORMALIZED try : return PROVINCES_NORMALIZED [ value . strip ( ) . lower ( ) ] . decode ( 'ascii' ) except KeyError : pass raise ValidationError ( self . error_messages [ 'invalid' ] ) class CAProvinceSelect ( Select ) : def __init__ ( self , attrs = None ) : from django . contrib . localflavor . ca . ca_provinces import PROVINCE_CHOICES super ( CAProvinceSelect , self ) . __init__ ( attrs , choices = PROVINCE_CHOICES ) class CASocialInsuranceNumberField ( Field ) : default_error_messages = { : _ ( 'Enter a valid Canadian Social Insurance number in XXX-XXX-XXX format.' ) , } def clean ( self , value ) : super ( CASocialInsuranceNumberField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' match = re . match ( sin_re , value ) if not match : raise ValidationError ( self . error_messages [ 'invalid' ] ) number = u'%s-%s-%s' % ( match . group ( 1 ) , match . group ( 2 ) , match . group ( 3 ) ) check_number = u'%s%s%s' % ( match . group ( 1 ) , match . group ( 2 ) , match . group ( 3 ) ) if not self . luhn_checksum_is_valid ( check_number ) : raise ValidationError ( self . error_messages [ 'invalid' ] ) return number def luhn_checksum_is_valid ( self , number ) : sum = 0 num_digits = len ( number ) oddeven = num_digits & 1 for count in range ( 0 , num_digits ) : digit = int ( number [ count ] ) if not ( ( count & 1 ) ^ oddeven ) : digit = digit * 2 if digit > 9 : digit = digit - 9 sum = sum + digit return ( ( sum % 10 ) == 0 )
