from __future__ import absolute_import import re from django . contrib . localflavor . cn . cn_provinces import CN_PROVINCE_CHOICES from django . forms import ValidationError from django . forms . fields import CharField , RegexField , Select from django . utils . translation import ugettext_lazy as _ __all__ = ( , , , , , ) ID_CARD_RE = r'^\d{15}(\d{2}[0-9xX])?$' POST_CODE_RE = r'^\d{6}$' PHONE_RE = r'^\d{3,4}-\d{7,8}(-\d+)?$' CELL_RE = r'^1[358]\d{9}$' CN_LOCATION_CODES = ( 11 , 12 , 13 , 14 , 15 , 21 , 22 , 23 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 41 , 42 , 43 , 44 , 45 , 46 , 50 , 51 , 52 , 53 , 54 , 61 , 62 , 63 , 64 , 65 , 71 , 81 , 91 , ) class CNProvinceSelect ( Select ) : def __init__ ( self , attrs = None ) : super ( CNProvinceSelect , self ) . __init__ ( attrs , choices = CN_PROVINCE_CHOICES , ) class CNPostCodeField ( RegexField ) : default_error_messages = { : _ ( u'Enter a post code in the format XXXXXX.' ) , } def __init__ ( self , * args , ** kwargs ) : super ( CNPostCodeField , self ) . __init__ ( POST_CODE_RE , * args , ** kwargs ) class CNIDCardField ( CharField ) : default_error_messages = { : _ ( u'ID Card Number consists of 15 or 18 digits.' ) , : _ ( u'Invalid ID Card Number: Wrong checksum' ) , : _ ( u'Invalid ID Card Number: Wrong birthdate' ) , : _ ( u'Invalid ID Card Number: Wrong location code' ) , } def __init__ ( self , max_length = 18 , min_length = 15 , * args , ** kwargs ) : super ( CNIDCardField , self ) . __init__ ( max_length , min_length , * args , ** kwargs ) def clean ( self , value ) : super ( CNIDCardField , self ) . clean ( value ) if not value : return u"" if not re . match ( ID_CARD_RE , value ) : raise ValidationError ( self . error_messages [ 'invalid' ] ) if not self . has_valid_birthday ( value ) : raise ValidationError ( self . error_messages [ 'birthday' ] ) if not self . has_valid_location ( value ) : raise ValidationError ( self . error_messages [ 'location' ] ) value = value . upper ( ) if not self . has_valid_checksum ( value ) : raise ValidationError ( self . error_messages [ 'checksum' ] ) return u'%s' % value def has_valid_birthday ( self , value ) : from datetime import datetime if len ( value ) == 15 : time_string = value [ 6 : 12 ] format_string = "%y%m%d" else : time_string = value [ 6 : 14 ] format_string = "%Y%m%d" try : datetime . strptime ( time_string , format_string ) return True except ValueError : return False def has_valid_location ( self , value ) : return int ( value [ : 2 ] ) in CN_LOCATION_CODES def has_valid_checksum ( self , value ) : if len ( value ) != 18 : return True checksum_index = sum ( map ( lambda a , b : a * ( ord ( b ) - ord ( '0' ) ) , ( 7 , 9 , 10 , 5 , 8 , 4 , 2 , 1 , 6 , 3 , 7 , 9 , 10 , 5 , 8 , 4 , 2 ) , value [ : 17 ] , ) , ) % 11 return '10X98765432' [ checksum_index ] == value [ - 1 ] class CNPhoneNumberField ( RegexField ) : default_error_messages = { : _ ( u'Enter a valid phone number.' ) , } def __init__ ( self , * args , ** kwargs ) : super ( CNPhoneNumberField , self ) . __init__ ( PHONE_RE , * args , ** kwargs ) class CNCellNumberField ( RegexField ) : default_error_messages = { : _ ( u'Enter a valid cell number.' ) , } def __init__ ( self , * args , ** kwargs ) : super ( CNCellNumberField , self ) . __init__ ( CELL_RE , * args , ** kwargs )
