""" Models can have a ``managed`` attribute, which specifies whether the SQL code is generated for the table on various manage.py operations. """ from django . db import models class A01 ( models . Model ) : f_a = models . CharField ( max_length = 10 , db_index = True ) f_b = models . IntegerField ( ) class Meta : db_table = 'a01' def __unicode__ ( self ) : return self . f_a class B01 ( models . Model ) : fk_a = models . ForeignKey ( A01 ) f_a = models . CharField ( max_length = 10 , db_index = True ) f_b = models . IntegerField ( ) class Meta : db_table = 'b01' managed = True def __unicode__ ( self ) : return self . f_a class C01 ( models . Model ) : mm_a = models . ManyToManyField ( A01 , db_table = 'd01' ) f_a = models . CharField ( max_length = 10 , db_index = True ) f_b = models . IntegerField ( ) class Meta : db_table = 'c01' def __unicode__ ( self ) : return self . f_a class A02 ( models . Model ) : f_a = models . CharField ( max_length = 10 , db_index = True ) class Meta : db_table = 'a01' managed = False def __unicode__ ( self ) : return self . f_a class B02 ( models . Model ) : class Meta : db_table = 'b01' managed = False fk_a = models . ForeignKey ( A02 ) f_a = models . CharField ( max_length = 10 , db_index = True ) f_b = models . IntegerField ( ) def __unicode__ ( self ) : return self . f_a class C02 ( models . Model ) : mm_a = models . ManyToManyField ( A02 , through = "Intermediate" ) f_a = models . CharField ( max_length = 10 , db_index = True ) f_b = models . IntegerField ( ) class Meta : db_table = 'c01' managed = False def __unicode__ ( self ) : return self . f_a class Intermediate ( models . Model ) : a02 = models . ForeignKey ( A02 , db_column = "a01_id" ) c02 = models . ForeignKey ( C02 , db_column = "c01_id" ) class Meta : db_table = 'd01' managed = False class Proxy1 ( models . Model ) : class Meta : db_table = "unmanaged_models_proxy1" class Proxy2 ( models . Model ) : class Meta : db_table = "unmanaged_models_proxy2" class Unmanaged1 ( models . Model ) : class Meta : managed = False db_table = "unmanaged_models_proxy1" class Unmanaged2 ( models . Model ) : mm = models . ManyToManyField ( Unmanaged1 ) class Meta : managed = False db_table = "unmanaged_models_proxy2" class Managed1 ( models . Model ) : mm = models . ManyToManyField ( Unmanaged1 )
