TEMPLATE_EXTENSIONS = [ , , ] PYTHON_SOURCE_EXTENSIONS = [ , ] TEMPLATE_ENCODING = "UTF-8" PYTHON_ENCODING = "UTF-8" import os import sys import re from optparse import OptionParser USAGE = """ This tool helps to locate forms that need CSRF tokens added and the corresponding view code. This processing is NOT fool proof, and you should read the help contained in the script itself. Also, this script may need configuring (by editing the script) before use. Usage: python csrf_migration_helper.py [--settings=path.to.your.settings] /path/to/python/code [more paths...] Paths can be specified as relative paths. With no arguments, this help is printed. """ _POST_FORM_RE = re . compile ( r'(<form\W[^>]*\bmethod\s*=\s*(\'|"|)POST(\'|"|)\b[^>]*>)' , re . IGNORECASE ) _FORM_CLOSE_RE = re . compile ( r'</form\s*>' ) _TOKEN_RE = re . compile ( '\{% csrf_token' ) def get_template_dirs ( ) : from django . conf import settings dirs = set ( ) if ( 'django.template.loaders.filesystem.load_template_source' in settings . TEMPLATE_LOADERS or 'django.template.loaders.filesystem.Loader' in settings . TEMPLATE_LOADERS ) : dirs . update ( map ( unicode , settings . TEMPLATE_DIRS ) ) if ( 'django.template.loaders.app_directories.load_template_source' in settings . TEMPLATE_LOADERS or 'django.template.loaders.app_directories.Loader' in settings . TEMPLATE_LOADERS ) : from django . template . loaders . app_directories import app_template_dirs dirs . update ( app_template_dirs ) return dirs def make_template_info ( filename , root_dirs ) : return Template ( filename , [ filename [ len ( d ) + 1 : ] for d in root_dirs if filename . startswith ( d ) ] ) class Template ( object ) : def __init__ ( self , absolute_filename , relative_filenames ) : self . absolute_filename , self . relative_filenames = absolute_filename , relative_filenames def content ( self ) : try : return self . _content except AttributeError : fd = open ( self . absolute_filename ) try : content = fd . read ( ) . decode ( TEMPLATE_ENCODING ) except UnicodeDecodeError , e : message = '%s in %s' % ( e [ 4 ] , self . absolute_filename . encode ( 'UTF-8' , 'ignore' ) ) raise UnicodeDecodeError ( * ( e . args [ : 4 ] + ( message , ) ) ) fd . close ( ) self . _content = content return content content = property ( content ) def post_form_info ( self ) : forms = { } form_line = 0 for ln , line in enumerate ( self . content . split ( "\n" ) ) : if not form_line and _POST_FORM_RE . search ( line ) : form_line = ln + 1 forms [ form_line ] = False if form_line and _TOKEN_RE . search ( line ) : forms [ form_line ] = True form_line = 0 if form_line and _FORM_CLOSE_RE . search ( line ) : form_line = 0 return forms . items ( ) def includes_template ( self , t ) : for r in t . relative_filenames : if re . search ( r'\{%\s*include\s+(\'|")' + re . escape ( r ) + r'(\1)\s*%\}' , self . content ) : return True return False def related_templates ( self ) : try : return self . _related_templates except AttributeError : pass retval = set ( [ self ] ) for t in self . all_templates : if t . includes_template ( self ) : retval = retval . union ( t . related_templates ( ) ) self . _related_templates = retval return retval def __repr__ ( self ) : return repr ( self . absolute_filename ) def __eq__ ( self , other ) : return self . absolute_filename == other . absolute_filename def __hash__ ( self ) : return hash ( self . absolute_filename ) def get_templates ( dirs ) : templates = set ( ) for root in dirs : for ( dirpath , dirnames , filenames ) in os . walk ( root ) : for f in filenames : if len ( [ True for e in TEMPLATE_EXTENSIONS if f . endswith ( e ) ] ) > 0 : t = make_template_info ( os . path . join ( dirpath , f ) , dirs ) t . all_templates = templates templates . add ( t ) return templates def get_python_code ( paths ) : retval = [ ] for p in paths : if not os . path . isdir ( p ) : raise Exception ( "'%s' is not a directory." % p ) for ( dirpath , dirnames , filenames ) in os . walk ( p ) : for f in filenames : if len ( [ True for e in PYTHON_SOURCE_EXTENSIONS if f . endswith ( e ) ] ) > 0 : fn = os . path . join ( dirpath , f ) fd = open ( fn ) content = [ l . decode ( PYTHON_ENCODING ) for l in fd . readlines ( ) ] fd . close ( ) retval . append ( ( fn , content ) ) return retval def search_python_list ( python_code , template_names ) : retval = [ ] for tn in template_names : retval . extend ( search_python ( python_code , tn ) ) retval = list ( set ( retval ) ) retval . sort ( ) return retval def search_python ( python_code , template_name ) : retval = [ ] for fn , content in python_code : for ln , line in enumerate ( content ) : if ( ( u'"%s"' % template_name ) in line ) or ( ( u"'%s'" % template_name ) in line ) : retval . append ( ( fn , ln + 1 ) ) return retval def main ( pythonpaths ) : template_dirs = get_template_dirs ( ) templates = get_templates ( template_dirs ) python_code = get_python_code ( pythonpaths ) for t in templates : form_matches = t . post_form_info ( ) num_post_forms = len ( form_matches ) form_lines_without_token = [ ln for ( ln , has_token ) in form_matches if not has_token ] if num_post_forms == 0 : continue to_search = [ rf for rt in t . related_templates ( ) for rf in rt . relative_filenames ] found = search_python_list ( python_code , to_search ) print t . absolute_filename for r in t . relative_filenames : print u" AKA %s" % r print u" POST forms: %s" % num_post_forms print u" With token: %s" % ( num_post_forms - len ( form_lines_without_token ) ) if form_lines_without_token : print u" Without token:" for ln in form_lines_without_token : print "%s:%d:" % ( t . absolute_filename , ln ) print print u" Searching for:" for r in to_search : print u" " + r print print u" Found:" if len ( found ) == 0 : print " Nothing" else : for fn , ln in found : print "%s:%d:" % ( fn , ln ) print print "----" parser = OptionParser ( usage = USAGE ) parser . add_option ( "" , "--settings" , action = "store" , dest = "settings" , help = "Dotted path to settings file" ) if __name__ == '__main__' : options , args = parser . parse_args ( ) if len ( args ) == 0 : parser . print_help ( ) sys . exit ( 1 ) settings = getattr ( options , 'settings' , None ) if settings is None : if os . environ . get ( "DJANGO_SETTINGS_MODULE" , None ) is None : print "You need to set DJANGO_SETTINGS_MODULE or use the '--settings' parameter" sys . exit ( 1 ) else : os . environ [ "DJANGO_SETTINGS_MODULE" ] = settings main ( args )
