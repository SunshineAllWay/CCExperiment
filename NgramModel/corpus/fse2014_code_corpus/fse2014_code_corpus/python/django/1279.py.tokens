""" Israeli-specific form helpers """ import re from django . core . exceptions import ValidationError from django . core . validators import EMPTY_VALUES from django . forms . fields import RegexField , Field , EMPTY_VALUES from django . utils . checksums import luhn from django . utils . translation import ugettext_lazy as _ id_number_re = re . compile ( r'^(?P<number>\d{1,8})-?(?P<check>\d)$' ) class ILPostalCodeField ( RegexField ) : default_error_messages = { : _ ( u'Enter a postal code in the format XXXXX' ) , } def __init__ ( self , * args , ** kwargs ) : super ( ILPostalCodeField , self ) . __init__ ( r'^\d{5}$' , * args , ** kwargs ) def clean ( self , value ) : if value not in EMPTY_VALUES : value = value . replace ( " " , "" ) return super ( ILPostalCodeField , self ) . clean ( value ) class ILIDNumberField ( Field ) : default_error_messages = { : _ ( u'Enter a valid ID number.' ) , } def clean ( self , value ) : value = super ( ILIDNumberField , self ) . clean ( value ) if value in EMPTY_VALUES : return u'' match = id_number_re . match ( value ) if not match : raise ValidationError ( self . error_messages [ 'invalid' ] ) value = match . group ( 'number' ) + match . group ( 'check' ) if not luhn ( value ) : raise ValidationError ( self . error_messages [ 'invalid' ] ) return value
