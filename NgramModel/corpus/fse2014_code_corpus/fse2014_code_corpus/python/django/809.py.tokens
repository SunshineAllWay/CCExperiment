""" A series of tests to establish that the command-line managment tools work as advertised - especially with regards to the handling of the DJANGO_SETTINGS_MODULE and default settings.py files. """ from __future__ import with_statement import os import re import shutil import socket import subprocess import sys from django import conf , bin , get_version from django . conf import settings from django . test . simple import DjangoTestSuiteRunner from django . utils import unittest from django . test import LiveServerTestCase test_dir = os . path . dirname ( os . path . dirname ( __file__ ) ) expected_query_re = re . compile ( r'CREATE TABLE [`"]admin_scripts_article[`"]' , re . IGNORECASE ) class AdminScriptTestCase ( unittest . TestCase ) : def write_settings ( self , filename , apps = None , is_dir = False , sdict = None ) : test_dir = os . path . dirname ( os . path . dirname ( __file__ ) ) if is_dir : settings_dir = os . path . join ( test_dir , filename ) os . mkdir ( settings_dir ) settings_file = open ( os . path . join ( settings_dir , '__init__.py' ) , 'w' ) else : settings_file = open ( os . path . join ( test_dir , filename ) , 'w' ) settings_file . write ( '# Settings file automatically generated by regressiontests.admin_scripts test case\n' ) exports = [ , ] for s in exports : if hasattr ( settings , s ) : o = getattr ( settings , s ) if not isinstance ( o , dict ) : o = "'%s'" % o settings_file . write ( "%s = %s\n" % ( s , o ) ) if apps is None : apps = [ 'django.contrib.auth' , 'django.contrib.contenttypes' , 'regressiontests.admin_scripts' ] settings_file . write ( "INSTALLED_APPS = %s\n" % apps ) if sdict : for k , v in sdict . items ( ) : settings_file . write ( "%s = %s\n" % ( k , v ) ) settings_file . close ( ) def remove_settings ( self , filename , is_dir = False ) : full_name = os . path . join ( test_dir , filename ) if is_dir : shutil . rmtree ( full_name ) else : os . remove ( full_name ) try : if sys . platform . startswith ( 'java' ) : os . remove ( re . sub ( r'\.py$' , '$py.class' , full_name ) ) else : os . remove ( full_name + 'c' ) except OSError : pass def _ext_backend_paths ( self ) : paths = [ ] first_package_re = re . compile ( r'(^[^\.]+)\.' ) for backend in settings . DATABASES . values ( ) : result = first_package_re . findall ( backend [ 'ENGINE' ] ) if result and result != 'django' : backend_pkg = __import__ ( result [ 0 ] ) backend_dir = os . path . dirname ( backend_pkg . __file__ ) paths . append ( os . path . dirname ( backend_dir ) ) return paths def run_test ( self , script , args , settings_file = None , apps = None ) : project_dir = os . path . dirname ( test_dir ) base_dir = os . path . dirname ( project_dir ) ext_backend_base_dirs = self . _ext_backend_paths ( ) old_django_settings_module = os . environ . get ( 'DJANGO_SETTINGS_MODULE' , None ) if sys . platform . startswith ( 'java' ) : python_path_var_name = 'JYTHONPATH' else : python_path_var_name = 'PYTHONPATH' old_python_path = os . environ . get ( python_path_var_name , None ) old_cwd = os . getcwd ( ) if settings_file : os . environ [ 'DJANGO_SETTINGS_MODULE' ] = settings_file elif 'DJANGO_SETTINGS_MODULE' in os . environ : del os . environ [ 'DJANGO_SETTINGS_MODULE' ] python_path = [ project_dir , base_dir ] python_path . extend ( ext_backend_base_dirs ) os . environ [ python_path_var_name ] = os . pathsep . join ( python_path ) cmd = [ sys . executable , '-Wignore:::django.utils.translation' , script ] os . chdir ( test_dir ) out , err = subprocess . Popen ( cmd + args , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) . communicate ( ) if old_django_settings_module : os . environ [ 'DJANGO_SETTINGS_MODULE' ] = old_django_settings_module if old_python_path : os . environ [ python_path_var_name ] = old_python_path os . chdir ( old_cwd ) return out , err def run_django_admin ( self , args , settings_file = None ) : bin_dir = os . path . abspath ( os . path . dirname ( bin . __file__ ) ) return self . run_test ( os . path . join ( bin_dir , 'django-admin.py' ) , args , settings_file ) def run_manage ( self , args , settings_file = None ) : conf_dir = os . path . dirname ( conf . __file__ ) template_manage_py = os . path . join ( conf_dir , 'project_template' , 'manage.py' ) test_manage_py = os . path . join ( test_dir , 'manage.py' ) shutil . copyfile ( template_manage_py , test_manage_py ) with open ( test_manage_py , 'r' ) as fp : manage_py_contents = fp . read ( ) manage_py_contents = manage_py_contents . replace ( , "regressiontests" ) with open ( test_manage_py , 'w' ) as fp : fp . write ( manage_py_contents ) stdout , stderr = self . run_test ( './manage.py' , args , settings_file ) os . remove ( test_manage_py ) return stdout , stderr def assertNoOutput ( self , stream ) : if sys . platform == 'win32' : stream = [ e for e in stream . splitlines ( ) if not e . startswith ( 'warning: Not importing directory' ) ] self . assertEqual ( len ( stream ) , 0 , "Stream should be empty: actually contains '%s'" % stream ) def assertOutput ( self , stream , msg ) : self . assertTrue ( msg in stream , "'%s' does not match actual output text '%s'" % ( msg , stream ) ) def assertNotInOutput ( self , stream , msg ) : self . assertFalse ( msg in stream , "'%s' matches actual output text '%s'" % ( msg , stream ) ) class DjangoAdminNoSettings ( AdminScriptTestCase ) : def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'environment variable DJANGO_SETTINGS_MODULE is undefined' ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) class DjangoAdminDefaultSettings ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'settings.py' ) def tearDown ( self ) : self . remove_settings ( 'settings.py' ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'environment variable DJANGO_SETTINGS_MODULE is undefined' ) def test_builtin_with_settings ( self ) : args = [ 'sqlall' , '--settings=regressiontests.settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'regressiontests.settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_custom_command ( self ) : args = [ 'noargs_command' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) def test_custom_command_with_settings ( self ) : args = [ 'noargs_command' , '--settings=regressiontests.settings' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) def test_custom_command_with_environment ( self ) : args = [ 'noargs_command' ] out , err = self . run_django_admin ( args , 'regressiontests.settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) class DjangoAdminFullPathDefaultSettings ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'settings.py' , [ 'django.contrib.auth' , 'django.contrib.contenttypes' , 'regressiontests.admin_scripts' ] ) def tearDown ( self ) : self . remove_settings ( 'settings.py' ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'environment variable DJANGO_SETTINGS_MODULE is undefined' ) def test_builtin_with_settings ( self ) : args = [ 'sqlall' , '--settings=regressiontests.settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'regressiontests.settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_custom_command ( self ) : args = [ 'noargs_command' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) def test_custom_command_with_settings ( self ) : args = [ 'noargs_command' , '--settings=regressiontests.settings' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) def test_custom_command_with_environment ( self ) : args = [ 'noargs_command' ] out , err = self . run_django_admin ( args , 'regressiontests.settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) class DjangoAdminMinimalSettings ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'settings.py' , apps = [ 'django.contrib.auth' , 'django.contrib.contenttypes' ] ) def tearDown ( self ) : self . remove_settings ( 'settings.py' ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'environment variable DJANGO_SETTINGS_MODULE is undefined' ) def test_builtin_with_settings ( self ) : args = [ 'sqlall' , '--settings=regressiontests.settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'App with label admin_scripts could not be found' ) def test_builtin_with_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'regressiontests.settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , 'App with label admin_scripts could not be found' ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_custom_command ( self ) : args = [ 'noargs_command' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) def test_custom_command_with_settings ( self ) : args = [ 'noargs_command' , '--settings=regressiontests.settings' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) def test_custom_command_with_environment ( self ) : args = [ 'noargs_command' ] out , err = self . run_django_admin ( args , 'regressiontests.settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) class DjangoAdminAlternateSettings ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'alternate_settings.py' ) def tearDown ( self ) : self . remove_settings ( 'alternate_settings.py' ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'environment variable DJANGO_SETTINGS_MODULE is undefined' ) def test_builtin_with_settings ( self ) : args = [ 'sqlall' , '--settings=regressiontests.alternate_settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'regressiontests.alternate_settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_custom_command ( self ) : args = [ 'noargs_command' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) def test_custom_command_with_settings ( self ) : args = [ 'noargs_command' , '--settings=regressiontests.alternate_settings' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) def test_custom_command_with_environment ( self ) : args = [ 'noargs_command' ] out , err = self . run_django_admin ( args , 'regressiontests.alternate_settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) class DjangoAdminMultipleSettings ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'settings.py' , apps = [ 'django.contrib.auth' , 'django.contrib.contenttypes' ] ) self . write_settings ( 'alternate_settings.py' ) def tearDown ( self ) : self . remove_settings ( 'settings.py' ) self . remove_settings ( 'alternate_settings.py' ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'environment variable DJANGO_SETTINGS_MODULE is undefined' ) def test_builtin_with_settings ( self ) : args = [ 'sqlall' , '--settings=regressiontests.alternate_settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'regressiontests.alternate_settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_custom_command ( self ) : args = [ 'noargs_command' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) def test_custom_command_with_settings ( self ) : args = [ 'noargs_command' , '--settings=regressiontests.alternate_settings' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) def test_custom_command_with_environment ( self ) : args = [ 'noargs_command' ] out , err = self . run_django_admin ( args , 'regressiontests.alternate_settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) class DjangoAdminSettingsDirectory ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'settings' , is_dir = True ) def tearDown ( self ) : self . remove_settings ( 'settings' , is_dir = True ) def test_setup_environ ( self ) : args = [ 'startapp' , 'settings_test' ] app_path = os . path . join ( test_dir , 'settings_test' ) out , err = self . run_django_admin ( args , 'regressiontests.settings' ) self . addCleanup ( shutil . rmtree , app_path ) self . assertNoOutput ( err ) self . assertTrue ( os . path . exists ( app_path ) ) def test_setup_environ_custom_template ( self ) : template_path = os . path . join ( test_dir , 'admin_scripts' , 'custom_templates' , 'app_template' ) args = [ 'startapp' , '--template' , template_path , 'custom_settings_test' ] app_path = os . path . join ( test_dir , 'custom_settings_test' ) out , err = self . run_django_admin ( args , 'regressiontests.settings' ) self . addCleanup ( shutil . rmtree , app_path ) self . assertNoOutput ( err ) self . assertTrue ( os . path . exists ( app_path ) ) self . assertTrue ( os . path . exists ( os . path . join ( app_path , 'api.py' ) ) ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'environment variable DJANGO_SETTINGS_MODULE is undefined' ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_custom_command ( self ) : args = [ 'noargs_command' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) def test_builtin_with_settings ( self ) : args = [ 'sqlall' , '--settings=regressiontests.settings' , 'admin_scripts' ] out , err = self . run_django_admin ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_django_admin ( args , 'regressiontests.settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) class ManageNoSettings ( AdminScriptTestCase ) : def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'regressiontests.settings'" ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) class ManageDefaultSettings ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'settings.py' ) def tearDown ( self ) : self . remove_settings ( 'settings.py' ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_settings ( self ) : args = [ 'sqlall' , '--settings=regressiontests.settings' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args , 'regressiontests.settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_custom_command ( self ) : args = [ 'noargs_command' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) def test_custom_command_with_settings ( self ) : args = [ 'noargs_command' , '--settings=regressiontests.settings' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) def test_custom_command_with_environment ( self ) : args = [ 'noargs_command' ] out , err = self . run_manage ( args , 'regressiontests.settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) class ManageFullPathDefaultSettings ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'settings.py' , [ 'django.contrib.auth' , 'django.contrib.contenttypes' , 'regressiontests.admin_scripts' ] ) def tearDown ( self ) : self . remove_settings ( 'settings.py' ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_settings ( self ) : args = [ 'sqlall' , '--settings=regressiontests.settings' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args , 'regressiontests.settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_custom_command ( self ) : args = [ 'noargs_command' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) def test_custom_command_with_settings ( self ) : args = [ 'noargs_command' , '--settings=regressiontests.settings' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) def test_custom_command_with_environment ( self ) : args = [ 'noargs_command' ] out , err = self . run_manage ( args , 'regressiontests.settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) class ManageMinimalSettings ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'settings.py' , apps = [ 'django.contrib.auth' , 'django.contrib.contenttypes' ] ) def tearDown ( self ) : self . remove_settings ( 'settings.py' ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'App with label admin_scripts could not be found' ) def test_builtin_with_settings ( self ) : args = [ 'sqlall' , '--settings=regressiontests.settings' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'App with label admin_scripts could not be found' ) def test_builtin_with_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args , 'regressiontests.settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , 'App with label admin_scripts could not be found' ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_custom_command ( self ) : args = [ 'noargs_command' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) def test_custom_command_with_settings ( self ) : args = [ 'noargs_command' , '--settings=regressiontests.settings' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) def test_custom_command_with_environment ( self ) : args = [ 'noargs_command' ] out , err = self . run_manage ( args , 'regressiontests.settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) class ManageAlternateSettings ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'alternate_settings.py' ) def tearDown ( self ) : self . remove_settings ( 'alternate_settings.py' ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'regressiontests.settings'" ) def test_builtin_with_settings ( self ) : args = [ 'sqlall' , '--settings=alternate_settings' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertRegexpMatches ( out , expected_query_re ) self . assertNoOutput ( err ) def test_builtin_with_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args , 'alternate_settings' ) self . assertRegexpMatches ( out , expected_query_re ) self . assertNoOutput ( err ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_custom_command ( self ) : args = [ 'noargs_command' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) def test_custom_command_with_settings ( self ) : args = [ 'noargs_command' , '--settings=alternate_settings' ] out , err = self . run_manage ( args ) self . assertOutput ( out , "EXECUTE:NoArgsCommand options=[('pythonpath', None), ('settings', 'alternate_settings'), ('traceback', None), ('verbosity', '1')]" ) self . assertNoOutput ( err ) def test_custom_command_with_environment ( self ) : args = [ 'noargs_command' ] out , err = self . run_manage ( args , 'alternate_settings' ) self . assertOutput ( out , "EXECUTE:NoArgsCommand options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) self . assertNoOutput ( err ) class ManageMultipleSettings ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'settings.py' , apps = [ 'django.contrib.auth' , 'django.contrib.contenttypes' ] ) self . write_settings ( 'alternate_settings.py' ) def tearDown ( self ) : self . remove_settings ( 'settings.py' ) self . remove_settings ( 'alternate_settings.py' ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'App with label admin_scripts could not be found.' ) def test_builtin_with_settings ( self ) : args = [ 'sqlall' , '--settings=alternate_settings' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args , 'alternate_settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , 'CREATE TABLE' ) def test_builtin_with_bad_settings ( self ) : args = [ 'sqlall' , '--settings=bad_settings' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_builtin_with_bad_environment ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args , 'bad_settings' ) self . assertNoOutput ( out ) self . assertOutput ( err , "Could not import settings 'bad_settings'" ) def test_custom_command ( self ) : args = [ 'noargs_command' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "Unknown command: 'noargs_command'" ) def test_custom_command_with_settings ( self ) : args = [ 'noargs_command' , '--settings=alternate_settings' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) def test_custom_command_with_environment ( self ) : args = [ 'noargs_command' ] out , err = self . run_manage ( args , 'alternate_settings' ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand" ) class ManageSettingsWithImportError ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings_with_import_error ( 'settings.py' ) def tearDown ( self ) : self . remove_settings ( 'settings.py' ) def write_settings_with_import_error ( self , filename , apps = None , is_dir = False , sdict = None ) : if is_dir : settings_dir = os . path . join ( test_dir , filename ) os . mkdir ( settings_dir ) settings_file = open ( os . path . join ( settings_dir , '__init__.py' ) , 'w' ) else : settings_file = open ( os . path . join ( test_dir , filename ) , 'w' ) settings_file . write ( '# Settings file automatically generated by regressiontests.admin_scripts test case\n' ) settings_file . write ( '# The next line will cause an import error:\nimport foo42bar\n' ) settings_file . close ( ) def test_builtin_command ( self ) : args = [ 'sqlall' , 'admin_scripts' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "No module named foo42bar" ) class ManageValidate ( AdminScriptTestCase ) : def tearDown ( self ) : self . remove_settings ( 'settings.py' ) def test_nonexistent_app ( self ) : self . write_settings ( 'settings.py' , apps = [ 'admin_scriptz.broken_app' ] , sdict = { 'USE_I18N' : False } ) args = [ 'validate' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'No module named admin_scriptz' ) def test_broken_app ( self ) : self . write_settings ( 'settings.py' , apps = [ 'admin_scripts.broken_app' ] ) args = [ 'validate' ] out , err = self . run_manage ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , 'ImportError' ) def test_complex_app ( self ) : self . write_settings ( 'settings.py' , apps = [ 'admin_scripts.complex_app' , 'admin_scripts.simple_app' ] , sdict = { 'DEBUG' : True } ) args = [ 'validate' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , '0 errors found' ) def test_app_with_import ( self ) : self . write_settings ( 'settings.py' , apps = [ 'admin_scripts.app_with_import' , , , , ] , sdict = { 'DEBUG' : True } ) args = [ 'validate' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , '0 errors found' ) class CustomTestRunner ( DjangoTestSuiteRunner ) : def __init__ ( self , * args , ** kwargs ) : assert 'liveserver' not in kwargs super ( CustomTestRunner , self ) . __init__ ( * args , ** kwargs ) def run_tests ( self , test_labels , extra_tests = None , ** kwargs ) : pass class ManageTestCommand ( AdminScriptTestCase ) : def setUp ( self ) : from django . core . management . commands . test import Command as TestCommand self . cmd = TestCommand ( ) def test_liveserver ( self ) : address_predefined = 'DJANGO_LIVE_TEST_SERVER_ADDRESS' in os . environ old_address = os . environ . get ( 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ) self . cmd . handle ( verbosity = 0 , testrunner = 'regressiontests.admin_scripts.tests.CustomTestRunner' ) self . assertEqual ( 'DJANGO_LIVE_TEST_SERVER_ADDRESS' in os . environ , address_predefined ) self . assertEqual ( os . environ . get ( 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ) , old_address ) self . cmd . handle ( verbosity = 0 , testrunner = 'regressiontests.admin_scripts.tests.CustomTestRunner' , liveserver = 'blah' ) self . assertEqual ( os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] , 'blah' ) if address_predefined : os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] = old_address else : del os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] class ManageRunserver ( AdminScriptTestCase ) : def setUp ( self ) : from django . core . management . commands . runserver import BaseRunserverCommand def monkey_run ( * args , ** options ) : return self . cmd = BaseRunserverCommand ( ) self . cmd . run = monkey_run def assertServerSettings ( self , addr , port , ipv6 = None , raw_ipv6 = False ) : self . assertEqual ( self . cmd . addr , addr ) self . assertEqual ( self . cmd . port , port ) self . assertEqual ( self . cmd . use_ipv6 , ipv6 ) self . assertEqual ( self . cmd . _raw_ipv6 , raw_ipv6 ) def test_runserver_addrport ( self ) : self . cmd . handle ( ) self . assertServerSettings ( '127.0.0.1' , '8000' ) self . cmd . handle ( addrport = "1.2.3.4:8000" ) self . assertServerSettings ( '1.2.3.4' , '8000' ) self . cmd . handle ( addrport = "7000" ) self . assertServerSettings ( '127.0.0.1' , '7000' ) @ unittest . skipUnless ( socket . has_ipv6 , "platform doesn't support IPv6" ) def test_runner_addrport_ipv6 ( self ) : self . cmd . handle ( addrport = "" , use_ipv6 = True ) self . assertServerSettings ( '::1' , '8000' , ipv6 = True , raw_ipv6 = True ) self . cmd . handle ( addrport = "7000" , use_ipv6 = True ) self . assertServerSettings ( '::1' , '7000' , ipv6 = True , raw_ipv6 = True ) self . cmd . handle ( addrport = "[2001:0db8:1234:5678::9]:7000" ) self . assertServerSettings ( '2001:0db8:1234:5678::9' , '7000' , ipv6 = True , raw_ipv6 = True ) def test_runner_hostname ( self ) : self . cmd . handle ( addrport = "localhost:8000" ) self . assertServerSettings ( 'localhost' , '8000' ) self . cmd . handle ( addrport = "test.domain.local:7000" ) self . assertServerSettings ( 'test.domain.local' , '7000' ) @ unittest . skipUnless ( socket . has_ipv6 , "platform doesn't support IPv6" ) def test_runner_hostname_ipv6 ( self ) : self . cmd . handle ( addrport = "test.domain.local:7000" , use_ipv6 = True ) self . assertServerSettings ( 'test.domain.local' , '7000' , ipv6 = True ) def test_runner_ambiguous ( self ) : self . cmd . handle ( addrport = "beef:7654" ) self . assertServerSettings ( 'beef' , '7654' ) self . cmd . handle ( addrport = "deadbeef:7654" ) self . assertServerSettings ( 'deadbeef' , '7654' ) class CommandTypes ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'settings.py' ) def tearDown ( self ) : self . remove_settings ( 'settings.py' ) def test_version ( self ) : args = [ 'version' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , get_version ( ) ) def test_version_alternative ( self ) : args1 , args2 = [ 'version' ] , [ '--version' ] self . assertEqual ( self . run_manage ( args1 ) , self . run_manage ( args2 ) ) def test_help ( self ) : args = [ 'help' ] out , err = self . run_manage ( args ) self . assertOutput ( out , "Usage: manage.py subcommand [options] [args]" ) self . assertOutput ( out , "Type 'manage.py help <subcommand>' for help on a specific subcommand." ) self . assertOutput ( out , '[django]' ) self . assertOutput ( out , 'startapp' ) self . assertOutput ( out , 'startproject' ) def test_help_commands ( self ) : args = [ 'help' , '--commands' ] out , err = self . run_manage ( args ) self . assertNotInOutput ( out , 'Usage:' ) self . assertNotInOutput ( out , 'Options:' ) self . assertNotInOutput ( out , '[django]' ) self . assertOutput ( out , 'startapp' ) self . assertOutput ( out , 'startproject' ) self . assertNotInOutput ( out , '\n\n' ) def test_help_alternative ( self ) : args1 , args2 = [ 'help' ] , [ '--help' ] self . assertEqual ( self . run_manage ( args1 ) , self . run_manage ( args2 ) ) def test_help_short_altert ( self ) : args1 , args2 = [ '--help' ] , [ '-h' ] self . assertEqual ( self . run_manage ( args1 ) , self . run_manage ( args2 ) ) def test_specific_help ( self ) : args = [ 'sqlall' , '--help' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)." ) def test_base_command ( self ) : args = [ 'base_command' , 'testlabel' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:BaseCommand labels=('testlabel',), options=[('option_a', '1'), ('option_b', '2'), ('option_c', '3'), ('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) def test_base_command_no_label ( self ) : args = [ 'base_command' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:BaseCommand labels=(), options=[('option_a', '1'), ('option_b', '2'), ('option_c', '3'), ('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) def test_base_command_multiple_label ( self ) : args = [ 'base_command' , 'testlabel' , 'anotherlabel' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:BaseCommand labels=('testlabel', 'anotherlabel'), options=[('option_a', '1'), ('option_b', '2'), ('option_c', '3'), ('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) def test_base_command_with_option ( self ) : args = [ 'base_command' , 'testlabel' , '--option_a=x' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:BaseCommand labels=('testlabel',), options=[('option_a', 'x'), ('option_b', '2'), ('option_c', '3'), ('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) def test_base_command_with_options ( self ) : args = [ 'base_command' , 'testlabel' , '-a' , 'x' , '--option_b=y' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:BaseCommand labels=('testlabel',), options=[('option_a', 'x'), ('option_b', 'y'), ('option_c', '3'), ('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) def test_noargs ( self ) : args = [ 'noargs_command' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:NoArgsCommand options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) def test_noargs_with_args ( self ) : args = [ 'noargs_command' , 'argument' ] out , err = self . run_manage ( args ) self . assertOutput ( err , "Error: Command doesn't accept any arguments" ) def test_app_command ( self ) : args = [ 'app_command' , 'auth' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:AppCommand app=<module 'django.contrib.auth.models'" ) self . assertOutput ( out , os . sep . join ( [ 'django' , 'contrib' , 'auth' , 'models.py' ] ) ) self . assertOutput ( out , "'>, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) def test_app_command_no_apps ( self ) : args = [ 'app_command' ] out , err = self . run_manage ( args ) self . assertOutput ( err , 'Error: Enter at least one appname.' ) def test_app_command_multiple_apps ( self ) : args = [ 'app_command' , 'auth' , 'contenttypes' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:AppCommand app=<module 'django.contrib.auth.models'" ) self . assertOutput ( out , os . sep . join ( [ 'django' , 'contrib' , 'auth' , 'models.py' ] ) ) self . assertOutput ( out , "'>, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) self . assertOutput ( out , "EXECUTE:AppCommand app=<module 'django.contrib.contenttypes.models'" ) self . assertOutput ( out , os . sep . join ( [ 'django' , 'contrib' , 'contenttypes' , 'models.py' ] ) ) self . assertOutput ( out , "'>, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) def test_app_command_invalid_appname ( self ) : args = [ 'app_command' , 'NOT_AN_APP' ] out , err = self . run_manage ( args ) self . assertOutput ( err , "App with label NOT_AN_APP could not be found" ) def test_app_command_some_invalid_appnames ( self ) : args = [ 'app_command' , 'auth' , 'NOT_AN_APP' ] out , err = self . run_manage ( args ) self . assertOutput ( err , "App with label NOT_AN_APP could not be found" ) def test_label_command ( self ) : args = [ 'label_command' , 'testlabel' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:LabelCommand label=testlabel, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) def test_label_command_no_label ( self ) : args = [ 'label_command' ] out , err = self . run_manage ( args ) self . assertOutput ( err , 'Enter at least one label' ) def test_label_command_multiple_label ( self ) : args = [ 'label_command' , 'testlabel' , 'anotherlabel' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:LabelCommand label=testlabel, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) self . assertOutput ( out , "EXECUTE:LabelCommand label=anotherlabel, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]" ) class ArgumentOrder ( AdminScriptTestCase ) : def setUp ( self ) : self . write_settings ( 'settings.py' , apps = [ 'django.contrib.auth' , 'django.contrib.contenttypes' ] ) self . write_settings ( 'alternate_settings.py' ) def tearDown ( self ) : self . remove_settings ( 'settings.py' ) self . remove_settings ( 'alternate_settings.py' ) def test_setting_then_option ( self ) : args = [ 'base_command' , 'testlabel' , '--settings=alternate_settings' , '--option_a=x' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:BaseCommand labels=('testlabel',), options=[('option_a', 'x'), ('option_b', '2'), ('option_c', '3'), ('pythonpath', None), ('settings', 'alternate_settings'), ('traceback', None), ('verbosity', '1')]" ) def test_setting_then_short_option ( self ) : args = [ 'base_command' , 'testlabel' , '--settings=alternate_settings' , '--option_a=x' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:BaseCommand labels=('testlabel',), options=[('option_a', 'x'), ('option_b', '2'), ('option_c', '3'), ('pythonpath', None), ('settings', 'alternate_settings'), ('traceback', None), ('verbosity', '1')]" ) def test_option_then_setting ( self ) : args = [ 'base_command' , 'testlabel' , '--option_a=x' , '--settings=alternate_settings' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:BaseCommand labels=('testlabel',), options=[('option_a', 'x'), ('option_b', '2'), ('option_c', '3'), ('pythonpath', None), ('settings', 'alternate_settings'), ('traceback', None), ('verbosity', '1')]" ) def test_short_option_then_setting ( self ) : args = [ 'base_command' , 'testlabel' , '-a' , 'x' , '--settings=alternate_settings' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:BaseCommand labels=('testlabel',), options=[('option_a', 'x'), ('option_b', '2'), ('option_c', '3'), ('pythonpath', None), ('settings', 'alternate_settings'), ('traceback', None), ('verbosity', '1')]" ) def test_option_then_setting_then_option ( self ) : args = [ 'base_command' , 'testlabel' , '--option_a=x' , '--settings=alternate_settings' , '--option_b=y' ] out , err = self . run_manage ( args ) self . assertNoOutput ( err ) self . assertOutput ( out , "EXECUTE:BaseCommand labels=('testlabel',), options=[('option_a', 'x'), ('option_b', 'y'), ('option_c', '3'), ('pythonpath', None), ('settings', 'alternate_settings'), ('traceback', None), ('verbosity', '1')]" ) class StartProject ( LiveServerTestCase , AdminScriptTestCase ) : def test_wrong_args ( self ) : out , err = self . run_django_admin ( [ 'startproject' ] ) self . assertNoOutput ( out ) self . assertOutput ( err , "you must provide a project name" ) def test_simple_project ( self ) : args = [ 'startproject' , 'testproject' ] testproject_dir = os . path . join ( test_dir , 'testproject' ) out , err = self . run_django_admin ( args ) self . addCleanup ( shutil . rmtree , testproject_dir ) self . assertNoOutput ( err ) self . assertTrue ( os . path . isdir ( testproject_dir ) ) out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "already exists" ) def test_invalid_project_name ( self ) : def cleanup ( p ) : if os . path . exists ( p ) : shutil . rmtree ( p ) args = [ 'startproject' , '7testproject' ] testproject_dir = os . path . join ( test_dir , '7testproject' ) out , err = self . run_django_admin ( args ) self . addCleanup ( cleanup , testproject_dir ) self . assertOutput ( err , "Error: '7testproject' is not a valid project name. Please make sure the name begins with a letter or underscore." ) self . assertFalse ( os . path . exists ( testproject_dir ) ) def test_simple_project_different_directory ( self ) : args = [ 'startproject' , 'testproject' , 'othertestproject' ] testproject_dir = os . path . join ( test_dir , 'othertestproject' ) os . mkdir ( testproject_dir ) out , err = self . run_django_admin ( args ) self . addCleanup ( shutil . rmtree , testproject_dir ) self . assertNoOutput ( err ) self . assertTrue ( os . path . exists ( os . path . join ( testproject_dir , 'manage.py' ) ) ) out , err = self . run_django_admin ( args ) self . assertNoOutput ( out ) self . assertOutput ( err , "already exists" ) def test_custom_project_template ( self ) : template_path = os . path . join ( test_dir , 'admin_scripts' , 'custom_templates' , 'project_template' ) args = [ 'startproject' , '--template' , template_path , 'customtestproject' ] testproject_dir = os . path . join ( test_dir , 'customtestproject' ) out , err = self . run_django_admin ( args ) self . addCleanup ( shutil . rmtree , testproject_dir ) self . assertNoOutput ( err ) self . assertTrue ( os . path . isdir ( testproject_dir ) ) self . assertTrue ( os . path . exists ( os . path . join ( testproject_dir , 'additional_dir' ) ) ) def test_template_dir_with_trailing_slash ( self ) : template_path = os . path . join ( test_dir , 'admin_scripts' , 'custom_templates' , 'project_template' + os . sep ) args = [ 'startproject' , '--template' , template_path , 'customtestproject' ] testproject_dir = os . path . join ( test_dir , 'customtestproject' ) out , err = self . run_django_admin ( args ) self . addCleanup ( shutil . rmtree , testproject_dir ) self . assertNoOutput ( err ) self . assertTrue ( os . path . isdir ( testproject_dir ) ) self . assertTrue ( os . path . exists ( os . path . join ( testproject_dir , 'additional_dir' ) ) ) def test_custom_project_template_from_tarball_by_path ( self ) : template_path = os . path . join ( test_dir , 'admin_scripts' , 'custom_templates' , 'project_template.tgz' ) args = [ 'startproject' , '--template' , template_path , 'tarballtestproject' ] testproject_dir = os . path . join ( test_dir , 'tarballtestproject' ) out , err = self . run_django_admin ( args ) self . addCleanup ( shutil . rmtree , testproject_dir ) self . assertNoOutput ( err ) self . assertTrue ( os . path . isdir ( testproject_dir ) ) self . assertTrue ( os . path . exists ( os . path . join ( testproject_dir , 'run.py' ) ) ) def test_custom_project_template_from_tarball_to_alternative_location ( self ) : template_path = os . path . join ( test_dir , 'admin_scripts' , 'custom_templates' , 'project_template.tgz' ) args = [ 'startproject' , '--template' , template_path , 'tarballtestproject' , 'altlocation' ] testproject_dir = os . path . join ( test_dir , 'altlocation' ) os . mkdir ( testproject_dir ) out , err = self . run_django_admin ( args ) self . addCleanup ( shutil . rmtree , testproject_dir ) self . assertNoOutput ( err ) self . assertTrue ( os . path . isdir ( testproject_dir ) ) self . assertTrue ( os . path . exists ( os . path . join ( testproject_dir , 'run.py' ) ) ) def test_custom_project_template_from_tarball_by_url ( self ) : template_url = '%s/admin_scripts/custom_templates/project_template.tgz' % self . live_server_url args = [ 'startproject' , '--template' , template_url , 'urltestproject' ] testproject_dir = os . path . join ( test_dir , 'urltestproject' ) out , err = self . run_django_admin ( args ) self . addCleanup ( shutil . rmtree , testproject_dir ) self . assertNoOutput ( err ) self . assertTrue ( os . path . isdir ( testproject_dir ) ) self . assertTrue ( os . path . exists ( os . path . join ( testproject_dir , 'run.py' ) ) ) def test_project_template_tarball_url ( self ) : template_url = '%s/admin_scripts/custom_templates/project_template.tgz/' % self . live_server_url args = [ 'startproject' , '--template' , template_url , 'urltestproject' ] testproject_dir = os . path . join ( test_dir , 'urltestproject' ) out , err = self . run_django_admin ( args ) self . addCleanup ( shutil . rmtree , testproject_dir ) self . assertNoOutput ( err ) self . assertTrue ( os . path . isdir ( testproject_dir ) ) self . assertTrue ( os . path . exists ( os . path . join ( testproject_dir , 'run.py' ) ) ) def test_file_without_extension ( self ) : template_path = os . path . join ( test_dir , 'admin_scripts' , 'custom_templates' , 'project_template' ) args = [ 'startproject' , '--template' , template_path , 'customtestproject' , '-e' , 'txt' , '-n' , 'Procfile' ] testproject_dir = os . path . join ( test_dir , 'customtestproject' ) out , err = self . run_django_admin ( args ) self . addCleanup ( shutil . rmtree , testproject_dir ) self . assertNoOutput ( err ) self . assertTrue ( os . path . isdir ( testproject_dir ) ) self . assertTrue ( os . path . exists ( os . path . join ( testproject_dir , 'additional_dir' ) ) ) base_path = os . path . join ( testproject_dir , 'additional_dir' ) for f in ( 'Procfile' , 'additional_file.py' , 'requirements.txt' ) : self . assertTrue ( os . path . exists ( os . path . join ( base_path , f ) ) ) with open ( os . path . join ( base_path , f ) ) as fh : self . assertEqual ( fh . read ( ) , )
