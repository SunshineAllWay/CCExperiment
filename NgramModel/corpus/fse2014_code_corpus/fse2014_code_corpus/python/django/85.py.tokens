""" Testing signals emitted on changing m2m relations. """ from . models import Person from django . db import models from django . test import TestCase from . models import Part , Car , SportsCar , Person class ManyToManySignalsTest ( TestCase ) : def m2m_changed_signal_receiver ( self , signal , sender , ** kwargs ) : message = { : kwargs [ 'instance' ] , : kwargs [ 'action' ] , : kwargs [ 'reverse' ] , : kwargs [ 'model' ] , } if kwargs [ 'pk_set' ] : message [ 'objects' ] = list ( kwargs [ 'model' ] . objects . filter ( pk__in = kwargs [ 'pk_set' ] ) ) self . m2m_changed_messages . append ( message ) def setUp ( self ) : self . m2m_changed_messages = [ ] self . vw = Car . objects . create ( name = 'VW' ) self . bmw = Car . objects . create ( name = 'BMW' ) self . toyota = Car . objects . create ( name = 'Toyota' ) self . wheelset = Part . objects . create ( name = 'Wheelset' ) self . doors = Part . objects . create ( name = 'Doors' ) self . engine = Part . objects . create ( name = 'Engine' ) self . airbag = Part . objects . create ( name = 'Airbag' ) self . sunroof = Part . objects . create ( name = 'Sunroof' ) self . alice = Person . objects . create ( name = 'Alice' ) self . bob = Person . objects . create ( name = 'Bob' ) self . chuck = Person . objects . create ( name = 'Chuck' ) self . daisy = Person . objects . create ( name = 'Daisy' ) def tearDown ( self ) : models . signals . m2m_changed . disconnect ( self . m2m_changed_signal_receiver , Car . default_parts . through ) models . signals . m2m_changed . disconnect ( self . m2m_changed_signal_receiver , Car . optional_parts . through ) models . signals . m2m_changed . disconnect ( self . m2m_changed_signal_receiver , Person . fans . through ) models . signals . m2m_changed . disconnect ( self . m2m_changed_signal_receiver , Person . friends . through ) def test_m2m_relations_add_remove_clear ( self ) : expected_messages = [ ] models . signals . m2m_changed . connect ( self . m2m_changed_signal_receiver , Car . optional_parts . through ) self . vw . default_parts . add ( self . sunroof ) models . signals . m2m_changed . connect ( self . m2m_changed_signal_receiver , Car . default_parts . through ) self . vw . default_parts . add ( self . wheelset , self . doors , self . engine ) expected_messages . append ( { : self . vw , : 'pre_add' , : False , : Part , : [ self . doors , self . engine , self . wheelset ] , } ) expected_messages . append ( { : self . vw , : 'post_add' , : False , : Part , : [ self . doors , self . engine , self . wheelset ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . doors . car_set . add ( self . bmw , self . toyota ) expected_messages . append ( { : self . doors , : 'pre_add' , : True , : Car , : [ self . bmw , self . toyota ] , } ) expected_messages . append ( { : self . doors , : 'post_add' , : True , : Car , : [ self . bmw , self . toyota ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . vw . default_parts . remove ( self . engine , self . airbag ) expected_messages . append ( { : self . vw , : 'pre_remove' , : False , : Part , : [ self . airbag , self . engine ] , } ) expected_messages . append ( { : self . vw , : 'post_remove' , : False , : Part , : [ self . airbag , self . engine ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . vw . optional_parts . add ( self . airbag , self . sunroof ) expected_messages . append ( { : self . vw , : 'pre_add' , : False , : Part , : [ self . airbag , self . sunroof ] , } ) expected_messages . append ( { : self . vw , : 'post_add' , : False , : Part , : [ self . airbag , self . sunroof ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . airbag . cars_optional . add ( self . vw , self . bmw , self . toyota ) expected_messages . append ( { : self . airbag , : 'pre_add' , : True , : Car , : [ self . bmw , self . toyota ] , } ) expected_messages . append ( { : self . airbag , : 'post_add' , : True , : Car , : [ self . bmw , self . toyota ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . airbag . cars_optional . remove ( self . vw ) expected_messages . append ( { : self . airbag , : 'pre_remove' , : True , : Car , : [ self . vw ] , } ) expected_messages . append ( { : self . airbag , : 'post_remove' , : True , : Car , : [ self . vw ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . vw . default_parts . clear ( ) expected_messages . append ( { : self . vw , : 'pre_clear' , : False , : Part , } ) expected_messages . append ( { : self . vw , : 'post_clear' , : False , : Part , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . doors . car_set . clear ( ) expected_messages . append ( { : self . doors , : 'pre_clear' , : True , : Car , } ) expected_messages . append ( { : self . doors , : 'post_clear' , : True , : Car , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . airbag . cars_optional . clear ( ) expected_messages . append ( { : self . airbag , : 'pre_clear' , : True , : Car , } ) expected_messages . append ( { : self . airbag , : 'post_clear' , : True , : Car , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . vw . default_parts . create ( name = 'Windows' ) p6 = Part . objects . get ( name = 'Windows' ) expected_messages . append ( { : self . vw , : 'pre_add' , : False , : Part , : [ p6 ] , } ) expected_messages . append ( { : self . vw , : 'post_add' , : False , : Part , : [ p6 ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . vw . default_parts = [ self . wheelset , self . doors , self . engine ] expected_messages . append ( { : self . vw , : 'pre_clear' , : False , : Part , } ) expected_messages . append ( { : self . vw , : 'post_clear' , : False , : Part , } ) expected_messages . append ( { : self . vw , : 'pre_add' , : False , : Part , : [ self . doors , self . engine , self . wheelset ] , } ) expected_messages . append ( { : self . vw , : 'post_add' , : False , : Part , : [ self . doors , self . engine , self . wheelset ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) c4 = SportsCar . objects . create ( name = 'Bugatti' , price = '1000000' ) c4b = Car . objects . get ( name = 'Bugatti' ) c4 . default_parts = [ self . doors ] expected_messages . append ( { : c4 , : 'pre_clear' , : False , : Part , } ) expected_messages . append ( { : c4 , : 'post_clear' , : False , : Part , } ) expected_messages . append ( { : c4 , : 'pre_add' , : False , : Part , : [ self . doors ] , } ) expected_messages . append ( { : c4 , : 'post_add' , : False , : Part , : [ self . doors ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . engine . car_set . add ( c4 ) expected_messages . append ( { : self . engine , : 'pre_add' , : True , : Car , : [ c4b ] , } ) expected_messages . append ( { : self . engine , : 'post_add' , : True , : Car , : [ c4b ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) def test_m2m_relations_with_self ( self ) : expected_messages = [ ] models . signals . m2m_changed . connect ( self . m2m_changed_signal_receiver , Person . fans . through ) models . signals . m2m_changed . connect ( self . m2m_changed_signal_receiver , Person . friends . through ) self . alice . friends = [ self . bob , self . chuck ] expected_messages . append ( { : self . alice , : 'pre_clear' , : False , : Person , } ) expected_messages . append ( { : self . alice , : 'post_clear' , : False , : Person , } ) expected_messages . append ( { : self . alice , : 'pre_add' , : False , : Person , : [ self . bob , self . chuck ] , } ) expected_messages . append ( { : self . alice , : 'post_add' , : False , : Person , : [ self . bob , self . chuck ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . alice . fans = [ self . daisy ] expected_messages . append ( { : self . alice , : 'pre_clear' , : False , : Person , } ) expected_messages . append ( { : self . alice , : 'post_clear' , : False , : Person , } ) expected_messages . append ( { : self . alice , : 'pre_add' , : False , : Person , : [ self . daisy ] , } ) expected_messages . append ( { : self . alice , : 'post_add' , : False , : Person , : [ self . daisy ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages ) self . chuck . idols = [ self . alice , self . bob ] expected_messages . append ( { : self . chuck , : 'pre_clear' , : True , : Person , } ) expected_messages . append ( { : self . chuck , : 'post_clear' , : True , : Person , } ) expected_messages . append ( { : self . chuck , : 'pre_add' , : True , : Person , : [ self . alice , self . bob ] , } ) expected_messages . append ( { : self . chuck , : 'post_add' , : True , : Person , : [ self . alice , self . bob ] , } ) self . assertEqual ( self . m2m_changed_messages , expected_messages )
