import urlparse from functools import wraps from django . conf import settings from django . contrib . auth import REDIRECT_FIELD_NAME from django . core . exceptions import PermissionDenied from django . utils . decorators import available_attrs def user_passes_test ( test_func , login_url = None , redirect_field_name = REDIRECT_FIELD_NAME ) : def decorator ( view_func ) : @ wraps ( view_func , assigned = available_attrs ( view_func ) ) def _wrapped_view ( request , * args , ** kwargs ) : if test_func ( request . user ) : return view_func ( request , * args , ** kwargs ) path = request . build_absolute_uri ( ) login_scheme , login_netloc = urlparse . urlparse ( login_url or settings . LOGIN_URL ) [ : 2 ] current_scheme , current_netloc = urlparse . urlparse ( path ) [ : 2 ] if ( ( not login_scheme or login_scheme == current_scheme ) and ( not login_netloc or login_netloc == current_netloc ) ) : path = request . get_full_path ( ) from django . contrib . auth . views import redirect_to_login return redirect_to_login ( path , login_url , redirect_field_name ) return _wrapped_view return decorator def login_required ( function = None , redirect_field_name = REDIRECT_FIELD_NAME , login_url = None ) : actual_decorator = user_passes_test ( lambda u : u . is_authenticated ( ) , login_url = login_url , redirect_field_name = redirect_field_name ) if function : return actual_decorator ( function ) return actual_decorator def permission_required ( perm , login_url = None , raise_exception = False ) : def check_perms ( user ) : if user . has_perm ( perm ) : return True if raise_exception : raise PermissionDenied return False return user_passes_test ( check_perms , login_url = login_url )
