""" Cache middleware. If enabled, each Django-powered page will be cached based on URL. The canonical way to enable cache middleware is to set ``UpdateCacheMiddleware`` as your first piece of middleware, and ``FetchFromCacheMiddleware`` as the last:: MIDDLEWARE_CLASSES = [ 'django.middleware.cache.UpdateCacheMiddleware', ... 'django.middleware.cache.FetchFromCacheMiddleware' ] This is counter-intuitive, but correct: ``UpdateCacheMiddleware`` needs to run last during the response phase, which processes middleware bottom-up; ``FetchFromCacheMiddleware`` needs to run last during the request phase, which processes middleware top-down. The single-class ``CacheMiddleware`` can be used for some simple sites. However, if any other piece of middleware needs to affect the cache key, you'll need to use the two-part ``UpdateCacheMiddleware`` and ``FetchFromCacheMiddleware``. This'll most often happen when you're using Django's ``LocaleMiddleware``. More details about how the caching works: * Only GET or HEAD-requests with status code 200 are cached. * The number of seconds each page is stored for is set by the "max-age" section of the response's "Cache-Control" header, falling back to the CACHE_MIDDLEWARE_SECONDS setting if the section was not found. * If CACHE_MIDDLEWARE_ANONYMOUS_ONLY is set to True, only anonymous requests (i.e., those not made by a logged-in user) will be cached. This is a simple and effective way of avoiding the caching of the Django admin (and any other user-specific content). * This middleware expects that a HEAD request is answered with the same response headers exactly like the corresponding GET request. * When a hit occurs, a shallow copy of the original response object is returned from process_request. * Pages will be cached based on the contents of the request headers listed in the response's "Vary" header. * This middleware also sets ETag, Last-Modified, Expires and Cache-Control headers on the response object. """ from django . conf import settings from django . core . cache import get_cache , DEFAULT_CACHE_ALIAS from django . utils . cache import get_cache_key , learn_cache_key , patch_response_headers , get_max_age class UpdateCacheMiddleware ( object ) : def __init__ ( self ) : self . cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS self . key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX self . cache_anonymous_only = getattr ( settings , 'CACHE_MIDDLEWARE_ANONYMOUS_ONLY' , False ) self . cache_alias = settings . CACHE_MIDDLEWARE_ALIAS self . cache = get_cache ( self . cache_alias ) def _session_accessed ( self , request ) : try : return request . session . accessed except AttributeError : return False def _should_update_cache ( self , request , response ) : if not hasattr ( request , '_cache_update_cache' ) or not request . _cache_update_cache : return False if self . cache_anonymous_only and self . _session_accessed ( request ) : assert hasattr ( request , 'user' ) , "The Django cache middleware with CACHE_MIDDLEWARE_ANONYMOUS_ONLY=True requires authentication middleware to be installed. Edit your MIDDLEWARE_CLASSES setting to insert 'django.contrib.auth.middleware.AuthenticationMiddleware' before the CacheMiddleware." if request . user . is_authenticated ( ) : return False return True def process_response ( self , request , response ) : if not self . _should_update_cache ( request , response ) : return response if not response . status_code == 200 : return response timeout = get_max_age ( response ) if timeout == None : timeout = self . cache_timeout elif timeout == 0 : return response patch_response_headers ( response , timeout ) if timeout : cache_key = learn_cache_key ( request , response , timeout , self . key_prefix , cache = self . cache ) if hasattr ( response , 'render' ) and callable ( response . render ) : response . add_post_render_callback ( lambda r : self . cache . set ( cache_key , r , timeout ) ) else : self . cache . set ( cache_key , response , timeout ) return response class FetchFromCacheMiddleware ( object ) : def __init__ ( self ) : self . cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS self . key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX self . cache_anonymous_only = getattr ( settings , 'CACHE_MIDDLEWARE_ANONYMOUS_ONLY' , False ) self . cache_alias = settings . CACHE_MIDDLEWARE_ALIAS self . cache = get_cache ( self . cache_alias ) def process_request ( self , request ) : if not request . method in ( 'GET' , 'HEAD' ) : request . _cache_update_cache = False return None cache_key = get_cache_key ( request , self . key_prefix , 'GET' , cache = self . cache ) if cache_key is None : request . _cache_update_cache = True return None response = self . cache . get ( cache_key , None ) if response is None and request . method == 'HEAD' : cache_key = get_cache_key ( request , self . key_prefix , 'HEAD' , cache = self . cache ) response = self . cache . get ( cache_key , None ) if response is None : request . _cache_update_cache = True return None request . _cache_update_cache = False return response class CacheMiddleware ( UpdateCacheMiddleware , FetchFromCacheMiddleware ) : def __init__ ( self , cache_timeout = None , cache_anonymous_only = None , ** kwargs ) : cache_kwargs = { } try : self . key_prefix = kwargs [ 'key_prefix' ] if self . key_prefix is not None : cache_kwargs [ 'KEY_PREFIX' ] = self . key_prefix else : self . key_prefix = '' except KeyError : self . key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX cache_kwargs [ 'KEY_PREFIX' ] = self . key_prefix try : self . cache_alias = kwargs [ 'cache_alias' ] if self . cache_alias is None : self . cache_alias = DEFAULT_CACHE_ALIAS if cache_timeout is not None : cache_kwargs [ 'TIMEOUT' ] = cache_timeout except KeyError : self . cache_alias = settings . CACHE_MIDDLEWARE_ALIAS if cache_timeout is None : cache_kwargs [ 'TIMEOUT' ] = settings . CACHE_MIDDLEWARE_SECONDS else : cache_kwargs [ 'TIMEOUT' ] = cache_timeout if cache_anonymous_only is None : self . cache_anonymous_only = getattr ( settings , 'CACHE_MIDDLEWARE_ANONYMOUS_ONLY' , False ) else : self . cache_anonymous_only = cache_anonymous_only self . cache = get_cache ( self . cache_alias , ** cache_kwargs ) self . cache_timeout = self . cache . default_timeout
