""" The GeometryProxy object, allows for lazy-geometries. The proxy uses Python descriptors for instantiating and setting Geometry objects corresponding to geographic model fields. Thanks to Robert Coup for providing this functionality (see #4322). """ class GeometryProxy ( object ) : def __init__ ( self , klass , field ) : self . _field = field self . _klass = klass def __get__ ( self , obj , type = None ) : if obj is None : return self geom_value = obj . __dict__ [ self . _field . attname ] if isinstance ( geom_value , self . _klass ) : geom = geom_value elif ( geom_value is None ) or ( geom_value == '' ) : geom = None else : geom = self . _klass ( geom_value ) setattr ( obj , self . _field . attname , geom ) return geom def __set__ ( self , obj , value ) : gtype = self . _field . geom_type if isinstance ( value , self . _klass ) and ( str ( value . geom_type ) . upper ( ) == gtype or gtype == 'GEOMETRY' ) : if value . srid is None : value . srid = self . _field . srid elif value is None or isinstance ( value , ( basestring , buffer ) ) : pass else : raise TypeError ( 'cannot set %s GeometryProxy with value of type: %s' % ( obj . __class__ . __name__ , type ( value ) ) ) obj . __dict__ [ self . _field . attname ] = value return value
