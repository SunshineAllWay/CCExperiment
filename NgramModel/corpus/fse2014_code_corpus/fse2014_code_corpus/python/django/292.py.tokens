import datetime from django . contrib . localflavor . generic . forms import DateField , DateTimeField from django . test import SimpleTestCase class GenericLocalFlavorTests ( SimpleTestCase ) : def test_GenericDateField ( self ) : error_invalid = [ u'Enter a valid date.' ] valid = { datetime . date ( 2006 , 10 , 25 ) : datetime . date ( 2006 , 10 , 25 ) , datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) : datetime . date ( 2006 , 10 , 25 ) , datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 59 ) : datetime . date ( 2006 , 10 , 25 ) , datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 59 , 200 ) : datetime . date ( 2006 , 10 , 25 ) , : datetime . date ( 2006 , 10 , 25 ) , : datetime . date ( 2006 , 10 , 25 ) , : datetime . date ( 2006 , 10 , 25 ) , : datetime . date ( 2006 , 10 , 25 ) , : datetime . date ( 2006 , 10 , 25 ) , : datetime . date ( 2006 , 10 , 25 ) , : datetime . date ( 2006 , 10 , 25 ) , : datetime . date ( 2006 , 10 , 25 ) , } invalid = { : error_invalid , : error_invalid , : error_invalid , } self . assertFieldOutput ( DateField , valid , invalid , empty_value = None ) valid = { datetime . date ( 2006 , 10 , 25 ) : datetime . date ( 2006 , 10 , 25 ) , datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) : datetime . date ( 2006 , 10 , 25 ) , : datetime . date ( 2006 , 10 , 25 ) , } invalid = { : error_invalid , : error_invalid , : error_invalid , } kwargs = { 'input_formats' : [ '%Y %m %d' ] , } self . assertFieldOutput ( DateField , valid , invalid , field_kwargs = kwargs , empty_value = None ) def test_GenericDateTimeField ( self ) : error_invalid = [ u'Enter a valid date/time.' ] valid = { datetime . date ( 2006 , 10 , 25 ) : datetime . datetime ( 2006 , 10 , 25 , 0 , 0 ) , datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) , datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 59 ) : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 59 ) , datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 59 , 200 ) : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 59 , 200 ) , : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 45 ) , : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) , : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) , : datetime . datetime ( 2006 , 10 , 25 , 0 , 0 ) , : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 45 ) , : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) , : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) , : datetime . datetime ( 2006 , 10 , 25 , 0 , 0 ) , : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 45 ) , : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) , : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) , : datetime . datetime ( 2006 , 10 , 25 , 0 , 0 ) , } invalid = { : error_invalid , : error_invalid , } self . assertFieldOutput ( DateTimeField , valid , invalid , empty_value = None ) valid = { datetime . date ( 2006 , 10 , 25 ) : datetime . datetime ( 2006 , 10 , 25 , 0 , 0 ) , datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) , datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 59 ) : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 59 ) , datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 59 , 200 ) : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 , 59 , 200 ) , : datetime . datetime ( 2006 , 10 , 25 , 14 , 30 ) , } invalid = { : error_invalid , } kwargs = { 'input_formats' : [ '%Y %m %d %I:%M %p' ] , } self . assertFieldOutput ( DateTimeField , valid , invalid , field_kwargs = kwargs , empty_value = None )
