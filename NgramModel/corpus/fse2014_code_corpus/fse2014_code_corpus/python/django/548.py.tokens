import warnings from django . conf import settings from django . contrib . auth . decorators import login_required from django . http import HttpResponse , HttpResponseRedirect from django . core . exceptions import SuspiciousOperation from django . shortcuts import render_to_response from django . utils import simplejson from django . utils . encoding import smart_str from django . core . serializers . json import DjangoJSONEncoder from django . test . client import CONTENT_TYPE_RE from django . template import RequestContext def no_template_view ( request ) : return HttpResponse ( "No template used. Sample content: twice once twice. Content ends." ) def staff_only_view ( request ) : if request . user . is_staff : return HttpResponse ( '' ) else : raise SuspiciousOperation ( ) def get_view ( request ) : return HttpResponse ( "Hello world" ) get_view = login_required ( get_view ) def request_data ( request , template = 'base.html' , data = 'sausage' ) : return render_to_response ( template , { : request . GET . get ( 'foo' , None ) , : request . GET . get ( 'bar' , None ) , : request . POST . get ( 'foo' , None ) , : request . POST . get ( 'bar' , None ) , : request . REQUEST . get ( 'foo' , None ) , : request . REQUEST . get ( 'bar' , None ) , : data , } ) def view_with_argument ( request , name ) : if name == 'Arthur Dent' : return HttpResponse ( 'Hi, Arthur' ) else : return HttpResponse ( 'Howdy, %s' % name ) def login_protected_redirect_view ( request ) : return HttpResponseRedirect ( '/test_client_regress/get_view/' ) login_protected_redirect_view = login_required ( login_protected_redirect_view ) def set_session_view ( request ) : request . session [ 'session_var' ] = 'YES' return HttpResponse ( 'set_session' ) def check_session_view ( request ) : return HttpResponse ( request . session . get ( 'session_var' , 'NO' ) ) def request_methods_view ( request ) : return HttpResponse ( 'request method: %s' % request . method ) def return_unicode ( request ) : return render_to_response ( 'unicode.html' ) def return_json_file ( request ) : match = CONTENT_TYPE_RE . match ( request . META [ 'CONTENT_TYPE' ] ) if match : charset = match . group ( 1 ) else : charset = settings . DEFAULT_CHARSET obj_dict = simplejson . loads ( request . body . decode ( charset ) ) obj_json = simplejson . dumps ( obj_dict , encoding = charset , cls = DjangoJSONEncoder , ensure_ascii = False ) response = HttpResponse ( smart_str ( obj_json , encoding = charset ) , status = 200 , mimetype = 'application/json; charset=' + charset ) response [ 'Content-Disposition' ] = 'attachment; filename=testfile.json' return response def check_headers ( request ) : return HttpResponse ( 'HTTP_X_ARG_CHECK: %s' % request . META . get ( 'HTTP_X_ARG_CHECK' , 'Undefined' ) ) def body ( request ) : return HttpResponse ( request . body ) def read_all ( request ) : return HttpResponse ( request . read ( ) ) def read_buffer ( request ) : return HttpResponse ( request . read ( 99999 ) ) def request_context_view ( request ) : request . special_path = request . path return render_to_response ( 'request_context.html' , context_instance = RequestContext ( request , { } ) )
