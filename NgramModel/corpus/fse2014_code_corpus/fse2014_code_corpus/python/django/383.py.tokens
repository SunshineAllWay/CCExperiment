from django . contrib . localflavor . cn . forms import ( CNProvinceSelect , CNPostCodeField , CNIDCardField , CNPhoneNumberField , CNCellNumberField ) from django . test import SimpleTestCase class CNLocalFlavorTests ( SimpleTestCase ) : def test_CNProvinceSelect ( self ) : f = CNProvinceSelect ( ) correct_output = u'''<select name="provinces"> <option value="anhui">\u5b89\u5fbd</option> <option value="beijing">\u5317\u4eac</option> <option value="chongqing">\u91cd\u5e86</option> <option value="fujian">\u798f\u5efa</option> <option value="gansu">\u7518\u8083</option> <option value="guangdong">\u5e7f\u4e1c</option> <option value="guangxi">\u5e7f\u897f\u58ee\u65cf\u81ea\u6cbb\u533a</option> <option value="guizhou">\u8d35\u5dde</option> <option value="hainan">\u6d77\u5357</option> <option value="hebei">\u6cb3\u5317</option> <option value="heilongjiang">\u9ed1\u9f99\u6c5f</option> <option value="henan">\u6cb3\u5357</option> <option value="hongkong">\u9999\u6e2f</option> <option value="hubei" selected="selected">\u6e56\u5317</option> <option value="hunan">\u6e56\u5357</option> <option value="jiangsu">\u6c5f\u82cf</option> <option value="jiangxi">\u6c5f\u897f</option> <option value="jilin">\u5409\u6797</option> <option value="liaoning">\u8fbd\u5b81</option> <option value="macao">\u6fb3\u95e8</option> <option value="neimongol">\u5185\u8499\u53e4\u81ea\u6cbb\u533a</option> <option value="ningxia">\u5b81\u590f\u56de\u65cf\u81ea\u6cbb\u533a</option> <option value="qinghai">\u9752\u6d77</option> <option value="shaanxi">\u9655\u897f</option> <option value="shandong">\u5c71\u4e1c</option> <option value="shanghai">\u4e0a\u6d77</option> <option value="shanxi">\u5c71\u897f</option> <option value="sichuan">\u56db\u5ddd</option> <option value="taiwan">\u53f0\u6e7e</option> <option value="tianjin">\u5929\u6d25</option> <option value="xinjiang">\u65b0\u7586\u7ef4\u543e\u5c14\u81ea\u6cbb\u533a</option> <option value="xizang">\u897f\u85cf\u81ea\u6cbb\u533a</option> <option value="yunnan">\u4e91\u5357</option> <option value="zhejiang">\u6d59\u6c5f</option> </select>''' self . assertHTMLEqual ( f . render ( 'provinces' , 'hubei' ) , correct_output ) def test_CNPostCodeField ( self ) : error_format = [ u'Enter a post code in the format XXXXXX.' ] valid = { : u'091209' } invalid = { : error_format , : error_format } self . assertFieldOutput ( CNPostCodeField , valid , invalid ) def test_CNIDCardField ( self ) : valid = { : u'110101491001001' , : u'11010119491001001X' , : u'11010119491001001X' } wrong_format = [ u'ID Card Number consists of 15 or 18 digits.' ] wrong_location = [ u'Invalid ID Card Number: Wrong location code' ] wrong_bday = [ u'Invalid ID Card Number: Wrong birthdate' ] wrong_checksum = [ u'Invalid ID Card Number: Wrong checksum' ] invalid = { : wrong_format , : wrong_format , : wrong_location , : wrong_bday , : wrong_location , : wrong_bday , : wrong_checksum } self . assertFieldOutput ( CNIDCardField , valid , invalid ) def test_CNPhoneNumberField ( self ) : error_format = [ u'Enter a valid phone number.' ] valid = { : u'010-12345678' , : u'010-1234567' , : u'0101-12345678' , : u'0101-1234567' , : u'010-12345678-020' } invalid = { : error_format , : error_format , : error_format , : error_format , : error_format } self . assertFieldOutput ( CNPhoneNumberField , valid , invalid ) def test_CNCellNumberField ( self ) : error_format = [ u'Enter a valid cell number.' ] valid = { : u'13012345678' , } invalid = { : error_format , : error_format } self . assertFieldOutput ( CNCellNumberField , valid , invalid )
