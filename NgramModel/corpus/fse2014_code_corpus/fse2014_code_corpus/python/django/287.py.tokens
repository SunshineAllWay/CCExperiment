from __future__ import absolute_import from django . contrib . auth . models import User from django . db import models class Animal ( models . Model ) : name = models . CharField ( max_length = 150 ) latin_name = models . CharField ( max_length = 150 ) count = models . IntegerField ( ) weight = models . FloatField ( ) specimens = models . Manager ( ) def __unicode__ ( self ) : return self . name class Plant ( models . Model ) : name = models . CharField ( max_length = 150 ) class Meta : db_table = "Fixtures_regress_plant" class Stuff ( models . Model ) : name = models . CharField ( max_length = 20 , null = True ) owner = models . ForeignKey ( User , null = True ) def __unicode__ ( self ) : return unicode ( self . name ) + u' is owned by ' + unicode ( self . owner ) class Absolute ( models . Model ) : name = models . CharField ( max_length = 40 ) load_count = 0 def __init__ ( self , * args , ** kwargs ) : super ( Absolute , self ) . __init__ ( * args , ** kwargs ) Absolute . load_count += 1 class Parent ( models . Model ) : name = models . CharField ( max_length = 10 ) class Meta : ordering = ( 'id' , ) class Child ( Parent ) : data = models . CharField ( max_length = 10 ) class Channel ( models . Model ) : name = models . CharField ( max_length = 255 ) class Article ( models . Model ) : title = models . CharField ( max_length = 255 ) channels = models . ManyToManyField ( Channel ) class Meta : ordering = ( 'id' , ) class Widget ( models . Model ) : name = models . CharField ( max_length = 255 ) class Meta : ordering = ( 'name' , ) def __unicode__ ( self ) : return self . name class WidgetProxy ( Widget ) : class Meta : proxy = True class TestManager ( models . Manager ) : def get_by_natural_key ( self , key ) : return self . get ( name = key ) class Store ( models . Model ) : objects = TestManager ( ) name = models . CharField ( max_length = 255 ) class Meta : ordering = ( 'name' , ) def __unicode__ ( self ) : return self . name def natural_key ( self ) : return ( self . name , ) class Person ( models . Model ) : objects = TestManager ( ) name = models . CharField ( max_length = 255 ) class Meta : ordering = ( 'name' , ) def __unicode__ ( self ) : return self . name def natural_key ( self ) : return ( self . name , ) natural_key . dependencies = [ 'fixtures_regress.store' ] class Book ( models . Model ) : name = models . CharField ( max_length = 255 ) author = models . ForeignKey ( Person ) stores = models . ManyToManyField ( Store ) class Meta : ordering = ( 'name' , ) def __unicode__ ( self ) : return u'%s by %s (available at %s)' % ( self . name , self . author . name , . join ( s . name for s in self . stores . all ( ) ) ) class NKManager ( models . Manager ) : def get_by_natural_key ( self , data ) : return self . get ( data = data ) class NKChild ( Parent ) : data = models . CharField ( max_length = 10 , unique = True ) objects = NKManager ( ) def natural_key ( self ) : return self . data def __unicode__ ( self ) : return u'NKChild %s:%s' % ( self . name , self . data ) class RefToNKChild ( models . Model ) : text = models . CharField ( max_length = 10 ) nk_fk = models . ForeignKey ( NKChild , related_name = 'ref_fks' ) nk_m2m = models . ManyToManyField ( NKChild , related_name = 'ref_m2ms' ) def __unicode__ ( self ) : return u'%s: Reference to %s [%s]' % ( self . text , self . nk_fk , . join ( str ( o ) for o in self . nk_m2m . all ( ) ) ) class Circle1 ( models . Model ) : name = models . CharField ( max_length = 255 ) def natural_key ( self ) : return self . name natural_key . dependencies = [ 'fixtures_regress.circle2' ] class Circle2 ( models . Model ) : name = models . CharField ( max_length = 255 ) def natural_key ( self ) : return self . name natural_key . dependencies = [ 'fixtures_regress.circle1' ] class Circle3 ( models . Model ) : name = models . CharField ( max_length = 255 ) def natural_key ( self ) : return self . name natural_key . dependencies = [ 'fixtures_regress.circle3' ] class Circle4 ( models . Model ) : name = models . CharField ( max_length = 255 ) def natural_key ( self ) : return self . name natural_key . dependencies = [ 'fixtures_regress.circle5' ] class Circle5 ( models . Model ) : name = models . CharField ( max_length = 255 ) def natural_key ( self ) : return self . name natural_key . dependencies = [ 'fixtures_regress.circle6' ] class Circle6 ( models . Model ) : name = models . CharField ( max_length = 255 ) def natural_key ( self ) : return self . name natural_key . dependencies = [ 'fixtures_regress.circle4' ] class ExternalDependency ( models . Model ) : name = models . CharField ( max_length = 255 ) def natural_key ( self ) : return self . name natural_key . dependencies = [ 'fixtures_regress.book' ] class Thingy ( models . Model ) : name = models . CharField ( max_length = 255 )
