import os from optparse import make_option from django . contrib . gis import gdal from django . core . management . base import LabelCommand , CommandError def layer_option ( option , opt , value , parser ) : try : dest = int ( value ) except ValueError : dest = value setattr ( parser . values , option . dest , dest ) def list_option ( option , opt , value , parser ) : if value . lower ( ) == 'true' : dest = True else : dest = [ s for s in value . split ( ',' ) ] setattr ( parser . values , option . dest , dest ) class Command ( LabelCommand ) : help = ( 'Inspects the given OGR-compatible data source (e.g., a shapefile) and outputs\n' ) args = '[data_source] [model_name]' option_list = LabelCommand . option_list + ( make_option ( '--blank' , dest = 'blank' , type = 'string' , action = 'callback' , callback = list_option , default = False , help = 'Use a comma separated list of OGR field names to add ' ) , make_option ( '--decimal' , dest = 'decimal' , type = 'string' , action = 'callback' , callback = list_option , default = False , help = 'Use a comma separated list of OGR float fields to ' ) , make_option ( '--geom-name' , dest = 'geom_name' , type = 'string' , default = 'geom' , help = 'Specifies the model name for the Geometry Field ' ) , make_option ( '--layer' , dest = 'layer_key' , type = 'string' , action = 'callback' , callback = layer_option , default = 0 , help = 'The key for specifying which layer in the OGR data ' ) , make_option ( '--multi-geom' , action = 'store_true' , dest = 'multi_geom' , default = False , help = 'Treat the geometry in the data source as a geometry collection.' ) , make_option ( '--name-field' , dest = 'name_field' , help = 'Specifies a field name to return for the `__unicode__` function.' ) , make_option ( '--no-imports' , action = 'store_false' , dest = 'imports' , default = True , help = 'Do not include `from django.contrib.gis.db import models` ' ) , make_option ( '--null' , dest = 'null' , type = 'string' , action = 'callback' , callback = list_option , default = False , help = 'Use a comma separated list of OGR field names to add ' ) , make_option ( '--srid' , dest = 'srid' , help = 'The SRID to use for the Geometry Field. If it can be ' ) , make_option ( '--mapping' , action = 'store_true' , dest = 'mapping' , help = 'Generate mapping dictionary for use with `LayerMapping`.' ) ) requires_model_validation = False def handle ( self , * args , ** options ) : try : data_source , model_name = args except ValueError : raise CommandError ( 'Invalid arguments, must provide: %s' % self . args ) if not gdal . HAS_GDAL : raise CommandError ( 'GDAL is required to inspect geospatial data sources.' ) options = dict ( [ ( k , v ) for k , v in options . items ( ) if not v is None ] ) try : ds = gdal . DataSource ( data_source ) except gdal . OGRException , msg : raise CommandError ( msg ) show_mapping = options . pop ( 'mapping' , False ) verbosity = options . pop ( 'verbosity' , False ) settings = options . pop ( 'settings' , False ) from django . contrib . gis . utils . ogrinspect import _ogrinspect , mapping output = [ s for s in _ogrinspect ( ds , model_name , ** options ) ] if show_mapping : kwargs = { 'geom_name' : options [ 'geom_name' ] , : options [ 'layer_key' ] , : options [ 'multi_geom' ] , } mapping_dict = mapping ( ds , ** kwargs ) rev_mapping = dict ( [ ( v , k ) for k , v in mapping_dict . items ( ) ] ) output . extend ( [ '' , '# Auto-generated `LayerMapping` dictionary for %s model' % model_name , % model_name . lower ( ) ] ) output . extend ( [ " '%s' : '%s'," % ( rev_mapping [ ogr_fld ] , ogr_fld ) for ogr_fld in ds [ options [ 'layer_key' ] ] . fields ] ) output . extend ( [ " '%s' : '%s'," % ( options [ 'geom_name' ] , mapping_dict [ options [ 'geom_name' ] ] ) , '}' ] ) return '\n' . join ( output ) + '\n'
