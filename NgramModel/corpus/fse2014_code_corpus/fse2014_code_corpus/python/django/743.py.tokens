from __future__ import with_statement , absolute_import import datetime import decimal import os import pickle from threading import local from django . conf import settings from django . template import Template , Context from django . template . base import TemplateSyntaxError from django . test import TestCase , RequestFactory from django . test . utils import override_settings from django . utils import translation from django . utils . formats import ( get_format , date_format , time_format , localize , localize_input , iter_format_modules , get_format_modules , number_format ) from django . utils . importlib import import_module from django . utils . numberformat import format as nformat from django . utils . safestring import mark_safe , SafeString , SafeUnicode from django . utils . translation import ( ugettext , ugettext_lazy , activate , deactivate , gettext_lazy , pgettext , npgettext , to_locale , get_language_info , get_language , get_language_from_request ) from . commands . tests import can_run_extraction_tests , can_run_compilation_tests if can_run_extraction_tests : from . commands . extraction import ( ExtractorTests , BasicExtractorTests , JavascriptExtractorTests , IgnoredExtractorTests , SymlinkExtractorTests , CopyPluralFormsExtractorTests , NoWrapExtractorTests , NoLocationExtractorTests ) if can_run_compilation_tests : from . commands . compilation import ( PoFileTests , PoFileContentsTests , PercentRenderingTests ) from . contenttypes . tests import ContentTypeTests from . forms import I18nForm , SelectDateForm , SelectDateWidget , CompanyForm from . models import Company , TestModel from . patterns . tests import ( URLRedirectWithoutTrailingSlashTests , URLTranslationTests , URLDisabledTests , URLTagTests , URLTestCaseBase , URLRedirectWithoutTrailingSlashSettingTests , URLNamespaceTests , URLPrefixTests , URLResponseTests , URLRedirectTests , PathUnusedTests ) from . test_warnings import DeprecationWarningTests here = os . path . dirname ( os . path . abspath ( __file__ ) ) class TranslationTests ( TestCase ) : def test_override ( self ) : activate ( 'de' ) with translation . override ( 'pl' ) : self . assertEqual ( get_language ( ) , 'pl' ) self . assertEqual ( get_language ( ) , 'de' ) with translation . override ( None ) : self . assertEqual ( get_language ( ) , settings . LANGUAGE_CODE ) self . assertEqual ( get_language ( ) , 'de' ) deactivate ( ) def test_lazy_objects ( self ) : s = ugettext_lazy ( 'Add %(name)s' ) d = { 'name' : 'Ringo' } self . assertEqual ( u'Add Ringo' , s % d ) with translation . override ( 'de' , deactivate = True ) : self . assertEqual ( u'Ringo hinzuf\xfcgen' , s % d ) with translation . override ( 'pl' ) : self . assertEqual ( u'Dodaj Ringo' , s % d ) s1 = ugettext_lazy ( 'Add %(name)s' ) self . assertEqual ( True , s == s1 ) s2 = gettext_lazy ( 'Add %(name)s' ) s3 = gettext_lazy ( 'Add %(name)s' ) self . assertEqual ( True , s2 == s3 ) self . assertEqual ( True , s == s2 ) s4 = ugettext_lazy ( 'Some other string' ) self . assertEqual ( False , s == s4 ) def test_lazy_pickle ( self ) : s1 = ugettext_lazy ( "test" ) self . assertEqual ( unicode ( s1 ) , "test" ) s2 = pickle . loads ( pickle . dumps ( s1 ) ) self . assertEqual ( unicode ( s2 ) , "test" ) def test_pgettext ( self ) : extended_locale_paths = settings . LOCALE_PATHS + ( os . path . join ( here , 'other' , 'locale' ) , ) with self . settings ( LOCALE_PATHS = extended_locale_paths ) : from django . utils . translation import trans_real trans_real . _active = local ( ) trans_real . _translations = { } with translation . override ( 'de' ) : self . assertEqual ( pgettext ( "unexisting" , "May" ) , u"May" ) self . assertEqual ( pgettext ( "month name" , "May" ) , u"Mai" ) self . assertEqual ( pgettext ( "verb" , "May" ) , u"Kann" ) self . assertEqual ( npgettext ( "search" , "%d result" , "%d results" , 4 ) % 4 , u"4 Resultate" ) def test_template_tags_pgettext ( self ) : extended_locale_paths = settings . LOCALE_PATHS + ( os . path . join ( here , 'other' , 'locale' ) , ) with self . settings ( LOCALE_PATHS = extended_locale_paths ) : from django . utils . translation import trans_real trans_real . _active = local ( ) trans_real . _translations = { } with translation . override ( 'de' ) : t = Template ( '{% load i18n %}{% trans "May" context "unexisting" %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , 'May' ) t = Template ( '{% load i18n %}{% trans "May" context "month name" %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , 'Mai' ) t = Template ( '{% load i18n %}{% trans "May" context "verb" %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , 'Kann' ) t = Template ( '{% load i18n %}{% trans "May" context message_context %}' ) rendered = t . render ( Context ( { 'message_context' : 'month name' } ) ) self . assertEqual ( rendered , 'Mai' ) t = Template ( '{% load i18n %}{% trans "May" context message_context %}' ) rendered = t . render ( Context ( { 'message_context' : 'verb' } ) ) self . assertEqual ( rendered , 'Kann' ) t = Template ( '{% load i18n %}{% trans "May" context message_context|lower %}' ) rendered = t . render ( Context ( { 'message_context' : 'MONTH NAME' } ) ) self . assertEqual ( rendered , 'Mai' ) t = Template ( '{% load i18n %}{% trans "May" context message_context|lower %}' ) rendered = t . render ( Context ( { 'message_context' : 'VERB' } ) ) self . assertEqual ( rendered , 'Kann' ) t = Template ( '{% load i18n %}{% trans "May" context "month name" as var %}Value: {{ var }}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , 'Value: Mai' ) t = Template ( '{% load i18n %}{% trans "May" as var context "verb" %}Value: {{ var }}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , 'Value: Kann' ) self . assertRaises ( TemplateSyntaxError , Template , '{% load i18n %}{% trans "May" context as var %}{{ var }}' ) self . assertRaises ( TemplateSyntaxError , Template , '{% load i18n %}{% trans "May" as var context %}{{ var }}' ) t = Template ( '{% load i18n %}{% blocktrans context "unexisting" %}May{% endblocktrans %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , 'May' ) t = Template ( '{% load i18n %}{% blocktrans context "month name" %}May{% endblocktrans %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , 'Mai' ) t = Template ( '{% load i18n %}{% blocktrans context "verb" %}May{% endblocktrans %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , 'Kann' ) t = Template ( '{% load i18n %}{% blocktrans context message_context %}May{% endblocktrans %}' ) rendered = t . render ( Context ( { 'message_context' : 'month name' } ) ) self . assertEqual ( rendered , 'Mai' ) t = Template ( '{% load i18n %}{% blocktrans context message_context %}May{% endblocktrans %}' ) rendered = t . render ( Context ( { 'message_context' : 'verb' } ) ) self . assertEqual ( rendered , 'Kann' ) t = Template ( '{% load i18n %}{% blocktrans context message_context|lower %}May{% endblocktrans %}' ) rendered = t . render ( Context ( { 'message_context' : 'MONTH NAME' } ) ) self . assertEqual ( rendered , 'Mai' ) t = Template ( '{% load i18n %}{% blocktrans context message_context|lower %}May{% endblocktrans %}' ) rendered = t . render ( Context ( { 'message_context' : 'VERB' } ) ) self . assertEqual ( rendered , 'Kann' ) t = Template ( '{% load i18n %}{% blocktrans count number=1 context "super search" %}{{ number }} super result{% plural %}{{ number }} super results{% endblocktrans %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , '1 Super-Ergebnis' ) t = Template ( '{% load i18n %}{% blocktrans count number=2 context "super search" %}{{ number }} super result{% plural %}{{ number }} super results{% endblocktrans %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , '2 Super-Ergebnisse' ) t = Template ( '{% load i18n %}{% blocktrans context "other super search" count number=1 %}{{ number }} super result{% plural %}{{ number }} super results{% endblocktrans %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , '1 anderen Super-Ergebnis' ) t = Template ( '{% load i18n %}{% blocktrans context "other super search" count number=2 %}{{ number }} super result{% plural %}{{ number }} super results{% endblocktrans %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , '2 andere Super-Ergebnisse' ) t = Template ( '{% load i18n %}{% blocktrans with num_comments=5 context "comment count" %}There are {{ num_comments }} comments{% endblocktrans %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , 'Es gibt 5 Kommentare' ) t = Template ( '{% load i18n %}{% blocktrans with num_comments=5 context "other comment count" %}There are {{ num_comments }} comments{% endblocktrans %}' ) rendered = t . render ( Context ( ) ) self . assertEqual ( rendered , 'Andere: Es gibt 5 Kommentare' ) self . assertRaises ( TemplateSyntaxError , Template , '{% load i18n %}{% blocktrans context with month="May" %}{{ month }}{% endblocktrans %}' ) self . assertRaises ( TemplateSyntaxError , Template , '{% load i18n %}{% blocktrans context %}{% endblocktrans %}' ) self . assertRaises ( TemplateSyntaxError , Template , '{% load i18n %}{% blocktrans count number=2 context %}{{ number }} super result{% plural %}{{ number }} super results{% endblocktrans %}' ) def test_string_concat ( self ) : import django . utils . translation self . assertEqual ( u'django' , unicode ( django . utils . translation . string_concat ( "dja" , "ngo" ) ) ) def test_safe_status ( self ) : s = mark_safe ( 'Password' ) self . assertEqual ( SafeString , type ( s ) ) with translation . override ( 'de' , deactivate = True ) : self . assertEqual ( SafeUnicode , type ( ugettext ( s ) ) ) self . assertEqual ( 'aPassword' , SafeString ( 'a' ) + s ) self . assertEqual ( 'Passworda' , s + SafeString ( 'a' ) ) self . assertEqual ( 'Passworda' , s + mark_safe ( 'a' ) ) self . assertEqual ( 'aPassword' , mark_safe ( 'a' ) + s ) self . assertEqual ( 'as' , mark_safe ( 'a' ) + mark_safe ( 's' ) ) def test_maclines ( self ) : from django . utils . translation . trans_real import translation as Trans ca_translation = Trans ( 'ca' ) ca_translation . _catalog [ u'Mac\nEOF\n' ] = u'Catalan Mac\nEOF\n' ca_translation . _catalog [ u'Win\nEOF\n' ] = u'Catalan Win\nEOF\n' with translation . override ( 'ca' , deactivate = True ) : self . assertEqual ( u'Catalan Mac\nEOF\n' , ugettext ( u'Mac\rEOF\r' ) ) self . assertEqual ( u'Catalan Win\nEOF\n' , ugettext ( u'Win\r\nEOF\r\n' ) ) def test_to_locale ( self ) : self . assertEqual ( to_locale ( 'en-us' ) , 'en_US' ) self . assertEqual ( to_locale ( 'sr-lat' ) , 'sr_Lat' ) def test_to_language ( self ) : from django . utils . translation . trans_real import to_language self . assertEqual ( to_language ( 'en_US' ) , 'en-us' ) self . assertEqual ( to_language ( 'sr_Lat' ) , 'sr-lat' ) @ override_settings ( LOCALE_PATHS = ( os . path . join ( here , 'other' , 'locale' ) , ) ) def test_bad_placeholder ( self ) : from django . template import Template , Context with translation . override ( 'fr' ) : t = Template ( '{% load i18n %}{% blocktrans %}My name is {{ person }}.{% endblocktrans %}' ) rendered = t . render ( Context ( { 'person' : 'James' } ) ) self . assertEqual ( rendered , 'My name is James.' ) class FormattingTests ( TestCase ) : def setUp ( self ) : self . use_i18n = settings . USE_I18N self . use_l10n = settings . USE_L10N self . use_thousand_separator = settings . USE_THOUSAND_SEPARATOR self . thousand_separator = settings . THOUSAND_SEPARATOR self . number_grouping = settings . NUMBER_GROUPING self . n = decimal . Decimal ( '66666.666' ) self . f = 99999.999 self . d = datetime . date ( 2009 , 12 , 31 ) self . dt = datetime . datetime ( 2009 , 12 , 31 , 20 , 50 ) self . t = datetime . time ( 10 , 15 , 48 ) self . l = 10000L self . ctxt = Context ( { : self . n , : self . t , : self . d , : self . dt , : self . f , : self . l , } ) def tearDown ( self ) : settings . USE_I18N = self . use_i18n settings . USE_L10N = self . use_l10n settings . USE_THOUSAND_SEPARATOR = self . use_thousand_separator settings . THOUSAND_SEPARATOR = self . thousand_separator settings . NUMBER_GROUPING = self . number_grouping def test_locale_independent ( self ) : with self . settings ( USE_L10N = True , USE_THOUSAND_SEPARATOR = False ) : self . assertEqual ( u'66666.66' , nformat ( self . n , decimal_sep = '.' , decimal_pos = 2 , grouping = 3 , thousand_sep = ',' ) ) self . assertEqual ( u'66666A6' , nformat ( self . n , decimal_sep = 'A' , decimal_pos = 1 , grouping = 1 , thousand_sep = 'B' ) ) self . assertEqual ( u'66666' , nformat ( self . n , decimal_sep = 'X' , decimal_pos = 0 , grouping = 1 , thousand_sep = 'Y' ) ) with self . settings ( USE_L10N = True , USE_THOUSAND_SEPARATOR = True ) : self . assertEqual ( u'66,666.66' , nformat ( self . n , decimal_sep = '.' , decimal_pos = 2 , grouping = 3 , thousand_sep = ',' ) ) self . assertEqual ( u'6B6B6B6B6A6' , nformat ( self . n , decimal_sep = 'A' , decimal_pos = 1 , grouping = 1 , thousand_sep = 'B' ) ) self . assertEqual ( u'-66666.6' , nformat ( - 66666.666 , decimal_sep = '.' , decimal_pos = 1 ) ) self . assertEqual ( u'-66666.0' , nformat ( int ( '-66666' ) , decimal_sep = '.' , decimal_pos = 1 ) ) self . assertEqual ( u'10000.0' , nformat ( self . l , decimal_sep = '.' , decimal_pos = 1 ) ) self . assertEqual ( u'10000' , nformat ( self . l , decimal_sep = '.' , decimal_pos = 0 , grouping = 0 , force_grouping = True ) ) self . assertEqual ( u'31.12.2009 в 20:50' , Template ( '{{ dt|date:"d.m.Y в H:i" }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'⌚ 10:15' , Template ( '{{ t|time:"⌚ H:i" }}' ) . render ( self . ctxt ) ) def test_l10n_disabled ( self ) : settings . USE_L10N = False with translation . override ( 'ca' , deactivate = True ) : self . assertEqual ( u'N j, Y' , get_format ( 'DATE_FORMAT' ) ) self . assertEqual ( 0 , get_format ( 'FIRST_DAY_OF_WEEK' ) ) self . assertEqual ( u'.' , get_format ( 'DECIMAL_SEPARATOR' ) ) self . assertEqual ( u'10:15 a.m.' , time_format ( self . t ) ) self . assertEqual ( u'des. 31, 2009' , date_format ( self . d ) ) self . assertEqual ( u'desembre 2009' , date_format ( self . d , 'YEAR_MONTH_FORMAT' ) ) self . assertEqual ( u'12/31/2009 8:50 p.m.' , date_format ( self . dt , 'SHORT_DATETIME_FORMAT' ) ) self . assertEqual ( u'No localizable' , localize ( 'No localizable' ) ) self . assertEqual ( u'66666.666' , localize ( self . n ) ) self . assertEqual ( u'99999.999' , localize ( self . f ) ) self . assertEqual ( u'10000' , localize ( self . l ) ) self . assertEqual ( u'des. 31, 2009' , localize ( self . d ) ) self . assertEqual ( u'des. 31, 2009, 8:50 p.m.' , localize ( self . dt ) ) self . assertEqual ( u'66666.666' , Template ( '{{ n }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'99999.999' , Template ( '{{ f }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'des. 31, 2009' , Template ( '{{ d }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'des. 31, 2009, 8:50 p.m.' , Template ( '{{ dt }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'66666.67' , Template ( '{{ n|floatformat:2 }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'100000.0' , Template ( '{{ f|floatformat }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'10:15 a.m.' , Template ( '{{ t|time:"TIME_FORMAT" }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'12/31/2009' , Template ( '{{ d|date:"SHORT_DATE_FORMAT" }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'12/31/2009 8:50 p.m.' , Template ( '{{ dt|date:"SHORT_DATETIME_FORMAT" }}' ) . render ( self . ctxt ) ) form = I18nForm ( { : u'66666,666' , : u'99999,999' , : u'31/12/2009' , : u'31/12/2009 20:50' , : u'20:50' , : u'1.234' , } ) self . assertEqual ( False , form . is_valid ( ) ) self . assertEqual ( [ u'Introdu\xefu un n\xfamero.' ] , form . errors [ 'float_field' ] ) self . assertEqual ( [ u'Introdu\xefu un n\xfamero.' ] , form . errors [ 'decimal_field' ] ) self . assertEqual ( [ u'Introdu\xefu una data v\xe0lida.' ] , form . errors [ 'date_field' ] ) self . assertEqual ( [ u'Introdu\xefu una data/hora v\xe0lides.' ] , form . errors [ 'datetime_field' ] ) self . assertEqual ( [ u'Introdu\xefu un n\xfamero sencer.' ] , form . errors [ 'integer_field' ] ) form2 = SelectDateForm ( { : u'12' , : u'31' , : u'2009' } ) self . assertEqual ( True , form2 . is_valid ( ) ) self . assertEqual ( datetime . date ( 2009 , 12 , 31 ) , form2 . cleaned_data [ 'date_field' ] ) self . assertHTMLEqual ( , SelectDateWidget ( years = range ( 2009 , 2019 ) ) . render ( 'mydate' , datetime . date ( 2009 , 12 , 31 ) ) ) with self . settings ( USE_THOUSAND_SEPARATOR = True , NUMBER_GROUPING = 1 , THOUSAND_SEPARATOR = '!' ) : self . assertEqual ( u'66666.67' , Template ( '{{ n|floatformat:2 }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'100000.0' , Template ( '{{ f|floatformat }}' ) . render ( self . ctxt ) ) def test_false_like_locale_formats ( self ) : from django . conf . locale . fr import formats as fr_formats backup_THOUSAND_SEPARATOR = fr_formats . THOUSAND_SEPARATOR backup_FIRST_DAY_OF_WEEK = fr_formats . FIRST_DAY_OF_WEEK fr_formats . THOUSAND_SEPARATOR = '' fr_formats . FIRST_DAY_OF_WEEK = 0 with translation . override ( 'fr' ) : with self . settings ( USE_L10N = True , USE_THOUSAND_SEPARATOR = True , THOUSAND_SEPARATOR = '!' ) : self . assertEqual ( '' , get_format ( 'THOUSAND_SEPARATOR' ) ) self . assertEqual ( '' , get_format ( 'THOUSAND_SEPARATOR' ) ) with self . settings ( USE_L10N = True , FIRST_DAY_OF_WEEK = 1 ) : self . assertEqual ( 0 , get_format ( 'FIRST_DAY_OF_WEEK' ) ) self . assertEqual ( 0 , get_format ( 'FIRST_DAY_OF_WEEK' ) ) fr_formats . THOUSAND_SEPARATOR = backup_THOUSAND_SEPARATOR fr_formats . FIRST_DAY_OF_WEEK = backup_FIRST_DAY_OF_WEEK def test_l10n_enabled ( self ) : settings . USE_L10N = True with translation . override ( 'ca' , deactivate = True ) : self . assertEqual ( 'j \d\e F \d\e Y' , get_format ( 'DATE_FORMAT' ) ) self . assertEqual ( 1 , get_format ( 'FIRST_DAY_OF_WEEK' ) ) self . assertEqual ( ',' , get_format ( 'DECIMAL_SEPARATOR' ) ) self . assertEqual ( u'10:15:48' , time_format ( self . t ) ) self . assertEqual ( u'31 de desembre de 2009' , date_format ( self . d ) ) self . assertEqual ( u'desembre del 2009' , date_format ( self . d , 'YEAR_MONTH_FORMAT' ) ) self . assertEqual ( u'31/12/2009 20:50' , date_format ( self . dt , 'SHORT_DATETIME_FORMAT' ) ) self . assertEqual ( 'No localizable' , localize ( 'No localizable' ) ) settings . USE_THOUSAND_SEPARATOR = True self . assertEqual ( u'66.666,666' , localize ( self . n ) ) self . assertEqual ( u'99.999,999' , localize ( self . f ) ) self . assertEqual ( u'10.000' , localize ( self . l ) ) self . assertEqual ( u'True' , localize ( True ) ) settings . USE_THOUSAND_SEPARATOR = False self . assertEqual ( u'66666,666' , localize ( self . n ) ) self . assertEqual ( u'99999,999' , localize ( self . f ) ) self . assertEqual ( u'10000' , localize ( self . l ) ) self . assertEqual ( u'31 de desembre de 2009' , localize ( self . d ) ) self . assertEqual ( u'31 de desembre de 2009 a les 20:50' , localize ( self . dt ) ) settings . USE_THOUSAND_SEPARATOR = True self . assertEqual ( u'66.666,666' , Template ( '{{ n }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'99.999,999' , Template ( '{{ f }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'10.000' , Template ( '{{ l }}' ) . render ( self . ctxt ) ) form3 = I18nForm ( { : u'66.666,666' , : u'99.999,999' , : u'31/12/2009' , : u'31/12/2009 20:50' , : u'20:50' , : u'1.234' , } ) self . assertEqual ( True , form3 . is_valid ( ) ) self . assertEqual ( decimal . Decimal ( '66666.666' ) , form3 . cleaned_data [ 'decimal_field' ] ) self . assertEqual ( 99999.999 , form3 . cleaned_data [ 'float_field' ] ) self . assertEqual ( datetime . date ( 2009 , 12 , 31 ) , form3 . cleaned_data [ 'date_field' ] ) self . assertEqual ( datetime . datetime ( 2009 , 12 , 31 , 20 , 50 ) , form3 . cleaned_data [ 'datetime_field' ] ) self . assertEqual ( datetime . time ( 20 , 50 ) , form3 . cleaned_data [ 'time_field' ] ) self . assertEqual ( 1234 , form3 . cleaned_data [ 'integer_field' ] ) settings . USE_THOUSAND_SEPARATOR = False self . assertEqual ( u'66666,666' , Template ( '{{ n }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'99999,999' , Template ( '{{ f }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'31 de desembre de 2009' , Template ( '{{ d }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'31 de desembre de 2009 a les 20:50' , Template ( '{{ dt }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'66666,67' , Template ( '{{ n|floatformat:2 }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'100000,0' , Template ( '{{ f|floatformat }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'10:15:48' , Template ( '{{ t|time:"TIME_FORMAT" }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'31/12/2009' , Template ( '{{ d|date:"SHORT_DATE_FORMAT" }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'31/12/2009 20:50' , Template ( '{{ dt|date:"SHORT_DATETIME_FORMAT" }}' ) . render ( self . ctxt ) ) self . assertEqual ( date_format ( datetime . datetime . now ( ) , "DATE_FORMAT" ) , Template ( '{% now "DATE_FORMAT" %}' ) . render ( self . ctxt ) ) form4 = I18nForm ( { : u'66666,666' , : u'99999,999' , : u'31/12/2009' , : u'31/12/2009 20:50' , : u'20:50' , : u'1234' , } ) self . assertEqual ( True , form4 . is_valid ( ) ) self . assertEqual ( decimal . Decimal ( '66666.666' ) , form4 . cleaned_data [ 'decimal_field' ] ) self . assertEqual ( 99999.999 , form4 . cleaned_data [ 'float_field' ] ) self . assertEqual ( datetime . date ( 2009 , 12 , 31 ) , form4 . cleaned_data [ 'date_field' ] ) self . assertEqual ( datetime . datetime ( 2009 , 12 , 31 , 20 , 50 ) , form4 . cleaned_data [ 'datetime_field' ] ) self . assertEqual ( datetime . time ( 20 , 50 ) , form4 . cleaned_data [ 'time_field' ] ) self . assertEqual ( 1234 , form4 . cleaned_data [ 'integer_field' ] ) form5 = SelectDateForm ( { : u'12' , : u'31' , : u'2009' } ) self . assertEqual ( True , form5 . is_valid ( ) ) self . assertEqual ( datetime . date ( 2009 , 12 , 31 ) , form5 . cleaned_data [ 'date_field' ] ) self . assertHTMLEqual ( , SelectDateWidget ( years = range ( 2009 , 2019 ) ) . render ( 'mydate' , datetime . date ( 2009 , 12 , 31 ) ) ) with translation . override ( 'ru' , deactivate = True ) : self . assertHTMLEqual ( , SelectDateWidget ( years = range ( 2009 , 2019 ) ) . render ( 'mydate' , datetime . date ( 2009 , 12 , 31 ) ) ) with translation . override ( 'en' , deactivate = True ) : self . assertEqual ( 'N j, Y' , get_format ( 'DATE_FORMAT' ) ) self . assertEqual ( 0 , get_format ( 'FIRST_DAY_OF_WEEK' ) ) self . assertEqual ( '.' , get_format ( 'DECIMAL_SEPARATOR' ) ) self . assertEqual ( u'Dec. 31, 2009' , date_format ( self . d ) ) self . assertEqual ( u'December 2009' , date_format ( self . d , 'YEAR_MONTH_FORMAT' ) ) self . assertEqual ( u'12/31/2009 8:50 p.m.' , date_format ( self . dt , 'SHORT_DATETIME_FORMAT' ) ) self . assertEqual ( u'No localizable' , localize ( 'No localizable' ) ) settings . USE_THOUSAND_SEPARATOR = True self . assertEqual ( u'66,666.666' , localize ( self . n ) ) self . assertEqual ( u'99,999.999' , localize ( self . f ) ) self . assertEqual ( u'10,000' , localize ( self . l ) ) settings . USE_THOUSAND_SEPARATOR = False self . assertEqual ( u'66666.666' , localize ( self . n ) ) self . assertEqual ( u'99999.999' , localize ( self . f ) ) self . assertEqual ( u'10000' , localize ( self . l ) ) self . assertEqual ( u'Dec. 31, 2009' , localize ( self . d ) ) self . assertEqual ( u'Dec. 31, 2009, 8:50 p.m.' , localize ( self . dt ) ) settings . USE_THOUSAND_SEPARATOR = True self . assertEqual ( u'66,666.666' , Template ( '{{ n }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'99,999.999' , Template ( '{{ f }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'10,000' , Template ( '{{ l }}' ) . render ( self . ctxt ) ) settings . USE_THOUSAND_SEPARATOR = False self . assertEqual ( u'66666.666' , Template ( '{{ n }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'99999.999' , Template ( '{{ f }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'Dec. 31, 2009' , Template ( '{{ d }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'Dec. 31, 2009, 8:50 p.m.' , Template ( '{{ dt }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'66666.67' , Template ( '{{ n|floatformat:2 }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'100000.0' , Template ( '{{ f|floatformat }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'12/31/2009' , Template ( '{{ d|date:"SHORT_DATE_FORMAT" }}' ) . render ( self . ctxt ) ) self . assertEqual ( u'12/31/2009 8:50 p.m.' , Template ( '{{ dt|date:"SHORT_DATETIME_FORMAT" }}' ) . render ( self . ctxt ) ) form5 = I18nForm ( { : u'66666.666' , : u'99999.999' , : u'12/31/2009' , : u'12/31/2009 20:50' , : u'20:50' , : u'1234' , } ) self . assertEqual ( True , form5 . is_valid ( ) ) self . assertEqual ( decimal . Decimal ( '66666.666' ) , form5 . cleaned_data [ 'decimal_field' ] ) self . assertEqual ( 99999.999 , form5 . cleaned_data [ 'float_field' ] ) self . assertEqual ( datetime . date ( 2009 , 12 , 31 ) , form5 . cleaned_data [ 'date_field' ] ) self . assertEqual ( datetime . datetime ( 2009 , 12 , 31 , 20 , 50 ) , form5 . cleaned_data [ 'datetime_field' ] ) self . assertEqual ( datetime . time ( 20 , 50 ) , form5 . cleaned_data [ 'time_field' ] ) self . assertEqual ( 1234 , form5 . cleaned_data [ 'integer_field' ] ) form6 = SelectDateForm ( { : u'12' , : u'31' , : u'2009' } ) self . assertEqual ( True , form6 . is_valid ( ) ) self . assertEqual ( datetime . date ( 2009 , 12 , 31 ) , form6 . cleaned_data [ 'date_field' ] ) self . assertHTMLEqual ( , SelectDateWidget ( years = range ( 2009 , 2019 ) ) . render ( 'mydate' , datetime . date ( 2009 , 12 , 31 ) ) ) def test_sub_locales ( self ) : with self . settings ( USE_L10N = True , USE_THOUSAND_SEPARATOR = True ) : with translation . override ( 'de-at' , deactivate = True ) : self . assertEqual ( u'66.666,666' , Template ( '{{ n }}' ) . render ( self . ctxt ) ) with translation . override ( 'es-us' , deactivate = True ) : self . assertEqual ( u'31 de diciembre de 2009' , date_format ( self . d ) ) def test_localized_input ( self ) : settings . USE_L10N = True with translation . override ( 'de-at' , deactivate = True ) : form6 = CompanyForm ( { : u'acme' , : datetime . datetime ( 2009 , 12 , 31 , 6 , 0 , 0 ) , : decimal . Decimal ( '59.47' ) , : 12000 , } ) self . assertEqual ( True , form6 . is_valid ( ) ) self . assertHTMLEqual ( form6 . as_ul ( ) , ) self . assertEqual ( localize_input ( datetime . datetime ( 2009 , 12 , 31 , 6 , 0 , 0 ) ) , '31.12.2009 06:00:00' ) self . assertEqual ( datetime . datetime ( 2009 , 12 , 31 , 6 , 0 , 0 ) , form6 . cleaned_data [ 'date_added' ] ) with self . settings ( USE_THOUSAND_SEPARATOR = True ) : self . assertTrue ( u'<input type="text" name="products_delivered" value="12.000" id="id_products_delivered" />' in form6 . as_ul ( ) ) def test_iter_format_modules ( self ) : settings . USE_L10N = True with translation . override ( 'de-at' , deactivate = True ) : de_format_mod = import_module ( 'django.conf.locale.de.formats' ) self . assertEqual ( list ( iter_format_modules ( 'de' ) ) , [ de_format_mod ] ) with self . settings ( FORMAT_MODULE_PATH = 'regressiontests.i18n.other.locale' ) : test_de_format_mod = import_module ( 'regressiontests.i18n.other.locale.de.formats' ) self . assertEqual ( list ( iter_format_modules ( 'de' ) ) , [ test_de_format_mod , de_format_mod ] ) def test_iter_format_modules_stability ( self ) : settings . USE_L10N = True en_format_mod = import_module ( 'django.conf.locale.en.formats' ) en_gb_format_mod = import_module ( 'django.conf.locale.en_GB.formats' ) self . assertEqual ( list ( iter_format_modules ( 'en-gb' ) ) , [ en_gb_format_mod , en_format_mod ] ) def test_get_format_modules_lang ( self ) : with self . settings ( USE_L10N = True ) : with translation . override ( 'de' , deactivate = True ) : self . assertEqual ( '.' , get_format ( 'DECIMAL_SEPARATOR' , lang = 'en' ) ) def test_get_format_modules_stability ( self ) : with self . settings ( USE_L10N = True , FORMAT_MODULE_PATH = 'regressiontests.i18n.other.locale' ) : with translation . override ( 'de' , deactivate = True ) : old = "%r" % get_format_modules ( reverse = True ) new = "%r" % get_format_modules ( reverse = True ) self . assertEqual ( new , old , 'Value returned by get_formats_modules() must be preserved between calls.' ) def test_localize_templatetag_and_filter ( self ) : context = Context ( { 'value' : 3.14 } ) template1 = Template ( "{% load l10n %}{% localize %}{{ value }}{% endlocalize %};{% localize on %}{{ value }}{% endlocalize %}" ) template2 = Template ( "{% load l10n %}{{ value }};{% localize off %}{{ value }};{% endlocalize %}{{ value }}" ) template3 = Template ( '{% load l10n %}{{ value }};{{ value|unlocalize }}' ) template4 = Template ( '{% load l10n %}{{ value }};{{ value|localize }}' ) output1 = '3,14;3,14' output2 = '3,14;3.14;3,14' output3 = '3,14;3.14' output4 = '3.14;3,14' with translation . override ( 'de' , deactivate = True ) : with self . settings ( USE_L10N = False ) : self . assertEqual ( template1 . render ( context ) , output1 ) self . assertEqual ( template4 . render ( context ) , output4 ) with self . settings ( USE_L10N = True ) : self . assertEqual ( template1 . render ( context ) , output1 ) self . assertEqual ( template2 . render ( context ) , output2 ) self . assertEqual ( template3 . render ( context ) , output3 ) class MiscTests ( TestCase ) : def setUp ( self ) : self . rf = RequestFactory ( ) def test_parse_spec_http_header ( self ) : from django . utils . translation . trans_real import parse_accept_lang_header p = parse_accept_lang_header self . assertEqual ( [ ( 'de' , 1.0 ) ] , p ( 'de' ) ) self . assertEqual ( [ ( 'en-AU' , 1.0 ) ] , p ( 'en-AU' ) ) self . assertEqual ( [ ( '*' , 1.0 ) ] , p ( '*;q=1.00' ) ) self . assertEqual ( [ ( 'en-AU' , 0.123 ) ] , p ( 'en-AU;q=0.123' ) ) self . assertEqual ( [ ( 'en-au' , 0.5 ) ] , p ( 'en-au;q=0.5' ) ) self . assertEqual ( [ ( 'en-au' , 1.0 ) ] , p ( 'en-au;q=1.0' ) ) self . assertEqual ( [ ( 'da' , 1.0 ) , ( 'en' , 0.5 ) , ( 'en-gb' , 0.25 ) ] , p ( 'da, en-gb;q=0.25, en;q=0.5' ) ) self . assertEqual ( [ ( 'en-au-xx' , 1.0 ) ] , p ( 'en-au-xx' ) ) self . assertEqual ( [ ( 'de' , 1.0 ) , ( 'en-au' , 0.75 ) , ( 'en-us' , 0.5 ) , ( 'en' , 0.25 ) , ( 'es' , 0.125 ) , ( 'fa' , 0.125 ) ] , p ( 'de,en-au;q=0.75,en-us;q=0.5,en;q=0.25,es;q=0.125,fa;q=0.125' ) ) self . assertEqual ( [ ( '*' , 1.0 ) ] , p ( '*' ) ) self . assertEqual ( [ ( 'de' , 1.0 ) ] , p ( 'de;q=0.' ) ) self . assertEqual ( [ ( 'en' , 1.0 ) , ( '*' , 0.5 ) ] , p ( 'en; q=1.0, * ; q=0.5' ) ) self . assertEqual ( [ ] , p ( '' ) ) self . assertEqual ( [ ] , p ( 'en-gb;q=1.0000' ) ) self . assertEqual ( [ ] , p ( 'en;q=0.1234' ) ) self . assertEqual ( [ ] , p ( 'en;q=.2' ) ) self . assertEqual ( [ ] , p ( 'abcdefghi-au' ) ) self . assertEqual ( [ ] , p ( '**' ) ) self . assertEqual ( [ ] , p ( 'en,,gb' ) ) self . assertEqual ( [ ] , p ( 'en-au;q=0.1.0' ) ) self . assertEqual ( [ ] , p ( 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXZ,en' ) ) self . assertEqual ( [ ] , p ( 'da, en-gb;q=0.8, en;q=0.7,#' ) ) self . assertEqual ( [ ] , p ( 'de;q=2.0' ) ) self . assertEqual ( [ ] , p ( 'de;q=0.a' ) ) self . assertEqual ( [ ] , p ( '' ) ) def test_parse_literal_http_header ( self ) : g = get_language_from_request r = self . rf . get ( '/' ) r . COOKIES = { } r . META = { 'HTTP_ACCEPT_LANGUAGE' : 'pt-br' } self . assertEqual ( 'pt-br' , g ( r ) ) r . META = { 'HTTP_ACCEPT_LANGUAGE' : 'pt' } self . assertEqual ( 'pt' , g ( r ) ) r . META = { 'HTTP_ACCEPT_LANGUAGE' : 'es,de' } self . assertEqual ( 'es' , g ( r ) ) r . META = { 'HTTP_ACCEPT_LANGUAGE' : 'es-ar,de' } self . assertEqual ( 'es-ar' , g ( r ) ) r . META = { 'HTTP_ACCEPT_LANGUAGE' : 'es-us' } self . assertEqual ( g ( r ) , 'es' ) r . META = { 'HTTP_ACCEPT_LANGUAGE' : 'zh-cn,de' } self . assertEqual ( g ( r ) , 'zh-cn' ) def test_parse_language_cookie ( self ) : g = get_language_from_request r = self . rf . get ( '/' ) r . COOKIES = { settings . LANGUAGE_COOKIE_NAME : 'pt-br' } r . META = { } self . assertEqual ( 'pt-br' , g ( r ) ) r . COOKIES = { settings . LANGUAGE_COOKIE_NAME : 'pt' } r . META = { } self . assertEqual ( 'pt' , g ( r ) ) r . COOKIES = { settings . LANGUAGE_COOKIE_NAME : 'es' } r . META = { 'HTTP_ACCEPT_LANGUAGE' : 'de' } self . assertEqual ( 'es' , g ( r ) ) r . COOKIES = { settings . LANGUAGE_COOKIE_NAME : 'es-us' } r . META = { } self . assertEqual ( g ( r ) , 'es' ) r . COOKIES = { settings . LANGUAGE_COOKIE_NAME : 'zh-cn' } r . META = { 'HTTP_ACCEPT_LANGUAGE' : 'de' } self . assertEqual ( g ( r ) , 'zh-cn' ) def test_get_language_from_path ( self ) : from django . utils . translation . trans_real import get_language_from_path as g self . assertEqual ( g ( '/pl/' ) , 'pl' ) self . assertEqual ( g ( '/pl' ) , 'pl' ) self . assertEqual ( g ( '/xyz/' ) , None ) def test_get_language_from_path ( self ) : from django . utils . translation . trans_null import get_language_from_path as g self . assertEqual ( g ( '/pl/' ) , None ) self . assertEqual ( g ( '/pl' ) , None ) self . assertEqual ( g ( '/xyz/' ) , None ) def test_percent_in_translatable_block ( self ) : extended_locale_paths = settings . LOCALE_PATHS + ( os . path . join ( here , 'other' , 'locale' ) , ) with self . settings ( LOCALE_PATHS = extended_locale_paths ) : t_sing = Template ( "{% load i18n %}{% blocktrans %}The result was {{ percent }}%{% endblocktrans %}" ) t_plur = Template ( "{% load i18n %}{% blocktrans count num as number %}{{ percent }}% represents {{ num }} object{% plural %}{{ percent }}% represents {{ num }} objects{% endblocktrans %}" ) with translation . override ( 'de' ) : self . assertEqual ( t_sing . render ( Context ( { 'percent' : 42 } ) ) , u'Das Ergebnis war 42%' ) self . assertEqual ( t_plur . render ( Context ( { 'percent' : 42 , 'num' : 1 } ) ) , u'42% stellt 1 Objekt dar' ) self . assertEqual ( t_plur . render ( Context ( { 'percent' : 42 , 'num' : 4 } ) ) , u'42% stellt 4 Objekte dar' ) class ResolutionOrderI18NTests ( TestCase ) : def setUp ( self ) : from django . utils . translation import trans_real trans_real . _active = local ( ) trans_real . _translations = { } activate ( 'de' ) def tearDown ( self ) : deactivate ( ) def assertUgettext ( self , msgid , msgstr ) : result = ugettext ( msgid ) self . assertTrue ( msgstr in result , ( "The string '%s' isn't in the " % ( msgstr , msgid , result ) ) ) class AppResolutionOrderI18NTests ( ResolutionOrderI18NTests ) : def setUp ( self ) : self . old_installed_apps = settings . INSTALLED_APPS settings . INSTALLED_APPS = [ 'regressiontests.i18n.resolution' ] + list ( settings . INSTALLED_APPS ) super ( AppResolutionOrderI18NTests , self ) . setUp ( ) def tearDown ( self ) : settings . INSTALLED_APPS = self . old_installed_apps super ( AppResolutionOrderI18NTests , self ) . tearDown ( ) def test_app_translation ( self ) : self . assertUgettext ( 'Date/time' , 'APP' ) class LocalePathsResolutionOrderI18NTests ( ResolutionOrderI18NTests ) : def setUp ( self ) : self . old_locale_paths = settings . LOCALE_PATHS settings . LOCALE_PATHS += ( os . path . join ( here , 'other' , 'locale' ) , ) super ( LocalePathsResolutionOrderI18NTests , self ) . setUp ( ) def tearDown ( self ) : settings . LOCALE_PATHS = self . old_locale_paths super ( LocalePathsResolutionOrderI18NTests , self ) . tearDown ( ) def test_locale_paths_translation ( self ) : self . assertUgettext ( 'Time' , 'LOCALE_PATHS' ) def test_locale_paths_override_app_translation ( self ) : extended_apps = list ( settings . INSTALLED_APPS ) + [ 'regressiontests.i18n.resolution' ] with self . settings ( INSTALLED_APPS = extended_apps ) : self . assertUgettext ( 'Time' , 'LOCALE_PATHS' ) def test_locale_paths_override_project_translation ( self ) : with self . settings ( SETTINGS_MODULE = 'regressiontests' ) : self . assertUgettext ( 'Date/time' , 'LOCALE_PATHS' ) class ProjectResolutionOrderI18NTests ( ResolutionOrderI18NTests ) : def setUp ( self ) : self . old_settings_module = settings . SETTINGS_MODULE settings . SETTINGS_MODULE = 'regressiontests' super ( ProjectResolutionOrderI18NTests , self ) . setUp ( ) def tearDown ( self ) : settings . SETTINGS_MODULE = self . old_settings_module super ( ProjectResolutionOrderI18NTests , self ) . tearDown ( ) def test_project_translation ( self ) : self . assertUgettext ( 'Date/time' , 'PROJECT' ) def test_project_override_app_translation ( self ) : extended_apps = list ( settings . INSTALLED_APPS ) + [ 'regressiontests.i18n.resolution' ] with self . settings ( INSTALLED_APPS = extended_apps ) : self . assertUgettext ( 'Date/time' , 'PROJECT' ) class DjangoFallbackResolutionOrderI18NTests ( ResolutionOrderI18NTests ) : def test_django_fallback ( self ) : self . assertEqual ( ugettext ( 'Date/time' ) , 'Datum/Zeit' ) class TestModels ( TestCase ) : def test_lazy ( self ) : tm = TestModel ( ) tm . save ( ) def test_safestr ( self ) : c = Company ( cents_paid = 12 , products_delivered = 1 ) c . name = SafeUnicode ( u'Iñtërnâtiônàlizætiøn1' ) c . save ( ) c . name = SafeString ( u'Iñtërnâtiônàlizætiøn1' . encode ( 'utf-8' ) ) c . save ( ) class TestLanguageInfo ( TestCase ) : def test_localized_language_info ( self ) : li = get_language_info ( 'de' ) self . assertEqual ( li [ 'code' ] , 'de' ) self . assertEqual ( li [ 'name_local' ] , u'Deutsch' ) self . assertEqual ( li [ 'name' ] , 'German' ) self . assertEqual ( li [ 'bidi' ] , False ) class MultipleLocaleActivationTests ( TestCase ) : def setUp ( self ) : self . _old_language = get_language ( ) def tearDown ( self ) : activate ( self . _old_language ) def test_single_locale_activation ( self ) : with translation . override ( 'fr' ) : self . assertEqual ( Template ( "{{ _('Yes') }}" ) . render ( Context ( { } ) ) , 'Oui' ) self . assertEqual ( Template ( "{% load i18n %}{% trans 'Yes' %}" ) . render ( Context ( { } ) ) , 'Oui' ) self . assertEqual ( Template ( "{% load i18n %}{% blocktrans %}Yes{% endblocktrans %}" ) . render ( Context ( { } ) ) , 'Oui' ) def test_multiple_locale_filter ( self ) : with translation . override ( 'de' ) : t = Template ( "{% load i18n %}{{ 0|yesno:_('yes,no,maybe') }}" ) with translation . override ( self . _old_language ) : with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'nee' ) def test_multiple_locale_filter_deactivate ( self ) : with translation . override ( 'de' , deactivate = True ) : t = Template ( "{% load i18n %}{{ 0|yesno:_('yes,no,maybe') }}" ) with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'nee' ) def test_multiple_locale_filter_direct_switch ( self ) : with translation . override ( 'de' ) : t = Template ( "{% load i18n %}{{ 0|yesno:_('yes,no,maybe') }}" ) with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'nee' ) def test_multiple_locale ( self ) : with translation . override ( 'de' ) : t = Template ( "{{ _('No') }}" ) with translation . override ( self . _old_language ) : with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' ) def test_multiple_locale_deactivate ( self ) : with translation . override ( 'de' , deactivate = True ) : t = Template ( "{{ _('No') }}" ) with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' ) def test_multiple_locale_direct_switch ( self ) : with translation . override ( 'de' ) : t = Template ( "{{ _('No') }}" ) with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' ) def test_multiple_locale_loadi18n ( self ) : with translation . override ( 'de' ) : t = Template ( "{% load i18n %}{{ _('No') }}" ) with translation . override ( self . _old_language ) : with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' ) def test_multiple_locale_loadi18n_deactivate ( self ) : with translation . override ( 'de' , deactivate = True ) : t = Template ( "{% load i18n %}{{ _('No') }}" ) with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' ) def test_multiple_locale_loadi18n_direct_switch ( self ) : with translation . override ( 'de' ) : t = Template ( "{% load i18n %}{{ _('No') }}" ) with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' ) def test_multiple_locale_trans ( self ) : with translation . override ( 'de' ) : t = Template ( "{% load i18n %}{% trans 'No' %}" ) with translation . override ( self . _old_language ) : with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' ) def test_multiple_locale_deactivate_trans ( self ) : with translation . override ( 'de' , deactivate = True ) : t = Template ( "{% load i18n %}{% trans 'No' %}" ) with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' ) def test_multiple_locale_direct_switch_trans ( self ) : with translation . override ( 'de' ) : t = Template ( "{% load i18n %}{% trans 'No' %}" ) with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' ) def test_multiple_locale_btrans ( self ) : with translation . override ( 'de' ) : t = Template ( "{% load i18n %}{% blocktrans %}No{% endblocktrans %}" ) with translation . override ( self . _old_language ) : with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' ) def test_multiple_locale_deactivate_btrans ( self ) : with translation . override ( 'de' , deactivate = True ) : t = Template ( "{% load i18n %}{% blocktrans %}No{% endblocktrans %}" ) with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' ) def test_multiple_locale_direct_switch_btrans ( self ) : with translation . override ( 'de' ) : t = Template ( "{% load i18n %}{% blocktrans %}No{% endblocktrans %}" ) with translation . override ( 'nl' ) : self . assertEqual ( t . render ( Context ( { } ) ) , 'Nee' )
