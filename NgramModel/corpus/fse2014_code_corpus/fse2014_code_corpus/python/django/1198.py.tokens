import types import urllib import locale import datetime import codecs from decimal import Decimal from django . utils . functional import Promise class DjangoUnicodeDecodeError ( UnicodeDecodeError ) : def __init__ ( self , obj , * args ) : self . obj = obj UnicodeDecodeError . __init__ ( self , * args ) def __str__ ( self ) : original = UnicodeDecodeError . __str__ ( self ) return '%s. You passed in %r (%s)' % ( original , self . obj , type ( self . obj ) ) class StrAndUnicode ( object ) : def __str__ ( self ) : return self . __unicode__ ( ) . encode ( 'utf-8' ) def smart_unicode ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) : if isinstance ( s , Promise ) : return s return force_unicode ( s , encoding , strings_only , errors ) def is_protected_type ( obj ) : return isinstance ( obj , ( types . NoneType , int , long , datetime . datetime , datetime . date , datetime . time , float , Decimal ) ) def force_unicode ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) : if isinstance ( s , unicode ) : return s if strings_only and is_protected_type ( s ) : return s try : if not isinstance ( s , basestring , ) : if hasattr ( s , '__unicode__' ) : s = unicode ( s ) else : try : s = unicode ( str ( s ) , encoding , errors ) except UnicodeEncodeError : if not isinstance ( s , Exception ) : raise s = u' ' . join ( [ force_unicode ( arg , encoding , strings_only , errors ) for arg in s ] ) elif not isinstance ( s , unicode ) : s = s . decode ( encoding , errors ) except UnicodeDecodeError , e : if not isinstance ( s , Exception ) : raise DjangoUnicodeDecodeError ( s , * e . args ) else : s = u' ' . join ( [ force_unicode ( arg , encoding , strings_only , errors ) for arg in s ] ) return s def smart_str ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) : if strings_only and isinstance ( s , ( types . NoneType , int ) ) : return s if isinstance ( s , Promise ) : return unicode ( s ) . encode ( encoding , errors ) elif not isinstance ( s , basestring ) : try : return str ( s ) except UnicodeEncodeError : if isinstance ( s , Exception ) : return ' ' . join ( [ smart_str ( arg , encoding , strings_only , errors ) for arg in s ] ) return unicode ( s ) . encode ( encoding , errors ) elif isinstance ( s , unicode ) : return s . encode ( encoding , errors ) elif s and encoding != 'utf-8' : return s . decode ( 'utf-8' , errors ) . encode ( encoding , errors ) else : return s def iri_to_uri ( iri ) : if iri is None : return iri return urllib . quote ( smart_str ( iri ) , safe = "/#%[]=:;$&()+,!?*@'~" ) def filepath_to_uri ( path ) : if path is None : return path return urllib . quote ( smart_str ( path ) . replace ( "\\" , "/" ) , safe = "/~!*()'" ) try : DEFAULT_LOCALE_ENCODING = locale . getdefaultlocale ( ) [ 1 ] or 'ascii' codecs . lookup ( DEFAULT_LOCALE_ENCODING ) except : DEFAULT_LOCALE_ENCODING = 'ascii'
