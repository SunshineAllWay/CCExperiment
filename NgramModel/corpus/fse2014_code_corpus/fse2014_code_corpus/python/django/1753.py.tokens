from django . db import connections from django . db . models . query import sql from django . contrib . gis . db . models . fields import GeometryField from django . contrib . gis . db . models . sql import aggregates as gis_aggregates from django . contrib . gis . db . models . sql . conversion import AreaField , DistanceField , GeomField from django . contrib . gis . db . models . sql . where import GeoWhereNode from django . contrib . gis . geometry . backend import Geometry from django . contrib . gis . measure import Area , Distance ALL_TERMS = dict ( [ ( x , None ) for x in ( , 'bboverlaps' , 'contained' , 'contains' , , 'coveredby' , 'covers' , 'crosses' , 'disjoint' , , 'distance_gte' , 'distance_lt' , 'distance_lte' , , 'equals' , 'exact' , , 'overlaps' , 'relate' , 'same_as' , 'touches' , 'within' , , 'right' , 'overlaps_left' , 'overlaps_right' , , 'overlaps_below' , , 'strictly_below' ) ] ) ALL_TERMS . update ( sql . constants . QUERY_TERMS ) class GeoQuery ( sql . Query ) : query_terms = ALL_TERMS aggregates_module = gis_aggregates compiler = 'GeoSQLCompiler' def __init__ ( self , model , where = GeoWhereNode ) : super ( GeoQuery , self ) . __init__ ( model , where ) self . custom_select = { } self . transformed_srid = None self . extra_select_fields = { } def clone ( self , * args , ** kwargs ) : obj = super ( GeoQuery , self ) . clone ( * args , ** kwargs ) obj . custom_select = self . custom_select . copy ( ) obj . transformed_srid = self . transformed_srid obj . extra_select_fields = self . extra_select_fields . copy ( ) return obj def convert_values ( self , value , field , connection ) : if connection . ops . oracle : value = super ( GeoQuery , self ) . convert_values ( value , field or GeomField ( ) , connection ) if value is None : pass elif isinstance ( field , DistanceField ) : value = Distance ( ** { field . distance_att : value } ) elif isinstance ( field , AreaField ) : value = Area ( ** { field . area_att : value } ) elif isinstance ( field , ( GeomField , GeometryField ) ) and value : value = Geometry ( value ) return value def get_aggregation ( self , using ) : connection = connections [ using ] for alias , aggregate in self . aggregate_select . items ( ) : if isinstance ( aggregate , gis_aggregates . GeoAggregate ) : if not getattr ( aggregate , 'is_extent' , False ) or connection . ops . oracle : self . extra_select_fields [ alias ] = GeomField ( ) return super ( GeoQuery , self ) . get_aggregation ( using ) def resolve_aggregate ( self , value , aggregate , connection ) : if isinstance ( aggregate , self . aggregates_module . GeoAggregate ) : if aggregate . is_extent : if aggregate . is_extent == '3D' : return connection . ops . convert_extent3d ( value ) else : return connection . ops . convert_extent ( value ) else : return connection . ops . convert_geom ( value , aggregate . source ) else : return super ( GeoQuery , self ) . resolve_aggregate ( value , aggregate , connection ) def _geo_field ( self , field_name = None ) : if field_name is None : for fld in self . model . _meta . fields : if isinstance ( fld , GeometryField ) : return fld return False else : return GeoWhereNode . _check_geo_field ( self . model . _meta , field_name )
