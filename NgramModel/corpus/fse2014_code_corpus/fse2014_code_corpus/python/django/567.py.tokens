from __future__ import absolute_import from django . core . urlresolvers import reverse from django . template . response import TemplateResponse from django . test import TestCase from . models import Action class AdminCustomUrlsTest ( TestCase ) : fixtures = [ 'users.json' , 'actions.json' ] def setUp ( self ) : self . client . login ( username = 'super' , password = 'secret' ) def tearDown ( self ) : self . client . logout ( ) def testBasicAddGet ( self ) : response = self . client . get ( '/custom_urls/admin/admin_custom_urls/action/!add/' ) self . assertIsInstance ( response , TemplateResponse ) self . assertEqual ( response . status_code , 200 ) def testAddWithGETArgs ( self ) : response = self . client . get ( '/custom_urls/admin/admin_custom_urls/action/!add/' , { 'name' : 'My Action' } ) self . assertEqual ( response . status_code , 200 ) self . assertTrue ( in response . content , ) def testBasicAddPost ( self ) : post_data = { : u'1' , : u'Action added through a popup' , : u"Description of added action" , } response = self . client . post ( '/custom_urls/admin/admin_custom_urls/action/!add/' , post_data ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , 'dismissAddAnotherPopup' ) self . assertContains ( response , 'Action added through a popup' ) def testAdminUrlsNoClash ( self ) : response = self . client . get ( '/custom_urls/admin/admin_custom_urls/action/add/' ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , 'Change action' ) path = reverse ( 'admin:%s_action_change' % Action . _meta . app_label , args = ( 'add' , ) ) response = self . client . get ( path ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , 'Change action' ) path = reverse ( 'admin:%s_action_change' % Action . _meta . app_label , args = ( "path/to/html/document.html" , ) ) response = self . client . get ( path ) self . assertEqual ( response . status_code , 200 ) self . assertContains ( response , 'Change action' ) self . assertContains ( response , 'value="path/to/html/document.html"' )
