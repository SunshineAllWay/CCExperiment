from django . contrib import auth from django . core . exceptions import ImproperlyConfigured from django . utils . functional import SimpleLazyObject def get_user ( request ) : if not hasattr ( request , '_cached_user' ) : request . _cached_user = auth . get_user ( request ) return request . _cached_user class AuthenticationMiddleware ( object ) : def process_request ( self , request ) : assert hasattr ( request , 'session' ) , "The Django authentication middleware requires session middleware to be installed. Edit your MIDDLEWARE_CLASSES setting to insert 'django.contrib.sessions.middleware.SessionMiddleware'." request . user = SimpleLazyObject ( lambda : get_user ( request ) ) class RemoteUserMiddleware ( object ) : header = "REMOTE_USER" def process_request ( self , request ) : if not hasattr ( request , 'user' ) : raise ImproperlyConfigured ( ) try : username = request . META [ self . header ] except KeyError : return if request . user . is_authenticated ( ) : if request . user . username == self . clean_username ( username , request ) : return user = auth . authenticate ( remote_user = username ) if user : request . user = user auth . login ( request , user ) def clean_username ( self , username , request ) : backend_str = request . session [ auth . BACKEND_SESSION_KEY ] backend = auth . load_backend ( backend_str ) try : username = backend . clean_username ( username ) except AttributeError : pass return username
