import os import sys from django . db . backends . creation import BaseDatabaseCreation class DatabaseCreation ( BaseDatabaseCreation ) : data_types = { : 'integer' , : 'bool' , : 'varchar(%(max_length)s)' , : 'varchar(%(max_length)s)' , : 'date' , : 'datetime' , : 'decimal' , : 'varchar(%(max_length)s)' , : 'varchar(%(max_length)s)' , : 'real' , : 'integer' , : 'bigint' , : 'char(15)' , : 'char(39)' , : 'bool' , : 'integer' , : 'integer unsigned' , : 'smallint unsigned' , : 'varchar(%(max_length)s)' , : 'smallint' , : 'text' , : 'time' , } def sql_for_pending_references ( self , model , style , pending_references ) : return [ ] def sql_remove_table_constraints ( self , model , references_to_delete , style ) : return [ ] def _get_test_db_name ( self ) : test_database_name = self . connection . settings_dict [ 'TEST_NAME' ] if test_database_name and test_database_name != ':memory:' : return test_database_name return ':memory:' def _create_test_db ( self , verbosity , autoclobber ) : test_database_name = self . _get_test_db_name ( ) if test_database_name != ':memory:' : if verbosity >= 1 : print "Destroying old test database '%s'..." % self . connection . alias if os . access ( test_database_name , os . F_OK ) : if not autoclobber : confirm = raw_input ( "Type 'yes' if you would like to try deleting the test database '%s', or 'no' to cancel: " % test_database_name ) if autoclobber or confirm == 'yes' : try : os . remove ( test_database_name ) except Exception , e : sys . stderr . write ( "Got an error deleting the old test database: %s\n" % e ) sys . exit ( 2 ) else : print "Tests cancelled." sys . exit ( 1 ) return test_database_name def _destroy_test_db ( self , test_database_name , verbosity ) : if test_database_name and test_database_name != ":memory:" : os . remove ( test_database_name ) def set_autocommit ( self ) : self . connection . connection . isolation_level = None
