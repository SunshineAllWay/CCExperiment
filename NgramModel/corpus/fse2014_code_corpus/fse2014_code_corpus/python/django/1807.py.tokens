from django . conf import settings from django . core import signals from django . core . exceptions import ImproperlyConfigured from django . db . utils import ( ConnectionHandler , ConnectionRouter , load_backend , DEFAULT_DB_ALIAS , DatabaseError , IntegrityError ) __all__ = ( 'backend' , 'connection' , 'connections' , 'router' , 'DatabaseError' , , 'DEFAULT_DB_ALIAS' ) if DEFAULT_DB_ALIAS not in settings . DATABASES : raise ImproperlyConfigured ( "You must define a '%s' database" % DEFAULT_DB_ALIAS ) connections = ConnectionHandler ( settings . DATABASES ) router = ConnectionRouter ( settings . DATABASE_ROUTERS ) class DefaultConnectionProxy ( object ) : def __getattr__ ( self , item ) : return getattr ( connections [ DEFAULT_DB_ALIAS ] , item ) def __setattr__ ( self , name , value ) : return setattr ( connections [ DEFAULT_DB_ALIAS ] , name , value ) connection = DefaultConnectionProxy ( ) backend = load_backend ( connection . settings_dict [ 'ENGINE' ] ) def close_connection ( ** kwargs ) : for conn in connections . all ( ) : conn . close ( ) signals . request_finished . connect ( close_connection ) def reset_queries ( ** kwargs ) : for conn in connections . all ( ) : conn . queries = [ ] signals . request_started . connect ( reset_queries ) def _rollback_on_exception ( ** kwargs ) : from django . db import transaction for conn in connections : try : transaction . rollback_unless_managed ( using = conn ) except DatabaseError : pass signals . got_request_exception . connect ( _rollback_on_exception )
