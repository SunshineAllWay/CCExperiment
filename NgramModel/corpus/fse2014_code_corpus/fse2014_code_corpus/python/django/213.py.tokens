from __future__ import absolute_import from django . core . exceptions import FieldError from django . db . models import F from django . test import TestCase from . models import Company , Employee class ExpressionsTests ( TestCase ) : def test_filter ( self ) : Company . objects . create ( name = "Example Inc." , num_employees = 2300 , num_chairs = 5 , ceo = Employee . objects . create ( firstname = "Joe" , lastname = "Smith" ) ) Company . objects . create ( name = "Foobar Ltd." , num_employees = 3 , num_chairs = 4 , ceo = Employee . objects . create ( firstname = "Frank" , lastname = "Meyer" ) ) Company . objects . create ( name = "Test GmbH" , num_employees = 32 , num_chairs = 1 , ceo = Employee . objects . create ( firstname = "Max" , lastname = "Mustermann" ) ) company_query = Company . objects . values ( , "num_employees" , "num_chairs" ) . order_by ( , "num_employees" , "num_chairs" ) self . assertQuerysetEqual ( company_query . filter ( num_employees__gt = F ( "num_chairs" ) ) , [ { : 5 , : "Example Inc." , : 2300 , } , { : 1 , : "Test GmbH" , : 32 } , ] , lambda o : o ) company_query . update ( num_chairs = F ( "num_employees" ) ) self . assertQuerysetEqual ( company_query , [ { : 2300 , : "Example Inc." , : 2300 } , { : 3 , : "Foobar Ltd." , : 3 } , { : 32 , : "Test GmbH" , : 32 } ] , lambda o : o ) company_query . update ( num_chairs = F ( "num_employees" ) + 2 ) self . assertQuerysetEqual ( company_query , [ { : 2302 , : u'Example Inc.' , : 2300 } , { : 5 , : u'Foobar Ltd.' , : 3 } , { : 34 , : u'Test GmbH' , : 32 } ] , lambda o : o , ) company_query . update ( num_chairs = F ( 'num_employees' ) + 2 * F ( 'num_employees' ) ) self . assertQuerysetEqual ( company_query , [ { : 6900 , : u'Example Inc.' , : 2300 } , { : 9 , : u'Foobar Ltd.' , : 3 } , { : 96 , : u'Test GmbH' , : 32 } ] , lambda o : o , ) company_query . update ( num_chairs = ( ( F ( 'num_employees' ) + 2 ) * F ( 'num_employees' ) ) ) self . assertQuerysetEqual ( company_query , [ { : 5294600 , : u'Example Inc.' , : 2300 } , { : 15 , : u'Foobar Ltd.' , : 3 } , { : 1088 , : u'Test GmbH' , : 32 } ] , lambda o : o , ) self . assertEqual ( Company . objects . update ( point_of_contact = F ( 'ceo' ) ) , 3 ) self . assertQuerysetEqual ( Company . objects . all ( ) , [ , , , ] , lambda c : unicode ( c . point_of_contact ) , ) c = Company . objects . all ( ) [ 0 ] c . point_of_contact = Employee . objects . create ( firstname = "Guido" , lastname = "van Rossum" ) c . save ( ) self . assertQuerysetEqual ( Company . objects . filter ( ceo__firstname = F ( "point_of_contact__firstname" ) ) , [ , , ] , lambda c : c . name ) Company . objects . exclude ( ceo__firstname = F ( "point_of_contact__firstname" ) ) . update ( name = "foo" ) self . assertEqual ( Company . objects . exclude ( ceo__firstname = F ( 'point_of_contact__firstname' ) ) . get ( ) . name , , ) self . assertRaises ( FieldError , lambda : Company . objects . exclude ( ceo__firstname = F ( 'point_of_contact__firstname' ) ) . update ( name = F ( 'point_of_contact__lastname' ) ) ) test_gmbh = Company . objects . get ( name = "Test GmbH" ) self . assertEqual ( test_gmbh . num_employees , 32 ) test_gmbh . num_employees = F ( "num_employees" ) + 4 test_gmbh . save ( ) test_gmbh = Company . objects . get ( pk = test_gmbh . pk ) self . assertEqual ( test_gmbh . num_employees , 36 ) test_gmbh . point_of_contact = None test_gmbh . save ( ) self . assertTrue ( test_gmbh . point_of_contact is None ) def test ( ) : test_gmbh . point_of_contact = F ( "ceo" ) self . assertRaises ( ValueError , test ) test_gmbh . point_of_contact = test_gmbh . ceo test_gmbh . save ( ) test_gmbh . name = F ( "ceo__last_name" ) self . assertRaises ( FieldError , test_gmbh . save ) acme = Company ( name = "The Acme Widget Co." , num_employees = 12 , num_chairs = 5 , ceo = test_gmbh . ceo ) acme . num_employees = F ( "num_employees" ) + 16 self . assertRaises ( TypeError , acme . save )
