from pylons import g from Queue import Queue , Empty from threading import Thread from datetime import datetime , timedelta import time log = g . log class WorkQueue ( object ) : global_env = g . _current_obj ( ) def __init__ ( self , jobs = [ ] , num_workers = 5 , timeout = None ) : self . jobs = Queue ( ) self . work_count = Queue ( num_workers ) self . workers = { } if timeout : self . timeout = timedelta ( seconds = timeout ) else : self . timeout = None for j in jobs : self . jobs . put ( j ) def monitor ( self ) : while True : for worker , start_time in self . workers . items ( ) : if ( not worker . isAlive ( ) or self . timeout and datetime . now ( ) - start_time > self . timeout ) : self . work_count . get_nowait ( ) self . jobs . task_done ( ) del self . workers [ worker ] time . sleep ( 1 ) def _init_thread ( self , job , global_env ) : g . _push_object ( global_env ) try : job ( ) finally : g . _pop_object ( ) def run ( self ) : while True : job = self . jobs . get ( ) work_thread = Thread ( target = self . _init_thread , args = ( job , self . global_env ) ) work_thread . setDaemon ( True ) self . work_count . put ( True ) self . workers [ work_thread ] = datetime . now ( ) work_thread . start ( ) def start ( self ) : monitor_thread = Thread ( target = self . monitor ) monitor_thread . setDaemon ( True ) monitor_thread . start ( ) main_thread = Thread ( target = self . run ) main_thread . setDaemon ( True ) main_thread . start ( ) def add ( self , job ) : self . jobs . put ( job ) def wait ( self ) : self . jobs . join ( ) def __enter__ ( self ) : self . start ( ) return self def __exit__ ( self , _type , _value , _tb ) : self . wait ( ) def test ( ) : import random , time def make_job ( n ) : def job ( ) : print 'starting %s' % n time . sleep ( random . randint ( 1 , 10 ) ) print 'ending %s' % n return job print "TEST 1 (premade jobs)" jobs = [ make_job ( n ) for n in xrange ( 10 ) ] wq = WorkQueue ( jobs , timeout = 5 ) wq . start ( ) wq . wait ( ) print "TEST 2 (jobs added while running)" with WorkQueue ( jobs , timeout = 5 ) as wq : for x in range ( 10 ) : print 'added job %d' % x wq . add ( make_job ( x ) ) print 'DONE'
