from validator import * from reddit_base import MinimalController from r2 . lib . scraper import get_media_embed from r2 . lib . pages import MediaEmbedBody , ComScore , render_ad from pylons import request from pylons . controllers . util import abort from r2 . lib . cache import make_key import random class MediaembedController ( MinimalController ) : @ validate ( link = VLink ( 'link' ) ) def GET_mediaembed ( self , link ) : if request . host != g . media_domain : abort ( 404 ) if not link or not link . media_object : abort ( 404 ) if isinstance ( link . media_object , basestring ) : content = link . media_object elif isinstance ( link . media_object , dict ) : media_embed = get_media_embed ( link . media_object ) content = media_embed . content return MediaEmbedBody ( body = content ) . render ( ) def GET_comscore ( self , reddit = None ) : return ComScore ( ) . render ( style = "html" ) class AdController ( MinimalController ) : def request_key ( self ) : return make_key ( 'request_key' , c . lang , c . content_langs , request . host , c . cname , request . fullpath , random . choice ( xrange ( 100 ) ) ) def GET_ad ( self , reddit_name = None , keyword = None ) : c . render_style = "html" return render_ad ( reddit_name = reddit_name , keyword = keyword ) def GET_ad_by_codename ( self , codename = None ) : if not codename : abort ( 404 ) c . render_style = "html" return render_ad ( codename = codename )
