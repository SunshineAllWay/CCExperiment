from hashlib import md5 from r2 . config import cache from r2 . lib . filters import _force_utf8 from r2 . lib . cache import NoneResult , make_key from r2 . lib . lock import make_lock_factory from pylons import g make_lock = g . make_lock def memoize ( iden , time = 0 , stale = False ) : def memoize_fn ( fn ) : from r2 . lib . memoize import NoneResult def new_fn ( * a , ** kw ) : update = kw . pop ( '_update' , False ) key = make_key ( iden , * a , ** kw ) res = None if update else cache . get ( key , stale = stale ) if res is None : with make_lock ( 'memoize_lock(%s)' % key ) : stored = None if update else cache . get ( key ) if stored is not None : res = stored else : res = fn ( * a , ** kw ) if res is None : res = NoneResult cache . set ( key , res , time = time ) if res == NoneResult : res = None return res return new_fn return memoize_fn @ memoize ( 'test' ) def test ( x , y ) : import time time . sleep ( 1 ) print 'calculating %d + %d' % ( x , y ) if x + y == 10 : return None else : return x + y
