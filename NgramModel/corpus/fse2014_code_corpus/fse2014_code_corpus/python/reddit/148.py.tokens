""" Contains utilities intended to be run from a command line """ from time import sleep import sys def bench_cache_lifetime ( minutes ) : from pylons import g from r2 . lib . cache import PyMemcache as Memcache mc = Memcache ( g . memcaches ) mc . set_multi ( dict ( ( 'bench_cache_%d' % x , x ) for x in xrange ( minutes ) ) , time = minutes * 60 ) for x in xrange ( minutes ) : if mc . get ( 'bench_cache_%d' % x , None ) is not None : sleep ( 60 ) else : return x - 1 else : print ( ( "Cache lifetime is greater than %d minutes. Try again with a" + ) % minutes ) return None def bench_cache_lifetime_multi ( attempts = 10 , minutes = 60 * 24 ) : total = 0 attempts_so_far = 0 minimum = sys . maxint maximum = 0 for x in xrange ( attempts ) : this_attempt = bench_cache_lifetime ( minutes ) maximum = max ( this_attempt , maximum ) minimum = min ( this_attempt , minimum ) total += this_attempt attempts_so_far += 1 mean = float ( total ) / float ( attempts_so_far ) print ( "Attempt #%d of %d: %d; min=%d, max=%d, mean=%.2f" % ( x + 1 , attempts , this_attempt , minimum , maximum , mean ) ) return ( minimum , maximum , mean ) def subs_contribs ( sr_name = 'betateam' ) : from r2 . models import Subreddit , SRMember sr = Subreddit . _by_name ( sr_name ) q = SRMember . _query ( SRMember . c . _thing1_id == sr . _id ) for rel in rels : if rel . _name == 'subscriber' : sr . add_contributor ( rel . _thing2 ) Subreddit . special_reddits ( rel . _thing2 , 'contributor' , _update = True )
