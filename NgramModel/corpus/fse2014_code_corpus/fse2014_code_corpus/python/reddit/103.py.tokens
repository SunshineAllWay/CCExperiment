from datetime import datetime from itertools import ifilter import time , md5 import simplejson from r2 . lib . utils import rfc3339_date_str , http_date_str , to36 from r2 . lib . memoize import memoize from r2 . lib . template_helpers import get_domain from pylons import g , c PERIODS = [ 600 , 300 , 60 ] MIN_PERIOD = min ( PERIODS ) MAX_PERIOD = max ( PERIODS ) def sup_url ( ) : return 'http://%s/sup.json' % get_domain ( subreddit = False ) def period_urls ( ) : return dict ( ( p , sup_url ( ) + "?seconds=" + str ( p ) ) for p in PERIODS ) def cache_key ( ts ) : return 'sup_' + str ( ts ) def make_cur_time ( period ) : t = int ( time . time ( ) ) return t - t % period def make_last_time ( period ) : return make_cur_time ( period ) - period def make_sup_id ( user , action ) : sup_id = md5 . new ( user . name + action ) . hexdigest ( ) return sup_id [ : 10 ] def add_update ( user , action ) : update_time = int ( time . time ( ) ) sup_id = make_sup_id ( user , action ) supdate = ',%s:%s' % ( sup_id , update_time ) key = cache_key ( make_cur_time ( MIN_PERIOD ) ) g . cache . add ( key , '' ) g . cache . append ( key , supdate ) @ memoize ( 'set_json' , time = MAX_PERIOD ) def sup_json_cached ( period , last_time ) : target_time = last_time + MIN_PERIOD - period updates = '' while last_time >= target_time : updates += g . cache . get ( cache_key ( last_time ) ) or '' last_time -= MIN_PERIOD supdates = [ ] if updates : for u in ifilter ( None , updates . split ( ',' ) ) : sup_id , time = u . split ( ':' ) time = int ( time ) if time >= target_time : supdates . append ( [ sup_id , to36 ( time ) ] ) update_time = datetime . utcnow ( ) since_time = datetime . utcfromtimestamp ( target_time ) json = simplejson . dumps ( { 'updated_time' : rfc3339_date_str ( update_time ) , : rfc3339_date_str ( since_time ) , : period , : period_urls ( ) , : supdates } ) json = json . replace ( '\/' , '/' ) return json def sup_json ( period ) : return sup_json_cached ( period , make_last_time ( MIN_PERIOD ) ) def set_sup_header ( user , action ) : sup_id = make_sup_id ( user , action ) c . response . headers [ 'x-sup-id' ] = sup_url ( ) + '#' + sup_id def set_expires_header ( ) : seconds = make_cur_time ( MIN_PERIOD ) + MIN_PERIOD expire_time = datetime . fromtimestamp ( seconds , g . tz ) c . response . headers [ 'expires' ] = http_date_str ( expire_time )
