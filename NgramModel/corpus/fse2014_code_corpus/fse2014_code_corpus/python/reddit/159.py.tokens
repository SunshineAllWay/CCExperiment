cache_key = 'popular_queries' reset_num = 100 min_run = 2 cache_time = 70 max_queries = 50 class QueryStats ( object ) : def __init__ ( self ) : self . reset ( ) def reset ( self ) : self . query_count = { } self . total_count = 0 self . queries = { } def add ( self , query ) : iden = query . _iden ( ) if self . query_count . has_key ( iden ) : self . query_count [ iden ] += 1 else : self . queries [ iden ] = query self . query_count [ iden ] = 1 self . total_count += 1 if self . total_count > reset_num : self . update_cache ( ) self . reset ( ) def update_cache ( self ) : idens = self . query_count . keys ( ) idens . sort ( key = lambda x : self . query_count [ x ] , reverse = True ) idens = idens [ : max_queries ] queries = [ self . queries [ i ] for i in idens if self . query_count [ i ] > min_run ] from pylons import g cache = g . cache cache . set ( cache_key , queries ) def default_queries ( ) : from r2 . models import Link , Subreddit from r2 . lib . db . operators import desc from copy import deepcopy queries = [ ] q = Link . _query ( Link . c . sr_id == Subreddit . user_subreddits ( None ) , sort = desc ( '_hot' ) , limit = 37 ) queries . append ( q ) q = deepcopy ( q ) q . _limit = 75 queries . append ( q ) return queries
