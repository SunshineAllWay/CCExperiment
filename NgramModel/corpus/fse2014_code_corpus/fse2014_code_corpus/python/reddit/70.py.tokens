from reddit_base import RedditController from r2 . lib . pages import * from r2 . models import * from r2 . lib . pages . things import wrap_links from r2 . lib . menus import CommentSortMenu from r2 . lib . filters import spaceCompress , safemarkdown from r2 . lib . memoize import memoize from r2 . lib . template_helpers import add_sr from r2 . lib import utils from validator import * from pylons import c , Response import string strip_sr = re . compile ( '\A/r/[a-zA-Z0-9_-]+' ) strip_s_path = re . compile ( '\A/s/' ) leading_slash = re . compile ( '\A/+' ) has_protocol = re . compile ( '\A[a-zA-Z_-]+:' ) allowed_protocol = re . compile ( '\Ahttps?:' ) need_insert_slash = re . compile ( '\Ahttps?:/[^/]' ) def demangle_url ( path ) : path = strip_sr . sub ( '' , path ) path = strip_s_path . sub ( '' , path ) path = leading_slash . sub ( "" , path ) if has_protocol . match ( path ) : if not allowed_protocol . match ( path ) : return None else : path = 'http://%s' % path if need_insert_slash . match ( path ) : path = string . replace ( path , '/' , '//' , 1 ) path = utils . sanitize_url ( path ) return path def force_html ( ) : c . render_style = 'html' c . extension = None c . content_type = 'text/html; charset=UTF-8' def auto_expand_panel ( link ) : if not link . num_comments or link . is_self : return False else : return c . user . pref_frame_commentspanel class ToolbarController ( RedditController ) : allow_stylesheets = True @ validate ( link1 = VByName ( 'id' ) , link2 = VLink ( 'id' , redirect = False ) ) def GET_goto ( self , link1 , link2 ) : link = link2 if link2 else link1 if link : return self . redirect ( add_sr ( "/tb/" + link . _id36 ) ) return self . abort404 ( ) @ validate ( link = VLink ( 'id' ) ) def GET_tb ( self , link ) : from r2 . lib . media import thumbnail_url if not link : return self . abort404 ( ) elif link . is_self or not link . subreddit_slow . can_view ( c . user ) : return self . redirect ( link . url ) if link . has_thumbnail : thumbnail = thumbnail_url ( link ) else : thumbnail = None res = Frame ( title = link . title , url = link . url , thumbnail = thumbnail , fullname = link . _fullname ) return spaceCompress ( res . render ( ) ) def GET_s ( self , rest ) : force_html ( ) path = demangle_url ( request . fullpath ) if not path : self . abort404 ( ) link = utils . link_from_url ( path , multiple = False ) if c . cname and not c . authorized_cname : return self . abort404 ( ) if link : return self . redirect ( add_sr ( "/tb/" + link . _id36 ) ) title = utils . domain ( path ) res = Frame ( title = title , url = path ) c . response = Response ( ) c . response . status_code = 404 request . environ [ 'usable_error_content' ] = spaceCompress ( res . render ( ) ) return c . response @ validate ( link = VLink ( 'id' ) ) def GET_comments ( self , link ) : if not link : self . abort404 ( ) if not link . subreddit_slow . can_view ( c . user ) : abort ( 403 , 'forbidden' ) links = list ( wrap_links ( link ) ) if not links : return self . abort ( 403 , 'forbidden' ) link = links [ 0 ] wrapper = make_wrapper ( render_class = StarkComment , target = "_top" ) b = TopCommentBuilder ( link , CommentSortMenu . operator ( 'confidence' ) , wrap = wrapper ) listing = NestedListing ( b , num = 10 , parent_name = link . _fullname ) raw_bar = strings . comments_panel_text % dict ( fd_link = link . permalink ) md_bar = safemarkdown ( raw_bar , target = "_top" ) res = RedditMin ( content = CommentsPanel ( link = link , listing = listing . listing ( ) , expanded = auto_expand_panel ( link ) , infobar = md_bar ) ) return res . render ( ) @ validate ( link = VByName ( 'id' ) , url = nop ( 'url' ) ) def GET_toolbar ( self , link , url ) : if not link : link = utils . link_from_url ( url , multiple = False ) if link : link = list ( wrap_links ( link , wrapper = FrameToolbar ) ) if link : res = link [ 0 ] elif url : url = demangle_url ( url ) if not url : return self . abort404 ( ) res = FrameToolbar ( link = None , title = None , url = url , expanded = False ) else : return self . abort404 ( ) return spaceCompress ( res . render ( ) ) @ validate ( link = VByName ( 'id' ) ) def GET_inner ( self , link ) : if not link : return self . abort404 ( ) res = InnerToolbarFrame ( link = link , expanded = auto_expand_panel ( link ) ) return spaceCompress ( res . render ( ) ) @ validate ( link = VLink ( 'linkoid' ) ) def GET_linkoid ( self , link ) : if not link : return self . abort404 ( ) return self . redirect ( add_sr ( "/tb/" + link . _id36 ) ) slash_fixer = re . compile ( '(/s/https?:)/+' ) @ validate ( urloid = nop ( 'urloid' ) ) def GET_urloid ( self , urloid ) : path = demangle_url ( request . fullpath ) if not path : self . abort404 ( ) redir_path = add_sr ( "/s/" + path ) force_html ( ) redir_path = self . slash_fixer . sub ( r'\1///' , redir_path , 1 ) return self . redirect ( redir_path )
