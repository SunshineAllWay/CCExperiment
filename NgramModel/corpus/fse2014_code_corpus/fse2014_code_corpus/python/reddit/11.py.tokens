from os import urandom from base64 import urlsafe_b64encode from r2 . lib . db import tdb_cassandra def generate_token ( size ) : return urlsafe_b64encode ( urandom ( size ) ) . rstrip ( '=' ) class OAuth2Token ( tdb_cassandra . Thing ) : @ classmethod def _new ( cls , ** kwargs ) : if "_id" not in kwargs : kwargs [ "_id" ] = cls . _generate_unique_token ( ) client = cls ( ** kwargs ) client . _commit ( ) return client @ classmethod def _generate_unique_token ( cls ) : for i in range ( 3 ) : token = generate_token ( cls . token_size ) try : cls . _byID ( token ) except tdb_cassandra . NotFound : return token else : continue raise ValueError @ classmethod def get_token ( cls , _id ) : try : return cls . _byID ( _id ) except tdb_cassandra . NotFound : return False class OAuth2Client ( OAuth2Token ) : token_size = 10 client_secret_size = 20 _defaults = dict ( name = "" , description = "" , about_url = "" , icon_url = "" , secret = "" , redirect_uri = "" , ) _use_db = True _connection_pool = 'main' @ classmethod def _new ( cls , ** kwargs ) : if "secret" not in kwargs : kwargs [ "secret" ] = generate_token ( cls . client_secret_size ) return super ( OAuth2Client , cls ) . _new ( ** kwargs ) class OAuth2AuthorizationCode ( OAuth2Token ) : token_size = 20 _ttl = 10 * 60 _defaults = dict ( client_id = "" , redirect_uri = "" , scope = "" , used = False , ) _bool_props = ( "used" , ) _int_props = ( "user_id" , ) _warn_on_partial_ttl = False _use_db = True _connection_pool = 'main' @ classmethod def _new ( cls , client_id , redirect_uri , user_id , scope ) : return super ( OAuth2AuthorizationCode , cls ) . _new ( client_id = client_id , redirect_uri = redirect_uri , user_id = user_id , scope = scope ) @ classmethod def get_token ( cls , _id ) : token = super ( OAuth2AuthorizationCode , cls ) . get_token ( _id ) if token and not token . used : return token else : return False @ classmethod def use_token ( cls , _id , client_id , redirect_uri ) : token = cls . get_token ( _id ) if token and token . client_id == client_id and token . redirect_uri == redirect_uri : token . used = True token . _commit ( ) return token else : return False class OAuth2AccessToken ( OAuth2Token ) : token_size = 20 _ttl = 10 * 60 _defaults = dict ( scope = "" , token_type = "bearer" , ) _int_props = ( "user_id" , ) _use_db = True _connection_pool = 'main' @ classmethod def _new ( cls , user_id , scope ) : return super ( OAuth2AccessToken , cls ) . _new ( user_id = user_id , scope = scope )
