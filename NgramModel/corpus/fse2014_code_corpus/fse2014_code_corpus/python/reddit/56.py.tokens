from reddit_base import RedditController , MinimalController , make_key from r2 . lib . pages import Button , ButtonNoBody , ButtonEmbed , ButtonLite , ButtonDemoPanel , WidgetDemoPanel , Bookmarklets , BoringPage , UpgradeButtons from r2 . lib . pages . things import wrap_links from r2 . models import * from r2 . lib . utils import tup , query_string from pylons import c , request from validator import * from pylons . i18n import _ from r2 . lib . filters import spaceCompress from r2 . controllers . listingcontroller import ListingController class ButtonjsController ( MinimalController ) : def pre ( self ) : MinimalController . pre ( self ) ( user , maybe_admin ) = valid_cookie ( c . cookies [ g . login_cookie ] . value if g . login_cookie in c . cookies else '' ) if user : self . user_is_loggedin = True @ validate ( buttontype = VInt ( 't' , 1 , 5 ) , url = VSanitizedUrl ( "url" ) , _height = VInt ( 'height' , 0 , 300 ) , _width = VInt ( 'width' , 0 , 800 ) , autohide = VBoolean ( "autohide" ) ) def GET_button_embed ( self , buttontype , _height , _width , url , autohide ) : if isinstance ( c . site , DomainSR ) : return self . abort404 ( ) c . render_style = 'js' c . response_content_type = 'text/javascript; charset=UTF-8' if not c . user_is_loggedin and autohide : c . response . content = "void(0);" return c . response buttontype = buttontype or 1 width , height = ( ( 120 , 22 ) , ( 51 , 69 ) , ( 69 , 52 ) , ( 51 , 52 ) , ( 600 , 52 ) ) [ min ( buttontype - 1 , 4 ) ] if _width : width = _width if _height : height = _height bjs = ButtonEmbed ( button = buttontype , width = width , height = height , url = url , referer = request . referer ) . render ( ) return self . sendjs ( bjs , callback = '' , escape = False ) def request_key ( self ) : return make_key ( 'button_request_key' , c . lang , c . content_langs , request . host , c . cname , request . referer , request . fullpath ) class ButtonsController ( RedditController ) : def buttontype ( self ) : b = request . get . get ( 't' ) or 1 try : return int ( b ) except ValueError : return 1 def get_wrapped_link ( self , url , link = None , wrapper = None ) : try : links = [ ] if link : links = [ link ] else : sr = None if isinstance ( c . site , FakeSubreddit ) else c . site try : links = tup ( Link . _by_url ( url , sr ) ) except NotFound : pass if links : kw = { } if wrapper : links = wrap_links ( links , wrapper = wrapper ) else : links = wrap_links ( links ) links = list ( links ) links = max ( links , key = lambda x : x . _score ) if links else None if not links and wrapper : return wrapper ( None ) return links except : import traceback g . log . debug ( "FULLPATH: get_link error in buttons code" ) g . log . debug ( traceback . format_exc ( ) ) if wrapper : return wrapper ( None ) def GET_button_content ( self , * a , ** kw ) : return """ <html> <head> </head> <body style='border:1px solid #336699;text-align:center;margin:0px'> <a href='http://www.reddit.com/upgradebuttons' target='_top' style='color:red'>upgrade</a> </body> </html> """ @ validate ( buttontype = VInt ( 't' , 1 , 5 ) , url = VSanitizedUrl ( "url" ) , _height = VInt ( 'height' , 0 , 300 ) , _width = VInt ( 'width' , 0 , 800 ) , autohide = VBoolean ( "autohide" ) ) def GET_button_embed ( self , buttontype , _height , _width , url , autohide ) : if isinstance ( c . site , DomainSR ) : return self . abort404 ( ) c . render_style = 'js' c . response_content_type = 'text/javascript; charset=UTF-8' if not c . user_is_loggedin and autohide : c . response . content = "void(0);" return c . response buttontype = buttontype or 1 width , height = ( ( 120 , 22 ) , ( 51 , 69 ) , ( 69 , 52 ) , ( 51 , 52 ) , ( 600 , 52 ) ) [ min ( buttontype - 1 , 4 ) ] if _width : width = _width if _height : height = _height bjs = ButtonEmbed ( button = buttontype , width = width , height = height , url = url , referer = request . referer ) . render ( ) c . used_cache = True return self . sendjs ( bjs , callback = '' , escape = False ) @ validate ( buttonimage = VInt ( 'i' , 0 , 14 ) , title = nop ( 'title' ) , url = VSanitizedUrl ( 'url' ) , newwindow = VBoolean ( 'newwindow' , default = False ) , styled = VBoolean ( 'styled' , default = True ) ) def GET_button_lite ( self , buttonimage , title , url , styled , newwindow ) : c . render_style = 'js' c . response_content_type = 'text/javascript; charset=UTF-8' if not url : url = request . referer c . used_cache = True def builder_wrapper ( thing = None ) : kw = { } if not thing : kw [ 'url' ] = url kw [ 'title' ] = title return ButtonLite ( thing , image = 1 if buttonimage is None else buttonimage , target = "_new" if newwindow else "_parent" , styled = styled , ** kw ) bjs = self . get_wrapped_link ( url , wrapper = builder_wrapper ) return self . sendjs ( bjs . render ( ) , callback = '' , escape = False ) def GET_button_demo_page ( self ) : if isinstance ( c . site , DomainSR ) : return self . redirect ( '/buttons' ) return BoringPage ( _ ( "reddit buttons" ) , show_sidebar = False , content = ButtonDemoPanel ( ) ) . render ( ) def GET_upgrade_buttons ( self ) : if isinstance ( c . site , DomainSR ) : return self . redirect ( '/buttons' ) return BoringPage ( _ ( "reddit buttons" ) , show_sidebar = False , content = UpgradeButtons ( ) ) . render ( ) def GET_widget_demo_page ( self ) : return BoringPage ( _ ( "reddit widget" ) , show_sidebar = False , content = WidgetDemoPanel ( ) ) . render ( ) def GET_bookmarklets ( self ) : return BoringPage ( _ ( "bookmarklets" ) , show_sidebar = False , content = Bookmarklets ( ) ) . render ( ) def GET_iphonebookmarklets ( self ) : return BoringPage ( _ ( "submit" ) , title = "submit to reddit" , show_sidebar = False , content = Bookmarklets ( ) ) . render ( )
