import pylons , sha from mako . template import Template as mTemplate from mako . exceptions import TemplateLookupException from r2 . lib . filters import websafe , unsafe from r2 . lib . utils import Storage import inspect , re , os class tp_manager : def __init__ ( self , engine = 'mako' , template_cls = mTemplate ) : self . templates = { } self . engine = engine self . Template = template_cls def add ( self , name , style , file = None ) : key = ( name . lower ( ) , style . lower ( ) ) if file is None : file = "/%s.%s" % ( name , style ) elif not file . startswith ( '/' ) : file = '/' + file self . templates [ key ] = file def add_handler ( self , name , style , handler ) : key = ( name . lower ( ) , style . lower ( ) ) self . templates [ key ] = handler def get ( self , thing , style , cache = True ) : if not isinstance ( thing , type ( object ) ) : thing = thing . __class__ style = style . lower ( ) top_key = ( thing . __name__ . lower ( ) , style ) template = None for cls in inspect . getmro ( thing ) : name = cls . __name__ . lower ( ) key = ( name , style ) if not self . templates . has_key ( key ) : self . add ( name , style ) if isinstance ( self . templates [ key ] , self . Template ) : template = self . templates [ key ] else : try : _loader = pylons . buffet . engines [ self . engine ] [ 'engine' ] template = _loader . load_template ( self . templates [ key ] ) if cache : self . templates [ key ] = template if ( not hasattr ( template , "hash" ) and hasattr ( template , "filename" ) ) : with open ( template . filename , 'r' ) as handle : template . hash = sha . new ( handle . read ( ) ) . hexdigest ( ) if key != top_key : self . templates [ top_key ] = template except TemplateLookupException : continue break if not template or not isinstance ( template , self . Template ) : raise AttributeError , ( "template doesn't exist for %s" % str ( top_key ) ) return template
