class QueueMap ( object ) : def __init__ ( self , exchange , chan , exchange_type = 'direct' , durable = True , auto_delete = False ) : self . exchange = exchange self . chan = chan self . _exchange ( exchange , exchange_type = exchange_type , durable = durable , auto_delete = auto_delete ) def _exchange ( self , name , exchange_type , durable , auto_delete ) : self . chan . exchange_declare ( exchange = name , type = exchange_type , durable = durable , auto_delete = auto_delete ) def _q ( self , name , durable = True , exclusive = False , auto_delete = False , self_refer = False ) : self . chan . queue_declare ( queue = name , durable = durable , exclusive = exclusive , auto_delete = auto_delete ) if self_refer : self . _bind ( name , name ) def _bind ( self , rk , q ) : self . chan . queue_bind ( routing_key = rk , queue = q , exchange = self . exchange ) def init ( self ) : self . queues ( ) self . bindings ( ) def queues ( self ) : raise NotImplementedError def bindings ( self ) : raise NotImplementedError class RedditQueueMap ( QueueMap ) : def queues ( self ) : self . _q ( 'scraper_q' ) self . _q ( 'newcomments_q' ) self . _q ( 'commentstree_q' ) self . _q ( 'register_vote_q' , self_refer = True ) self . _q ( 'vote_link_q' , self_refer = True ) self . _q ( 'vote_comment_q' , self_refer = True ) self . _q ( 'log_q' , self_refer = True ) self . _q ( 'usage_q' , self_refer = True , durable = False ) self . _q ( 'solrsearch_changes' ) self . _q ( 'indextank_changes' , self_refer = True ) self . _bind ( 'search_changes' , 'solrsearch_changes' ) self . _bind ( 'search_changes' , 'indextank_changes' ) def bindings ( self ) : self . newlink_bindings ( ) self . newcomment_bindings ( ) self . newsubreddit_bindings ( ) def newlink_bindings ( self ) : self . _bind ( 'new_link' , 'scraper_q' ) def newcomment_bindings ( self ) : self . _bind ( 'new_comment' , 'newcomments_q' ) self . _bind ( 'new_comment' , 'commentstree_q' ) def newsubreddit_bindings ( self ) : pass try : from r2admin . lib . adminqueues import * except ImportError : pass
