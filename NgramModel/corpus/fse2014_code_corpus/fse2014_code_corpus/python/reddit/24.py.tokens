from pylons import c , request from r2 . lib . strings import Score class Printable ( object ) : show_spam = False show_reports = False is_special = False can_ban = False deleted = False rowstyle = '' collapsed = False author = None margin = 0 is_focal = False childlisting = None cache_ignore = set ( [ 'c' , 'author' , 'score_fmt' , 'child' , , 'display_score' , , 'score' , '_score' , , '_ups' , , '_downs' , , '_deleted' , '_spam' , , 'make_permalink' , 'permalink' , , 'votehash' ] ) @ classmethod def add_props ( cls , user , wrapped ) : from r2 . lib . wrapped import CachedVariable for item in wrapped : item . display = CachedVariable ( "display" ) item . timesince = CachedVariable ( "timesince" ) item . votehash = CachedVariable ( "votehash" ) item . childlisting = CachedVariable ( "childlisting" ) score_fmt = getattr ( item , "score_fmt" , Score . number_only ) item . display_score = map ( score_fmt , item . voting_score ) if item . cachable : item . render_score = item . display_score item . display_score = map ( CachedVariable , [ "scoredislikes" , "scoreunvoted" , ] ) @ property def permalink ( self , * a , ** kw ) : raise NotImplementedError def keep_item ( self , wrapped ) : return True @ staticmethod def wrapped_cache_key ( wrapped , style ) : s = [ wrapped . _fullname , wrapped . _spam , wrapped . reported ] if style == 'htmllite' : s . extend ( [ c . bgcolor , c . bordercolor , request . get . has_key ( 'style' ) , request . get . get ( "expanded" ) , getattr ( wrapped , 'embed_voting_style' , None ) ] ) return s
