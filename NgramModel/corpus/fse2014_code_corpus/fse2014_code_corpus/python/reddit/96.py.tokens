from HTMLParser import HTMLParser _indent = ' ' def tagstr ( tag ) : return '<span style="font-weight: bold;color:blue">%s</span>' % tag def tagend ( tag , line = 0 ) : if not line : return error ( tag ) return '<a href="#line_%d">%s</a>' % ( line , tagstr ( tag ) ) def error ( strng ) : return '<span style="color:red; font-weight:bold">%s</span>' % strng class HTMLValidationParser ( HTMLParser ) : def __init__ ( self , * a , ** kw ) : self . indent = '' ; HTMLParser . __init__ ( self , * a , ** kw ) self . processed_text = '' self . tagtracker = [ ] self . error_line = 0 self . line_number = 1 def nextLine ( self , text ) : self . processed_text += '<a id="line_%s" />' % self . line_number self . processed_text += text self . line_number += 1 def handle_starttag ( self , tag , attrs ) : self . tagtracker . append ( ( tag . lower ( ) , self . line_number ) ) atts = ' ' . join ( [ '%s="%s"' % ( x , y ) for ( x , y ) in attrs ] ) res = "%s&lt;%s%s&gt;\n" % ( self . indent , tagstr ( tag ) , atts and ' ' + atts or '' ) self . indent += _indent self . nextLine ( res ) def handle_endtag ( self , tag ) : line = 0 if self . tagtracker : if self . tagtracker [ - 1 ] [ 0 ] == tag . lower ( ) : line = self . tagtracker [ - 1 ] [ 1 ] self . tagtracker = self . tagtracker [ : - 1 ] else : self . error_line = self . line_number if ( self . indent ) : self . indent = self . indent [ : - len ( _indent ) ] self . nextLine ( "%s&lt;/%s&gt;\n" % ( self . indent , tagend ( tag , line ) ) ) def handle_startendtag ( self , tag , attrs ) : atts = ' ' . join ( [ '%s="%s"' % ( x , y ) for ( x , y ) in attrs ] ) res = "%s&lt;%s%s/&gt;\n" % ( self . indent , tagstr ( tag ) , atts and ' ' + atts or '' ) self . nextLine ( res ) def handle_data ( self , data ) : data2 = data = data . replace ( '\n' , '' ) if data2 . replace ( '\t' , '' ) . replace ( ' ' , '' ) : self . nextLine ( self . indent + data + '\n' ) def feed ( self , text ) : HTMLParser . feed ( self , text ) pretext = '' if self . error_line : el = self . error_line if self . tagtracker : etag , etagl = self . tagtracker [ - 1 ] pretext = '<p>Error on <a href="#line_%d">line %d</a>. Unclosed %s tag on <a href="#line_%d">line %d</a></p>' % ( el , el , etag , etagl , etagl ) else : pretext = '<p>Error on <a href="#line_%d">line %d</a>. Extra closing tag</p>' % ( el , el ) return pretext + "<pre>" + self . processed_text + "</pre>"
