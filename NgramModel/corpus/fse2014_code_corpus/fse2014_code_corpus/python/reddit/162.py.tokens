from r2 . lib . memoize import memoize def UserRel ( name , relation , disable_ids_fn = False , disable_reverse_ids_fn = False ) : exists_fn_name = 'is_' + name def userrel_exists ( self , user ) : if not user : return False r = relation . _fast_query ( [ self ] , [ user ] , name ) r = r . get ( ( self , user , name ) ) if r : return r update_caches_fn_name = name + 'update_' + name + '_caches' def update_caches ( self , user ) : if not disable_ids_fn : getattr ( self , ids_fn_name ) ( _update = True ) if not disable_reverse_ids_fn : getattr ( self , reverse_ids_fn_name ) ( user , _update = True ) add_fn_name = 'add_' + name def userrel_add ( self , user ) : fn = getattr ( self , exists_fn_name ) if not fn ( user ) : s = relation ( self , user , name ) s . _commit ( ) getattr ( self , update_caches_fn_name ) ( user ) return s remove_fn_name = 'remove_' + name def userrel_remove ( self , user ) : fn = getattr ( self , exists_fn_name ) s = fn ( user ) if s : s . _delete ( ) getattr ( self , update_caches_fn_name ) ( user ) return True ids_fn_name = name + '_ids' @ memoize ( ids_fn_name ) def userrel_ids ( self ) : q = relation . _query ( relation . c . _thing1_id == self . _id , relation . c . _name == name , sort = "_date" ) return [ r . _thing2_id for r in q ] reverse_ids_fn_name = 'reverse_' + name + '_ids' @ staticmethod @ memoize ( reverse_ids_fn_name ) def reverse_ids ( user ) : q = relation . _query ( relation . c . _thing2_id == user . _id , relation . c . _name == name ) return [ r . _thing1_id for r in q ] class UR : pass setattr ( UR , update_caches_fn_name , update_caches ) setattr ( UR , exists_fn_name , userrel_exists ) setattr ( UR , add_fn_name , userrel_add ) setattr ( UR , remove_fn_name , userrel_remove ) if not disable_ids_fn : setattr ( UR , ids_fn_name , userrel_ids ) if not disable_reverse_ids_fn : setattr ( UR , reverse_ids_fn_name , reverse_ids ) return UR
