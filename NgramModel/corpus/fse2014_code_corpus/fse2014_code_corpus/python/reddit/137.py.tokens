from r2 . lib . menus import Styled from r2 . lib . wrapped import Wrapped from r2 . models import LinkListing , Link , PromotedLink from r2 . models import make_wrapper , IDBuilder , Thing from r2 . lib . utils import tup from r2 . lib . strings import Score from r2 . lib . promote import * from datetime import datetime from pylons import c , g from pylons . i18n import _ , ungettext class PrintableButtons ( Styled ) : def __init__ ( self , style , thing , show_delete = False , show_report = True , show_distinguish = False , show_marknsfw = False , show_unmarknsfw = False , show_indict = False , is_link = False , ** kw ) : show_ignore = ( thing . show_reports or ( thing . reveal_trial_info and not thing . show_spam ) ) approval_checkmark = getattr ( thing , "approval_checkmark" , None ) show_approve = ( thing . show_spam or show_ignore or ( is_link and approval_checkmark is None ) ) and not thing . _deleted Styled . __init__ ( self , style = style , thing = thing , fullname = thing . _fullname , can_ban = thing . can_ban , show_spam = thing . show_spam , show_reports = thing . show_reports , show_ignore = show_ignore , approval_checkmark = approval_checkmark , show_delete = show_delete , show_approve = show_approve , show_report = show_report , show_indict = show_indict , show_distinguish = show_distinguish , show_marknsfw = show_marknsfw , show_unmarknsfw = show_unmarknsfw , ** kw ) class BanButtons ( PrintableButtons ) : def __init__ ( self , thing , show_delete = False , show_report = True ) : PrintableButtons . __init__ ( self , "banbuttons" , thing ) class LinkButtons ( PrintableButtons ) : def __init__ ( self , thing , comments = True , delete = True , report = True ) : is_author = ( c . user_is_loggedin and thing . author and c . user . name == thing . author . name ) show_report = ( not is_author and report and getattr ( thing , "promoted" , None ) is None ) if c . user_is_admin and thing . promoted is None : show_report = False show_indict = True else : show_indict = False if ( thing . can_ban or is_author ) and not thing . nsfw : show_marknsfw = True else : show_marknsfw = False if ( thing . can_ban or is_author ) and thing . nsfw and not thing . nsfw_str : show_unmarknsfw = True else : show_unmarknsfw = False show_delete = is_author and delete and not thing . _deleted if ( is_promoted ( thing ) and not c . user_is_sponsor ) : show_delete = False show_distinguish = ( is_author and ( thing . can_ban or c . user_special_distinguish ) and getattr ( thing , "expand_children" , False ) ) kw = { } if thing . promoted is not None : now = datetime . now ( g . tz ) kw = dict ( promo_url = promo_edit_url ( thing ) , promote_status = getattr ( thing , "promote_status" , 0 ) , user_is_sponsor = c . user_is_sponsor , traffic_url = promo_traffic_url ( thing ) , is_author = thing . is_author ) PrintableButtons . __init__ ( self , 'linkbuttons' , thing , is_loggedin = c . user_is_loggedin , new_window = c . user . pref_newwindow , comment_label = thing . comment_label , commentcls = thing . commentcls , permalink = thing . permalink , saved = thing . saved , editable = thing . editable , hidden = thing . hidden , show_delete = show_delete , show_report = show_report and c . user_is_loggedin , show_indict = show_indict , show_distinguish = show_distinguish , show_marknsfw = show_marknsfw , show_unmarknsfw = show_unmarknsfw , show_comments = comments , promoted = thing . promoted , is_link = True , ** kw ) class CommentButtons ( PrintableButtons ) : def __init__ ( self , thing , delete = True , report = True ) : is_author = thing . is_author show_report = not is_author and report and thing . can_reply show_delete = is_author and delete and not thing . _deleted show_distinguish = is_author and ( thing . can_ban or c . user_special_distinguish ) PrintableButtons . __init__ ( self , "commentbuttons" , thing , is_author = is_author , profilepage = c . profilepage , permalink = thing . permalink , new_window = c . user . pref_newwindow , full_comment_path = thing . full_comment_path , deleted = thing . deleted , parent_permalink = thing . parent_permalink , can_reply = thing . can_reply , show_report = show_report , show_distinguish = show_distinguish , show_delete = show_delete ) class MessageButtons ( PrintableButtons ) : def __init__ ( self , thing , delete = False , report = True ) : was_comment = getattr ( thing , 'was_comment' , False ) permalink = thing . permalink can_reply = c . user_is_loggedin and getattr ( thing , "repliable" , True ) PrintableButtons . __init__ ( self , "messagebuttons" , thing , profilepage = c . profilepage , permalink = permalink , was_comment = was_comment , unread = thing . new , recipient = thing . recipient , can_reply = can_reply , parent_id = getattr ( thing , "parent_id" , None ) , show_report = True , show_delete = False ) def default_thing_wrapper ( ** params ) : def _default_thing_wrapper ( thing ) : w = Wrapped ( thing ) style = params . get ( 'style' , c . render_style ) if isinstance ( thing , Link ) : if thing . promoted is not None : w . render_class = PromotedLink w . rowstyle = 'promoted link' elif style == 'htmllite' : w . score_fmt = Score . points return w params [ 'parent_wrapper' ] = _default_thing_wrapper return make_wrapper ( ** params ) def wrap_links ( links , wrapper = default_thing_wrapper ( ) , listing_cls = LinkListing , num = None , show_nums = False , nextprev = False , num_margin = None , mid_margin = None , ** kw ) : links = tup ( links ) if not all ( isinstance ( x , str ) for x in links ) : links = [ x . _fullname for x in links ] b = IDBuilder ( links , num = num , wrap = wrapper , ** kw ) l = listing_cls ( b , nextprev = nextprev , show_nums = show_nums ) if num_margin is not None : l . num_margin = num_margin if mid_margin is not None : l . mid_margin = mid_margin return l . listing ( )
