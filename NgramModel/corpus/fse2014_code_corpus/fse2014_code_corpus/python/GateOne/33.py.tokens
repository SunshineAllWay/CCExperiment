import gettext _ = gettext . gettext import _base class TreeWalker ( _base . NonRecursiveTreeWalker ) : def getNodeDetails ( self , node ) : if isinstance ( node , tuple ) : parent , idx , parents = node node = parent . childNodes [ idx ] if node . type in ( 1 , 2 ) : return ( _base . DOCUMENT , ) elif node . type == 3 : return _base . DOCTYPE , node . name , node . publicId , node . systemId elif node . type == 4 : return _base . TEXT , node . value elif node . type == 5 : return ( _base . ELEMENT , node . namespace , node . name , node . attributes . items ( ) , node . hasContent ( ) ) elif node . type == 6 : return _base . COMMENT , node . data else : return _node . UNKNOWN , node . type def getFirstChild ( self , node ) : if isinstance ( node , tuple ) : parent , idx , parents = node parents . append ( ( parent , idx ) ) node = parent . childNodes [ idx ] else : parents = [ ] assert node . hasContent ( ) , "Node has no children" return ( node , 0 , parents ) def getNextSibling ( self , node ) : assert isinstance ( node , tuple ) , "Node is not a tuple: " + str ( node ) parent , idx , parents = node idx += 1 if len ( parent . childNodes ) > idx : return ( parent , idx , parents ) else : return None def getParentNode ( self , node ) : assert isinstance ( node , tuple ) parent , idx , parents = node if parents : parent , idx = parents . pop ( ) return parent , idx , parents else : return None
