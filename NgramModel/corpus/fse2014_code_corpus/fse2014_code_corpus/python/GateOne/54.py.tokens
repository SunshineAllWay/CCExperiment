from html5lib . constants import scopingElements , tableInsertModeElements , namespaces try : frozenset except NameError : from sets import Set as set from sets import ImmutableSet as frozenset Marker = None class Node ( object ) : def __init__ ( self , name ) : self . name = name self . parent = None self . value = None self . attributes = { } self . childNodes = [ ] self . _flags = [ ] def __unicode__ ( self ) : attributesStr = " " . join ( [ "%s=\"%s\"" % ( name , value ) for name , value in self . attributes . iteritems ( ) ] ) if attributesStr : return "<%s %s>" % ( self . name , attributesStr ) else : return "<%s>" % ( self . name ) def __repr__ ( self ) : return "<%s>" % ( self . name ) def appendChild ( self , node ) : raise NotImplementedError def insertText ( self , data , insertBefore = None ) : raise NotImplementedError def insertBefore ( self , node , refNode ) : raise NotImplementedError def removeChild ( self , node ) : raise NotImplementedError def reparentChildren ( self , newParent ) : for child in self . childNodes : newParent . appendChild ( child ) self . childNodes = [ ] def cloneNode ( self ) : raise NotImplementedError def hasContent ( self ) : raise NotImplementedError class TreeBuilder ( object ) : documentClass = None elementClass = None commentClass = None doctypeClass = None fragmentClass = None def __init__ ( self , namespaceHTMLElements ) : if namespaceHTMLElements : self . defaultNamespace = "http://www.w3.org/1999/xhtml" else : self . defaultNamespace = None self . reset ( ) def reset ( self ) : self . openElements = [ ] self . activeFormattingElements = [ ] self . headPointer = None self . formPointer = None self . insertFromTable = False self . document = self . documentClass ( ) def elementInScope ( self , target , variant = None ) : listElementsMap = { None : scopingElements , : scopingElements | set ( [ ( namespaces [ "html" ] , "ol" ) , ( namespaces [ "html" ] , "ul" ) ] ) , : set ( [ ( namespaces [ "html" ] , "html" ) , ( namespaces [ "html" ] , "table" ) ] ) } listElements = listElementsMap [ variant ] for node in reversed ( self . openElements ) : if node . name == target : return True elif node . nameTuple in listElements : return False assert False def reconstructActiveFormattingElements ( self ) : if not self . activeFormattingElements : return i = len ( self . activeFormattingElements ) - 1 entry = self . activeFormattingElements [ i ] if entry == Marker or entry in self . openElements : return while entry != Marker and entry not in self . openElements : if i == 0 : i = - 1 break i -= 1 entry = self . activeFormattingElements [ i ] while True : i += 1 entry = self . activeFormattingElements [ i ] clone = entry . cloneNode ( ) element = self . insertElement ( { "type" : "StartTag" , : clone . name , : clone . namespace , : clone . attributes } ) self . activeFormattingElements [ i ] = element if element == self . activeFormattingElements [ - 1 ] : break def clearActiveFormattingElements ( self ) : entry = self . activeFormattingElements . pop ( ) while self . activeFormattingElements and entry != Marker : entry = self . activeFormattingElements . pop ( ) def elementInActiveFormattingElements ( self , name ) : for item in self . activeFormattingElements [ : : - 1 ] : if item == Marker : break elif item . name == name : return item return False def insertRoot ( self , token ) : element = self . createElement ( token ) self . openElements . append ( element ) self . document . appendChild ( element ) def insertDoctype ( self , token ) : name = token [ "name" ] publicId = token [ "publicId" ] systemId = token [ "systemId" ] doctype = self . doctypeClass ( name , publicId , systemId ) self . document . appendChild ( doctype ) def insertComment ( self , token , parent = None ) : if parent is None : parent = self . openElements [ - 1 ] parent . appendChild ( self . commentClass ( token [ "data" ] ) ) def createElement ( self , token ) : name = token [ "name" ] namespace = token . get ( "namespace" , self . defaultNamespace ) element = self . elementClass ( name , namespace ) element . attributes = token [ "data" ] return element def _getInsertFromTable ( self ) : return self . _insertFromTable def _setInsertFromTable ( self , value ) : self . _insertFromTable = value if value : self . insertElement = self . insertElementTable else : self . insertElement = self . insertElementNormal insertFromTable = property ( _getInsertFromTable , _setInsertFromTable ) def insertElementNormal ( self , token ) : name = token [ "name" ] namespace = token . get ( "namespace" , self . defaultNamespace ) element = self . elementClass ( name , namespace ) element . attributes = token [ "data" ] self . openElements [ - 1 ] . appendChild ( element ) self . openElements . append ( element ) return element def insertElementTable ( self , token ) : element = self . createElement ( token ) if self . openElements [ - 1 ] . name not in tableInsertModeElements : return self . insertElementNormal ( token ) else : parent , insertBefore = self . getTableMisnestedNodePosition ( ) if insertBefore is None : parent . appendChild ( element ) else : parent . insertBefore ( element , insertBefore ) self . openElements . append ( element ) return element def insertText ( self , data , parent = None ) : if parent is None : parent = self . openElements [ - 1 ] if ( not self . insertFromTable or ( self . insertFromTable and self . openElements [ - 1 ] . name not in tableInsertModeElements ) ) : parent . insertText ( data ) else : parent , insertBefore = self . getTableMisnestedNodePosition ( ) parent . insertText ( data , insertBefore ) def getTableMisnestedNodePosition ( self ) : lastTable = None fosterParent = None insertBefore = None for elm in self . openElements [ : : - 1 ] : if elm . name == "table" : lastTable = elm break if lastTable : if lastTable . parent : fosterParent = lastTable . parent insertBefore = lastTable else : fosterParent = self . openElements [ self . openElements . index ( lastTable ) - 1 ] else : fosterParent = self . openElements [ 0 ] return fosterParent , insertBefore def generateImpliedEndTags ( self , exclude = None ) : name = self . openElements [ - 1 ] . name if ( name in frozenset ( ( "dd" , "dt" , "li" , "p" , "td" , "th" , "tr" ) ) and name != exclude ) : self . openElements . pop ( ) self . generateImpliedEndTags ( exclude ) def getDocument ( self ) : return self . document def getFragment ( self ) : fragment = self . fragmentClass ( ) self . openElements [ 0 ] . reparentChildren ( fragment ) return fragment def testSerializer ( self , node ) : raise NotImplementedError
