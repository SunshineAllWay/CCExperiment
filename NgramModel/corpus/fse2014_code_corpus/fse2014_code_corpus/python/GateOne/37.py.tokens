import re import gettext _ = gettext . gettext from BeautifulSoup import BeautifulSoup , Declaration , Comment , Tag from html5lib . constants import namespaces import _base class TreeWalker ( _base . NonRecursiveTreeWalker ) : doctype_regexp = re . compile ( ) def getNodeDetails ( self , node ) : if isinstance ( node , BeautifulSoup ) : return ( _base . DOCUMENT , ) elif isinstance ( node , Declaration ) : string = unicode ( node . string ) if string . startswith ( '<!' ) and string . endswith ( '>' ) : string = string [ 2 : - 1 ] m = self . doctype_regexp . match ( string ) assert m is not None , "DOCTYPE did not match expected format" name = m . group ( 'name' ) publicId = m . group ( 'publicId' ) if publicId is not None : systemId = m . group ( 'systemId1' ) else : systemId = m . group ( 'systemId2' ) return _base . DOCTYPE , name , publicId or "" , systemId or "" elif isinstance ( node , Comment ) : string = unicode ( node . string ) if string . startswith ( '<!--' ) and string . endswith ( '-->' ) : string = string [ 4 : - 3 ] return _base . COMMENT , string elif isinstance ( node , unicode ) : return _base . TEXT , node elif isinstance ( node , Tag ) : return ( _base . ELEMENT , namespaces [ "html" ] , node . name , dict ( node . attrs ) . items ( ) , node . contents ) else : return _base . UNKNOWN , node . __class__ . __name__ def getFirstChild ( self , node ) : return node . contents [ 0 ] def getNextSibling ( self , node ) : return node . nextSibling def getParentNode ( self , node ) : return node . parent
