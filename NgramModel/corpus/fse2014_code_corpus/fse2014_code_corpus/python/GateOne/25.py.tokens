import re from xml . sax . saxutils import escape , unescape from tokenizer import HTMLTokenizer from constants import tokenTypes class HTMLSanitizerMixin ( object ) : acceptable_elements = [ 'a' , 'abbr' , 'acronym' , 'address' , 'area' , 'b' , , 'blockquote' , 'br' , 'button' , 'caption' , 'center' , 'cite' , , 'col' , 'colgroup' , 'dd' , 'del' , 'dfn' , 'dir' , 'div' , 'dl' , 'dt' , , 'fieldset' , 'font' , 'form' , 'h1' , 'h2' , 'h3' , 'h4' , 'h5' , 'h6' , , 'i' , 'img' , 'input' , 'ins' , 'kbd' , 'label' , 'legend' , 'li' , 'map' , , 'ol' , 'optgroup' , 'option' , 'p' , 'pre' , 'q' , 's' , 'samp' , , 'small' , 'span' , 'strike' , 'strong' , 'sub' , 'sup' , 'table' , , 'td' , 'textarea' , 'tfoot' , 'th' , 'thead' , 'tr' , 'tt' , 'u' , , 'var' ] mathml_elements = [ 'maction' , 'math' , 'merror' , 'mfrac' , 'mi' , , 'mn' , 'mo' , 'mover' , 'mpadded' , 'mphantom' , , 'mroot' , 'mrow' , 'mspace' , 'msqrt' , 'mstyle' , 'msub' , , 'msup' , 'mtable' , 'mtd' , 'mtext' , 'mtr' , 'munder' , , 'none' ] svg_elements = [ 'a' , 'animate' , 'animateColor' , 'animateMotion' , , 'circle' , 'defs' , 'desc' , 'ellipse' , 'font-face' , , 'font-face-src' , 'g' , 'glyph' , 'hkern' , , 'line' , 'marker' , 'metadata' , 'missing-glyph' , , 'path' , 'polygon' , 'polyline' , 'radialGradient' , 'rect' , , 'stop' , 'svg' , 'switch' , 'text' , 'title' , 'tspan' , 'use' ] acceptable_attributes = [ 'abbr' , 'accept' , 'accept-charset' , 'accesskey' , , 'align' , 'alt' , 'axis' , 'border' , 'cellpadding' , , 'char' , 'charoff' , 'charset' , 'checked' , 'cite' , 'class' , , 'cols' , 'colspan' , 'color' , 'compact' , 'coords' , 'datetime' , , 'disabled' , 'enctype' , 'for' , 'frame' , 'headers' , 'height' , , 'hreflang' , 'hspace' , 'id' , 'ismap' , 'label' , 'lang' , , 'maxlength' , 'media' , 'method' , 'multiple' , 'name' , , 'noshade' , 'nowrap' , 'prompt' , 'readonly' , 'rel' , 'rev' , , 'rowspan' , 'rules' , 'scope' , 'selected' , 'shape' , 'size' , , 'src' , 'start' , 'style' , 'summary' , 'tabindex' , 'target' , , 'type' , 'usemap' , 'valign' , 'value' , 'vspace' , 'width' , ] mathml_attributes = [ 'actiontype' , 'align' , 'columnalign' , 'columnalign' , , 'columnlines' , 'columnspacing' , 'columnspan' , 'depth' , , 'displaystyle' , 'equalcolumns' , 'equalrows' , 'fence' , , 'fontweight' , 'frame' , 'height' , 'linethickness' , 'lspace' , , 'mathcolor' , 'mathvariant' , 'mathvariant' , 'maxsize' , , 'other' , 'rowalign' , 'rowalign' , 'rowalign' , 'rowlines' , , 'rowspan' , 'rspace' , 'scriptlevel' , 'selection' , , 'stretchy' , 'width' , 'width' , 'xlink:href' , 'xlink:show' , , 'xmlns' , 'xmlns:xlink' ] svg_attributes = [ 'accent-height' , 'accumulate' , 'additive' , 'alphabetic' , , 'ascent' , 'attributeName' , 'attributeType' , , 'bbox' , 'begin' , 'by' , 'calcMode' , 'cap-height' , , 'color' , 'color-rendering' , 'content' , 'cx' , 'cy' , 'd' , 'dx' , , 'descent' , 'display' , 'dur' , 'end' , 'fill' , 'fill-opacity' , , 'font-family' , 'font-size' , 'font-stretch' , 'font-style' , , 'font-weight' , 'from' , 'fx' , 'fy' , 'g1' , 'g2' , , 'gradientUnits' , 'hanging' , 'height' , 'horiz-adv-x' , , 'id' , 'ideographic' , 'k' , 'keyPoints' , , 'keyTimes' , 'lang' , 'marker-end' , 'marker-mid' , , 'markerHeight' , 'markerUnits' , 'markerWidth' , , 'max' , 'min' , 'name' , 'offset' , 'opacity' , 'orient' , , 'overline-position' , 'overline-thickness' , 'panose-1' , , 'pathLength' , 'points' , 'preserveAspectRatio' , 'r' , 'refX' , , 'repeatCount' , 'repeatDur' , 'requiredExtensions' , , 'restart' , 'rotate' , 'rx' , 'ry' , 'slope' , , 'stemv' , 'stop-color' , 'stop-opacity' , , 'strikethrough-thickness' , 'stroke' , , 'stroke-dashoffset' , 'stroke-linecap' , , 'stroke-miterlimit' , 'stroke-opacity' , , 'systemLanguage' , 'target' , 'text-anchor' , 'to' , , 'type' , 'u1' , 'u2' , 'underline-position' , , 'unicode' , 'unicode-range' , 'units-per-em' , , 'version' , 'viewBox' , 'visibility' , 'width' , 'widths' , 'x' , , 'x1' , 'x2' , 'xlink:actuate' , 'xlink:arcrole' , , 'xlink:role' , 'xlink:show' , 'xlink:title' , , 'xml:base' , 'xml:lang' , 'xml:space' , 'xmlns' , , 'y' , 'y1' , 'y2' , 'zoomAndPan' ] attr_val_is_uri = [ 'href' , 'src' , 'cite' , 'action' , 'longdesc' , , 'xml:base' ] svg_attr_val_allows_ref = [ 'clip-path' , 'color-profile' , 'cursor' , 'fill' , , 'marker' , 'marker-start' , 'marker-mid' , 'marker-end' , 'mask' , 'stroke' ] svg_allow_local_href = [ 'altGlyph' , 'animate' , 'animateColor' , 'animateMotion' , , 'cursor' , 'feImage' , 'filter' , 'linearGradient' , 'pattern' , , 'textpath' , 'tref' , 'set' , 'use' ] acceptable_css_properties = [ 'azimuth' , 'background-color' , , 'border-collapse' , 'border-color' , , 'border-right-color' , 'border-top-color' , 'clear' , , 'cursor' , 'direction' , 'display' , 'elevation' , 'float' , 'font' , , 'font-size' , 'font-style' , 'font-variant' , 'font-weight' , , 'letter-spacing' , 'line-height' , 'overflow' , 'pause' , , 'pause-before' , 'pitch' , 'pitch-range' , 'richness' , , 'speak-header' , 'speak-numeral' , 'speak-punctuation' , , 'stress' , 'text-align' , 'text-decoration' , 'text-indent' , , 'vertical-align' , 'voice-family' , 'volume' , , 'width' ] acceptable_css_keywords = [ 'auto' , 'aqua' , 'black' , 'block' , 'blue' , , 'both' , 'bottom' , 'brown' , 'center' , 'collapse' , 'dashed' , , 'fuchsia' , 'gray' , 'green' , '!important' , 'italic' , 'left' , , 'maroon' , 'medium' , 'none' , 'navy' , 'normal' , 'nowrap' , 'olive' , , 'purple' , 'red' , 'right' , 'solid' , 'silver' , 'teal' , 'top' , , 'underline' , 'white' , 'yellow' ] acceptable_svg_properties = [ 'fill' , 'fill-opacity' , 'fill-rule' , , 'stroke-width' , 'stroke-linecap' , 'stroke-linejoin' , ] acceptable_protocols = [ 'ed2k' , 'ftp' , 'http' , 'https' , 'irc' , , 'news' , 'gopher' , 'nntp' , 'telnet' , 'webcal' , , 'callto' , 'feed' , 'urn' , 'aim' , 'rsync' , 'tag' , , 'sftp' , 'rtsp' , 'afs' ] allowed_elements = acceptable_elements + mathml_elements + svg_elements allowed_attributes = acceptable_attributes + mathml_attributes + svg_attributes allowed_css_properties = acceptable_css_properties allowed_css_keywords = acceptable_css_keywords allowed_svg_properties = acceptable_svg_properties allowed_protocols = acceptable_protocols def sanitize_token ( self , token ) : if token [ "type" ] in ( tokenTypes [ "StartTag" ] , tokenTypes [ "EndTag" ] , tokenTypes [ "EmptyTag" ] ) : if token [ "name" ] in self . allowed_elements : if token . has_key ( "data" ) : attrs = dict ( [ ( name , val ) for name , val in token [ "data" ] [ : : - 1 ] if name in self . allowed_attributes ] ) for attr in self . attr_val_is_uri : if not attrs . has_key ( attr ) : continue val_unescaped = re . sub ( "[`\000-\040\177-\240\s]+" , '' , unescape ( attrs [ attr ] ) ) . lower ( ) val_unescaped = val_unescaped . replace ( u"\ufffd" , "" ) if ( re . match ( "^[a-z0-9][-+.a-z0-9]*:" , val_unescaped ) and ( val_unescaped . split ( ':' ) [ 0 ] not in self . allowed_protocols ) ) : del attrs [ attr ] for attr in self . svg_attr_val_allows_ref : if attr in attrs : attrs [ attr ] = re . sub ( r'url\s*\(\s*[^#\s][^)]+?\)' , , unescape ( attrs [ attr ] ) ) if ( token [ "name" ] in self . svg_allow_local_href and in attrs and re . search ( '^\s*[^#\s].*' , attrs [ 'xlink:href' ] ) ) : del attrs [ 'xlink:href' ] if attrs . has_key ( 'style' ) : attrs [ 'style' ] = self . sanitize_css ( attrs [ 'style' ] ) token [ "data" ] = [ [ name , val ] for name , val in attrs . items ( ) ] return token else : if token [ "type" ] == tokenTypes [ "EndTag" ] : token [ "data" ] = "</%s>" % token [ "name" ] elif token [ "data" ] : attrs = '' . join ( [ ' %s="%s"' % ( k , escape ( v ) ) for k , v in token [ "data" ] ] ) token [ "data" ] = "<%s%s>" % ( token [ "name" ] , attrs ) else : token [ "data" ] = "<%s>" % token [ "name" ] if token [ "selfClosing" ] : token [ "data" ] = token [ "data" ] [ : - 1 ] + "/>" token [ "type" ] = tokenTypes [ "Characters" ] del token [ "name" ] return token elif token [ "type" ] == tokenTypes [ "Comment" ] : pass else : return token def sanitize_css ( self , style ) : style = re . compile ( 'url\s*\(\s*[^\s)]+?\s*\)\s*' ) . sub ( ' ' , style ) if not re . match ( """^([:,;#%.\sa-zA-Z0-9!]|\w-\w|'[\s\w]+'|"[\s\w]+"|\([\d,\s]+\))*$""" , style ) : return '' if not re . match ( "^\s*([-\w]+\s*:[^:;]*(;\s*|$))*$" , style ) : return '' clean = [ ] for prop , value in re . findall ( "([-\w]+)\s*:\s*([^:;]*)" , style ) : if not value : continue if prop . lower ( ) in self . allowed_css_properties : clean . append ( prop + ': ' + value + ';' ) elif prop . split ( '-' ) [ 0 ] . lower ( ) in [ 'background' , 'border' , 'margin' , ] : for keyword in value . split ( ) : if not keyword in self . acceptable_css_keywords and not re . match ( "^(#[0-9a-f]+|rgb\(\d+%?,\d*%?,?\d*%?\)?|\d{0,2}\.?\d{0,2}(cm|em|ex|in|mm|pc|pt|px|%|,|\))?)$" , keyword ) : break else : clean . append ( prop + ': ' + value + ';' ) elif prop . lower ( ) in self . allowed_svg_properties : clean . append ( prop + ': ' + value + ';' ) return ' ' . join ( clean ) class HTMLSanitizer ( HTMLTokenizer , HTMLSanitizerMixin ) : def __init__ ( self , stream , encoding = None , parseMeta = True , useChardet = True , lowercaseElementName = False , lowercaseAttrName = False ) : HTMLTokenizer . __init__ ( self , stream , encoding , parseMeta , useChardet , lowercaseElementName , lowercaseAttrName ) def __iter__ ( self ) : for token in HTMLTokenizer . __iter__ ( self ) : token = self . sanitize_token ( token ) if token : yield token
