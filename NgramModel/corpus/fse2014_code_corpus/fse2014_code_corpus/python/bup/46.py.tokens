import functools import logging import tornado . escape import tornado . web class WebSocketHandler ( tornado . web . RequestHandler ) : def __init__ ( self , application , request ) : tornado . web . RequestHandler . __init__ ( self , application , request ) self . stream = request . connection . stream def _execute ( self , transforms , * args , ** kwargs ) : if self . request . headers . get ( "Upgrade" ) != "WebSocket" or self . request . headers . get ( "Connection" ) != "Upgrade" or not self . request . headers . get ( "Origin" ) : message = "Expected WebSocket headers" self . stream . write ( + str ( len ( message ) ) + "\r\n\r\n" + message ) return self . stream . write ( + self . request . headers [ "Origin" ] + "\r\n" + self . request . host + self . request . path + "\r\n\r\n" ) self . async_callback ( self . open ) ( * args , ** kwargs ) def write_message ( self , message ) : if isinstance ( message , dict ) : message = tornado . escape . json_encode ( message ) if isinstance ( message , unicode ) : message = message . encode ( "utf-8" ) assert isinstance ( message , str ) self . stream . write ( "\x00" + message + "\xff" ) def receive_message ( self , callback ) : callback = self . async_callback ( callback ) self . stream . read_bytes ( 1 , functools . partial ( self . _on_frame_type , callback ) ) def close ( self ) : self . stream . close ( ) def async_callback ( self , callback , * args , ** kwargs ) : if args or kwargs : callback = functools . partial ( callback , * args , ** kwargs ) def wrapper ( * args , ** kwargs ) : try : return callback ( * args , ** kwargs ) except Exception , e : logging . error ( "Uncaught exception in %s" , self . request . path , exc_info = True ) self . stream . close ( ) return wrapper def _on_frame_type ( self , callback , byte ) : if ord ( byte ) & 0x80 == 0x80 : raise Exception ( "Length-encoded format not yet supported" ) self . stream . read_until ( , functools . partial ( self . _on_end_delimiter , callback ) ) def _on_end_delimiter ( self , callback , frame ) : callback ( frame [ : - 1 ] . decode ( "utf-8" , "replace" ) ) def _not_supported ( self , * args , ** kwargs ) : raise Exception ( "Method not supported for Web Sockets" ) for method in [ "write" , "redirect" , "set_header" , "send_error" , "set_cookie" , , "flush" , "finish" ] : setattr ( WebSocketHandler , method , WebSocketHandler . _not_supported )
