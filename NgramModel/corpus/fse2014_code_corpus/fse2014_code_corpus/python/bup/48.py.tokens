import htmlentitydefs import re import xml . sax . saxutils import urllib try : import json assert hasattr ( json , "loads" ) and hasattr ( json , "dumps" ) _json_decode = lambda s : json . loads ( s ) _json_encode = lambda v : json . dumps ( v ) except : try : import simplejson _json_decode = lambda s : simplejson . loads ( _unicode ( s ) ) _json_encode = lambda v : simplejson . dumps ( v ) except ImportError : try : from django . utils import simplejson _json_decode = lambda s : simplejson . loads ( _unicode ( s ) ) _json_encode = lambda v : simplejson . dumps ( v ) except ImportError : def _json_decode ( s ) : raise NotImplementedError ( ) _json_encode = _json_decode def xhtml_escape ( value ) : return utf8 ( xml . sax . saxutils . escape ( value , { '"' : "&quot;" } ) ) def xhtml_unescape ( value ) : return re . sub ( r"&(#?)(\w+?);" , _convert_entity , _unicode ( value ) ) def json_encode ( value ) : return _json_encode ( value ) . replace ( "</" , "<\\/" ) def json_decode ( value ) : return _json_decode ( value ) def squeeze ( value ) : return re . sub ( r"[\x00-\x20]+" , " " , value ) . strip ( ) def url_escape ( value ) : return urllib . quote_plus ( utf8 ( value ) ) def url_unescape ( value ) : return _unicode ( urllib . unquote_plus ( value ) ) def utf8 ( value ) : if isinstance ( value , unicode ) : return value . encode ( "utf-8" ) assert isinstance ( value , str ) return value def _unicode ( value ) : if isinstance ( value , str ) : return value . decode ( "utf-8" ) assert isinstance ( value , unicode ) return value def _convert_entity ( m ) : if m . group ( 1 ) == "#" : try : return unichr ( int ( m . group ( 2 ) ) ) except ValueError : return "&#%s;" % m . group ( 2 ) try : return _HTML_UNICODE_MAP [ m . group ( 2 ) ] except KeyError : return "&%s;" % m . group ( 2 ) def _build_unicode_map ( ) : unicode_map = { } for name , value in htmlentitydefs . name2codepoint . iteritems ( ) : unicode_map [ name ] = unichr ( value ) return unicode_map _HTML_UNICODE_MAP = _build_unicode_map ( )
