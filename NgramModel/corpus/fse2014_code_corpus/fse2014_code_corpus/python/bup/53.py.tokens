import ctypes import ctypes . wintypes import os import socket import errno ioctlsocket = ctypes . windll . ws2_32 . ioctlsocket ioctlsocket . argtypes = ( ctypes . wintypes . HANDLE , ctypes . wintypes . LONG , ctypes . wintypes . ULONG ) ioctlsocket . restype = ctypes . c_int SetHandleInformation = ctypes . windll . kernel32 . SetHandleInformation SetHandleInformation . argtypes = ( ctypes . wintypes . HANDLE , ctypes . wintypes . DWORD , ctypes . wintypes . DWORD ) SetHandleInformation . restype = ctypes . wintypes . BOOL HANDLE_FLAG_INHERIT = 0x00000001 F_GETFD = 1 F_SETFD = 2 F_GETFL = 3 F_SETFL = 4 FD_CLOEXEC = 1 os . O_NONBLOCK = 2048 FIONBIO = 126 def fcntl ( fd , op , arg = 0 ) : if op == F_GETFD or op == F_GETFL : return 0 elif op == F_SETFD : if arg == FD_CLOEXEC : success = SetHandleInformation ( fd , HANDLE_FLAG_INHERIT , arg ) if not success : raise ctypes . GetLastError ( ) else : raise ValueError ( "Unsupported arg" ) else : raise ValueError ( "Unsupported op" ) class Pipe ( object ) : def __init__ ( self ) : self . writer = socket . socket ( ) self . writer . setsockopt ( socket . IPPROTO_TCP , socket . TCP_NODELAY , 1 ) count = 0 while 1 : count += 1 a = socket . socket ( ) a . bind ( ( "127.0.0.1" , 0 ) ) connect_address = a . getsockname ( ) a . listen ( 1 ) try : self . writer . connect ( connect_address ) break except socket . error , detail : if detail [ 0 ] != errno . WSAEADDRINUSE : raise if count >= 10 : a . close ( ) self . writer . close ( ) raise socket . error ( "Cannot bind trigger!" ) a . close ( ) self . reader , addr = a . accept ( ) self . reader . setblocking ( 0 ) self . writer . setblocking ( 0 ) a . close ( ) self . reader_fd = self . reader . fileno ( ) def read ( self ) : try : return self . reader . recv ( 1 ) except socket . error , ex : if ex . args [ 0 ] == errno . EWOULDBLOCK : raise IOError raise def write ( self , data ) : return self . writer . send ( data )
