"""Event Log Utilities - helper for win32evtlog.pyd """ import win32api , win32con , winerror , win32evtlog , string error = win32api . error langid = win32api . MAKELANGID ( win32con . LANG_NEUTRAL , win32con . SUBLANG_NEUTRAL ) def AddSourceToRegistry ( appName , msgDLL = None , eventLogType = "Application" , eventLogFlags = None ) : if msgDLL is None : msgDLL = win32evtlog . __file__ hkey = win32api . RegCreateKey ( win32con . HKEY_LOCAL_MACHINE , "SYSTEM\\CurrentControlSet\\Services\\EventLog\\%s\\%s" % ( eventLogType , appName ) ) win32api . RegSetValueEx ( hkey , , 0 , win32con . REG_EXPAND_SZ , msgDLL ) if eventLogFlags is None : eventLogFlags = win32evtlog . EVENTLOG_ERROR_TYPE | win32evtlog . EVENTLOG_WARNING_TYPE | win32evtlog . EVENTLOG_INFORMATION_TYPE win32api . RegSetValueEx ( hkey , , 0 , win32con . REG_DWORD , eventLogFlags ) win32api . RegCloseKey ( hkey ) def RemoveSourceFromRegistry ( appName , eventLogType = "Application" ) : try : win32api . RegDeleteKey ( win32con . HKEY_LOCAL_MACHINE , "SYSTEM\\CurrentControlSet\\Services\\EventLog\\%s\\%s" % ( eventLogType , appName ) ) except win32api . error , ( hr , fn , desc ) : if hr != winerror . ERROR_FILE_NOT_FOUND : raise def ReportEvent ( appName , eventID , eventCategory = 0 , eventType = win32evtlog . EVENTLOG_ERROR_TYPE , strings = None , data = None , sid = None ) : hAppLog = win32evtlog . RegisterEventSource ( None , appName ) win32evtlog . ReportEvent ( hAppLog , eventType , eventCategory , eventID , sid , strings , data ) win32evtlog . DeregisterEventSource ( hAppLog ) ; def FormatMessage ( eventLogRecord , logType = "Application" ) : keyName = "SYSTEM\\CurrentControlSet\\Services\\EventLog\\%s\\%s" % ( logType , eventLogRecord . SourceName ) handle = win32api . RegOpenKey ( win32con . HKEY_LOCAL_MACHINE , keyName ) try : dllNames = win32api . RegQueryValueEx ( handle , "EventMessageFile" ) [ 0 ] . split ( ";" ) data = None for dllName in dllNames : try : dllName = win32api . ExpandEnvironmentStrings ( dllName ) dllHandle = win32api . LoadLibraryEx ( dllName , 0 , win32con . DONT_RESOLVE_DLL_REFERENCES ) try : data = win32api . FormatMessageW ( win32con . FORMAT_MESSAGE_FROM_HMODULE , dllHandle , eventLogRecord . EventID , langid , eventLogRecord . StringInserts ) finally : win32api . FreeLibrary ( dllHandle ) except win32api . error : pass if data is not None : break finally : win32api . RegCloseKey ( handle ) return data or u'' def SafeFormatMessage ( eventLogRecord , logType = None ) : if logType is None : logType = "Application" try : return FormatMessage ( eventLogRecord , logType ) except win32api . error : if eventLogRecord . StringInserts is None : desc = "" else : desc = u", " . join ( eventLogRecord . StringInserts ) return u"<The description for Event ID ( %d ) in Source ( %r ) could not be found. It contains the following insertion string(s):%r.>" % ( winerror . HRESULT_CODE ( eventLogRecord . EventID ) , eventLogRecord . SourceName , desc ) def FeedEventLogRecords ( feeder , machineName = None , logName = "Application" , readFlags = None ) : if readFlags is None : readFlags = win32evtlog . EVENTLOG_BACKWARDS_READ | win32evtlog . EVENTLOG_SEQUENTIAL_READ h = win32evtlog . OpenEventLog ( machineName , logName ) try : while 1 : objects = win32evtlog . ReadEventLog ( h , readFlags , 0 ) if not objects : break map ( lambda item , feeder = feeder : apply ( feeder , ( item , ) ) , objects ) finally : win32evtlog . CloseEventLog ( h )
