""" Locale support. The module provides low-level access to the C lib's locale APIs and adds high level number formatting APIs as well as a locale aliasing engine to complement these. The aliasing engine includes support for many commonly used locale names and maps them to values suitable for passing to the C lib's setlocale() function. It also includes default encodings for all supported locale names. """ import sys , encodings , encodings . aliases import functools __all__ = [ "getlocale" , "getdefaultlocale" , "getpreferredencoding" , "Error" , , "resetlocale" , "localeconv" , "strcoll" , "strxfrm" , , "atof" , "atoi" , "format" , "format_string" , "currency" , , "LC_CTYPE" , "LC_COLLATE" , "LC_TIME" , "LC_MONETARY" , , "LC_ALL" , "CHAR_MAX" ] try : from _locale import * except ImportError : CHAR_MAX = 127 LC_ALL = 6 LC_COLLATE = 3 LC_CTYPE = 0 LC_MESSAGES = 5 LC_MONETARY = 4 LC_NUMERIC = 1 LC_TIME = 2 Error = ValueError def localeconv ( ) : return { 'grouping' : [ 127 ] , : '' , : 127 , : 127 , : 127 , : [ ] , : 127 , : '.' , : '' , : '' , : 127 , : '' , : 127 , : '' , : '' , : 127 , : '' , : 127 } def setlocale ( category , value = None ) : if value not in ( None , '' , 'C' ) : raise Error , '_locale emulation only supports "C" locale' return 'C' def strcoll ( a , b ) : return cmp ( a , b ) def strxfrm ( s ) : return s _localeconv = localeconv _override_localeconv = { } @ functools . wraps ( _localeconv ) def localeconv ( ) : d = _localeconv ( ) if _override_localeconv : d . update ( _override_localeconv ) return d def _group ( s , monetary = False ) : conv = localeconv ( ) thousands_sep = conv [ monetary and 'mon_thousands_sep' or 'thousands_sep' ] grouping = conv [ monetary and 'mon_grouping' or 'grouping' ] if not grouping : return ( s , 0 ) result = "" seps = 0 spaces = "" if s [ - 1 ] == ' ' : sp = s . find ( ' ' ) spaces = s [ sp : ] s = s [ : sp ] while s and grouping : if grouping [ 0 ] == CHAR_MAX : break elif grouping [ 0 ] != 0 : group = grouping [ 0 ] grouping = grouping [ 1 : ] if result : result = s [ - group : ] + thousands_sep + result seps += 1 else : result = s [ - group : ] s = s [ : - group ] if s and s [ - 1 ] not in "0123456789" : return s + result + spaces , seps if not result : return s + spaces , seps if s : result = s + thousands_sep + result seps += 1 return result + spaces , seps def format ( percent , value , grouping = False , monetary = False , * additional ) : if percent [ 0 ] != '%' : raise ValueError ( "format() must be given exactly one %char " ) if additional : formatted = percent % ( ( value , ) + additional ) else : formatted = percent % value if percent [ - 1 ] in 'eEfFgG' : seps = 0 parts = formatted . split ( '.' ) if grouping : parts [ 0 ] , seps = _group ( parts [ 0 ] , monetary = monetary ) decimal_point = localeconv ( ) [ monetary and 'mon_decimal_point' or 'decimal_point' ] formatted = decimal_point . join ( parts ) while seps : sp = formatted . find ( ' ' ) if sp == - 1 : break formatted = formatted [ : sp ] + formatted [ sp + 1 : ] seps -= 1 elif percent [ - 1 ] in 'diu' : if grouping : formatted = _group ( formatted , monetary = monetary ) [ 0 ] return formatted import re , operator _percent_re = re . compile ( r'%(?:\((?P<key>.*?)\))?' ) def format_string ( f , val , grouping = False ) : percents = list ( _percent_re . finditer ( f ) ) new_f = _percent_re . sub ( '%s' , f ) if isinstance ( val , tuple ) : new_val = list ( val ) i = 0 for perc in percents : starcount = perc . group ( 'modifiers' ) . count ( '*' ) new_val [ i ] = format ( perc . group ( ) , new_val [ i ] , grouping , False , * new_val [ i + 1 : i + 1 + starcount ] ) del new_val [ i + 1 : i + 1 + starcount ] i += ( 1 + starcount ) val = tuple ( new_val ) elif operator . isMappingType ( val ) : for perc in percents : key = perc . group ( "key" ) val [ key ] = format ( perc . group ( ) , val [ key ] , grouping ) else : val = format ( percents [ 0 ] . group ( ) , val , grouping ) return new_f % val def currency ( val , symbol = True , grouping = False , international = False ) : conv = localeconv ( ) digits = conv [ international and 'int_frac_digits' or 'frac_digits' ] if digits == 127 : raise ValueError ( "Currency formatting is not possible using " ) s = format ( '%%.%if' % digits , abs ( val ) , grouping , monetary = True ) s = '<' + s + '>' if symbol : smb = conv [ international and 'int_curr_symbol' or 'currency_symbol' ] precedes = conv [ val < 0 and 'n_cs_precedes' or 'p_cs_precedes' ] separated = conv [ val < 0 and 'n_sep_by_space' or 'p_sep_by_space' ] if precedes : s = smb + ( separated and ' ' or '' ) + s else : s = s + ( separated and ' ' or '' ) + smb sign_pos = conv [ val < 0 and 'n_sign_posn' or 'p_sign_posn' ] sign = conv [ val < 0 and 'negative_sign' or 'positive_sign' ] if sign_pos == 0 : s = '(' + s + ')' elif sign_pos == 1 : s = sign + s elif sign_pos == 2 : s = s + sign elif sign_pos == 3 : s = s . replace ( '<' , sign ) elif sign_pos == 4 : s = s . replace ( '>' , sign ) else : s = sign + s return s . replace ( '<' , '' ) . replace ( '>' , '' ) def str ( val ) : return format ( "%.12g" , val ) def atof ( string , func = float ) : ts = localeconv ( ) [ 'thousands_sep' ] if ts : string = string . replace ( ts , '' ) dd = localeconv ( ) [ 'decimal_point' ] if dd : string = string . replace ( dd , '.' ) return func ( string ) def atoi ( str ) : return atof ( str , int ) def _test ( ) : setlocale ( LC_ALL , "" ) s1 = format ( "%d" , 123456789 , 1 ) print s1 , "is" , atoi ( s1 ) s1 = str ( 3.14 ) print s1 , "is" , atof ( s1 ) _setlocale = setlocale def normalize ( localename ) : fullname = localename . lower ( ) if ':' in fullname : fullname = fullname . replace ( ':' , '.' ) if '.' in fullname : langname , encoding = fullname . split ( '.' ) [ : 2 ] fullname = langname + '.' + encoding else : langname = fullname encoding = '' norm_encoding = encoding . replace ( '-' , '' ) norm_encoding = norm_encoding . replace ( '_' , '' ) lookup_name = langname + '.' + encoding code = locale_alias . get ( lookup_name , None ) if code is not None : return code code = locale_alias . get ( langname , None ) if code is not None : if '.' in code : langname , defenc = code . split ( '.' ) else : langname = code defenc = '' if encoding : norm_encoding = encodings . normalize_encoding ( encoding ) norm_encoding = encodings . aliases . aliases . get ( norm_encoding , norm_encoding ) encoding = locale_encoding_alias . get ( norm_encoding , norm_encoding ) else : encoding = defenc if encoding : return langname + '.' + encoding else : return langname else : return localename def _parse_localename ( localename ) : code = normalize ( localename ) if '@' in code : code , modifier = code . split ( '@' ) if modifier == 'euro' and '.' not in code : return code , 'iso-8859-15' if '.' in code : return tuple ( code . split ( '.' ) [ : 2 ] ) elif code == 'C' : return None , None raise ValueError , 'unknown locale: %s' % localename def _build_localename ( localetuple ) : language , encoding = localetuple if language is None : language = 'C' if encoding is None : return language else : return language + '.' + encoding def getdefaultlocale ( envvars = ( 'LC_ALL' , 'LC_CTYPE' , 'LANG' , 'LANGUAGE' ) ) : try : import _locale code , encoding = _locale . _getdefaultlocale ( ) except ( ImportError , AttributeError ) : pass else : if sys . platform == "win32" and code and code [ : 2 ] == "0x" : code = windows_locale . get ( int ( code , 0 ) ) return code , encoding import os lookup = os . environ . get for variable in envvars : localename = lookup ( variable , None ) if localename : if variable == 'LANGUAGE' : localename = localename . split ( ':' ) [ 0 ] break else : localename = 'C' return _parse_localename ( localename ) def getlocale ( category = LC_CTYPE ) : localename = _setlocale ( category ) if category == LC_ALL and ';' in localename : raise TypeError , 'category LC_ALL is not supported' return _parse_localename ( localename ) def setlocale ( category , locale = None ) : if locale and type ( locale ) is not type ( "" ) : locale = normalize ( _build_localename ( locale ) ) return _setlocale ( category , locale ) def resetlocale ( category = LC_ALL ) : _setlocale ( category , _build_localename ( getdefaultlocale ( ) ) ) if sys . platform in ( 'win32' , 'darwin' , 'mac' ) : def getpreferredencoding ( do_setlocale = True ) : import _locale return _locale . _getdefaultlocale ( ) [ 1 ] else : try : CODESET except NameError : def getpreferredencoding ( do_setlocale = True ) : return getdefaultlocale ( ) [ 1 ] else : def getpreferredencoding ( do_setlocale = True ) : if do_setlocale : oldloc = setlocale ( LC_CTYPE ) setlocale ( LC_CTYPE , "" ) result = nl_langinfo ( CODESET ) setlocale ( LC_CTYPE , oldloc ) return result else : return nl_langinfo ( CODESET ) locale_encoding_alias = { : 'C' , : 'C' , : 'ISO8859-1' , : 'JIS7' , : 'JIS7' , : 'eucJP' , : 'ISO8859-1' , : 'ISO8859-1' , : 'ISO8859-1' , : 'ISO8859-10' , : 'ISO8859-11' , : 'ISO8859-13' , : 'ISO8859-14' , : 'ISO8859-15' , : 'ISO8859-2' , : 'ISO8859-3' , : 'ISO8859-4' , : 'ISO8859-5' , : 'ISO8859-6' , : 'ISO8859-7' , : 'ISO8859-8' , : 'ISO8859-9' , : 'JIS7' , : 'SJIS' , : 'TACTIS' , : 'eucJP' , : 'eucKR' , : 'UTF8' , : 'KOI8-R' , : 'KOI8-U' , } locale_alias = { : 'a3_AZ.KOI8-C' , : 'a3_AZ.KOI8-C' , : 'a3_AZ.KOI8-C' , : 'af_ZA.ISO8859-1' , : 'af_ZA.ISO8859-1' , : 'af_ZA.ISO8859-1' , : 'am_ET.UTF-8' , : 'am_ET.UTF-8' , : 'en_US.ISO8859-1' , : 'en_US.ISO8859-1' , : 'ar_AA.ISO8859-6' , : 'ar_AA.ISO8859-6' , : 'ar_AA.ISO8859-6' , : 'ar_AE.ISO8859-6' , : 'ar_AE.ISO8859-6' , : 'ar_BH.ISO8859-6' , : 'ar_BH.ISO8859-6' , : 'ar_DZ.ISO8859-6' , : 'ar_DZ.ISO8859-6' , : 'ar_EG.ISO8859-6' , : 'ar_EG.ISO8859-6' , : 'ar_IQ.ISO8859-6' , : 'ar_IQ.ISO8859-6' , : 'ar_JO.ISO8859-6' , : 'ar_JO.ISO8859-6' , : 'ar_KW.ISO8859-6' , : 'ar_KW.ISO8859-6' , : 'ar_LB.ISO8859-6' , : 'ar_LB.ISO8859-6' , : 'ar_LY.ISO8859-6' , : 'ar_LY.ISO8859-6' , : 'ar_MA.ISO8859-6' , : 'ar_MA.ISO8859-6' , : 'ar_OM.ISO8859-6' , : 'ar_OM.ISO8859-6' , : 'ar_QA.ISO8859-6' , : 'ar_QA.ISO8859-6' , : 'ar_SA.ISO8859-6' , : 'ar_SA.ISO8859-6' , : 'ar_SD.ISO8859-6' , : 'ar_SD.ISO8859-6' , : 'ar_SY.ISO8859-6' , : 'ar_SY.ISO8859-6' , : 'ar_TN.ISO8859-6' , : 'ar_TN.ISO8859-6' , : 'ar_YE.ISO8859-6' , : 'ar_YE.ISO8859-6' , : 'ar_AA.ISO8859-6' , : 'ar_AA.ISO8859-6' , : 'az_AZ.ISO8859-9E' , : 'az_AZ.ISO8859-9E' , : 'az_AZ.ISO8859-9E' , : 'be_BY.CP1251' , : 'be_BY.CP1251' , : 'be_BY.CP1251' , : 'be_BY.CP1251' , : 'bg_BG.CP1251' , : 'bg_BG.CP1251' , : 'bg_BG.CP1251' , : 'bg_BG.ISO8859-5' , : 'bg_BG.KOI8-R' , : 'bg_BG.CP1251' , : 'bn_IN.UTF-8' , : 'nb_NO.ISO8859-1' , : 'nb_NO.ISO8859-1' , : 'br_FR.ISO8859-1' , : 'br_FR.ISO8859-1' , : 'br_FR.ISO8859-1' , : 'br_FR.ISO8859-14' , : 'br_FR.ISO8859-15' , : 'br_FR.ISO8859-15' , : 'br_FR.UTF-8' , : 'br_FR.ISO8859-15' , : 'bs_BA.ISO8859-2' , : 'bs_BA.ISO8859-2' , : 'bs_BA.ISO8859-2' , : 'bg_BG.CP1251' , : 'C' , : 'fr_CA.ISO8859-1' , : 'fr_CA.ISO8859-1' , : 'C' , : 'en_US.ISO8859-1' , : 'C' , : 'C' , : 'ca_ES.ISO8859-1' , : 'ca_ES.ISO8859-1' , : 'ca_ES.ISO8859-1' , : 'ca_ES.ISO8859-15' , : 'ca_ES.ISO8859-15' , : 'ca_ES.UTF-8' , : 'ca_ES.ISO8859-15' , : 'ca_ES.ISO8859-1' , : 'en_US.ISO8859-1' , : 'en_US.ISO8859-1' , : 'zh_CN.eucCN' , : 'zh_TW.eucTW' , : 'hr_HR.ISO8859-2' , : 'cs_CZ.ISO8859-2' , : 'cs_CZ.ISO8859-2' , : 'cs_CS.ISO8859-2' , : 'cs_CZ.ISO8859-2' , : 'cs_CZ.ISO8859-2' , : 'cy_GB.ISO8859-1' , : 'cy_GB.ISO8859-1' , : 'cy_GB.ISO8859-1' , : 'cy_GB.ISO8859-14' , : 'cy_GB.ISO8859-15' , : 'cy_GB.ISO8859-15' , : 'cs_CZ.ISO8859-2' , : 'cs_CZ.ISO8859-2' , : 'cs_CZ.ISO8859-2' , : 'da_DK.ISO8859-1' , : 'da_DK.ISO8859-1' , : 'da_DK.ISO8859-1' , : 'da_DK.ISO8859-15' , : 'da_DK.ISO8859-1' , : 'da_DK.ISO8859-15' , : 'da_DK.ISO8859-15' , : 'da_DK.ISO8859-1' , : 'da_DK.ISO8859-1' , : 'da_DK.ISO8859-1' , : 'de_DE.ISO8859-1' , : 'de_AT.ISO8859-1' , : 'de_AT.ISO8859-1' , : 'de_AT.ISO8859-15' , : 'de_AT.ISO8859-15' , : 'de_AT.UTF-8' , : 'de_AT.ISO8859-15' , : 'de_BE.ISO8859-1' , : 'de_BE.ISO8859-1' , : 'de_BE.ISO8859-15' , : 'de_BE.ISO8859-15' , : 'de_BE.UTF-8' , : 'de_BE.ISO8859-15' , : 'de_CH.ISO8859-1' , : 'de_CH.ISO8859-1' , : 'de_CH.ISO8859-15' , : 'de_CH.ISO8859-15' , : 'de_DE.ISO8859-1' , : 'de_DE.ISO8859-1' , : 'de_DE.ISO8859-15' , : 'de_DE.ISO8859-15' , : 'de_DE.ISO8859-1' , : 'de_DE.ISO8859-15' , : 'de_DE.ISO8859-15' , : 'de_DE.UTF-8' , : 'de_DE.ISO8859-15' , : 'de_LU.ISO8859-1' , : 'de_LU.ISO8859-1' , : 'de_LU.ISO8859-15' , : 'de_LU.ISO8859-15' , : 'de_LU.UTF-8' , : 'de_LU.ISO8859-15' , : 'de_DE.ISO8859-1' , : 'nl_NL.ISO8859-1' , : 'nl_BE.ISO8859-1' , : 'ee_EE.ISO8859-4' , : 'ee_EE.ISO8859-4' , : 'ee_EE.ISO8859-4' , : 'et_EE.ISO8859-1' , : 'el_GR.ISO8859-7' , : 'el_GR.ISO8859-7' , : 'el_GR.ISO8859-7' , : 'el_GR.ISO8859-15' , : 'en_US.ISO8859-1' , : 'en_US.ISO8859-1' , : 'en_AU.ISO8859-1' , : 'en_AU.ISO8859-1' , : 'en_BE.ISO8859-1' , : 'en_BE.ISO8859-15' , : 'en_BW.ISO8859-1' , : 'en_BW.ISO8859-1' , : 'en_CA.ISO8859-1' , : 'en_CA.ISO8859-1' , : 'en_GB.ISO8859-1' , : 'en_GB.ISO8859-1' , : 'en_GB.ISO8859-1' , : 'en_GB.ISO8859-15' , : 'en_GB.ISO8859-15' , : 'en_HK.ISO8859-1' , : 'en_HK.ISO8859-1' , : 'en_IE.ISO8859-1' , : 'en_IE.ISO8859-1' , : 'en_IE.ISO8859-15' , : 'en_IE.ISO8859-15' , : 'en_IE.UTF-8' , : 'en_IE.ISO8859-15' , : 'en_IN.ISO8859-1' , : 'en_NZ.ISO8859-1' , : 'en_NZ.ISO8859-1' , : 'en_PH.ISO8859-1' , : 'en_PH.ISO8859-1' , : 'en_SG.ISO8859-1' , : 'en_SG.ISO8859-1' , : 'en_GB.ISO8859-1' , : 'en_US.ISO8859-1' , : 'en_US.ISO8859-1' , : 'en_US.ISO8859-15' , : 'en_US.ISO8859-1' , : 'en_US.ISO8859-15' , : 'en_US.ISO8859-15' , : 'en_US.ISO8859-15' , : 'en_US.ISO8859-15' , : 'en_ZA.ISO8859-1' , : 'en_ZA.ISO8859-1' , : 'en_ZA.ISO8859-1' , : 'en_ZA.ISO8859-15' , : 'en_ZA.ISO8859-15' , : 'en_ZW.ISO8859-1' , : 'en_ZW.ISO8859-1' , : 'en_GB.ISO8859-1' , : 'en_GB.ISO8859-1' , : 'en_EN.ISO8859-1' , : 'en_EN.ISO8859-1' , : 'en_GB.ISO8859-1' , : 'en_GB.ISO8859-1' , : 'en_US.ISO8859-1' , : 'C' , : 'en_US.ISO8859-1' , : 'en_US.ISO8859-1' , : 'en_US.ISO8859-1' , : 'eo_XX.ISO8859-3' , : 'eo_EO.ISO8859-3' , : 'eo_EO.ISO8859-3' , : 'eo_XX.ISO8859-3' , : 'eo_XX.ISO8859-3' , : 'es_ES.ISO8859-1' , : 'es_AR.ISO8859-1' , : 'es_AR.ISO8859-1' , : 'es_BO.ISO8859-1' , : 'es_BO.ISO8859-1' , : 'es_CL.ISO8859-1' , : 'es_CL.ISO8859-1' , : 'es_CO.ISO8859-1' , : 'es_CO.ISO8859-1' , : 'es_CR.ISO8859-1' , : 'es_CR.ISO8859-1' , : 'es_DO.ISO8859-1' , : 'es_DO.ISO8859-1' , : 'es_EC.ISO8859-1' , : 'es_EC.ISO8859-1' , : 'es_ES.ISO8859-1' , : 'es_ES.ISO8859-1' , : 'es_ES.ISO8859-1' , : 'es_ES.ISO8859-15' , : 'es_ES.ISO8859-15' , : 'es_ES.UTF-8' , : 'es_ES.ISO8859-15' , : 'es_GT.ISO8859-1' , : 'es_GT.ISO8859-1' , : 'es_HN.ISO8859-1' , : 'es_HN.ISO8859-1' , : 'es_MX.ISO8859-1' , : 'es_MX.ISO8859-1' , : 'es_NI.ISO8859-1' , : 'es_NI.ISO8859-1' , : 'es_PA.ISO8859-1' , : 'es_PA.ISO8859-1' , : 'es_PA.ISO8859-15' , : 'es_PA.ISO8859-15' , : 'es_PE.ISO8859-1' , : 'es_PE.ISO8859-1' , : 'es_PE.ISO8859-15' , : 'es_PE.ISO8859-15' , : 'es_PR.ISO8859-1' , : 'es_PR.ISO8859-1' , : 'es_PY.ISO8859-1' , : 'es_PY.ISO8859-1' , : 'es_PY.ISO8859-15' , : 'es_PY.ISO8859-15' , : 'es_SV.ISO8859-1' , : 'es_SV.ISO8859-1' , : 'es_SV.ISO8859-15' , : 'es_SV.ISO8859-15' , : 'es_US.ISO8859-1' , : 'es_US.ISO8859-1' , : 'es_UY.ISO8859-1' , : 'es_UY.ISO8859-1' , : 'es_UY.ISO8859-15' , : 'es_UY.ISO8859-15' , : 'es_VE.ISO8859-1' , : 'es_VE.ISO8859-1' , : 'es_VE.ISO8859-15' , : 'es_VE.ISO8859-15' , : 'et_EE.ISO8859-1' , : 'et_EE.ISO8859-15' , : 'et_EE.ISO8859-15' , : 'et_EE.ISO8859-1' , : 'et_EE.ISO8859-13' , : 'et_EE.ISO8859-15' , : 'et_EE.ISO8859-4' , : 'et_EE.ISO8859-15' , : 'eu_ES.ISO8859-1' , : 'eu_ES.ISO8859-1' , : 'eu_ES.ISO8859-1' , : 'eu_ES.ISO8859-15' , : 'eu_ES.ISO8859-15' , : 'eu_ES.UTF-8' , : 'eu_ES.ISO8859-15' , : 'fa_IR.UTF-8' , : 'fa_IR.UTF-8' , : 'fa_IR.ISIRI-3342' , : 'fi_FI.ISO8859-15' , : 'fi_FI.ISO8859-15' , : 'fi_FI.ISO8859-1' , : 'fi_FI.ISO8859-1' , : 'fi_FI.ISO8859-15' , : 'fi_FI.ISO8859-15' , : 'fi_FI.UTF-8' , : 'fi_FI.ISO8859-15' , : 'fi_FI.ISO8859-1' , : 'fi_FI.ISO8859-1' , : 'fo_FO.ISO8859-1' , : 'fo_FO.ISO8859-1' , : 'fo_FO.ISO8859-1' , : 'fo_FO.ISO8859-15' , : 'fo_FO.ISO8859-15' , : 'fr_FR.ISO8859-1' , : 'fr_BE.ISO8859-1' , : 'fr_BE.ISO8859-1' , : 'fr_BE.ISO8859-1' , : 'fr_BE.ISO8859-15' , : 'fr_BE.ISO8859-15' , : 'fr_BE.UTF-8' , : 'fr_BE.ISO8859-15' , : 'fr_CA.ISO8859-1' , : 'fr_CA.ISO8859-1' , : 'fr_CA.ISO8859-1' , : 'fr_CA.ISO8859-15' , : 'fr_CA.ISO8859-15' , : 'fr_CH.ISO8859-1' , : 'fr_CH.ISO8859-1' , : 'fr_CH.ISO8859-1' , : 'fr_CH.ISO8859-15' , : 'fr_CH.ISO8859-15' , : 'fr_FR.ISO8859-1' , : 'fr_FR.ISO8859-1' , : 'fr_FR.ISO8859-1' , : 'fr_FR.ISO8859-15' , : 'fr_FR.ISO8859-15' , : 'fr_FR.UTF-8' , : 'fr_FR.ISO8859-15' , : 'fr_LU.ISO8859-1' , : 'fr_LU.ISO8859-1' , : 'fr_LU.ISO8859-1' , : 'fr_LU.ISO8859-15' , : 'fr_LU.ISO8859-15' , : 'fr_LU.UTF-8' , : 'fr_LU.ISO8859-15' , : 'fr_FR.ISO8859-1' , : 'fr_FR.ISO8859-1' , : 'fr_FR.ISO8859-1' , : 'fr_FR.ISO8859-1' , : 'fr_CH.ISO8859-1' , : 'fr_FR.ISO8859-1' , : 'fr_FR.ISO8859-1' , : 'ga_IE.ISO8859-1' , : 'ga_IE.ISO8859-1' , : 'ga_IE.ISO8859-1' , : 'ga_IE.ISO8859-14' , : 'ga_IE.ISO8859-15' , : 'ga_IE.ISO8859-15' , : 'ga_IE.UTF-8' , : 'ga_IE.ISO8859-15' , : 'gl_ES.ISO8859-1' , : 'gl_ES.ISO8859-1' , : 'gd_GB.ISO8859-1' , : 'gd_GB.ISO8859-1' , : 'gd_GB.ISO8859-1' , : 'gd_GB.ISO8859-14' , : 'gd_GB.ISO8859-15' , : 'gd_GB.ISO8859-15' , : 'de_DE.ISO8859-1' , : 'de_DE.ISO8859-1' , : 'de_DE.ISO8859-1' , : 'de_CH.ISO8859-1' , : 'de_DE.ISO8859-1' , : 'de_DE.ISO8859-1' , : 'gl_ES.ISO8859-1' , : 'gl_ES.ISO8859-1' , : 'gl_ES.ISO8859-1' , : 'gl_ES.ISO8859-15' , : 'gl_ES.ISO8859-15' , : 'gl_ES.UTF-8' , : 'gl_ES.ISO8859-15' , : 'el_GR.ISO8859-7' , : 'el_GR.ISO8859-7' , : 'gu_IN.UTF-8' , : 'gv_GB.ISO8859-1' , : 'gv_GB.ISO8859-1' , : 'gv_GB.ISO8859-1' , : 'gv_GB.ISO8859-14' , : 'gv_GB.ISO8859-15' , : 'gv_GB.ISO8859-15' , : 'he_IL.ISO8859-8' , : 'he_IL.ISO8859-8' , : 'he_IL.CP1255' , : 'he_IL.ISO8859-8' , : 'he_IL.CP1255' , : 'iw_IL.ISO8859-8' , : 'iw_IL.ISO8859-8' , : 'hi_IN.ISCII-DEV' , : 'hi_IN.ISCII-DEV' , : 'hi_IN.ISCII-DEV' , : 'hr_HR.ISO8859-2' , : 'hr_HR.ISO8859-2' , : 'hr_HR.ISO8859-2' , : 'hr_HR.ISO8859-2' , : 'hu_HU.ISO8859-2' , : 'hu_HU.ISO8859-2' , : 'hu_HU.ISO8859-2' , : 'hu_HU.ISO8859-2' , : 'is_IS.ISO8859-1' , : 'is_IS.ISO8859-1' , : 'id_ID.ISO8859-1' , : 'id_ID.ISO8859-1' , : 'id_ID.ISO8859-1' , : 'id_ID.ISO8859-1' , : 'is_IS.ISO8859-1' , : 'is_IS.ISO8859-1' , : 'is_IS.ISO8859-1' , : 'is_IS.ISO8859-15' , : 'is_IS.ISO8859-15' , : 'en_US.ISO8859-1' , : 'en_US.ISO8859-15' , : 'en_US.ISO8859-1' , : 'en_US.ISO8859-15' , : 'en_US.ISO8859-1' , : 'en_US.ISO8859-15' , : 'it_IT.ISO8859-1' , : 'it_CH.ISO8859-1' , : 'it_CH.ISO8859-1' , : 'it_CH.ISO8859-15' , : 'it_CH.ISO8859-15' , : 'it_IT.ISO8859-1' , : 'it_IT.ISO8859-1' , : 'it_IT.ISO8859-1' , : 'it_IT.ISO8859-15' , : 'it_IT.ISO8859-15' , : 'it_IT.UTF-8' , : 'it_IT.ISO8859-15' , : 'it_IT.ISO8859-1' , : 'it_IT.ISO8859-1' , : 'iu_CA.NUNACOM-8' , : 'iu_CA.NUNACOM-8' , : 'iu_CA.NUNACOM-8' , : 'he_IL.ISO8859-8' , : 'he_IL.ISO8859-8' , : 'he_IL.ISO8859-8' , : 'ja_JP.eucJP' , : 'ja_JP.JIS7' , : 'ja_JP.SJIS' , : 'ja_JP.eucJP' , : 'ja_JP.eucJP' , : 'ja_JP.eucJP' , : 'ja_JP.eucJP' , : 'ja_JP.JIS7' , : 'ja_JP.JIS7' , : 'ja_JP.JIS7' , : 'ja_JP.JIS7' , : 'ja_JP.SJIS' , : 'ja_JP.SJIS' , : 'ja_JP.eucJP' , : 'ja_JP.eucJP' , : 'ja_JP.eucJP' , : 'ja_JP.eucJP' , : 'ja_JP.eucJP' , : 'ja_JP.SJIS' , : 'ja_JP.eucJP' , : 'ka_GE.GEORGIAN-ACADEMY' , : 'ka_GE.GEORGIAN-ACADEMY' , : 'ka_GE.GEORGIAN-ACADEMY' , : 'ka_GE.GEORGIAN-PS' , : 'ka_GE.GEORGIAN-ACADEMY' , : 'kl_GL.ISO8859-1' , : 'kl_GL.ISO8859-1' , : 'kl_GL.ISO8859-1' , : 'kl_GL.ISO8859-15' , : 'kl_GL.ISO8859-15' , : 'km_KH.UTF-8' , : 'kn_IN.UTF-8' , : 'ko_KR.eucKR' , : 'ko_KR.eucKR' , : 'ko_KR.eucKR' , : 'ko_KR.eucKR' , : 'ko_KR.eucKR' , : 'ko_KR.eucKR' , : 'kw_GB.ISO8859-1' , : 'kw_GB.ISO8859-1' , : 'kw_GB.ISO8859-1' , : 'kw_GB.ISO8859-14' , : 'kw_GB.ISO8859-15' , : 'kw_GB.ISO8859-15' , : 'ky_KG.UTF-8' , : 'ky_KG.UTF-8' , : 'lt_LT.ISO8859-13' , : 'lo_LA.MULELAO-1' , : 'lo_LA.MULELAO-1' , : 'lo_LA.IBM-CP1133' , : 'lo_LA.IBM-CP1133' , : 'lo_LA.MULELAO-1' , : 'lt_LT.ISO8859-13' , : 'lt_LT.ISO8859-13' , : 'lt_LT.ISO8859-13' , : 'lt_LT.ISO8859-4' , : 'lv_LV.ISO8859-13' , : 'lv_LV.ISO8859-13' , : 'lv_LV.ISO8859-13' , : 'lv_LV.ISO8859-4' , : 'mi_NZ.ISO8859-1' , : 'mi_NZ.ISO8859-1' , : 'mi_NZ.ISO8859-1' , : 'mk_MK.ISO8859-5' , : 'mk_MK.ISO8859-5' , : 'mk_MK.CP1251' , : 'mk_MK.ISO8859-5' , : 'mk_MK.CP1251' , : 'mr_IN.UTF-8' , : 'ms_MY.ISO8859-1' , : 'ms_MY.ISO8859-1' , : 'ms_MY.ISO8859-1' , : 'mt_MT.ISO8859-3' , : 'mt_MT.ISO8859-3' , : 'mt_MT.ISO8859-3' , : 'nb_NO.ISO8859-1' , : 'nb_NO.ISO8859-1' , : 'nb_NO.ISO8859-1' , : 'nb_NO.ISO8859-1' , : 'nb_NO.ISO8859-15' , : 'nb_NO.ISO8859-15' , : 'nl_NL.ISO8859-1' , : 'nl_BE.ISO8859-1' , : 'nl_BE.ISO8859-1' , : 'nl_BE.ISO8859-1' , : 'nl_BE.ISO8859-15' , : 'nl_BE.ISO8859-15' , : 'nl_BE.UTF-8' , : 'nl_BE.ISO8859-15' , : 'nl_NL.ISO8859-1' , : 'nl_NL.ISO8859-1' , : 'nl_NL.ISO8859-1' , : 'nl_NL.ISO8859-15' , : 'nl_NL.ISO8859-15' , : 'nl_NL.UTF-8' , : 'nl_NL.ISO8859-15' , : 'nn_NO.ISO8859-1' , : 'nn_NO.ISO8859-1' , : 'nn_NO.ISO8859-1' , : 'nn_NO.ISO8859-1' , : 'nn_NO.ISO8859-15' , : 'nn_NO.ISO8859-15' , : 'no_NO.ISO8859-1' , : 'ny_NO.ISO8859-1' , : 'no_NO.ISO8859-1' , : 'no_NO.ISO8859-1' , : 'no_NO.ISO8859-1' , : 'no_NO.ISO8859-15' , : 'no_NO.ISO8859-15' , : 'no_NO.ISO8859-1' , : 'no_NO.ISO8859-1' , : 'nr_ZA.ISO8859-1' , : 'nr_ZA.ISO8859-1' , : 'nr_ZA.ISO8859-1' , : 'nso_ZA.ISO8859-15' , : 'nso_ZA.ISO8859-15' , : 'nso_ZA.ISO8859-15' , : 'ny_NO.ISO8859-1' , : 'ny_NO.ISO8859-1' , : 'ny_NO.ISO8859-1' , : 'ny_NO.ISO8859-1' , : 'ny_NO.ISO8859-15' , : 'ny_NO.ISO8859-15' , : 'nn_NO.ISO8859-1' , : 'oc_FR.ISO8859-1' , : 'oc_FR.ISO8859-1' , : 'oc_FR.ISO8859-1' , : 'oc_FR.ISO8859-15' , : 'oc_FR.ISO8859-15' , : 'pa_IN.UTF-8' , : 'pd_US.ISO8859-1' , : 'pd_DE.ISO8859-1' , : 'pd_DE.ISO8859-1' , : 'pd_DE.ISO8859-15' , : 'pd_DE.ISO8859-15' , : 'pd_US.ISO8859-1' , : 'pd_US.ISO8859-1' , : 'pd_US.ISO8859-15' , : 'pd_US.ISO8859-15' , : 'ph_PH.ISO8859-1' , : 'ph_PH.ISO8859-1' , : 'ph_PH.ISO8859-1' , : 'pl_PL.ISO8859-2' , : 'pl_PL.ISO8859-2' , : 'pl_PL.ISO8859-2' , : 'pl_PL.ISO8859-2' , : 'pt_PT.ISO8859-1' , : 'pt_PT.ISO8859-1' , : 'pt_BR.ISO8859-1' , : 'pt_BR.ISO8859-1' , : 'C' , : 'C' , : 'pp_AN.ISO8859-1' , : 'pp_AN.ISO8859-1' , : 'pp_AN.ISO8859-1' , : 'pt_PT.ISO8859-1' , : 'pt_BR.ISO8859-1' , : 'pt_BR.ISO8859-1' , : 'pt_BR.ISO8859-1' , : 'pt_BR.ISO8859-15' , : 'pt_BR.ISO8859-15' , : 'pt_PT.ISO8859-1' , : 'pt_PT.ISO8859-1' , : 'pt_PT.ISO8859-1' , : 'pt_PT.ISO8859-15' , : 'pt_PT.ISO8859-15' , : 'pt_PT.UTF-8' , : 'pt_PT.ISO8859-15' , : 'ro_RO.ISO8859-2' , : 'ro_RO.ISO8859-2' , : 'ro_RO.ISO8859-2' , : 'ro_RO.ISO8859-2' , : 'ru_RU.ISO8859-5' , : 'ru_RU.ISO8859-5' , : 'ru_RU.CP1251' , : 'ru_RU.ISO8859-5' , : 'ru_RU.KOI8-R' , : 'ru_RU.CP1251' , : 'ru_UA.KOI8-U' , : 'ru_UA.CP1251' , : 'ru_UA.KOI8-U' , : 'ru_UA.CP1251' , : 'ro_RO.ISO8859-2' , : 'ru_RU.ISO8859-5' , : 'rw_RW.ISO8859-1' , : 'rw_RW.ISO8859-1' , : 'rw_RW.ISO8859-1' , : 'se_NO.UTF-8' , : 'sr_CS.ISO8859-2' , : 'sr_CS.ISO8859-2' , : 'sh_HR.ISO8859-2' , : 'hr_HR.ISO8859-2' , : 'sr_CS.ISO8859-2' , : 'sr_CS.ISO8859-2' , : 'si_LK.UTF-8' , : 'si_LK.UTF-8' , : 'si_LK.UTF-8' , : 'sk_SK.ISO8859-2' , : 'sk_SK.ISO8859-2' , : 'sk_SK.ISO8859-2' , : 'sl_SI.ISO8859-2' , : 'sl_CS.ISO8859-2' , : 'sl_SI.ISO8859-2' , : 'sl_SI.ISO8859-2' , : 'sk_SK.ISO8859-2' , : 'sl_SI.ISO8859-2' , : 'sl_SI.ISO8859-2' , : 'sr_CS.ISO8859-5' , : 'sr_CS.ISO8859-5' , : 'es_ES.ISO8859-1' , : 'es_ES.ISO8859-1' , : 'es_ES.ISO8859-1' , : 'es_ES.ISO8859-1' , : 'sq_AL.ISO8859-2' , : 'sq_AL.ISO8859-2' , : 'sq_AL.ISO8859-2' , : 'sr_CS.ISO8859-5' , : 'sr_CS.ISO8859-5' , : 'sr_CS.ISO8859-2' , : 'sr_CS.ISO8859-2' , : 'sr_CS.ISO8859-2' , : 'sr_CS.ISO8859-5' , : 'sr_CS.UTF-8' , : 'sr_CS.ISO8859-2' , : 'sr_CS.ISO8859-2' , : 'sr_CS.ISO8859-5' , : 'sr_CS.CP1251' , : 'sr_CS.ISO8859-2' , : 'sr_CS.ISO8859-5' , : 'sr_CS.ISO8859-5' , : 'sr_CS.CP1251' , : 'sr_CS.UTF-8' , : 'sr_CS.ISO8859-5' , : 'ss_ZA.ISO8859-1' , : 'ss_ZA.ISO8859-1' , : 'ss_ZA.ISO8859-1' , : 'st_ZA.ISO8859-1' , : 'st_ZA.ISO8859-1' , : 'st_ZA.ISO8859-1' , : 'sv_SE.ISO8859-1' , : 'sv_FI.ISO8859-1' , : 'sv_FI.ISO8859-1' , : 'sv_FI.ISO8859-15' , : 'sv_FI.ISO8859-15' , : 'sv_FI.UTF-8' , : 'sv_FI.ISO8859-15' , : 'sv_SE.ISO8859-1' , : 'sv_SE.ISO8859-1' , : 'sv_SE.ISO8859-1' , : 'sv_SE.ISO8859-15' , : 'sv_SE.ISO8859-15' , : 'sv_SE.ISO8859-1' , : 'sv_SE.ISO8859-1' , : 'ta_IN.TSCII-0' , : 'ta_IN.TSCII-0' , : 'ta_IN.TSCII-0' , : 'ta_IN.TSCII-0' , : 'tg_TJ.KOI8-C' , : 'tg_TJ.KOI8-C' , : 'tg_TJ.KOI8-C' , : 'th_TH.ISO8859-11' , : 'th_TH.ISO8859-11' , : 'th_TH.ISO8859-11' , : 'th_TH.TIS620' , : 'th_TH.TIS620' , : 'th_TH.ISO8859-11' , : 'tl_PH.ISO8859-1' , : 'tl_PH.ISO8859-1' , : 'tl_PH.ISO8859-1' , : 'tn_ZA.ISO8859-15' , : 'tn_ZA.ISO8859-15' , : 'tn_ZA.ISO8859-15' , : 'tr_TR.ISO8859-9' , : 'tr_TR.ISO8859-9' , : 'tr_TR.ISO8859-9' , : 'ts_ZA.ISO8859-1' , : 'ts_ZA.ISO8859-1' , : 'ts_ZA.ISO8859-1' , : 'tt_RU.TATAR-CYR' , : 'tt_RU.TATAR-CYR' , : 'tt_RU.KOI8-C' , : 'tt_RU.TATAR-CYR' , : 'tr_TR.ISO8859-9' , : 'tr_TR.ISO8859-9' , : 'uk_UA.KOI8-U' , : 'uk_UA.KOI8-U' , : 'uk_UA.CP1251' , : 'uk_UA.ISO8859-5' , : 'uk_UA.KOI8-U' , : 'uk_UA.CP1251' , : 'en_US.utf' , : 'en_US.utf' , : 'en_US.UTF-8' , : 'ur_PK.CP1256' , : 'ur_PK.CP1256' , : 'ur_PK.CP1256' , : 'ur_PK.CP1256' , : 'uz_UZ.UTF-8' , : 'uz_UZ.UTF-8' , : 'uz_UZ.ISO8859-1' , : 'uz_UZ.UTF-8' , : 'uz_UZ.UTF-8' , : 've_ZA.UTF-8' , : 've_ZA.UTF-8' , : 'vi_VN.TCVN' , : 'vi_VN.TCVN' , : 'vi_VN.TCVN' , : 'vi_VN.TCVN' , : 'vi_VN.VISCII' , : 'vi_VN.VISCII' , : 'wa_BE.ISO8859-1' , : 'wa_BE.ISO8859-1' , : 'wa_BE.ISO8859-1' , : 'wa_BE.ISO8859-15' , : 'wa_BE.ISO8859-15' , : 'wa_BE.ISO8859-15' , : 'xh_ZA.ISO8859-1' , : 'xh_ZA.ISO8859-1' , : 'xh_ZA.ISO8859-1' , : 'yi_US.CP1255' , : 'yi_US.CP1255' , : 'yi_US.CP1255' , : 'yi_US.CP1255' , : 'zh_CN.eucCN' , : 'zh_CN.gb2312' , : 'zh_TW.big5' , : 'zh_CN.eucCN' , : 'zh_CN.gb18030' , : 'zh_CN.gb2312' , : 'zh_CN.gbk' , : 'zh_HK.big5hkscs' , : 'zh_HK.big5' , : 'zh_HK.big5hkscs' , : 'zh_TW.big5' , : 'zh_TW.big5' , : 'zh_TW.eucTW' , : 'zh_TW.eucTW' , : 'zu_ZA.ISO8859-1' , : 'zu_ZA.ISO8859-1' , : 'zu_ZA.ISO8859-1' , } windows_locale = { 0x0436 : "af_ZA" , 0x041c : "sq_AL" , 0x0401 : "ar_SA" , 0x0801 : "ar_IQ" , 0x0c01 : "ar_EG" , 0x1001 : "ar_LY" , 0x1401 : "ar_DZ" , 0x1801 : "ar_MA" , 0x1c01 : "ar_TN" , 0x2001 : "ar_OM" , 0x2401 : "ar_YE" , 0x2801 : "ar_SY" , 0x2c01 : "ar_JO" , 0x3001 : "ar_LB" , 0x3401 : "ar_KW" , 0x3801 : "ar_AE" , 0x3c01 : "ar_BH" , 0x4001 : "ar_QA" , 0x042b : "hy_AM" , 0x042c : "az_AZ" , 0x082c : "az_AZ" , 0x042d : "eu_ES" , 0x0423 : "be_BY" , 0x0445 : "bn_IN" , 0x201a : "bs_BA" , 0x141a : "bs_BA" , 0x047e : "br_FR" , 0x0402 : "bg_BG" , 0x0403 : "ca_ES" , 0x0004 : "zh_CHS" , 0x0404 : "zh_TW" , 0x0804 : "zh_CN" , 0x0c04 : "zh_HK" , 0x1004 : "zh_SG" , 0x1404 : "zh_MO" , 0x7c04 : "zh_CHT" , 0x041a : "hr_HR" , 0x101a : "hr_BA" , 0x0405 : "cs_CZ" , 0x0406 : "da_DK" , 0x048c : "gbz_AF" , 0x0465 : "div_MV" , 0x0413 : "nl_NL" , 0x0813 : "nl_BE" , 0x0409 : "en_US" , 0x0809 : "en_GB" , 0x0c09 : "en_AU" , 0x1009 : "en_CA" , 0x1409 : "en_NZ" , 0x1809 : "en_IE" , 0x1c09 : "en_ZA" , 0x2009 : "en_JA" , 0x2409 : "en_CB" , 0x2809 : "en_BZ" , 0x2c09 : "en_TT" , 0x3009 : "en_ZW" , 0x3409 : "en_PH" , 0x0425 : "et_EE" , 0x0438 : "fo_FO" , 0x0464 : "fil_PH" , 0x040b : "fi_FI" , 0x040c : "fr_FR" , 0x080c : "fr_BE" , 0x0c0c : "fr_CA" , 0x100c : "fr_CH" , 0x140c : "fr_LU" , 0x180c : "fr_MC" , 0x0462 : "fy_NL" , 0x0456 : "gl_ES" , 0x0437 : "ka_GE" , 0x0407 : "de_DE" , 0x0807 : "de_CH" , 0x0c07 : "de_AT" , 0x1007 : "de_LU" , 0x1407 : "de_LI" , 0x0408 : "el_GR" , 0x0447 : "gu_IN" , 0x040d : "he_IL" , 0x0439 : "hi_IN" , 0x040e : "hu_HU" , 0x040f : "is_IS" , 0x0421 : "id_ID" , 0x045d : "iu_CA" , 0x085d : "iu_CA" , 0x083c : "ga_IE" , 0x0434 : "xh_ZA" , 0x0435 : "zu_ZA" , 0x0410 : "it_IT" , 0x0810 : "it_CH" , 0x0411 : "ja_JP" , 0x044b : "kn_IN" , 0x043f : "kk_KZ" , 0x0457 : "kok_IN" , 0x0412 : "ko_KR" , 0x0440 : "ky_KG" , 0x0426 : "lv_LV" , 0x0427 : "lt_LT" , 0x046e : "lb_LU" , 0x042f : "mk_MK" , 0x043e : "ms_MY" , 0x083e : "ms_BN" , 0x044c : "ml_IN" , 0x043a : "mt_MT" , 0x0481 : "mi_NZ" , 0x047a : "arn_CL" , 0x044e : "mr_IN" , 0x047c : "moh_CA" , 0x0450 : "mn_MN" , 0x0461 : "ne_NP" , 0x0414 : "nb_NO" , 0x0814 : "nn_NO" , 0x0482 : "oc_FR" , 0x0448 : "or_IN" , 0x0463 : "ps_AF" , 0x0429 : "fa_IR" , 0x0415 : "pl_PL" , 0x0416 : "pt_BR" , 0x0816 : "pt_PT" , 0x0446 : "pa_IN" , 0x046b : "quz_BO" , 0x086b : "quz_EC" , 0x0c6b : "quz_PE" , 0x0418 : "ro_RO" , 0x0417 : "rm_CH" , 0x0419 : "ru_RU" , 0x243b : "smn_FI" , 0x103b : "smj_NO" , 0x143b : "smj_SE" , 0x043b : "se_NO" , 0x083b : "se_SE" , 0x0c3b : "se_FI" , 0x203b : "sms_FI" , 0x183b : "sma_NO" , 0x1c3b : "sma_SE" , 0x044f : "sa_IN" , 0x0c1a : "sr_SP" , 0x1c1a : "sr_BA" , 0x081a : "sr_SP" , 0x181a : "sr_BA" , 0x046c : "ns_ZA" , 0x0432 : "tn_ZA" , 0x041b : "sk_SK" , 0x0424 : "sl_SI" , 0x040a : "es_ES" , 0x080a : "es_MX" , 0x0c0a : "es_ES" , 0x100a : "es_GT" , 0x140a : "es_CR" , 0x180a : "es_PA" , 0x1c0a : "es_DO" , 0x200a : "es_VE" , 0x240a : "es_CO" , 0x280a : "es_PE" , 0x2c0a : "es_AR" , 0x300a : "es_EC" , 0x340a : "es_CL" , 0x380a : "es_UR" , 0x3c0a : "es_PY" , 0x400a : "es_BO" , 0x440a : "es_SV" , 0x480a : "es_HN" , 0x4c0a : "es_NI" , 0x500a : "es_PR" , 0x0441 : "sw_KE" , 0x041d : "sv_SE" , 0x081d : "sv_FI" , 0x045a : "syr_SY" , 0x0449 : "ta_IN" , 0x0444 : "tt_RU" , 0x044a : "te_IN" , 0x041e : "th_TH" , 0x041f : "tr_TR" , 0x0422 : "uk_UA" , 0x0420 : "ur_PK" , 0x0820 : "ur_IN" , 0x0443 : "uz_UZ" , 0x0843 : "uz_UZ" , 0x042a : "vi_VN" , 0x0452 : "cy_GB" , } def _print_locale ( ) : categories = { } def _init_categories ( categories = categories ) : for k , v in globals ( ) . items ( ) : if k [ : 3 ] == 'LC_' : categories [ k ] = v _init_categories ( ) del categories [ 'LC_ALL' ] print 'Locale defaults as determined by getdefaultlocale():' print '-' * 72 lang , enc = getdefaultlocale ( ) print 'Language: ' , lang or '(undefined)' print 'Encoding: ' , enc or '(undefined)' print print 'Locale settings on startup:' print '-' * 72 for name , category in categories . items ( ) : print name , '...' lang , enc = getlocale ( category ) print ' Language: ' , lang or '(undefined)' print ' Encoding: ' , enc or '(undefined)' print print print 'Locale settings after calling resetlocale():' print '-' * 72 resetlocale ( ) for name , category in categories . items ( ) : print name , '...' lang , enc = getlocale ( category ) print ' Language: ' , lang or '(undefined)' print ' Encoding: ' , enc or '(undefined)' print try : setlocale ( LC_ALL , "" ) except : print 'NOTE:' print 'setlocale(LC_ALL, "") does not support the default locale' print 'given in the OS environment variables.' else : print print 'Locale settings after calling setlocale(LC_ALL, ""):' print '-' * 72 for name , category in categories . items ( ) : print name , '...' lang , enc = getlocale ( category ) print ' Language: ' , lang or '(undefined)' print ' Encoding: ' , enc or '(undefined)' print try : LC_MESSAGES except NameError : pass else : __all__ . append ( "LC_MESSAGES" ) if __name__ == '__main__' : print 'Locale aliasing:' print _print_locale ( ) print print 'Number formatting:' print _test ( )
