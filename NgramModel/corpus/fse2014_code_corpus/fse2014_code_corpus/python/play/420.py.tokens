""" Python Character Mapping Codec generated from 'LATIN2.TXT' with gencodec.py. Written by Marc-Andre Lemburg (mal@lemburg.com). (c) Copyright CNRI, All Rights Reserved. NO WARRANTY. (c) Copyright 2000 Guido van Rossum. """ import codecs class Codec ( codecs . Codec ) : def encode ( self , input , errors = 'strict' ) : return codecs . charmap_encode ( input , errors , encoding_map ) def decode ( self , input , errors = 'strict' ) : return codecs . charmap_decode ( input , errors , decoding_map ) class IncrementalEncoder ( codecs . IncrementalEncoder ) : def encode ( self , input , final = False ) : return codecs . charmap_encode ( input , self . errors , encoding_map ) [ 0 ] class IncrementalDecoder ( codecs . IncrementalDecoder ) : def decode ( self , input , final = False ) : return codecs . charmap_decode ( input , self . errors , decoding_map ) [ 0 ] class StreamWriter ( Codec , codecs . StreamWriter ) : pass class StreamReader ( Codec , codecs . StreamReader ) : pass def getregentry ( ) : return codecs . CodecInfo ( name = 'mac-latin2' , encode = Codec ( ) . encode , decode = Codec ( ) . decode , incrementalencoder = IncrementalEncoder , incrementaldecoder = IncrementalDecoder , streamreader = StreamReader , streamwriter = StreamWriter , ) decoding_map = codecs . make_identity_dict ( range ( 256 ) ) decoding_map . update ( { 0x0080 : 0x00c4 , 0x0081 : 0x0100 , 0x0082 : 0x0101 , 0x0083 : 0x00c9 , 0x0084 : 0x0104 , 0x0085 : 0x00d6 , 0x0086 : 0x00dc , 0x0087 : 0x00e1 , 0x0088 : 0x0105 , 0x0089 : 0x010c , 0x008a : 0x00e4 , 0x008b : 0x010d , 0x008c : 0x0106 , 0x008d : 0x0107 , 0x008e : 0x00e9 , 0x008f : 0x0179 , 0x0090 : 0x017a , 0x0091 : 0x010e , 0x0092 : 0x00ed , 0x0093 : 0x010f , 0x0094 : 0x0112 , 0x0095 : 0x0113 , 0x0096 : 0x0116 , 0x0097 : 0x00f3 , 0x0098 : 0x0117 , 0x0099 : 0x00f4 , 0x009a : 0x00f6 , 0x009b : 0x00f5 , 0x009c : 0x00fa , 0x009d : 0x011a , 0x009e : 0x011b , 0x009f : 0x00fc , 0x00a0 : 0x2020 , 0x00a1 : 0x00b0 , 0x00a2 : 0x0118 , 0x00a4 : 0x00a7 , 0x00a5 : 0x2022 , 0x00a6 : 0x00b6 , 0x00a7 : 0x00df , 0x00a8 : 0x00ae , 0x00aa : 0x2122 , 0x00ab : 0x0119 , 0x00ac : 0x00a8 , 0x00ad : 0x2260 , 0x00ae : 0x0123 , 0x00af : 0x012e , 0x00b0 : 0x012f , 0x00b1 : 0x012a , 0x00b2 : 0x2264 , 0x00b3 : 0x2265 , 0x00b4 : 0x012b , 0x00b5 : 0x0136 , 0x00b6 : 0x2202 , 0x00b7 : 0x2211 , 0x00b8 : 0x0142 , 0x00b9 : 0x013b , 0x00ba : 0x013c , 0x00bb : 0x013d , 0x00bc : 0x013e , 0x00bd : 0x0139 , 0x00be : 0x013a , 0x00bf : 0x0145 , 0x00c0 : 0x0146 , 0x00c1 : 0x0143 , 0x00c2 : 0x00ac , 0x00c3 : 0x221a , 0x00c4 : 0x0144 , 0x00c5 : 0x0147 , 0x00c6 : 0x2206 , 0x00c7 : 0x00ab , 0x00c8 : 0x00bb , 0x00c9 : 0x2026 , 0x00ca : 0x00a0 , 0x00cb : 0x0148 , 0x00cc : 0x0150 , 0x00cd : 0x00d5 , 0x00ce : 0x0151 , 0x00cf : 0x014c , 0x00d0 : 0x2013 , 0x00d1 : 0x2014 , 0x00d2 : 0x201c , 0x00d3 : 0x201d , 0x00d4 : 0x2018 , 0x00d5 : 0x2019 , 0x00d6 : 0x00f7 , 0x00d7 : 0x25ca , 0x00d8 : 0x014d , 0x00d9 : 0x0154 , 0x00da : 0x0155 , 0x00db : 0x0158 , 0x00dc : 0x2039 , 0x00dd : 0x203a , 0x00de : 0x0159 , 0x00df : 0x0156 , 0x00e0 : 0x0157 , 0x00e1 : 0x0160 , 0x00e2 : 0x201a , 0x00e3 : 0x201e , 0x00e4 : 0x0161 , 0x00e5 : 0x015a , 0x00e6 : 0x015b , 0x00e7 : 0x00c1 , 0x00e8 : 0x0164 , 0x00e9 : 0x0165 , 0x00ea : 0x00cd , 0x00eb : 0x017d , 0x00ec : 0x017e , 0x00ed : 0x016a , 0x00ee : 0x00d3 , 0x00ef : 0x00d4 , 0x00f0 : 0x016b , 0x00f1 : 0x016e , 0x00f2 : 0x00da , 0x00f3 : 0x016f , 0x00f4 : 0x0170 , 0x00f5 : 0x0171 , 0x00f6 : 0x0172 , 0x00f7 : 0x0173 , 0x00f8 : 0x00dd , 0x00f9 : 0x00fd , 0x00fa : 0x0137 , 0x00fb : 0x017b , 0x00fc : 0x0141 , 0x00fd : 0x017c , 0x00fe : 0x0122 , 0x00ff : 0x02c7 , } ) encoding_map = codecs . make_encoding_map ( decoding_map )
