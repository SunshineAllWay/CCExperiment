""" Python Character Mapping Codec generated from 'hp_roman8.txt' with gencodec.py. Based on data from ftp://dkuug.dk/i18n/charmaps/HP-ROMAN8 (Keld Simonsen) Original source: LaserJet IIP Printer User's Manual HP part no 33471-90901, Hewlet-Packard, June 1989. """ import codecs class Codec ( codecs . Codec ) : def encode ( self , input , errors = 'strict' ) : return codecs . charmap_encode ( input , errors , encoding_map ) def decode ( self , input , errors = 'strict' ) : return codecs . charmap_decode ( input , errors , decoding_map ) class IncrementalEncoder ( codecs . IncrementalEncoder ) : def encode ( self , input , final = False ) : return codecs . charmap_encode ( input , self . errors , encoding_map ) [ 0 ] class IncrementalDecoder ( codecs . IncrementalDecoder ) : def decode ( self , input , final = False ) : return codecs . charmap_decode ( input , self . errors , decoding_map ) [ 0 ] class StreamWriter ( Codec , codecs . StreamWriter ) : pass class StreamReader ( Codec , codecs . StreamReader ) : pass def getregentry ( ) : return codecs . CodecInfo ( name = 'hp-roman8' , encode = Codec ( ) . encode , decode = Codec ( ) . decode , incrementalencoder = IncrementalEncoder , incrementaldecoder = IncrementalDecoder , streamwriter = StreamWriter , streamreader = StreamReader , ) decoding_map = codecs . make_identity_dict ( range ( 256 ) ) decoding_map . update ( { 0x00a1 : 0x00c0 , 0x00a2 : 0x00c2 , 0x00a3 : 0x00c8 , 0x00a4 : 0x00ca , 0x00a5 : 0x00cb , 0x00a6 : 0x00ce , 0x00a7 : 0x00cf , 0x00a8 : 0x00b4 , 0x00a9 : 0x02cb , 0x00aa : 0x02c6 , 0x00ab : 0x00a8 , 0x00ac : 0x02dc , 0x00ad : 0x00d9 , 0x00ae : 0x00db , 0x00af : 0x20a4 , 0x00b0 : 0x00af , 0x00b1 : 0x00dd , 0x00b2 : 0x00fd , 0x00b3 : 0x00b0 , 0x00b4 : 0x00c7 , 0x00b5 : 0x00e7 , 0x00b6 : 0x00d1 , 0x00b7 : 0x00f1 , 0x00b8 : 0x00a1 , 0x00b9 : 0x00bf , 0x00ba : 0x00a4 , 0x00bb : 0x00a3 , 0x00bc : 0x00a5 , 0x00bd : 0x00a7 , 0x00be : 0x0192 , 0x00bf : 0x00a2 , 0x00c0 : 0x00e2 , 0x00c1 : 0x00ea , 0x00c2 : 0x00f4 , 0x00c3 : 0x00fb , 0x00c4 : 0x00e1 , 0x00c5 : 0x00e9 , 0x00c6 : 0x00f3 , 0x00c7 : 0x00fa , 0x00c8 : 0x00e0 , 0x00c9 : 0x00e8 , 0x00ca : 0x00f2 , 0x00cb : 0x00f9 , 0x00cc : 0x00e4 , 0x00cd : 0x00eb , 0x00ce : 0x00f6 , 0x00cf : 0x00fc , 0x00d0 : 0x00c5 , 0x00d1 : 0x00ee , 0x00d2 : 0x00d8 , 0x00d3 : 0x00c6 , 0x00d4 : 0x00e5 , 0x00d5 : 0x00ed , 0x00d6 : 0x00f8 , 0x00d7 : 0x00e6 , 0x00d8 : 0x00c4 , 0x00d9 : 0x00ec , 0x00da : 0x00d6 , 0x00db : 0x00dc , 0x00dc : 0x00c9 , 0x00dd : 0x00ef , 0x00de : 0x00df , 0x00df : 0x00d4 , 0x00e0 : 0x00c1 , 0x00e1 : 0x00c3 , 0x00e2 : 0x00e3 , 0x00e3 : 0x00d0 , 0x00e4 : 0x00f0 , 0x00e5 : 0x00cd , 0x00e6 : 0x00cc , 0x00e7 : 0x00d3 , 0x00e8 : 0x00d2 , 0x00e9 : 0x00d5 , 0x00ea : 0x00f5 , 0x00eb : 0x0160 , 0x00ec : 0x0161 , 0x00ed : 0x00da , 0x00ee : 0x0178 , 0x00ef : 0x00ff , 0x00f0 : 0x00de , 0x00f1 : 0x00fe , 0x00f2 : 0x00b7 , 0x00f3 : 0x00b5 , 0x00f4 : 0x00b6 , 0x00f5 : 0x00be , 0x00f6 : 0x2014 , 0x00f7 : 0x00bc , 0x00f8 : 0x00bd , 0x00f9 : 0x00aa , 0x00fa : 0x00ba , 0x00fb : 0x00ab , 0x00fc : 0x25a0 , 0x00fd : 0x00bb , 0x00fe : 0x00b1 , 0x00ff : None , } ) encoding_map = codecs . make_encoding_map ( decoding_map )
