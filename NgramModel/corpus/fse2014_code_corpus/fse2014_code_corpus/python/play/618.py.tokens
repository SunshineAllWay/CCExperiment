"""Utility functions for HTTP header value parsing and construction. Copyright 1997-1998, Gisle Aas Copyright 2002-2006, John J. Lee This code is free software; you can redistribute it and/or modify it under the terms of the BSD or ZPL 2.1 licenses (see the file COPYING.txt included with the distribution). """ import os , re from types import StringType from types import UnicodeType STRING_TYPES = StringType , UnicodeType from _util import http2time import _rfc3986 def is_html ( ct_headers , url , allow_xhtml = False ) : if not ct_headers : ext = os . path . splitext ( _rfc3986 . urlsplit ( url ) [ 2 ] ) [ 1 ] html_exts = [ ".htm" , ".html" ] if allow_xhtml : html_exts += [ ".xhtml" ] return ext in html_exts ct = split_header_words ( ct_headers ) [ 0 ] [ 0 ] [ 0 ] html_types = [ "text/html" ] if allow_xhtml : html_types += [ , "text/xml" , , "application/xhtml+xml" , ] return ct in html_types def unmatched ( match ) : start , end = match . span ( 0 ) return match . string [ : start ] + match . string [ end : ] token_re = re . compile ( r"^\s*([^=\s;,]+)" ) quoted_value_re = re . compile ( r"^\s*=\s*\"([^\"\\]*(?:\\.[^\"\\]*)*)\"" ) value_re = re . compile ( r"^\s*=\s*([^\s;,]*)" ) escape_re = re . compile ( r"\\(.)" ) def split_header_words ( header_values ) : assert type ( header_values ) not in STRING_TYPES result = [ ] for text in header_values : orig_text = text pairs = [ ] while text : m = token_re . search ( text ) if m : text = unmatched ( m ) name = m . group ( 1 ) m = quoted_value_re . search ( text ) if m : text = unmatched ( m ) value = m . group ( 1 ) value = escape_re . sub ( r"\1" , value ) else : m = value_re . search ( text ) if m : text = unmatched ( m ) value = m . group ( 1 ) value = value . rstrip ( ) else : value = None pairs . append ( ( name , value ) ) elif text . lstrip ( ) . startswith ( "," ) : text = text . lstrip ( ) [ 1 : ] if pairs : result . append ( pairs ) pairs = [ ] else : non_junk , nr_junk_chars = re . subn ( "^[=\s;]*" , "" , text ) assert nr_junk_chars > 0 , ( % ( orig_text , text , pairs ) ) text = non_junk if pairs : result . append ( pairs ) return result join_escape_re = re . compile ( r"([\"\\])" ) def join_header_words ( lists ) : headers = [ ] for pairs in lists : attr = [ ] for k , v in pairs : if v is not None : if not re . search ( r"^\w+$" , v ) : v = join_escape_re . sub ( r"\\\1" , v ) v = '"%s"' % v if k is None : k = v else : k = "%s=%s" % ( k , v ) attr . append ( k ) if attr : headers . append ( "; " . join ( attr ) ) return ", " . join ( headers ) def strip_quotes ( text ) : if text . startswith ( '"' ) : text = text [ 1 : ] if text . endswith ( '"' ) : text = text [ : - 1 ] return text def parse_ns_headers ( ns_headers ) : known_attrs = ( "expires" , "domain" , "path" , "secure" , , "port" , "max-age" ) result = [ ] for ns_header in ns_headers : pairs = [ ] version_set = False params = re . split ( r";\s*" , ns_header ) for ii in range ( len ( params ) ) : param = params [ ii ] param = param . rstrip ( ) if param == "" : continue if "=" not in param : k , v = param , None else : k , v = re . split ( r"\s*=\s*" , param , 1 ) k = k . lstrip ( ) if ii != 0 : lc = k . lower ( ) if lc in known_attrs : k = lc if k == "version" : v = strip_quotes ( v ) version_set = True if k == "expires" : v = http2time ( strip_quotes ( v ) ) pairs . append ( ( k , v ) ) if pairs : if not version_set : pairs . append ( ( "version" , "0" ) ) result . append ( pairs ) return result def _test ( ) : import doctest , _headersutil return doctest . testmod ( _headersutil ) if __name__ == "__main__" : _test ( )
