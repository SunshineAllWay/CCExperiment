"""Guess the MIME type of a file. This module defines two useful functions: guess_type(url, strict=1) -- guess the MIME type and encoding of a URL. guess_extension(type, strict=1) -- guess the extension for a given MIME type. It also contains the following, for tuning the behavior: Data: knownfiles -- list of files to parse inited -- flag set when init() has been called suffix_map -- dictionary mapping suffixes to suffixes encodings_map -- dictionary mapping suffixes to encodings types_map -- dictionary mapping suffixes to types Functions: init([files]) -- parse a list of files, default knownfiles read_mime_types(file) -- parse one file, return a dictionary or None """ import os import posixpath import urllib __all__ = [ , "guess_extension" , "guess_all_extensions" , , "read_mime_types" , "init" ] knownfiles = [ , , , , , , , , , ] inited = False class MimeTypes : def __init__ ( self , filenames = ( ) , strict = True ) : if not inited : init ( ) self . encodings_map = encodings_map . copy ( ) self . suffix_map = suffix_map . copy ( ) self . types_map = ( { } , { } ) self . types_map_inv = ( { } , { } ) for ( ext , type ) in types_map . items ( ) : self . add_type ( type , ext , True ) for ( ext , type ) in common_types . items ( ) : self . add_type ( type , ext , False ) for name in filenames : self . read ( name , strict ) def add_type ( self , type , ext , strict = True ) : self . types_map [ strict ] [ ext ] = type exts = self . types_map_inv [ strict ] . setdefault ( type , [ ] ) if ext not in exts : exts . append ( ext ) def guess_type ( self , url , strict = True ) : scheme , url = urllib . splittype ( url ) if scheme == 'data' : comma = url . find ( ',' ) if comma < 0 : return None , None semi = url . find ( ';' , 0 , comma ) if semi >= 0 : type = url [ : semi ] else : type = url [ : comma ] if '=' in type or '/' not in type : type = 'text/plain' return type , None base , ext = posixpath . splitext ( url ) while ext in self . suffix_map : base , ext = posixpath . splitext ( base + self . suffix_map [ ext ] ) if ext in self . encodings_map : encoding = self . encodings_map [ ext ] base , ext = posixpath . splitext ( base ) else : encoding = None types_map = self . types_map [ True ] if ext in types_map : return types_map [ ext ] , encoding elif ext . lower ( ) in types_map : return types_map [ ext . lower ( ) ] , encoding elif strict : return None , encoding types_map = self . types_map [ False ] if ext in types_map : return types_map [ ext ] , encoding elif ext . lower ( ) in types_map : return types_map [ ext . lower ( ) ] , encoding else : return None , encoding def guess_all_extensions ( self , type , strict = True ) : type = type . lower ( ) extensions = self . types_map_inv [ True ] . get ( type , [ ] ) if not strict : for ext in self . types_map_inv [ False ] . get ( type , [ ] ) : if ext not in extensions : extensions . append ( ext ) return extensions def guess_extension ( self , type , strict = True ) : extensions = self . guess_all_extensions ( type , strict ) if not extensions : return None return extensions [ 0 ] def read ( self , filename , strict = True ) : fp = open ( filename ) self . readfp ( fp , strict ) fp . close ( ) def readfp ( self , fp , strict = True ) : while 1 : line = fp . readline ( ) if not line : break words = line . split ( ) for i in range ( len ( words ) ) : if words [ i ] [ 0 ] == '#' : del words [ i : ] break if not words : continue type , suffixes = words [ 0 ] , words [ 1 : ] for suff in suffixes : self . add_type ( type , '.' + suff , strict ) def guess_type ( url , strict = True ) : init ( ) return guess_type ( url , strict ) def guess_all_extensions ( type , strict = True ) : init ( ) return guess_all_extensions ( type , strict ) def guess_extension ( type , strict = True ) : init ( ) return guess_extension ( type , strict ) def add_type ( type , ext , strict = True ) : init ( ) return add_type ( type , ext , strict ) def init ( files = None ) : global guess_all_extensions , guess_extension , guess_type global suffix_map , types_map , encodings_map , common_types global add_type , inited inited = True db = MimeTypes ( ) if files is None : files = knownfiles for file in files : if os . path . isfile ( file ) : db . readfp ( open ( file ) ) encodings_map = db . encodings_map suffix_map = db . suffix_map types_map = db . types_map [ True ] guess_all_extensions = db . guess_all_extensions guess_extension = db . guess_extension guess_type = db . guess_type add_type = db . add_type common_types = db . types_map [ False ] def read_mime_types ( file ) : try : f = open ( file ) except IOError : return None db = MimeTypes ( ) db . readfp ( f , True ) return db . types_map [ True ] def _default_mime_types ( ) : global suffix_map global encodings_map global types_map global common_types suffix_map = { : '.tar.gz' , : '.tar.gz' , : '.tar.gz' , : '.tar.bz2' , } encodings_map = { : 'gzip' , : 'compress' , : 'bzip2' , } types_map = { : 'application/octet-stream' , : 'application/postscript' , : 'audio/x-aiff' , : 'audio/x-aiff' , : 'audio/x-aiff' , : 'audio/basic' , : 'video/x-msvideo' , : 'text/plain' , : 'application/x-bcpio' , : 'application/octet-stream' , : 'image/x-ms-bmp' , : 'text/plain' , : 'application/x-cdf' , : 'application/x-netcdf' , : 'application/x-cpio' , : 'application/x-csh' , : 'text/css' , : 'application/octet-stream' , : 'application/msword' , : 'application/msword' , : 'application/x-dvi' , : 'message/rfc822' , : 'application/postscript' , : 'text/x-setext' , : 'application/octet-stream' , : 'image/gif' , : 'application/x-gtar' , : 'text/plain' , : 'application/x-hdf' , : 'text/html' , : 'text/html' , : 'image/ief' , : 'image/jpeg' , : 'image/jpeg' , : 'image/jpeg' , : 'application/x-javascript' , : 'text/plain' , : 'application/x-latex' , : 'video/mpeg' , : 'application/x-troff-man' , : 'application/x-troff-me' , : 'message/rfc822' , : 'message/rfc822' , : 'application/x-mif' , : 'video/quicktime' , : 'video/x-sgi-movie' , : 'audio/mpeg' , : 'audio/mpeg' , : 'video/mp4' , : 'video/mpeg' , : 'video/mpeg' , : 'video/mpeg' , : 'video/mpeg' , : 'application/x-troff-ms' , : 'application/x-netcdf' , : 'message/rfc822' , : 'application/octet-stream' , : 'application/octet-stream' , : 'application/oda' , : 'application/x-pkcs12' , : 'application/pkcs7-mime' , : 'image/x-portable-bitmap' , : 'application/pdf' , : 'application/x-pkcs12' , : 'image/x-portable-graymap' , : 'text/plain' , : 'image/png' , : 'image/x-portable-anymap' , : 'application/vnd.ms-powerpoint' , : 'application/vnd.ms-powerpoint' , : 'image/x-portable-pixmap' , : 'application/vnd.ms-powerpoint' , : 'application/vnd.ms-powerpoint' , : 'application/postscript' , : 'application/vnd.ms-powerpoint' , : 'text/x-python' , : 'application/x-python-code' , : 'application/x-python-code' , : 'video/quicktime' , : 'audio/x-pn-realaudio' , : 'application/x-pn-realaudio' , : 'image/x-cmu-raster' , : 'application/xml' , : 'image/x-rgb' , : 'application/x-troff' , : 'text/richtext' , : 'text/x-sgml' , : 'text/x-sgml' , : 'application/x-sh' , : 'application/x-shar' , : 'audio/basic' , : 'application/octet-stream' , : 'application/x-wais-source' , : 'application/x-sv4cpio' , : 'application/x-sv4crc' , : 'application/x-shockwave-flash' , : 'application/x-troff' , : 'application/x-tar' , : 'application/x-tcl' , : 'application/x-tex' , : 'application/x-texinfo' , : 'application/x-texinfo' , : 'image/tiff' , : 'image/tiff' , : 'application/x-troff' , : 'text/tab-separated-values' , : 'text/plain' , : 'application/x-ustar' , : 'text/x-vcard' , : 'audio/x-wav' , : 'application/msword' , : 'application/xml' , : 'image/x-xbitmap' , : 'application/vnd.ms-excel' , : 'application/excel' , : 'application/vnd.ms-excel' , : 'text/xml' , : 'application/xml' , : 'image/x-xpixmap' , : 'application/xml' , : 'image/x-xwindowdump' , : 'application/zip' , } common_types = { : 'image/jpg' , : 'audio/midi' , : 'audio/midi' , : 'image/pict' , : 'image/pict' , : 'image/pict' , : 'application/rtf' , : 'text/xul' } _default_mime_types ( ) if __name__ == '__main__' : import sys import getopt USAGE = """\ Usage: mimetypes.py [options] type Options: --help / -h -- print this message and exit --lenient / -l -- additionally search of some common, but non-standard types. --extension / -e -- guess extension instead of type More than one type argument may be given. """ def usage ( code , msg = '' ) : print USAGE if msg : print msg sys . exit ( code ) try : opts , args = getopt . getopt ( sys . argv [ 1 : ] , 'hle' , [ 'help' , 'lenient' , 'extension' ] ) except getopt . error , msg : usage ( 1 , msg ) strict = 1 extension = 0 for opt , arg in opts : if opt in ( '-h' , '--help' ) : usage ( 0 ) elif opt in ( '-l' , '--lenient' ) : strict = 0 elif opt in ( '-e' , '--extension' ) : extension = 1 for gtype in args : if extension : guess = guess_extension ( gtype , strict ) if not guess : print "I don't know anything about type" , gtype else : print guess else : guess , encoding = guess_type ( gtype , strict ) if not guess : print "I don't know anything about type" , gtype else : print 'type:' , guess , 'encoding:' , encoding
