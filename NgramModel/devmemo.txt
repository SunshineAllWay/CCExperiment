CRMAC交互设计

step 0：训练模型
step 1: 新建或者修改文件，加载文件
step 2：进行补全（选择是否进行关联度挖掘、模糊搜索）   [-r   -s]
        更新模型：权重二次调整(若进行关联度挖掘，给出命令行输出更新）
        给出可能上文（若进行模糊搜索）
step 3：回到step 1

--------------------------------------------------------------------------------------------------
2018 07 01 开发日志
待做项
1、代码风格优化
   与new ArrayList<K>(）中删除K类似的优化
   类中方法的外注释、成员变量注释，保证能用IDE的文档生成器生成结果正确
   删除不需要的代码（没有调用的代码、可以精简的部分）
2、github及时更新
3、在corpus3上测试结果正确（概率计算、token预测、Perplexity、Likelihood计算）
4、提高BasicNGram模型的训练效率
5、实现部分Smoothing操作
6、多轮交叉验证，参考16年 naturalness 论文 Figure 1

可能存在bug的模块：
1、Smoothing操作
2、BasicNGram中模型训练、条件概率计算部分

亟需解决的问题：
2、用1-gram对语料库建模时，Perplexity的计算
3、k-gram中假设之前（k-1)个token在模型中能找到，然而很多情形下不成立（尝试back off），已实现
4、不采用back off解决问题3，尝试使用token序列的模糊匹配 (已经实现）

研究想法：
1、在后期加入Cache模块时可以利用文件的函数调用关系进行聚类
   找到当前需要补充的代码所在函数属于的聚类
   优先使用所在类中的局部信息
2、Cache跨文件的token流构建前可以对文件做重排序，参考 localness 论文

时间线：
解决【亟需解决的问题2】、自定义其他类型的 Fuzzy Context Searcher
在程序语言上进行模型迁移：AST等
构造IR，并进行模型迁移

------------------------------------------------------------------------------------------
Ngram.java文件测试结果【截取每行前3个补全】
top3: 0.3408360128617363
top5: 0.35691318327974275
top10: 0.3762057877813505
MRR: 0.30612170250513915

Process finished with exit code 0

Ngram.java文件测试结果【截取每行前1/4补全】
top3: 0.31363636363636366
top5: 0.33181818181818185
top10: 0.36818181818181817
MRR: 0.2891886032490661

Ngram.java文件测试结果【截取每行前一半补全】
top3: 0.3205882352941177
top5: 0.3352941176470588
top10: 0.36176470588235293
MRR: 0.2923061061047803

Ngram.java文件测试结果【截取每行中间一半补全】
top3: 0.2627118644067797
top5: 0.288135593220339
top10: 0.3050847457627119
MRR: 0.23649972156950125

Ngram.java文件测试结果【截取每行后一半补全】
top3: 0.2619047619047619
top5: 0.27976190476190477
top10: 0.2916666666666667
MRR: 0.22375385543828716